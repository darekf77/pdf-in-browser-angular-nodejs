"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
//#endregion
var BaseProjectStructure = /** @class */ (function () {
    function BaseProjectStructure(cwd) {
        this.cwd = cwd;
    }
    Object.defineProperty(BaseProjectStructure.prototype, "baseStructureHash", {
        get: function () {
            return tnp_core_1.path.basename(this.cwd);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProjectStructure.prototype, "projectPathBasename", {
        get: function () {
            return tnp_core_1._.first(tnp_core_1.path.basename(this.cwd).split('__'));
        },
        enumerable: true,
        configurable: true
    });
    BaseProjectStructure.prototype.copyto = function (destinationCwd, basename) {
        tnp_helpers_1.Helpers.copy(this.cwd, tnp_core_1.path.join(destinationCwd, basename ? basename : this.projectPathBasename));
    };
    BaseProjectStructure.allBaseStructures = function (cwd) {
        var folderPath = tnp_core_1.path.join(cwd, this.BASE_STRUCTURES_FOLDER);
        return tnp_helpers_1.Helpers.foldersFrom(folderPath).map(function (f) { return new BaseProjectStructure(f); });
    };
    BaseProjectStructure.generate = function (project) {
        var _a;
        var that = this;
        var orgCwd = tnp_core_1.path.join(project.location);
        var files = project.forEmptyStructure();
        var filesWithoutLinks = files.filter(function (f) { return !f.relativeLinkFrom; });
        var hash = files.length.toString();
        for (var index = 0; index < filesWithoutLinks.length; index++) {
            var file = filesWithoutLinks[index];
            var abasolutePAth = tnp_core_1.path.join(orgCwd, file.relativePath);
            hash += (file.relativePath.length + 1).toString() +
                (tnp_helpers_1.Helpers.isFolder(abasolutePAth) ? '' : (((_a = tnp_helpers_1.Helpers.readFile(abasolutePAth)) === null || _a === void 0 ? void 0 : _a.length) + 1).toString());
        }
        hash = project.name + "__" + tnp_helpers_1.Helpers.checksum(hash);
        return {
            insideIfNotExists: function (destinationCwd) {
                var destStruct = tnp_core_1.path.join(destinationCwd, that.BASE_STRUCTURES_FOLDER, hash);
                if (tnp_helpers_1.Helpers.exists(destStruct)) {
                    tnp_helpers_1.Helpers.log("Base structure with name: " + hash);
                    return hash;
                }
                tnp_helpers_1.Helpers.removeFolderIfExists(destStruct);
                for (var index = 0; index < filesWithoutLinks.length; index++) {
                    var file = filesWithoutLinks[index];
                    var orgPath = tnp_core_1.path.join(orgCwd, file.relativePath);
                    var destPath = tnp_core_1.path.join(destStruct, file.relativePath);
                    tnp_helpers_1.Helpers.mkdirp(tnp_core_1.path.dirname(destPath));
                    if (tnp_helpers_1.Helpers.isFolder(orgPath)) {
                        if (file.includeContent) {
                            tnp_helpers_1.Helpers.copy(orgPath, destPath);
                        }
                        else {
                            tnp_helpers_1.Helpers.mkdirp(destPath);
                        }
                    }
                    else {
                        if (file.includeContent) {
                            tnp_helpers_1.Helpers.copyFile(orgPath, destPath);
                        }
                        else {
                            tnp_helpers_1.Helpers.writeFile(destPath, '');
                        }
                    }
                }
                return hash;
            }
        };
    };
    BaseProjectStructure.BASE_STRUCTURES_FOLDER = 'base-structures';
    return BaseProjectStructure;
}());
exports.BaseProjectStructure = BaseProjectStructure;
//# sourceMappingURL=base-project-structure.backend.js.map