"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var cli_test_backend_1 = require("./cli-test.backend");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#endregion
var NodeCliTester = /** @class */ (function () {
    function NodeCliTester(cwd) {
        if (cwd === void 0) { cwd = process.cwd(); }
        this.cwd = cwd;
        var pathToScenarios = tnp_core_1.path.join(cwd, tnp_config_1.config.folder.scenarios);
        var pathToScenariosTemp = tnp_core_1.path.join(cwd, tnp_config_1.config.folder.tmpScenarios);
        if (!tnp_helpers_1.Helpers.exists(pathToScenarios)) {
            tnp_helpers_1.Helpers.createSymLink(pathToScenariosTemp, pathToScenarios, { continueWhenExistedFolderDoesntExists: true });
        }
    }
    NodeCliTester.Instance = function (cwd) {
        if (cwd === void 0) { cwd = process.cwd(); }
        if (!NodeCliTester._instances[cwd]) {
            NodeCliTester._instances[cwd] = new (this.classFn)(cwd);
        }
        return NodeCliTester._instances[cwd];
    };
    NodeCliTester.InstanceNearestTo = function (cwd) {
        var proj = tnp_helpers_1.Project.nearestTo(cwd);
        return this.Instance(proj.location);
    };
    //#endregion
    //#region get menu options
    //#region get menu options / all tests names
    NodeCliTester.prototype.getAllTestsNames = function () {
        var names = cli_test_backend_1.CliTest.allFrom(this.cwd).map(function (c) {
            return { label: c.testName, option: c.testDirnamePath };
        });
        tnp_helpers_1.Helpers.outputToVScode(names);
    };
    //#endregion
    //#region get menu options / all meta-content.md files for test (path as option)
    NodeCliTester.prototype.getMdContentFilesForTest = function (testNameOrPathToTestFolder) {
        var c = cli_test_backend_1.CliTest.from(this.cwd, tnp_core_1.path.isAbsolute(testNameOrPathToTestFolder) ? tnp_core_1.path.basename(testNameOrPathToTestFolder) : testNameOrPathToTestFolder);
        var toOutput = tslib_1.__spreadArrays([
            { label: "< create new " + tnp_config_1.config.file.meta_config_md + " file >", option: null }
        ], c.metaMd.all.map(function (c) {
            var v = c.filePath;
            return { option: v, label: "add to \"" + tnp_core_1.path.basename(v) + "\"" };
        }));
        tnp_helpers_1.Helpers.outputToVScode(toOutput);
    };
    //#endregion
    //#region get menu options / all meta-content.md files for test (hash as option)
    NodeCliTester.prototype.getMdContentFilesWithHash = function (testNameOrPathToTestFolder) {
        var c = cli_test_backend_1.CliTest.from(this.cwd, tnp_core_1.path.isAbsolute(testNameOrPathToTestFolder) ? tnp_core_1.path.basename(testNameOrPathToTestFolder) : testNameOrPathToTestFolder);
        var toOutput = tslib_1.__spreadArrays(c.metaMd.all.map(function (c) {
            return { option: c.readonlyMetaJson.timeHash, label: "add to \"" + tnp_core_1.path.basename(c.filePath) + "\"" };
        }));
        tnp_helpers_1.Helpers.outputToVScode(toOutput);
    };
    //#endregion
    //#region get menu options / all tests names (with additional options for regenerate)
    NodeCliTester.prototype.getAllTestsNamesForRegenerate = function () {
        var last = this.lastRegenerateMenuItem;
        var specialOptions = tslib_1.__spreadArrays((last ? [last] : []));
        var names = tslib_1.__spreadArrays(specialOptions, cli_test_backend_1.CliTest.allFrom(this.cwd).map(function (c) {
            return { label: c.testName, option: c.testDirnamePath };
        }));
        tnp_helpers_1.Helpers.outputToVScode(names);
    };
    //#endregion
    //#endregion
    //#region create test
    NodeCliTester.prototype.createTest = function (testNameOrPathToTestFolder) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index, p, c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("Create test from node-cli-tester");
                        if (tnp_core_1._.isString(testNameOrPathToTestFolder)) {
                            testNameOrPathToTestFolder = [testNameOrPathToTestFolder];
                        }
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < testNameOrPathToTestFolder.length)) return [3 /*break*/, 4];
                        p = testNameOrPathToTestFolder[index];
                        c = cli_test_backend_1.CliTest.from(this.cwd, tnp_core_1.path.isAbsolute(p) ? tnp_core_1.path.basename(p) : p);
                        return [4 /*yield*/, c.regenerateFiles()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region create test and add file
    NodeCliTester.prototype.createTestAndAddFiles = function (testName, absoluteFilePathes, editorCwd) {
        if (editorCwd === void 0) { editorCwd = process.cwd(); }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createTest(testName)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.addFilesToTest(testName, absoluteFilePathes, editorCwd)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region add files to
    //#region add files to / test
    NodeCliTester.prototype.addFilesToTest = function (testNameOrPathToTestFolder, filePath, editorCwd) {
        if (editorCwd === void 0) { editorCwd = process.cwd(); }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        c = cli_test_backend_1.CliTest.from(this.cwd, tnp_core_1.path.isAbsolute(testNameOrPathToTestFolder)
                            ? tnp_core_1.path.basename(testNameOrPathToTestFolder) : testNameOrPathToTestFolder);
                        return [4 /*yield*/, c.metaMd.add(filePath, editorCwd, typescript_class_helpers_1.CLASS.getFromObject(this))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region add files to / meta-content.md files
    NodeCliTester.prototype.addFilesToMdContent = function (testNameOrPathToTestFolder, mdContentFileBasenameOrPath, filePaths, editorCwd) {
        if (editorCwd === void 0) { editorCwd = process.cwd(); }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var c, mdContentFileBasename, m, NodeCliTestrClass;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        c = cli_test_backend_1.CliTest.from(this.cwd, tnp_core_1.path.isAbsolute(testNameOrPathToTestFolder)
                            ? tnp_core_1.path.basename(testNameOrPathToTestFolder) : testNameOrPathToTestFolder);
                        mdContentFileBasename = !!mdContentFileBasenameOrPath && (tnp_core_1.path.isAbsolute(mdContentFileBasenameOrPath)
                            ? tnp_core_1.path.basename(mdContentFileBasenameOrPath) : mdContentFileBasenameOrPath);
                        m = mdContentFileBasename && c.metaMd.all.find(function (a) { return a.basename === mdContentFileBasename; });
                        if (!m) return [3 /*break*/, 1];
                        NodeCliTestrClass = typescript_class_helpers_1.CLASS.getFromObject(this);
                        m.addFiles(filePaths, c.testDirnamePath, editorCwd, NodeCliTestrClass.foundProjectsFn, c.cwd);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.addFilesToTest(testNameOrPathToTestFolder, filePaths, editorCwd)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(NodeCliTester.prototype, "lastRegenerateHashFile", {
        //#endregion
        //#endregion
        //#region regenerate
        //#region regenerate / last regenerate hash file path
        get: function () {
            return tnp_core_1.path.join(this.cwd, 'tmp-last-regenerate-hash-env');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeCliTester.prototype, "lastRegenerateMenuItem", {
        //#endregion
        //#region regenerate / get last regenerate manu item
        get: function () {
            var lashHash = tnp_helpers_1.Helpers.readFile(this.lastRegenerateHashFile, '').trim();
            if (lashHash) {
                var allTests = cli_test_backend_1.CliTest.allFrom(this.cwd);
                var machingMdFile_1;
                allTests.find(function (a) { return a.metaMd.all.find(function (b) {
                    if (b.readonlyMetaJson.timeHash === lashHash) {
                        machingMdFile_1 = b;
                        return true;
                    }
                    return false;
                }); });
                if (machingMdFile_1) {
                    var NodeCliTesterClass = typescript_class_helpers_1.CLASS.getFromObject(this);
                    var res = {
                        label: " < regenerate last hash env \"" + machingMdFile_1.readonlyMetaJson.timeHash + "\" "
                            + ("for project: \"" + machingMdFile_1.readonlyMetaJson.firstProjectBasename + "\" in ")
                            + (machingMdFile_1.basename + " >"),
                        option: { action: NodeCliTesterClass.ACTIONS.REGENERATE_LAST_HASH }
                    };
                    return res;
                }
            }
            return void 0;
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region regenerate / aliases
    NodeCliTester.prototype.regenerate = function (timeHash) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.regenerateEnvironment(timeHash)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    NodeCliTester.prototype.regenerateLast = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var NodeCliTesterClass;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        NodeCliTesterClass = typescript_class_helpers_1.CLASS.getFromObject(this);
                        return [4 /*yield*/, this.regenerateEnvironment(NodeCliTesterClass.ACTIONS.REGENERATE_LAST_HASH)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region regenerate / regenerate environment function
    NodeCliTester.prototype.regenerateEnvironment = function (timeHash, tempFolder, onlyIfNotExists) {
        if (tempFolder === void 0) { tempFolder = tnp_config_1.config.folder.tmpTestsEnvironments; }
        if (onlyIfNotExists === void 0) { onlyIfNotExists = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var NodeCliTesterClass, c, m, ProjectClass;
            return tslib_1.__generator(this, function (_a) {
                NodeCliTesterClass = typescript_class_helpers_1.CLASS.getFromObject(this);
                if (timeHash === NodeCliTesterClass.ACTIONS.REGENERATE_LAST_HASH) {
                    timeHash = tnp_helpers_1.Helpers.readFile(this.lastRegenerateHashFile, '');
                }
                if (!tnp_core_1.path.isAbsolute(tempFolder)) {
                    tempFolder = tnp_core_1.path.join(this.cwd, tempFolder);
                }
                c = cli_test_backend_1.CliTest.getBy(this.cwd, timeHash);
                m = c === null || c === void 0 ? void 0 : c.metaMd.all.find(function (a) { return a.readonlyMetaJson.timeHash === timeHash; });
                if (m) {
                    ProjectClass = NodeCliTesterClass.projectClassFn;
                    m.recreate(tempFolder, this.cwd, ProjectClass, onlyIfNotExists);
                    tnp_helpers_1.Helpers.writeFile(this.lastRegenerateHashFile, timeHash);
                }
                else {
                    tnp_helpers_1.Helpers.error("Not able to find test with hash " + timeHash, false, true);
                }
                return [2 /*return*/];
            });
        });
    };
    //#region singleton
    NodeCliTester._instances = {};
    NodeCliTester.ACTIONS = {
        REGENERATE_LAST_HASH: 'regenerate-last-env-hash'
    };
    NodeCliTester.classFn = NodeCliTester;
    NodeCliTester.projectClassFn = tnp_helpers_1.Project;
    NodeCliTester.foundProjectsFn = void 0;
    return NodeCliTester;
}());
exports.NodeCliTester = NodeCliTester;
//# sourceMappingURL=node-cli-tester.backend.js.map