import { Project } from 'tnp-helpers';
export interface MetaMdJSONProject {
    githash?: string;
    name?: MetaMdJSONProjects;
    baseStructureHash?: string;
}
export declare type MetaMdJSONProjects = {
    [projPath: string]: MetaMdJSONProject;
};
export interface MetaMdJSON {
    orgFileBasenames: string[];
    orgRelativePathes: string[];
    timeHash: string;
    firstProjectBasename: string;
    projects: MetaMdJSONProjects;
}
/**
 * Special forma of .md for keeping metadata, testfile, and test template for file
 */
export declare class MetaMd {
    readonly filePath: string;
    static readonly JSON_PART = "@jsonPart";
    static readonly FILE_CONTENT_PART = "@fileContentPart";
    static readonly TEST_PART = "@testPart";
    static create(json: MetaMdJSON, fileContent: string[], testContent?: string): Promise<string>;
    static preserveFiles(originalAnyTypeFiles: string[], destinationFolder: string, editorCwd: string, foundProjectsFn: (projects: Project[]) => Project[], baseProjectsStructurePath: string, // navi-cli folder or current folder,
    overrideThisFileName?: string, overrideTimehash?: any): Promise<void>;
    addFiles(newFilesPathes: string[], destinationFolder: string, editorCwd?: string, foundProjectFn?: (projects: Project[]) => Project[], baseProjectsStructurePath?: string): void;
    static instanceFrom(filePath: string): MetaMd;
    static allInstancesFrom(folderPath: string): MetaMd[];
    private get json();
    get readonlyMetaJson(): Readonly<MetaMdJSON>;
    fileContentByIndex(i: number): string;
    get basename(): string;
    get dirname(): string;
    constructor(filePath: string);
    /**
     * recate original files before any unit/intergration test
     */
    recreate(testCwd: string, cwdProj: string, ProjectClass?: typeof Project, onlyIfNotExists?: boolean): void;
}
