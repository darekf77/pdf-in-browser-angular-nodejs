"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var meta_content_md_backend_1 = require("./meta-content-md.backend");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#endregion
var CliTest = /** @class */ (function () {
    //#endregion
    //#endregion
    //#region constructor / init
    function CliTest(cwd, testName) {
        this.cwd = cwd;
        this.testName = testName;
        cwd = cwd.endsWith(CliTest.NAME_FOR_CLI_TESTS_FOLDER) ? cwd.replace(CliTest.NAME_FOR_CLI_TESTS_FOLDER, '') : cwd;
        this.cwd = cwd;
        this.testDirnamePath = tnp_core_1.path.join(cwd, CliTest.NAME_FOR_CLI_TESTS_FOLDER, tnp_core_1._.kebabCase(this.testName));
        var pathToTempEnvs = tnp_core_1.path.join(cwd, tnp_config_1.config.folder.tmpTestsEnvironments);
        var pathToEnvs = tnp_core_1.path.join(cwd, tnp_config_1.config.folder.testsEnvironments);
        tnp_helpers_1.Helpers.createSymLink(pathToTempEnvs, pathToEnvs, {
            continueWhenExistedFolderDoesntExists: true
        });
        if (tnp_helpers_1.Helpers.exists(this.packageJson5Path)) {
            var testNameFromPJ5 = tnp_helpers_1.Helpers.readJson(this.packageJson5Path, {}, true).description;
            if (testNameFromPJ5) {
                testName = testNameFromPJ5;
                this.testName = testName;
            }
        }
    }
    CliTest.allFrom = function (cwd) {
        var folderWithTests = tnp_core_1.path.join(cwd, this.NAME_FOR_CLI_TESTS_FOLDER);
        var folders = tnp_helpers_1.Helpers.foldersFrom(folderWithTests);
        var tests = folders.map(function (f) { return CliTest.from(f); }).filter(function (f) { return !!f; });
        return tests;
    };
    CliTest.getBy = function (cwd, timeHash) {
        return this.allFrom(cwd).find(function (c) { return !tnp_core_1._.isUndefined(c.metaMd.all.find(function (c) { return c.readonlyMetaJson.timeHash === timeHash; })); });
    };
    CliTest.from = function (cwd, testName) {
        if (!testName) {
            testName = tnp_core_1.path.basename(cwd);
            cwd = tnp_core_1.path.dirname(cwd);
        }
        if (!CliTest.instances[cwd]) {
            CliTest.instances[cwd] = {};
        }
        if (!CliTest.instances[cwd][testName]) {
            CliTest.instances[cwd][testName] = new CliTest(cwd, testName);
        }
        return CliTest.instances[cwd][testName];
    };
    Object.defineProperty(CliTest.prototype, "metaMd", {
        //#endregion
        //#region getters
        //#region getters / meta md
        get: function () {
            var that = this;
            return {
                get all() {
                    return meta_content_md_backend_1.MetaMd.allInstancesFrom(that.testDirnamePath);
                },
                add: function (originalFilePath, baseCwd, NodeCliTestrClass) {
                    return tslib_1.__awaiter(this, void 0, void 0, function () {
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, meta_content_md_backend_1.MetaMd.preserveFiles(originalFilePath, that.testDirnamePath, baseCwd, NodeCliTestrClass.foundProjectsFn, that.cwd)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    });
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CliTest.prototype, "packageJson5Path", {
        //#endregion
        //#region getters / pathes
        get: function () {
            return tnp_core_1.path.join(this.testDirnamePath, tnp_config_1.config.file.package_json5);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CliTest.prototype, "packageJsonPath", {
        get: function () {
            return tnp_core_1.path.join(this.testDirnamePath, tnp_config_1.config.file.package_json);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CliTest.prototype, "gitignorePath", {
        get: function () {
            return tnp_core_1.path.join(this.testDirnamePath, tnp_config_1.config.file._gitignore);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CliTest.prototype, "specTsPath", {
        get: function () {
            return tnp_core_1.path.join(this.testDirnamePath, tnp_core_1._.kebabCase(this.testName) + ".spec.ts");
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region public api
    //#region regenerate
    CliTest.prototype.regenerateFiles = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var TestTemplatesClass;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!tnp_helpers_1.Helpers.exists(this.testDirnamePath)) {
                            tnp_helpers_1.Helpers.mkdirp(this.testDirnamePath);
                        }
                        this.regeneratePackageJson5();
                        TestTemplatesClass = typescript_class_helpers_1.CLASS.getBy('TestTemplates');
                        if (!!TestTemplatesClass) return [3 /*break*/, 3];
                        return [4 /*yield*/, Promise.resolve().then(function () { return require('./spec-templates.backend'); })];
                    case 1: return [4 /*yield*/, (_a.sent()).TestTemplates];
                    case 2:
                        TestTemplatesClass = _a.sent();
                        _a.label = 3;
                    case 3:
                        TestTemplatesClass.regenerateSpecTs(this.specTsPath, this.testName);
                        this.regenerateGitIgnore();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#endregion
    //#region private methods
    //#region regenerate package json 5
    CliTest.prototype.regeneratePackageJson5 = function () {
        if (!tnp_helpers_1.Helpers.exists(this.packageJson5Path)) {
            tnp_helpers_1.Helpers.writeFile(this.packageJson5Path, 
            //#region content of package.json5
            "{\n  // generated from basename\n  \"name\": \"" + tnp_core_1._.kebabCase(this.testName) + "\",\n  \"description\": \"" + this.testName + "\",\n  \"tnp\": {\n    \"type\": \"cli-test\"\n  },\n  \"version\": \"0.0.0\",\n  }"
            //#endregion
            );
        }
    };
    //#endregion
    //#region regenerate gitignore
    CliTest.prototype.regenerateGitIgnore = function () {
        tnp_helpers_1.Helpers.writeFile(this.gitignorePath, 
        //#region content of .gitignore
        "\n/**/*.*\n!/.gitignore\n!/" + tnp_core_1.path.basename(this.specTsPath) + "\n!/package.json\n!/package.json5\n!/*.md\n\n      "
        //#endregion
        );
    };
    CliTest.NAME_FOR_CLI_TESTS_FOLDER = 'src/tests/tests-cli';
    //#region singleton  / static inst
    CliTest.instances = {};
    return CliTest;
}());
exports.CliTest = CliTest;
//# sourceMappingURL=cli-test.backend.js.map