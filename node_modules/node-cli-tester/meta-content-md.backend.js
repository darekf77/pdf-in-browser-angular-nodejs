"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var glob = require("glob");
var tnp_core_1 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var base_project_structure_backend_1 = require("./base-project-structure.backend");
//#endregion
/**
 * Special forma of .md for keeping metadata, testfile, and test template for file
 */
var MetaMd = /** @class */ (function () {
    //#endregion
    //#region constructor
    function MetaMd(filePath) {
        this.filePath = filePath;
    }
    //#region static fields / create
    MetaMd.create = function (json, fileContent, testContent) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, create((tnp_core_1._.isObject(json) ? tnp_helpers_1.Helpers.stringify(json) : json), fileContent, testContent)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    //#endregion
    //#region static fields / preserve file
    MetaMd.preserveFiles = function (originalAnyTypeFiles, destinationFolder, editorCwd, foundProjectsFn, baseProjectsStructurePath, // navi-cli folder or current folder,
    overrideThisFileName, overrideTimehash) {
        if (foundProjectsFn === void 0) { foundProjectsFn = function (a) { return a; }; }
        if (overrideThisFileName === void 0) { overrideThisFileName = void 0; }
        if (overrideTimehash === void 0) { overrideTimehash = void 0; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var properDestName, foundedProjectsInPath, mostBaseLocationFound, projects, timeHash, c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        properDestName = overrideThisFileName ? overrideThisFileName :
                            tnp_core_1.path.basename(tnp_core_1._.first(originalAnyTypeFiles)) + "." + tnp_config_1.config.file.meta_config_md;
                        if (!tnp_helpers_1.Helpers.isFolder(destinationFolder)) {
                            tnp_helpers_1.Helpers.error("[tnp-helpers][meta-content-md] Destination folder \"" + destinationFolder + "\"\n       is not a folder", false, true);
                        }
                        foundedProjectsInPath = resolveFoundedProject(originalAnyTypeFiles, editorCwd, foundProjectsFn);
                        mostBaseLocationFound = tnp_core_1._.minBy(foundedProjectsInPath, function (p) { return p.location.length; }).location;
                        projects = foundedProjectsInPath
                            .reduce(function (a, b) {
                            var _a;
                            var baseStructureHash = base_project_structure_backend_1.BaseProjectStructure.generate(b).insideIfNotExists(baseProjectsStructurePath);
                            return tnp_core_1._.merge(a, (_a = {},
                                _a[tnp_core_1.path.join(tnp_core_1.path.basename(mostBaseLocationFound), b.location.replace(mostBaseLocationFound, ''))] = {
                                    githash: b.git.lastCommitHash(),
                                    name: b.name,
                                    baseStructureHash: baseStructureHash,
                                },
                                _a));
                        }, {});
                        timeHash = overrideTimehash ? overrideTimehash : (+new Date).toString(36);
                        return [4 /*yield*/, MetaMd.create({
                                orgFileBasenames: originalAnyTypeFiles.map(function (a) { return tnp_core_1.path.basename(a); }),
                                orgRelativePathes: originalAnyTypeFiles.map(function (a) {
                                    return tnp_core_1.path.join(tnp_core_1.path.basename(mostBaseLocationFound), a.replace(mostBaseLocationFound, ''));
                                }),
                                projects: projects,
                                firstProjectBasename: tnp_core_1.path.basename(mostBaseLocationFound),
                                timeHash: timeHash,
                            }, originalAnyTypeFiles.map(function (a) { return tnp_helpers_1.Helpers.readFile(a); }))];
                    case 1:
                        c = _a.sent();
                        tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(destinationFolder, properDestName), c);
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    MetaMd.prototype.addFiles = function (newFilesPathes, destinationFolder, editorCwd, foundProjectFn, baseProjectsStructurePath) {
        if (foundProjectFn === void 0) { foundProjectFn = void 0; }
        var foundedProjectsInPath = resolveFoundedProject(newFilesPathes, editorCwd, foundProjectFn);
        var mostBaseLocationFound = tnp_core_1._.minBy(foundedProjectsInPath, function (p) { return p.location.length; }).location;
        newFilesPathes = tnp_helpers_1.Helpers.arrays.uniqArray(tslib_1.__spreadArrays(newFilesPathes, this.readonlyMetaJson.orgRelativePathes.map(function (a) {
            return tnp_core_1.path.join(tnp_core_1.path.dirname(mostBaseLocationFound), a);
        })));
        newFilesPathes.forEach(function (f) {
            if (!tnp_helpers_1.Helpers.exists(f)) {
                tnp_helpers_1.Helpers.error("File doesn't exists", false, true);
            }
        });
        MetaMd.preserveFiles(newFilesPathes, destinationFolder, editorCwd, foundProjectFn, baseProjectsStructurePath, tnp_core_1.path.basename(this.filePath), this.readonlyMetaJson.timeHash);
    };
    //#region static fields / handle instance from meta-content.md file
    MetaMd.instanceFrom = function (filePath) {
        return new MetaMd(filePath);
    };
    MetaMd.allInstancesFrom = function (folderPath) {
        return glob.sync(folderPath + "/*." + tnp_config_1.config.file.meta_config_md).map(function (f) {
            return MetaMd.instanceFrom(f);
        });
    };
    Object.defineProperty(MetaMd.prototype, "json", {
        //#endregion
        //#endregion
        //#region getters
        get: function () {
            var content = tnp_helpers_1.Helpers.readFile(this.filePath) || '';
            try {
                var extracted = tnp_core_1._.first(extract(content, MetaMd.JSON_PART));
                var parsed = tnp_helpers_1.Helpers.parse(extracted, true);
                return parsed;
            }
            catch (error) {
                return {};
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaMd.prototype, "readonlyMetaJson", {
        get: function () {
            return Object.freeze(this.json);
        },
        enumerable: true,
        configurable: true
    });
    MetaMd.prototype.fileContentByIndex = function (i) {
        var content = tnp_helpers_1.Helpers.readFile(this.filePath) || '';
        return extract(content, MetaMd.FILE_CONTENT_PART)[i];
    };
    Object.defineProperty(MetaMd.prototype, "basename", {
        get: function () {
            return tnp_core_1.path.basename(this.filePath);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaMd.prototype, "dirname", {
        get: function () {
            return tnp_core_1.path.dirname(this.filePath);
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region recreate files/content/env before any tests
    /**
     * recate original files before any unit/intergration test
     */
    MetaMd.prototype.recreate = function (testCwd, cwdProj, ProjectClass, onlyIfNotExists) {
        var _this = this;
        if (ProjectClass === void 0) { ProjectClass = tnp_helpers_1.Project; }
        if (onlyIfNotExists === void 0) { onlyIfNotExists = false; }
        // recreat whole structure
        var hashDir = tnp_core_1.path.join(testCwd, this.json.timeHash);
        if (onlyIfNotExists && tnp_helpers_1.Helpers.exists(hashDir)) {
            return;
        }
        tnp_helpers_1.Helpers.removeFolderIfExists(hashDir);
        tnp_helpers_1.Helpers.mkdirp(hashDir);
        var firstToFind = this.json.projects[this.json.firstProjectBasename].baseStructureHash;
        var allBaseStructures = base_project_structure_backend_1.BaseProjectStructure.allBaseStructures(cwdProj);
        var baseStructure = allBaseStructures.find(function (p) { return p.baseStructureHash === firstToFind; });
        if (!baseStructure) {
            tnp_helpers_1.Helpers.error("[node-cli-test][regenerate] base structure was not generated for " + firstToFind, false, true);
        }
        baseStructure.copyto(hashDir);
        tnp_core_1._.keys(this.json.projects)
            .filter(function (key) { return key !== _this.json.firstProjectBasename; })
            .map(function (key) {
            var baseStructureHashChild = _this.json.projects[key].baseStructureHash;
            var childBaseStruct = allBaseStructures.find(function (p) { return p.baseStructureHash === baseStructureHashChild; });
            if (childBaseStruct) {
                childBaseStruct.copyto(tnp_core_1.path.join(hashDir, tnp_core_1.path.dirname(key)), tnp_core_1.path.basename(key));
            }
        });
        this.readonlyMetaJson.orgRelativePathes.forEach(function (f, i) {
            var fileToWritePath = tnp_core_1.path.join(hashDir, f);
            tnp_helpers_1.Helpers.writeFile(fileToWritePath, _this.fileContentByIndex(i));
        });
        var proj = ProjectClass.From(tnp_core_1.path.join(hashDir, this.readonlyMetaJson.firstProjectBasename));
        var linksToLInk = (proj === null || proj === void 0 ? void 0 : proj.forEmptyStructure().filter(function (f) { return !!f.relativeLinkFrom; })) || [];
        linksToLInk.forEach(function (l) {
            var source = tnp_core_1.path.resolve(tnp_core_1.path.join(proj.location, l.relativeLinkFrom));
            if (tnp_helpers_1.Helpers.exists(source)) {
                var dest = tnp_core_1.path.resolve(tnp_core_1.path.join(proj.location, l.relativePath));
                tnp_helpers_1.Helpers.createSymLink(source, dest);
            }
            else {
                tnp_helpers_1.Helpers.log("[cli-tester][recreate-env] not exist " + source);
            }
        });
    };
    //#region static fields
    MetaMd.JSON_PART = '@jsonPart';
    MetaMd.FILE_CONTENT_PART = '@fileContentPart';
    MetaMd.TEST_PART = '@testPart';
    return MetaMd;
}());
exports.MetaMd = MetaMd;
//#region create
function create(json5string, fileContents, testContent) {
    var _a;
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var metadataJSON, ext, projPath, TestTemplatesClass, filesContestString;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    metadataJSON = tnp_helpers_1.Helpers.parse(json5string, true);
                    ext = tnp_core_1.path.extname(tnp_core_1._.first(metadataJSON.orgFileBasenames)).replace(/^\./, '');
                    if (!!testContent) return [3 /*break*/, 4];
                    projPath = ((_a = tnp_core_1._.maxBy(tnp_core_1._.keys(metadataJSON.projects).map(function (projRelPath) {
                        return { path: projRelPath, length: projRelPath.length };
                    }), function (c) { return c.length; })) === null || _a === void 0 ? void 0 : _a.path) || '';
                    TestTemplatesClass = typescript_class_helpers_1.CLASS.getBy('TestTemplates');
                    if (!!TestTemplatesClass) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.resolve().then(function () { return require('./spec-templates.backend'); })];
                case 1: return [4 /*yield*/, (_b.sent()).TestTemplates];
                case 2:
                    TestTemplatesClass = _b.sent();
                    _b.label = 3;
                case 3:
                    testContent = TestTemplatesClass.testPart(metadataJSON.orgRelativePathes, projPath, metadataJSON.timeHash);
                    _b.label = 4;
                case 4:
                    filesContestString = fileContents.map(function (fileContent) {
                        return "```" + ext + " " + MetaMd.FILE_CONTENT_PART + "\n" + fileContent + "\n```";
                    }).join('\n\n');
                    return [2 /*return*/, ("\n```ts " + MetaMd.TEST_PART + "\n" + testContent + "\n```\n\n```json5 " + MetaMd.JSON_PART + "\n" + json5string + "\n```\n\n" + filesContestString + "\n").split('\n').map(function (l) {
                            return l.trim().startsWith('\`\`\`') ? l.trimLeft() : l;
                        }).join('\n').trim() + '\n'];
            }
        });
    });
}
//#endregion
//#region extract data parts from content md file
function extract(content, PARTS_TO_FIND) {
    if (!content) {
        return;
    }
    var parts = [];
    var lines = [];
    var allLines = content.split('\n');
    var pushingActive = false;
    for (var index = 0; index < allLines.length; index++) {
        var orgLine = (allLines[index] || '');
        var line = orgLine.trim();
        if (pushingActive) {
            if (line.startsWith('\`\`\`')) {
                parts.push(lines.join('\n'));
                lines = [];
            }
            else {
                lines.push(orgLine);
            }
        }
        if (line.startsWith('\`\`\`') && (line.search(PARTS_TO_FIND) !== -1)) {
            pushingActive = true;
        }
    }
    return parts;
}
//#endregion
function resolveFoundedProject(originalAnyTypeFiles, editorCwd, foundProjectFn) {
    var foundedProjectsInPath = [];
    for (var index = 0; index < originalAnyTypeFiles.length; index++) {
        var fileAbsPath = originalAnyTypeFiles[index];
        foundedProjectsInPath = tslib_1.__spreadArrays(foundedProjectsInPath, tnp_helpers_1.Project.allProjectFrom(fileAbsPath, editorCwd));
        if (foundProjectFn) {
            foundedProjectsInPath = foundProjectFn(tnp_helpers_1.Helpers.arrays.uniqArray(foundedProjectsInPath, 'location'));
        }
    }
    foundedProjectsInPath = tnp_helpers_1.Helpers.arrays.uniqArray(foundedProjectsInPath, 'location');
    return foundedProjectsInPath;
}
//#endregion
//# sourceMappingURL=meta-content-md.backend.js.map