import { Project } from 'tnp-helpers';
export declare class NodeCliTester {
    protected readonly cwd: string;
    private static _instances;
    private static ACTIONS;
    static classFn: typeof NodeCliTester;
    static projectClassFn: typeof Project;
    static foundProjectsFn: (projects: Project[]) => Project[];
    protected constructor(cwd?: string);
    static Instance(cwd?: string): NodeCliTester;
    static InstanceNearestTo(cwd: string): NodeCliTester;
    protected getAllTestsNames(): void;
    protected getMdContentFilesForTest(testNameOrPathToTestFolder: string): void;
    protected getMdContentFilesWithHash(testNameOrPathToTestFolder: string): void;
    protected getAllTestsNamesForRegenerate(): void;
    createTest(testNameOrPathToTestFolder: string[] | string): Promise<void>;
    createTestAndAddFiles(testName: string, absoluteFilePathes: string[], editorCwd?: string): Promise<void>;
    addFilesToTest(testNameOrPathToTestFolder: string, filePath: string[], editorCwd?: string): Promise<void>;
    addFilesToMdContent(testNameOrPathToTestFolder: string, mdContentFileBasenameOrPath: string | null, filePaths: string[], editorCwd?: string): Promise<void>;
    private get lastRegenerateHashFile();
    private get lastRegenerateMenuItem();
    regenerate(timeHash: string): Promise<void>;
    regenerateLast(): Promise<void>;
    regenerateEnvironment(timeHash: string, tempFolder?: string, onlyIfNotExists?: boolean): Promise<void>;
}
