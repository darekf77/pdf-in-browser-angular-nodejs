"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_1 = require("tnp-helpers");
//#endregion
//#region base imports contant
var baseImports = "\nimport { _, path, crossPlatformPath } from 'tnp-core';\nimport chalk from 'chalk';\nimport { describe, before, beforeEach, it } from 'mocha';\nimport { expect } from 'chai';\nimport { CLASS } from 'typescript-class-helpers';\nimport { Helpers } from 'tnp-helpers';\nimport { config } from 'tnp-config';\nimport { NodeCliTester  } from 'node-cli-tester';\n".trim();
var testMeta = "\n// const testName = this.test.title;\n// const testFullName = this.test.fullTitle();\n".trim();
//#endregion
var TestTemplates = /** @class */ (function () {
    function TestTemplates() {
    }
    //#region create test part
    TestTemplates.testPart = function (pathToFiles, projPath, timeHash) {
        var describes = "\n\n  it('Should pass the test with hash ' + cwdHash // chalk.hidden(cwdHash)\n    , async  () => {\n   //#region resolve variables\n" + '' // testMeta
         + "\n   const projFolder = '" + tnp_core_1._.first(projPath.split('/')) + "';\n   const tmpTestEnvironmentFolder = 'tmp-tests-environments';\n   const cwd = path.resolve(path.join(crossPlatformPath(__dirname), `../../../../${tmpTestEnvironmentFolder}`, cwdHash));\n   const relativePathToFile = {\n     " + pathToFiles.map(function (pathToFile) { return tnp_core_1._.camelCase(tnp_core_1.path.basename(pathToFile)) + " : `" + pathToFile.split('/').slice(1).join('/') + "`"; })
            .join(',\n     ') + "\n   };\n   const absolutePathToTestFile = {\n     " + pathToFiles.map(function (pathToFile) { return tnp_core_1._.camelCase(tnp_core_1.path.basename(pathToFile)) + " : path.join(cwd, projFolder, relativePathToFile." + tnp_core_1._.camelCase(tnp_core_1.path.basename(pathToFile)) + ")"; })
            .join(',\n     ') + "\n   };\n   await NodeCliTester.InstanceNearestTo(cwd).regenerateEnvironment(cwdHash,tmpTestEnvironmentFolder);\n   const $Project = Project || CLASS.getBy('Project') as typeof Project;\n   const proj = $Project.From(path.join(cwd,projFolder));\n   //#endregion\n\n   // @ts-ignore\n   expect(proj.runCommandGetString(`" + this.DEFAULT_COMMAND + "`)).to.be.eq('hello world');\n });\n";
        var testsImports = "\n" + '' // baseImports
         + "\n" + '' // import { Project } from '${this.PROJECT_ENTITY_LOCATION}';
         + "\n\n";
        var result = '\n'
            + testsImports.trim()
            + ("\ndescribe('" + projPath + "',()=> {\n  const cwdHash = '" + timeHash + "';\n" + describes + "\n});\n  ").trim() + '\n\n';
        return result;
    };
    //#endregion
    //#region regenerate spec ts
    TestTemplates.regenerateSpecTs = function (specTsPath, testRealName) {
        if (!tnp_helpers_1.Helpers.exists(specTsPath)) {
            tnp_helpers_1.Helpers.writeFile(specTsPath, 
            //#region content of *.spec.ts
            ("\n" + baseImports + "\nimport { Project } from '" + this.PROJECT_ENTITY_LOCATION + "';\n\ndescribe('" + testRealName + "', () => {\n\n  // PUT ALL YOUR TESTS HERE\n\n  it('should works example unit test', () => {\n" + testMeta + "\n    expect(1).to.be.gt(0)\n  });\n\n});\n").trim() + '\n'
            //#endregion
            );
        }
    };
    TestTemplates.DEFAULT_COMMAND = "echo \"hello world\"";
    TestTemplates.PROJECT_ENTITY_LOCATION = "tnp-helpers";
    TestTemplates = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('TestTemplates')
    ], TestTemplates);
    return TestTemplates;
}());
exports.TestTemplates = TestTemplates;
//# sourceMappingURL=spec-templates.backend.js.map