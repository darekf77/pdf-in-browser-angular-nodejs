/// <reference types="node" />
import { URL } from 'url';
import { Tape } from './tape.backend';
export declare type PortOrURL = URL | number;
export declare type ScenarioParams = {
    [nameOfParam: string]: PortOrURL;
};
export declare type ScenarioParamsReturn = {
    [nameOfParam: string]: Exclude<PortOrURL, number>;
};
export declare type ScenarioParam = {
    name: string;
    portOrUrl: PortOrURL;
};
export declare type ScenarioParamReturn = {
    name: string;
    portOrUrl: Exclude<PortOrURL, number>;
};
export declare class Scenario {
    private readonly location;
    static get allCurrent(): Scenario[];
    private static instances;
    static From(pathToScenario: string): Scenario;
    static lastFromFolder(pathToFolder: string): Scenario;
    get folderHostNames(): string[];
    get path(): string;
    get basename(): string;
    get description(): string;
    private packageJson;
    constructor(location: string);
    private initMidleware;
    private initRequests;
    scenarioAsWorker(params: ScenarioParams, cwd?: string): void;
    start(urlsOrPorts: number | number[] | URL | URL[] | ScenarioParams, debug?: boolean): Promise<ScenarioParamReturn[]>;
    tapes(name?: string): Tape[];
}
export interface RequestType {
    meta: {
        createdAt: string | Date;
        host: string;
    };
}
