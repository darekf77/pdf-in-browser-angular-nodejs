/// <reference types="node" />
import { URL } from 'url';
import { Scenario, ScenarioParamsReturn } from './scenario.backend';
export declare type RecordData = {
    host: number | string | URL;
    talkbackProxyPort?: number | string;
};
export declare type RecorderConfigMeta = {
    [recordHostName: string]: RecordData;
} & {
    scenarioName: string;
};
export declare type ReplayConfigMeta = {
    [recordHostName: string]: {
        talkbackProxyPort?: number | string;
    };
} & {
    scenarioPath: string;
};
export declare class RecordReplayReqResScenario {
    protected readonly cwd: string;
    /**
     * by pinging to http://localhost:5544/path/to/something
     * you are actually recording request from
     * by pinging to http://< host for recording >/path/to/something
     */
    readonly DEFAULT_TALKBACK_PROXY_SERVER_PORT = 5544;
    private static _instances;
    private constructor();
    static Instance(cwd?: string): RecordReplayReqResScenario;
    private resolveArgsRecord;
    recordAsWorker(config: RecorderConfigMeta, cwd?: string): void;
    /**
     *  rest-scenario-rep-rec record http://localhost:4444 Recording localhost data
     *  rest-scenario-rep-rec record http://192.168.10.22:4444 Test scenario
     *  rest-scenario-rep-rec record 4444 local setup test
     *  rest-scenario-rep-rec record 4444 5555 http://192.168.12.3 "my super scenario"
     *  rest-scenario-rep-rec record 4444 5555 http://192.168.12.3 192.158.32.3 'my super scenario --port 6767'
    *                                <port or host for record   >  <scenario name    > < talkbback server ports for proxy >
     *  rest-scenario-rep-rec record 4444 5555  http://my.api.com   'my super scenario --port 6767 --port 7777 --port 8888'
     *  ins.record( { portOrHost: http://192.129.23.12; name: 'localApiProxy'  }, 'super scenario')
     */
    record(serverHostOrPort: string | string[] | RecorderConfigMeta, debug?: boolean): Promise<unknown>;
    get allScenarios(): Scenario[];
    selectScenario(goBackButtonOnList?: boolean): Promise<Scenario>;
    private resolveReplayData;
    resolveScenariosData(nameOrPathOrDescription: string | string[] | ReplayConfigMeta, showListIfNotMatch?: boolean, goBackButtonOnList?: boolean): Promise<{
        scenario: Scenario;
        scenarios: Scenario[];
        params: ScenarioParamsReturn;
    }>;
}
