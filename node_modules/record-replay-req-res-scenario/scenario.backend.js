"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var glob = require("glob");
var path = require("path");
var express = require("express");
var http = require("http");
var fse = require("fs-extra");
var cors = require("cors");
var bodyParser = require("body-parser");
var cookieParser = require("cookie-parser");
var methodOverride = require("method-override");
var fileUpload = require("express-fileupload");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var url_1 = require("url");
var tape_backend_1 = require("./tape.backend");
var Scenario = /** @class */ (function () {
    function Scenario(location) {
        this.location = location;
        var pathToScenarioPackageJson = path.join(location, tnp_config_1.config.file.package_json);
        // Helpers.log(`path to scenario pj: ${pathToScenarioPackageJson}`)
        this.packageJson = tnp_helpers_1.Helpers.readJson(pathToScenarioPackageJson);
    }
    Object.defineProperty(Scenario, "allCurrent", {
        get: function () {
            var currentScenariosFolder = path.join(process.cwd(), tnp_config_1.config.folder.tmpScenarios);
            return !fse.existsSync(currentScenariosFolder) ? [] : fse
                .readdirSync(currentScenariosFolder)
                .map(function (p) { return Scenario.From(path.join(currentScenariosFolder, p)); })
                .filter(function (f) { return !!f; });
        },
        enumerable: true,
        configurable: true
    });
    Scenario.From = function (pathToScenario) {
        if (!tnp_helpers_1.Helpers.exists(pathToScenario)) {
            return void 0;
        }
        if (!Scenario.instances[pathToScenario]) {
            Scenario.instances[pathToScenario] = new Scenario(pathToScenario);
        }
        var s = Scenario.instances[pathToScenario];
        if (!s.packageJson) {
            return void 0;
        }
        if (!s.packageJson.tnp || s.packageJson.tnp.type !== 'scenario') {
            return void 0;
        }
        return s;
    };
    Scenario.lastFromFolder = function (pathToFolder) {
        var currentScenariosFolder = path.join(pathToFolder, tnp_config_1.config.folder.tmpScenarios);
        if (!fse.existsSync(currentScenariosFolder)) {
            return void 0;
        }
        var sorted = (_.sortBy(fse
            .readdirSync(currentScenariosFolder)
            .map(function (f) {
            f = path.join(currentScenariosFolder, f);
            var scenario = Scenario.From(f);
            var mtime = fse.lstatSync(path.join(f, tnp_config_1.config.file.package_json)).mtime;
            return { mtime: mtime, scenario: scenario };
        }), function (a) { return a.mtime; })
            .filter(function (f) { return !!f.scenario; }));
        return (sorted.length > 0) ? _.first(sorted).scenario : (void 0);
    };
    Object.defineProperty(Scenario.prototype, "folderHostNames", {
        get: function () {
            var res = fse
                .readdirSync(this.location)
                .filter(function (f) { return f !== tnp_config_1.config.file.package_json; })
                .map(function (f) {
                var _a = f.split('__'), addressPart = _a[0], hostName = _a[1];
                return hostName;
            });
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scenario.prototype, "path", {
        get: function () {
            return this.location;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scenario.prototype, "basename", {
        get: function () {
            return path.basename(this.location);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Scenario.prototype, "description", {
        get: function () {
            var _a, _b, _c;
            return ((_a = this.packageJson) === null || _a === void 0 ? void 0 : _a.description) ? (_b = this.packageJson) === null || _b === void 0 ? void 0 : _b.description : _.startCase((_c = this.packageJson) === null || _c === void 0 ? void 0 : _c.name);
        },
        enumerable: true,
        configurable: true
    });
    Scenario.prototype.initMidleware = function (app) {
        app.use(fileUpload());
        app.use(bodyParser.urlencoded({ extended: true }));
        app.use(bodyParser.json());
        app.use(methodOverride());
        app.use(cookieParser());
        app.use(cors());
        (function () {
            app.use(function (req, res, next) {
                res.set('Access-Control-Expose-Headers', [
                    'Content-Type',
                    'Authorization',
                    'X-Requested-With',
                ].join(', '));
                next();
            });
        })();
    };
    Scenario.prototype.initRequests = function (app, name) {
        var allReq = this.tapes(name);
        app.get(/^\/(.*)/, function (req, res) {
            respond(allReq, req, res);
        });
        app.post(/^\/(.*)/, function (req, res) {
            respond(allReq, req, res);
        });
        app.delete(/^\/(.*)/, function (req, res) {
            respond(allReq, req, res);
        });
        app.put(/^\/(.*)/, function (req, res) {
            respond(allReq, req, res);
        });
        app.head(/^\/(.*)/, function (req, res) {
            respond(allReq, req, res);
        });
        return allReq;
    };
    Scenario.prototype.scenarioAsWorker = function (params, cwd) {
        if (cwd === void 0) { cwd = process.cwd(); }
        var hostNames = _.keys(params).map(function (hostName) { return hostName; });
        var ports = _.keys(params).map(function (hostName) { return tnp_helpers_1.Helpers.urlParse(params[hostName]).port; });
        var command = "record-replay-req-res-scenario replay " + this.location + " "
            + (hostNames.map(function (h) { return "--hostName " + h; }).join(' ') + " ")
            + (ports.map(function (h) { return "--port " + h; }).join(' ') + " ");
        tnp_helpers_1.Helpers.run(command, { cwd: cwd }).async();
    };
    Scenario.prototype.start = function (urlsOrPorts, debug) {
        if (debug === void 0) { debug = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var proxyPorts, promises, _loop_1, index;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (_.isString(urlsOrPorts) || _.isNumber(urlsOrPorts)) {
                            urlsOrPorts = [Number(urlsOrPorts)];
                        }
                        if (_.isArray(urlsOrPorts)) {
                            urlsOrPorts = urlsOrPorts.map(function (portLocalHOst) {
                                if (portLocalHOst instanceof url_1.URL) {
                                    portLocalHOst = Number(portLocalHOst.port);
                                }
                                return Number(portLocalHOst);
                            });
                            urlsOrPorts = urlsOrPorts.reduce(function (a, b, i) {
                                return _.merge(a, { '': tnp_helpers_1.Helpers.urlParse(b) });
                            }, {});
                        }
                        urlsOrPorts = urlsOrPorts;
                        proxyPorts = _
                            .keys(urlsOrPorts)
                            .map(function (name) { return { name: name, portOrUrl: tnp_helpers_1.Helpers.urlParse(urlsOrPorts[name]) }; });
                        promises = [];
                        _loop_1 = function (index) {
                            var urlOrPort = proxyPorts[index];
                            (function (promises, proxyURL) {
                                promises.push(new Promise(function (resolve, reject) {
                                    var recordedServerName = ((urlOrPort.name && urlOrPort.name.trim() !== '') ? urlOrPort.name : '').trim();
                                    var app = express();
                                    _this.initMidleware(app);
                                    var tapes = _this.initRequests(app, recordedServerName);
                                    tnp_helpers_1.Helpers.info("Starting scenario server on port " + proxyURL.port + "\n          Recorded/assigned server name: " + (recordedServerName !== '' ? recordedServerName : '-') + ":\n          Description: \"" + _this.description + "\"\n          "
                                        + ((!debug ? '' : (tapes.length === 0) ? 'Tapes: < nothing for this server name >' :
                                            ('Tapes:\n' + tapes.map(function (t) { return "(" + t.req.method + ") " + proxyURL.origin + t.req.url; }).join('\n'))) + "\n")
                                        + tnp_helpers_1.Helpers.terminalLine());
                                    var h = new http.Server(app);
                                    h.listen(proxyURL.port, function () {
                                        console.log("Server listening on " + proxyURL.href + "\n            env: " + app.settings.env + "\n              ");
                                        resolve(void 0);
                                    });
                                }));
                            })(promises, urlOrPort.portOrUrl);
                        };
                        for (index = 0; index < proxyPorts.length; index++) {
                            _loop_1(index);
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, proxyPorts];
                }
            });
        });
    };
    Scenario.prototype.tapes = function (name) {
        var _this = this;
        var allTapes = fse
            .readdirSync(this.location)
            .filter(function (f) {
            var regTmpl = ".*__" + ((_.isString(name) && name.trim() !== '') ? tnp_helpers_1.Helpers.escapeStringForRegEx(_.camelCase(name)) : '[a-zA-Z0-9]+') + "$";
            var res = (new RegExp(regTmpl)).test(f);
            return res;
        })
            .map(function (f) { return path.join(_this.location, f); })
            .reduce(function (pre, folderLocation) {
            var patternFiles = folderLocation + "/**/*.json5";
            var all = glob.sync(patternFiles);
            for (var index = 0; index < all.length; index++) {
                var f = all[index];
                all[index] = tape_backend_1.Tape.from(tnp_helpers_1.Helpers.readJson(f, void 0, true));
            }
            return pre.concat(all);
        }, []);
        return allTapes;
    };
    Scenario.instances = {};
    return Scenario;
}());
exports.Scenario = Scenario;
function respond(allReq, req, res) {
    var match = allReq.find(function (s) { return s.matchToReq(req); });
    if (match) {
        // Helpers.log(`MATCH: ${match.req.method} ${match.req.url}`);
        _.keys(match.res.headers).forEach(function (headerKey) {
            var headerString = _.isArray(match.res.headers[headerKey]) ?
                ((match.res.headers[headerKey] || []).join(', ')) :
                match.res.headers[headerKey];
            res.set(headerKey, headerString);
        });
        res.send(match.res.body); //.status(match.res.status);
    }
    else {
        res.send('REQUEST DOES NOT MATCH ANY RECORDING');
    }
}
//# sourceMappingURL=scenario.backend.js.map