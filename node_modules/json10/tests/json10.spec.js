"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var index_1 = require("../index");
var ng2_logger_1 = require("ng2-logger");
var log = ng2_logger_1.Log.create('Spec JSON10');
// log == 500
var Proj = /** @class */ (function () {
    function Proj() {
        this.isProjectInstance = true;
        this.browser = {
            children: []
        };
        this.location = "location_" + Proj_1.locationsID++;
    }
    Proj_1 = Proj;
    var Proj_1;
    Proj.locationsID = 0;
    Proj = Proj_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('Proj', {
            uniqueKey: 'location'
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], Proj);
    return Proj;
}());
var Test = /** @class */ (function () {
    function Test() {
        this.id = Test_1.id++;
    }
    Test_1 = Test;
    var Test_1;
    Test.id = 0;
    Test = Test_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('Test'),
        tslib_1.__metadata("design:paramtypes", [])
    ], Test);
    return Test;
}());
exports.Test = Test;
var User = /** @class */ (function () {
    function User(id, realId) {
        if (realId === void 0) { realId = void 0; }
        this.realId = realId;
        this.browser = {};
        if (tnp_core_1._.isNumber(id)) {
            this.id = id;
        }
        else {
            this.id = User_1.id++;
        }
    }
    User_1 = User;
    User.prototype.dupa = function () {
        console.log('jest em!');
        return true;
    };
    Object.defineProperty(User.prototype, "authorsGetter", {
        get: function () {
            return this.browser.authors;
        },
        enumerable: true,
        configurable: true
    });
    var User_1;
    User.id = 0;
    User.users = [new User_1(), new User_1()];
    User = User_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('User'),
        tslib_1.__metadata("design:paramtypes", [Number, String])
    ], User);
    return User;
}());
exports.User = User;
// const instance = BrowserDB.instance;
mocha_1.describe('Json 10 circural references tests', function () {
    mocha_1.beforeEach(function () {
        Proj.locationsID = 0;
    });
    mocha_1.it('Circural refences should works ', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var u1, u2, test, cc, cleaned, circural, stringify, after;
        return tslib_1.__generator(this, function (_a) {
            u1 = new User();
            u2 = new User();
            test = new Test();
            u1.test = test;
            test.users = [u1, u2];
            cc = [];
            cleaned = index_1.JSON10.cleaned(test, function (ccc) { return cc = ccc; });
            // log.i('cleaned', cleaned)
            // log.i('cc', cc)
            chai_1.expect(tnp_core_1._.isNull(cleaned.users[0].test)).to.be.true;
            circural = [];
            stringify = index_1.JSON10.stringify(test, void 0, void 0, function (circs) {
                circural = circs;
            });
            after = index_1.JSON10.parse(stringify, circural);
            // log.i('after', after)
            chai_1.expect(tnp_core_1._.isNull(after.users[0].test.users)).to.be.false;
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('Should clean objec', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var u1, u2, test, s;
        return tslib_1.__generator(this, function (_a) {
            u1 = new User();
            u2 = new User();
            test = new Test();
            u1.test = test;
            test.users = [u1, u2];
            u1.friend = new User();
            s = index_1.JSON10.cleaned(test, function (circs) {
                // console.log('circs', circs)
            });
            // log.i('cleaned', s)
            // console.log(CLASS.getNameFromObject(s.users[0]))
            chai_1.expect(s).to.be.instanceOf(Test);
            chai_1.expect(s.users[0]).to.be.instanceOf(User);
            chai_1.expect(s.users[0].friend).to.be.instanceOf(User);
            chai_1.expect(s.users[1]).to.be.instanceOf(User);
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('Should array of objects', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var u1, u2, u3, arr, cleanArr;
        return tslib_1.__generator(this, function (_a) {
            u1 = new User();
            u2 = new User();
            u3 = new User();
            u1.friend = u2;
            u2.friend = u1;
            u3.authors = [u1, u2];
            arr = [
                u1,
                u2,
                u3
            ];
            cleanArr = index_1.JSON10.cleaned(arr, function (circs) {
                // console.log('circs', circs)
            });
            // log.i('cleanArr',cleanArr)
            chai_1.expect(cleanArr[0]).to.be.instanceOf(User);
            chai_1.expect(cleanArr[1]).to.be.null;
            chai_1.expect(cleanArr[2]).to.be.instanceOf(User);
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('Should hadnle ids', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var jedynka, u1, u4asu1, arr, cleanNormal;
        return tslib_1.__generator(this, function (_a) {
            jedynka = 'jedynka';
            u1 = new User(111, jedynka);
            u4asu1 = new User(111, 'czwórka');
            u1.friend = u4asu1;
            u4asu1.friend = u1;
            arr = [u1, u4asu1];
            cleanNormal = index_1.JSON10.cleaned(arr);
            // log.i('cleanNormal', cleanNormal)
            // log.i(cleanBatter)
            chai_1.expect(cleanNormal[1]).to.be.null;
            chai_1.expect(cleanNormal[0].friend).to.be.null;
            chai_1.expect(cleanNormal[0].realId).to.be.eq(jedynka);
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('Should hadnle ommiting properties', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var jedynka, u1, u4asu1, obj, cc, cleanNormal;
        return tslib_1.__generator(this, function (_a) {
            jedynka = 'jedynka';
            u1 = new User(111, jedynka);
            u4asu1 = new User(111, 'czwórka');
            u1.friend = u4asu1;
            u4asu1.friend = u1;
            obj = { u1: u1, u4asu1: u4asu1, hello: u1 };
            cc = [];
            cleanNormal = index_1.JSON10.cleaned(obj, function (ccc) { return (cc = ccc); });
            // log.i('ommittt', cleanNormal)
            // log.i('cc', cc)
            // log.i(cleanBatter)
            chai_1.expect(cleanNormal.u1).to.be.instanceOf(User);
            return [2 /*return*/];
        });
    }); });
    // xit("Should handle normal", async () => {
    //   let p1 = new Proj()
    //   let p2 = new Proj()
    //   let p3 = new Proj()
    //   let p4 = new Proj()
    //   p1.browser.child = p2;
    //   p2.browser.child = p1;
    //   let oo = {
    //     p1, p2
    //   }
    //   // p1.browser.children = [p2, p3]
    //   // p2.browser.children = [p1, p4]
    //   // let oo = [
    //   //   p1, p2, p3, p4
    //   // ];
    //   const res = JSON10.cleaned(oo)
    //   // log.i('res', res)
    //   // log.i('cc', JSON10.circural)
    // });
    // xit("Should handle normal", async () => {
    //   let p1 = new Proj()
    //   let p2 = new Proj()
    //   let p3 = new Proj()
    //   let p4 = new Proj()
    //   p1.parent = p1;
    //   p2.parent = p1;
    //   // log.i('res', JSON10.cleaned([ p1, p2 ]))
    //   // log.i('cc', JSON10.circural)
    //   const o = { p1, p2 }
    //   log.i('res', JSON10.cleaned(o))
    //   log.i('cc', JSON10.circural)
    // });
    // it("Should handle uniqueIndexes", async () => {
    //   let oo = [
    //     {
    //       "browser": {
    //         "children": [
    //           {
    //             "browser": {},
    //             "requiredLibs": [],
    //             "reinstallCounter": 1,
    //             "location": "/Users/dfilipiak/projects/npm/morphi/examples",
    //             "type": "workspace",
    //             "__defaultPort": 5000
    //           },
    //           {
    //             "browser": {},
    //             "requiredLibs": [],
    //             "reinstallCounter": 1,
    //             "location": "/Users/dfilipiak/projects/npm/morphi/super-simple-morphi-example",
    //             "type": "isomorphic-lib",
    //             "__defaultPort": 4000
    //           }
    //         ],
    //         "name": "morphi",
    //         "isWorkspace": false,
    //         "isCloud": true
    //       },
    //       "requiredLibs": [],
    //       "reinstallCounter": 1,
    //       "location": "/Users/dfilipiak/projects/npm/morphi",
    //       "type": "isomorphic-lib",
    //       "__defaultPort": 4000
    //     },
    //     {
    //       "browser": {},
    //       "requiredLibs": [],
    //       "reinstallCounter": 1,
    //       "location": "/Users/dfilipiak/projects/npm/morphi/examples",
    //       "type": "workspace",
    //       "__defaultPort": 5000
    //     },
    //     {
    //       "browser": {},
    //       "requiredLibs": [],
    //       "reinstallCounter": 1,
    //       "location": "/Users/dfilipiak/projects/npm/morphi/examples/isomorphic-lib",
    //       "type": "isomorphic-lib",
    //       "__defaultPort": 4000
    //     },
    //     {
    //       "browser": {},
    //       "requiredLibs": [],
    //       "reinstallCounter": 1,
    //       "location": "/Users/dfilipiak/projects/npm/morphi/super-simple-morphi-example",
    //       "type": "isomorphic-lib",
    //       "__defaultPort": 4000
    //     }
    //   ]
    //   oo = oo.map(o => {
    //     let res = _.merge(new Proj(), o);
    //     if (res.browser && res.browser.children) {
    //       res.browser.children = res.browser.children.map(child => _.merge(new Proj(), child)) as any;
    //     }
    //     return res;
    //   })
    //   console.log(JSON10.structureArray(oo))
    //   const res = JSON10.cleaned(oo)
    //   // expect(JSON10.structureArray(res).length).below(JSON10.structureArray(oo).length)
    //   log.i(res)
    //   // console.log(CLASSNAME.getClassFamilyByClassName('Proj'))
    // })
});
//# sourceMappingURL=json10.spec.js.map