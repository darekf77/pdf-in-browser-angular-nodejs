"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var utils_1 = require("../common/utils");
var DraggableDirective = /** @class */ (function () {
    function DraggableDirective(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.dragX = true;
        this.dragY = true;
        this.dragStart = new core_1.EventEmitter();
        this.dragMove = new core_1.EventEmitter();
        this.dragEnd = new core_1.EventEmitter();
        this.globalListeners = new Map();
    }
    DraggableDirective.prototype.ngOnChanges = function (changes) {
        if (changes.dragEventTarget && changes.dragEventTarget.currentValue) {
            this.onMousedown(this.dragEventTarget);
        }
    };
    DraggableDirective.prototype.ngOnDestroy = function () {
        this.removeEventListener();
    };
    DraggableDirective.prototype.onMousedown = function (event) {
        if (!utils_1.isLeftButton(event)) {
            return;
        }
        if (this.dragX || this.dragY) {
            var evt = utils_1.getEvent(event);
            this.initDrag(evt.pageX, evt.pageY);
            this.addEventListeners(event);
            this.dragStart.emit(event);
        }
    };
    DraggableDirective.prototype.onMousemove = function (event) {
        var evt = utils_1.getEvent(event);
        this.onDrag(evt.pageX, evt.pageY);
        this.dragMove.emit(event);
    };
    DraggableDirective.prototype.onMouseup = function (event) {
        this.endDrag();
        this.removeEventListener();
        this.dragEnd.emit(event);
    };
    DraggableDirective.prototype.addEventListeners = function (event) {
        var _this = this;
        var isTouchEvent = event.type.startsWith('touch');
        var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';
        var upEvent = isTouchEvent ? 'touchend' : 'mouseup';
        this.globalListeners
            .set(moveEvent, {
            handler: this.onMousemove.bind(this),
            options: false
        })
            .set(upEvent, {
            handler: this.onMouseup.bind(this),
            options: false
        });
        this.ngZone.runOutsideAngular(function () {
            _this.globalListeners.forEach(function (config, name) {
                window.document.addEventListener(name, config.handler, config.options);
            });
        });
    };
    DraggableDirective.prototype.removeEventListener = function () {
        this.globalListeners.forEach(function (config, name) {
            window.document.removeEventListener(name, config.handler, config.options);
        });
    };
    DraggableDirective.prototype.initDrag = function (pageX, pageY) {
        this.isDragging = true;
        this.lastPageX = pageX;
        this.lastPageY = pageY;
        this.element.nativeElement.classList.add('dragging');
        this.elementWidth = this.element.nativeElement.offsetWidth;
        this.elementHeight = this.element.nativeElement.offsetHeight;
        this.vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
        this.vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);
    };
    DraggableDirective.prototype.onDrag = function (pageX, pageY) {
        if (this.isDragging) {
            var deltaX = pageX - this.lastPageX;
            var deltaY = pageY - this.lastPageY;
            var coords = this.element.nativeElement.getBoundingClientRect();
            var leftPos = coords.left + deltaX;
            var topPos = coords.top + deltaY;
            var overWidth = !this.inViewport || leftPos >= 0 && (leftPos + this.elementWidth) <= this.vw;
            var overHeight = !this.inViewport || topPos >= 0 && (topPos + this.elementHeight) <= this.vh;
            if (overWidth) {
                this.lastPageX = pageX;
            }
            if (overHeight) {
                this.lastPageY = pageY;
            }
            if (this.inViewport) {
                if (leftPos < 0) {
                    leftPos = 0;
                }
                if ((leftPos + this.elementWidth) > this.vw) {
                    leftPos = this.vw - this.elementWidth;
                }
                if (topPos < 0) {
                    topPos = 0;
                }
                if ((topPos + this.elementHeight) > this.vh) {
                    topPos = this.vh - this.elementHeight;
                }
            }
            this.element.nativeElement.style.left = leftPos + 'px';
            this.element.nativeElement.style.top = topPos + 'px';
        }
    };
    DraggableDirective.prototype.endDrag = function () {
        this.isDragging = false;
        this.element.nativeElement.classList.remove('dragging');
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DraggableDirective.prototype, "dragEventTarget", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DraggableDirective.prototype, "dragX", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DraggableDirective.prototype, "dragY", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DraggableDirective.prototype, "inViewport", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DraggableDirective.prototype, "dragStart", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DraggableDirective.prototype, "dragMove", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], DraggableDirective.prototype, "dragEnd", void 0);
    DraggableDirective = tslib_1.__decorate([
        core_1.Directive({
            selector: '[appDraggable]'
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone])
    ], DraggableDirective);
    return DraggableDirective;
}());
exports.DraggableDirective = DraggableDirective;
//# sourceMappingURL=draggable.directive.js.map