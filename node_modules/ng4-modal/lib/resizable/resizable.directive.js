"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var utils_1 = require("../common/utils");
var ResizableDirective = /** @class */ (function () {
    function ResizableDirective(element) {
        this.resizeBegin = new core_1.EventEmitter();
        this.resizing = new core_1.EventEmitter();
        this.resizeEnd = new core_1.EventEmitter();
        this.element = element.nativeElement;
    }
    ResizableDirective.prototype.ngAfterViewInit = function () {
        if (this.south) {
            this.createHandle('resize-handle-s');
        }
        if (this.east) {
            this.createHandle('resize-handle-e');
        }
        if (this.southEast) {
            this.createHandle('resize-handle-se');
        }
        var computedStyle = window.getComputedStyle(this.element);
        this.minWidth = parseFloat(computedStyle.minWidth);
        this.maxWidth = parseFloat(computedStyle.maxWidth);
        this.minHeight = parseFloat(computedStyle.minHeight);
        this.maxHeight = parseFloat(computedStyle.maxHeight);
    };
    ResizableDirective.prototype.ngOnDestroy = function () {
        this.destroySubscription();
    };
    ResizableDirective.prototype.onMousedown = function (event) {
        var _this = this;
        if (!utils_1.isLeftButton(event)) {
            return;
        }
        var classList = (event.target).classList;
        var isSouth = classList.contains('resize-handle-s');
        var isEast = classList.contains('resize-handle-e');
        var isSouthEast = classList.contains('resize-handle-se');
        var evt = utils_1.getEvent(event);
        var width = this.element.clientWidth;
        var height = this.element.clientHeight;
        var screenX = evt.screenX;
        var screenY = evt.screenY;
        var isTouchEvent = event.type.startsWith('touch');
        var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';
        var upEvent = isTouchEvent ? 'touchend' : 'mouseup';
        if (isSouth || isEast || isSouthEast) {
            this.initResize(event, isSouth, isEast, isSouthEast);
            var mouseup = rxjs_1.fromEvent(document, upEvent);
            this.subscription = mouseup
                .subscribe(function (ev) { return _this.onMouseup(ev); });
            var mouseMoveSub = rxjs_1.fromEvent(document, moveEvent)
                .pipe(operators_1.takeUntil(mouseup))
                .subscribe(function (e) { return _this.move(e, width, height, screenX, screenY); });
            this.subscription.add(mouseMoveSub);
        }
    };
    ResizableDirective.prototype.move = function (event, width, height, screenX, screenY) {
        var evt = utils_1.getEvent(event);
        var movementX = evt.screenX - screenX;
        var movementY = evt.screenY - screenY;
        this.newWidth = width + movementX;
        this.newHeight = height + movementY;
        this.resizeWidth(evt);
        this.resizeHeight(evt);
    };
    ResizableDirective.prototype.onMouseup = function (event) {
        this.endResize(event);
        this.destroySubscription();
    };
    ResizableDirective.prototype.destroySubscription = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = undefined;
        }
    };
    ResizableDirective.prototype.createHandle = function (edgeClass) {
        var node = document.createElement('span');
        node.className = edgeClass;
        this.element.appendChild(node);
    };
    ResizableDirective.prototype.initResize = function (event, isSouth, isEast, isSouthEast) {
        if (isSouth) {
            this.resizingS = true;
        }
        if (isEast) {
            this.resizingE = true;
        }
        if (isSouthEast) {
            this.resizingSE = true;
        }
        this.element.classList.add('resizing');
        this.newWidth = this.element.clientWidth;
        this.newHeight = this.element.clientHeight;
        event.stopPropagation();
        this.resizeBegin.emit();
    };
    ResizableDirective.prototype.endResize = function (event) {
        this.resizingS = false;
        this.resizingE = false;
        this.resizingSE = false;
        this.element.classList.remove('resizing');
        this.resizeEnd.emit({ event: utils_1.getEvent(event), width: this.newWidth, height: this.newHeight });
    };
    ResizableDirective.prototype.resizeWidth = function (event) {
        var overMinWidth = !this.minWidth || this.newWidth >= this.minWidth;
        var underMaxWidth = !this.maxWidth || this.newWidth <= this.maxWidth;
        if (this.resizingSE || this.resizingE) {
            if (overMinWidth && underMaxWidth) {
                if (!this.ghost) {
                    this.element.style.width = this.newWidth + "px";
                }
                this.resizing.emit({ event: event, width: this.newWidth, height: this.newHeight, direction: 'horizontal' });
            }
        }
    };
    ResizableDirective.prototype.resizeHeight = function (event) {
        var overMinHeight = !this.minHeight || this.newHeight >= this.minHeight;
        var underMaxHeight = !this.maxHeight || this.newHeight <= this.maxHeight;
        if (this.resizingSE || this.resizingS) {
            if (overMinHeight && underMaxHeight) {
                if (!this.ghost) {
                    this.element.style.height = this.newHeight + "px";
                }
                this.resizing.emit({ event: event, width: this.newWidth, height: this.newHeight, direction: 'vertical' });
            }
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ResizableDirective.prototype, "south", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ResizableDirective.prototype, "east", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ResizableDirective.prototype, "southEast", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ResizableDirective.prototype, "ghost", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ResizableDirective.prototype, "resizeBegin", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ResizableDirective.prototype, "resizing", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ResizableDirective.prototype, "resizeEnd", void 0);
    tslib_1.__decorate([
        core_1.HostListener('mousedown', ['$event']),
        core_1.HostListener('touchstart', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ResizableDirective.prototype, "onMousedown", null);
    ResizableDirective = tslib_1.__decorate([
        core_1.Directive({
            selector: '[appResizable]'
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef])
    ], ResizableDirective);
    return ResizableDirective;
}());
exports.ResizableDirective = ResizableDirective;
//# sourceMappingURL=resizable.directive.js.map