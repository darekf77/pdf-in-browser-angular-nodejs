"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var utils_1 = require("../common/utils");
var ng2_logger_1 = require("ng2-logger");
var log = ng2_logger_1.Log.create("[ng4-modal] modal.component", ng2_logger_1.Level.__NOTHING);
var js_1 = require("@mdi/js");
var js_2 = require("@mdi/js");
var js_3 = require("@mdi/js");
var ModalComponent = /** @class */ (function () {
    function ModalComponent(element) {
        this.element = element;
        this.mdiWindowMaximize = js_1.mdiWindowMaximize;
        this.mdiWindowRestore = js_2.mdiWindowRestore;
        this.mdiWindowClose = js_3.mdiWindowClose;
        this.scrollTopEnable = true;
        this.backdrop = true;
        this.inViewport = false;
        this.closeModal = new core_1.EventEmitter();
        this.newPosition = new core_1.EventEmitter();
        this.newSize = new core_1.EventEmitter();
        // log2.w('warn')
        // log2.d('debug')
        // log2.er('error')
        // log2.i('info')
    }
    Object.defineProperty(ModalComponent.prototype, "maximizeRestpreIcon", {
        get: function () {
            return this.maximized ? this.mdiWindowRestore : this.mdiWindowMaximize;
        },
        enumerable: true,
        configurable: true
    });
    ModalComponent.prototype.ngAfterViewChecked = function () {
        if (this.executePostDisplayActions) {
            this.center();
            this.executePostDisplayActions = false;
        }
    };
    ModalComponent.prototype.dragEnd = function () {
        var x = Number(this.modalRoot.nativeElement.style.left.replace('px', ''));
        var y = Number(this.modalRoot.nativeElement.style.top.replace('px', ''));
        this.newPosition.next({ x: x, y: y });
        log.d("drag end new pos: " + x + "," + y);
    };
    ModalComponent.prototype.resizeEnd = function () {
        var w = Number(this.modalRoot.nativeElement.style.width.replace('px', ''));
        var h = Number(this.modalRoot.nativeElement.style.height.replace('px', ''));
        this.newSize.next({ w: w, h: h });
        log.d("resize end new size " + w + "/" + h);
    };
    ModalComponent.prototype.ngAfterViewInit = function () {
        log.i("inital pos", this.initialPos);
    };
    ModalComponent.prototype.onKeyDown = function (event) {
        event.preventDefault();
        event.stopPropagation();
        this.hide();
    };
    ModalComponent.prototype.onWindowResize = function () {
        this.executePostDisplayActions = true;
        this.center();
    };
    ModalComponent.prototype.show = function () {
        var _this = this;
        this.executePostDisplayActions = true;
        this.visible = true;
        setTimeout(function () {
            _this.modalRoot.nativeElement.focus();
            if (_this.scrollTopEnable) {
                _this.modalBody.nativeElement.scrollTop = 0;
            }
            if (_this.initialPos) {
                var _a = _this.initialPos, x = _a.x, y = _a.y;
                _this.modalRoot.nativeElement.style.left = x + ".px";
                _this.modalRoot.nativeElement.style.top = y + ".px";
                _this.newPosition.next({ x: x, y: y });
                log.d("after view init new pos: " + x + "," + y);
            }
            if (_this.initialSize) {
                var _b = _this.initialSize, h = _b.h, w = _b.w;
                _this.modalRoot.nativeElement.style.width = w + ".px";
                _this.modalRoot.nativeElement.style.height = h + ".px";
                _this.newSize.next({ w: w, h: h });
                log.d("after view init new size: w:" + w + " h:" + h);
            }
            _this.calcBodyHeight();
        }, 1);
    };
    ModalComponent.prototype.hide = function () {
        this.visible = false;
        this.closeModal.emit(true);
        this.focusLastModal();
    };
    ModalComponent.prototype.center = function () {
        var elementWidth = this.modalRoot.nativeElement.offsetWidth;
        var elementHeight = this.modalRoot.nativeElement.offsetHeight;
        if (elementWidth === 0 && elementHeight === 0) {
            this.modalRoot.nativeElement.style.visibility = 'hidden';
            this.modalRoot.nativeElement.style.display = 'block';
            elementWidth = this.modalRoot.nativeElement.offsetWidth;
            elementHeight = this.modalRoot.nativeElement.offsetHeight;
            this.modalRoot.nativeElement.style.display = 'none';
            this.modalRoot.nativeElement.style.visibility = 'visible';
        }
        var x = Math.max((window.innerWidth - elementWidth) / 2, 0);
        var y = Math.max((window.innerHeight - elementHeight) / 2, 0);
        this.modalRoot.nativeElement.style.left = x + 'px';
        this.modalRoot.nativeElement.style.top = y + 'px';
    };
    ModalComponent.prototype.initDrag = function (event) {
        if (event.target === this.closeIcon.nativeElement) {
            return;
        }
        if (!this.maximized) {
            this.dragEventTarget = event;
        }
    };
    ModalComponent.prototype.onResize = function (event) {
        if (event.direction === 'vertical') {
            this.calcBodyHeight();
        }
    };
    ModalComponent.prototype.calcBodyHeight = function () {
        var diffHeight = this.modalHeader.nativeElement.offsetHeight + this.modalFooter.nativeElement.offsetHeight;
        var contentHeight = this.modalRoot.nativeElement.offsetHeight - diffHeight;
        this.modalBody.nativeElement.style.height = contentHeight + 'px';
        this.modalBody.nativeElement.style.maxHeight = 'none';
    };
    ModalComponent.prototype.getMaxModalIndex = function () {
        return utils_1.maxZIndex('.ui-modal');
    };
    ModalComponent.prototype.focusLastModal = function () {
        var modal = utils_1.findAncestor(this.element.nativeElement.parentElement, '.ui-modal');
        if (modal) {
            modal.focus();
        }
    };
    ModalComponent.prototype.toggleMaximize = function (event) {
        if (this.maximized) {
            this.revertMaximize();
        }
        else {
            this.maximize();
        }
        event.preventDefault();
    };
    ModalComponent.prototype.maximize = function () {
        this.preMaximizePageX = parseFloat(this.modalRoot.nativeElement.style.top);
        this.preMaximizePageY = parseFloat(this.modalRoot.nativeElement.style.left);
        this.preMaximizeRootWidth = this.modalRoot.nativeElement.offsetWidth;
        this.preMaximizeRootHeight = this.modalRoot.nativeElement.offsetHeight;
        this.preMaximizeBodyHeight = this.modalBody.nativeElement.offsetHeight;
        this.modalRoot.nativeElement.style.top = '0px';
        this.modalRoot.nativeElement.style.left = '0px';
        this.modalRoot.nativeElement.style.width = '100vw';
        this.modalRoot.nativeElement.style.height = '100vh';
        var diffHeight = this.modalHeader.nativeElement.offsetHeight + this.modalFooter.nativeElement.offsetHeight;
        this.modalBody.nativeElement.style.height = 'calc(100vh - ' + diffHeight + 'px)';
        this.modalBody.nativeElement.style.maxHeight = 'none';
        this.maximized = true;
    };
    ModalComponent.prototype.revertMaximize = function () {
        this.modalRoot.nativeElement.style.top = this.preMaximizePageX + 'px';
        this.modalRoot.nativeElement.style.left = this.preMaximizePageY + 'px';
        this.modalRoot.nativeElement.style.width = this.preMaximizeRootWidth + 'px';
        this.modalRoot.nativeElement.style.height = this.preMaximizeRootHeight + 'px';
        this.modalBody.nativeElement.style.height = this.preMaximizeBodyHeight + 'px';
        this.maximized = false;
    };
    ModalComponent.prototype.moveOnTop = function () {
        if (!this.backdrop) {
            var maxModalIndex = this.getMaxModalIndex();
            var zIndex = parseFloat(window.getComputedStyle(this.modalRoot.nativeElement).zIndex) || 0;
            if (zIndex <= maxModalIndex) {
                zIndex = maxModalIndex + 1;
                this.modalRoot.nativeElement.style.zIndex = zIndex.toString();
            }
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ModalComponent.prototype, "scrollTopEnable", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ModalComponent.prototype, "maximizable", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ModalComponent.prototype, "backdrop", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], ModalComponent.prototype, "inViewport", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ModalComponent.prototype, "initialPos", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ModalComponent.prototype, "initialSize", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ModalComponent.prototype, "closeModal", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ModalComponent.prototype, "newPosition", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ModalComponent.prototype, "newSize", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('modalRoot', { static: false }),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], ModalComponent.prototype, "modalRoot", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('modalBody', { static: false }),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], ModalComponent.prototype, "modalBody", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('modalHeader', { static: false }),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], ModalComponent.prototype, "modalHeader", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('modalFooter', { static: false }),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], ModalComponent.prototype, "modalFooter", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('closeIcon', { static: false }),
        tslib_1.__metadata("design:type", core_1.ElementRef)
    ], ModalComponent.prototype, "closeIcon", void 0);
    tslib_1.__decorate([
        core_1.HostListener('keydown.esc', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], ModalComponent.prototype, "onKeyDown", null);
    tslib_1.__decorate([
        core_1.HostListener('window:resize'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], ModalComponent.prototype, "onWindowResize", null);
    ModalComponent = tslib_1.__decorate([
        core_1.Component({
            selector: 'app-modal',
            templateUrl: 'modal.component.html',
            styleUrls: ['modal.component.css'],
            encapsulation: core_1.ViewEncapsulation.None,
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef])
    ], ModalComponent);
    return ModalComponent;
}());
exports.ModalComponent = ModalComponent;
//# sourceMappingURL=modal.component.js.map