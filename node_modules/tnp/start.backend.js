"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
if (global.globalSystemToolMode) {
    var frameworkName_1 = global.frameworkName ? global.frameworkName : 'tnp';
    // console.log(`frameworkName: ${frameworkName}`)
    /*
    Explanation of this:
  firedev
  [tnp][tmp-environment] PATH EXISIT: /Users/dfilipiak/projects/npm/firedev/node_modules/tnp/tmp-environment.json
  [tnp][tmp-environment] PATH NOT EXISIT: /Users/dfilipiak/projects/npm/firedev/node_modules/tmp-environment.json
  [tnp][tmp-environment] PATH EXISIT: /Users/dfilipiak/projects/npm/firedev/tmp-environment.json
  tnp
  [tnp][tmp-environment] PATH EXISIT: /Users/dfilipiak/projects/npm/tnp/dist/tmp-environment.json
  [tnp][tmp-environment] PATH EXISIT: /Users/dfilipiak/projects/npm/tnp/tmp-environment.json
  [tnp][tmp-environment] PATH NOT EXISIT: /Users/dfilipiak/projects/npm/tmp-environment.json
     */
    var configFileName_1 = 'tmp-environment.json';
    var possiblePathes = [
        tnp_core_1.path.join(tnp_core_2.crossPlatformPath(__dirname), configFileName_1),
        tnp_core_1.path.join(tnp_core_2.crossPlatformPath(__dirname), "../" + configFileName_1),
        tnp_core_1.path.join(tnp_core_2.crossPlatformPath(__dirname), "../../" + configFileName_1),
    ];
    possiblePathes.map(function (p) { return tnp_core_1.path.resolve(p); })
        .filter(function (p) {
        return p.search(frameworkName_1 + "/" + configFileName_1) !== -1;
    })
        .sort(function (a, b) {
        // ASC  -> a.length - b.length
        // DESC -> b.length - a.length
        return a.length - b.length;
    });
    var newENV_1 = {};
    possiblePathes.find(function (envPath) {
        if (tnp_core_2.fse.existsSync(envPath)) {
            try {
                newENV_1 = tnp_core_2.fse.readJSONSync(envPath);
                console.log("[tnp][tmp-environment] accepted path: " + envPath);
                return true;
            }
            catch (er) {
                console.warn("[tnp][tmp-environment] not able to read: " + envPath);
            }
            console.info("[tnp][tmp-environment] PATH EXISIT: " + envPath);
        }
        else {
            console.warn("[tnp][tmp-environment] PATH NOT EXISIT: " + envPath);
        }
        return false;
    });
    global['ENV'] = newENV_1;
}
if (Object.keys(global['ENV']).length === 0) {
    console.warn("[tnp][tmp-environment] ENVIRONMENT CONFIG IS NOT DEFINED/EMPTY");
}
// console.log(`DOMAIN: ${ENV.domain}`)
// console.log(`DOMAIN: ${ENV.domain}`)
// process.exit(0)
//#region imports
var tnp_core_3 = require("tnp-core");
var tnp_config_2 = require("tnp-config");
var index_1 = require("./scripts/index");
var tnp_helpers_1 = require("tnp-helpers");
var chalk_1 = require("chalk");
var project_1 = require("./project");
// import { Ora } from 'ora';
// import { ConsoleUi } from './console-ui';
var tnp_db_1 = require("tnp-db");
var tnp_db_2 = require("tnp-db");
var incremental_compiler_1 = require("incremental-compiler");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#endregion
//#region init incremental compiler
incremental_compiler_1.IncCompiler.init(function (asyncEvents) { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    return [2 /*return*/];
}); }); }, {
    error: tnp_helpers_1.Helpers.error,
    log: tnp_helpers_1.Helpers.log,
    info: tnp_helpers_1.Helpers.info,
    warn: tnp_helpers_1.Helpers.warn
});
//#endregion
var SPECIAL_ARGS = [
    '--copyto',
    '--copyTo'
];
function handleSpecialArgs(argsv) {
    var tmpArgsv = tnp_core_3._.cloneDeep(argsv);
    var startSarchFromIndex;
    var _loop_1 = function () {
        if (tnp_core_3._.isNumber(startSarchFromIndex) && startSarchFromIndex >= tmpArgsv.length) {
            return "break";
        }
        rebuildStructure = false;
        var indexRebuild;
        tmpArgsv.find(function (a, i) {
            if (tnp_core_3._.isNumber(startSarchFromIndex) && i < startSarchFromIndex) {
                return false;
            }
            if (SPECIAL_ARGS.includes(a)) {
                rebuildStructure = true;
                indexRebuild = i;
                return true;
            }
            return false;
        });
        if (rebuildStructure) {
            var newArgs_1 = tmpArgsv.slice(0, indexRebuild);
            var cmd_1 = tmpArgsv[indexRebuild];
            var firstArgs = tmpArgsv[indexRebuild + 1];
            newArgs_1.push(cmd_1);
            newArgs_1.push(firstArgs);
            var endIndex_1;
            tmpArgsv.find(function (a, i) {
                if ((i - 2) >= indexRebuild) {
                    if (a.startsWith('-')) {
                        endIndex_1 = i;
                        return true;
                    }
                    newArgs_1.push(cmd_1);
                    newArgs_1.push(a);
                }
                return false;
            });
            var lenBefore = newArgs_1.length;
            if (tnp_core_3._.isNumber(endIndex_1)) {
                newArgs_1 = tslib_1.__spreadArrays(newArgs_1, tmpArgsv.slice(endIndex_1));
            }
            startSarchFromIndex = lenBefore;
            tmpArgsv = newArgs_1;
        }
    };
    var rebuildStructure;
    do {
        var state_1 = _loop_1();
        if (state_1 === "break")
            break;
    } while (rebuildStructure);
    return tmpArgsv;
}
exports.handleSpecialArgs = handleSpecialArgs;
function start(argsv, frameworkName, mode) {
    if (frameworkName === void 0) { frameworkName = 'tnp'; }
    if (mode === void 0) { mode = 'dist'; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var lastCmds, arg, db, recognized, functionsToCHeck, files, _loop_2, index, state_2, p;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tnp_helpers_1.Helpers.log("in start, mode: \"" + mode + "\"");
                    tnp_config_2.config.frameworkName = frameworkName;
                    argsv = handleSpecialArgs(argsv);
                    argsv = argsv.map(function (arg, i) {
                        var biggerRep = tnp_config_2.config.argsReplacements[arg];
                        if (biggerRep && arg[i - 1] && !arg[i - 1].startsWith('-')) {
                            return biggerRep;
                        }
                        return arg;
                    });
                    tnp_helpers_1.Helpers.log("[start] accesing db..please wait");
                    tnp_helpers_1.Helpers.log("[start] instance access granted");
                    lastCmds = tnp_db_1.CLI_FUNCTIONS.map(function (f) { return tnp_helpers_1.Helpers.cliTool.simplifiedCmd(typescript_class_helpers_1.CLASS.getName(f)); });
                    arg = tnp_helpers_1.Helpers.cliTool.simplifiedCmd(argsv[2]);
                    tnp_helpers_1.Helpers.log("lastCmds: " + lastCmds);
                    tnp_helpers_1.Helpers.log("args=" + argsv.join(',') + " , argsv.length=" + argsv.length);
                    tnp_helpers_1.Helpers.log("Helpers.cliTool.simplifiedCmd(argsv[2]) \"" + tnp_helpers_1.Helpers.cliTool.simplifiedCmd(argsv[2]) + "\" ");
                    if (!lastCmds.includes(arg)) return [3 /*break*/, 1];
                    tnp_helpers_1.Helpers.log("DO NOTHIGN");
                    return [3 /*break*/, 4];
                case 1: return [4 /*yield*/, tnp_db_2.TnpDB.Instance()];
                case 2:
                    db = _a.sent();
                    tnp_helpers_1.Helpers.log('[db] staring setting command...');
                    return [4 /*yield*/, db.setCommand(argsv.join(' '))];
                case 3:
                    _a.sent();
                    tnp_helpers_1.Helpers.log('[db] finish setting command');
                    _a.label = 4;
                case 4:
                    recognized = false;
                    functionsToCHeck = [];
                    files = index_1.default;
                    tnp_helpers_1.Helpers.log('checking commands... please wait');
                    _loop_2 = function (index) {
                        var breakLoop = false;
                        tnp_helpers_1.Helpers.log("check function command");
                        var file = files[index];
                        var defaultObjectFunctionsOrHelpString = file; //require(path.resolve(file)).default;
                        if (tnp_core_3._.isObject(defaultObjectFunctionsOrHelpString)) {
                            Object.keys(defaultObjectFunctionsOrHelpString).map(function (key) {
                                var keyNoUnderscore = key.replace(/(\_|\$)/g, '');
                                if (!defaultObjectFunctionsOrHelpString[keyNoUnderscore]) {
                                    defaultObjectFunctionsOrHelpString[keyNoUnderscore] = defaultObjectFunctionsOrHelpString[key];
                                }
                            });
                            for (var objectKey in defaultObjectFunctionsOrHelpString) {
                                if (defaultObjectFunctionsOrHelpString.hasOwnProperty(objectKey)) {
                                    var v = defaultObjectFunctionsOrHelpString[objectKey];
                                    if (recognized) {
                                        breakLoop = true;
                                        break;
                                    }
                                    if (!tnp_core_3._.isString(v)) {
                                        var vFn = (Array.isArray(v) && v.length >= 1 ? v[0] : v);
                                        var vFnName = typescript_class_helpers_1.CLASS.getName(vFn);
                                        functionsToCHeck.push(vFn);
                                        if (tnp_core_3._.isFunction(vFn)) {
                                            var check = tnp_helpers_1.Helpers.cliTool.match(vFnName, argsv);
                                            if (check.isMatch) {
                                                recognized = true;
                                                // spinner && spinner.stop()
                                                // Helpers.log('FNNAME',vFn.name)
                                                // process.exit(0)
                                                tnp_helpers_1.Helpers.log('--- recognized command ---' + typescript_class_helpers_1.CLASS.getName(vFn));
                                                vFn.apply(null, [globalArgumentsParser(check.restOfArgs)]);
                                                breakLoop = true;
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (breakLoop) {
                            return "break";
                        }
                    };
                    for (index = 0; index < files.length; index++) {
                        state_2 = _loop_2(index);
                        if (state_2 === "break")
                            break;
                    }
                    // Helpers.log(' loop eneded ')
                    // spinner && spinner.stop()
                    if (recognized) {
                        // Helpers.log("RECOGNIZED !!")
                        process.stdin.resume();
                    }
                    else {
                        // Helpers.log("NOT RECOGNIZED !!")
                        if (Array.isArray(argsv) && argsv.length == 3) {
                            tnp_helpers_1.Helpers.error("\n" + chalk_1.default.red('Not recognized command') + ": " + chalk_1.default.bold(argsv[2]) + "\n", false, true);
                        }
                        else if (Array.isArray(argsv) && argsv.length >= 3) {
                            tnp_helpers_1.Helpers.error("\n" + chalk_1.default.red('Not recognized arguments:') + " " + chalk_1.default.bold(argsv.slice(2).join(' ')) + "\n", false, true);
                        }
                        else {
                            p = void 0;
                            if (p) {
                                // TODO console ui
                                // const ui = new ConsoleUi(p, db);
                                // try {
                                //   await ui.init(functions)
                                // } catch (e) {
                                //   // Helpers.log(e)
                                //   process.exit(1)
                                // }
                            }
                            else {
                                tnp_helpers_1.Helpers.error("\n" + chalk_1.default.cyan('Please use help:') + " " + chalk_1.default.bold('tnp run help') + "\n", false, true);
                            }
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.start = start;
//#region remove non interactive mode args
function removeArg(arg, argsv) {
    argsv = argsv.filter(function (f, i) {
        var regexString = "^\\-\\-(" + arg + "$|" + arg + "\\=)+";
        // Helpers.log(regexString)
        if ((new RegExp(regexString)).test(f)) {
            // Helpers.log(`true: ${f}`)
            var nextParam = argsv[i + 1];
            if (nextParam && !nextParam.startsWith("--")) {
                argsv[i + 1] = '';
            }
            return false;
        }
        else {
            // Helpers.log(`false: ${f}`)
        }
        return true;
    }).filter(function (f) { return !!f; });
    return argsv;
}
exports.removeArg = removeArg;
//#endregion
//#region parse global arguments
function globalArgumentsParser(argsv) {
    tnp_helpers_1.Helpers.log("Fixing global arguments started...");
    var options = require('minimist')(argsv);
    var toCheck = {
        'tnpNonInteractive': void 0,
        'findNearestProject': void 0,
        'findNearestProjectWithGitRoot': void 0,
        'findNearestProjectType': void 0,
        'findNearestProjectTypeWithGitRoot': void 0,
        'cwd': void 0
    };
    Object.keys(toCheck).forEach(function (key) {
        toCheck[key] = options[key];
    });
    options = tnp_core_3._.cloneDeep(toCheck);
    var tnpNonInteractive = options.tnpNonInteractive, findNearestProject = options.findNearestProject, findNearestProjectWithGitRoot = options.findNearestProjectWithGitRoot, findNearestProjectType = options.findNearestProjectType, findNearestProjectTypeWithGitRoot = options.findNearestProjectTypeWithGitRoot, cwd = options.cwd;
    Object
        .keys(options)
        .filter(function (key) { return key.startsWith('tnp'); })
        .forEach(function (key) {
        options[key] = !!options[key];
        global[key] = options[key];
        // Helpers.log(`[start.backend] assigned to global: ${key}:${global[key]}`)
    });
    if (global.tnpNoColorsMode) {
        chalk_1.default.level = 0;
    }
    var cwdFromArgs = cwd;
    var findProjectWithGitRoot = !!findNearestProjectWithGitRoot ||
        !!findNearestProjectTypeWithGitRoot;
    if (tnp_core_3._.isBoolean(findNearestProjectType)) {
        tnp_helpers_1.Helpers.error("argument --findNearestProjectType needs to be library type:\n " + tnp_config_1.LibTypeArr.join(', '), false, true);
    }
    if (tnp_core_3._.isBoolean(findNearestProjectTypeWithGitRoot)) {
        tnp_helpers_1.Helpers.error("argument --findNearestProjectTypeWithGitRoot needs to be library type:\n " + tnp_config_1.LibTypeArr.join(', '), false, true);
    }
    if (!!findNearestProjectWithGitRoot) {
        findNearestProject = findNearestProjectWithGitRoot;
    }
    if (tnp_core_3._.isString(findNearestProjectTypeWithGitRoot)) {
        findNearestProjectType = findNearestProjectTypeWithGitRoot;
    }
    if (tnp_core_3._.isString(cwdFromArgs)) {
        if (findNearestProject || tnp_core_3._.isString(findNearestProjectType)) {
            // Helpers.log('look for nearest')
            var nearest = project_1.Project.nearestTo(cwdFromArgs, {
                type: findNearestProjectType,
                findGitRoot: findProjectWithGitRoot,
            });
            if (!nearest) {
                tnp_helpers_1.Helpers.error("Not able to find neerest project for arguments: [\n " + argsv.join(',\n') + "\n]", false, true);
            }
        }
        if (nearest) {
            cwdFromArgs = nearest.location;
        }
        if (tnp_core_2.fse.existsSync(cwdFromArgs) && !tnp_core_2.fse.lstatSync(cwdFromArgs).isDirectory()) {
            cwdFromArgs = tnp_core_1.path.dirname(cwdFromArgs);
        }
        if (tnp_core_2.fse.existsSync(cwdFromArgs) && tnp_core_2.fse.lstatSync(cwdFromArgs).isDirectory()) {
            process.chdir(cwdFromArgs);
        }
        else {
            tnp_helpers_1.Helpers.error("Incorrect --cwd argument for args: [\n " + argsv.join(',\n') + "\n]", false, true);
        }
    }
    argsv = removeArg('findNearestProjectType', argsv);
    // process.exit(0)
    Object.keys(toCheck).forEach(function (argName) {
        argsv = removeArg(argName, argsv);
    });
    // Object
    //   .keys(global)
    //   .filter(key => key.startsWith('tnp'))
    //   .forEach(key => {
    //     Helpers.log(`globa.${key} = ${global[key]}`)
    //   })
    // Helpers.log('after remove', argsv)
    // process.exit(0)
    tnp_helpers_1.Helpers.log("Fixing global arguments finish.");
    return argsv.join(' ');
}
exports.globalArgumentsParser = globalArgumentsParser;
//#endregion
//# sourceMappingURL=start.backend.js.map