import { ModelDataConfig } from 'morphi';
import { Project } from 'tnp-helpers';
import { PROCESS } from '../process/PROCESS';
import { ConfigModels } from 'tnp-config';
import type { ProjectController } from './ProjectController';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
export interface IPROJECT extends Project {
    procStaticBuild?: PROCESS;
    procWatchBuild?: PROCESS;
    procInitEnv?: PROCESS;
    procServeStatic?: PROCESS;
    procClear?: PROCESS;
    selectedEnv?: string;
}
export declare class PROJECT extends Project {
    static readonly ctrl: ProjectController;
    readonly ctrl: ProjectController;
    readonly browser: PROJECT;
    procStaticBuild?: PROCESS;
    procWatchBuild?: PROCESS;
    procInitEnv?: PROCESS;
    procServeStatic?: PROCESS;
    procClear?: PROCESS;
    selectedTabChanged: BehaviorSubject<number>;
    readonly envionments: ConfigModels.EnvironmentName[];
    private _selectedIndex;
    static getAllProjects(): Promise<any[]>;
    static getAll(config?: ModelDataConfig): Promise<PROCESS<unknown>[] | PROJECT[]>;
    static getAllForMenu(): Promise<any>;
    static getByLocation(location: string, pconfig?: ModelDataConfig): Promise<PROJECT>;
    private static createFrom;
    private static getProjectEnv;
    set selectedIndex(v: number);
    get selectedIndex(): number;
    get selectedEnv(): string;
    set selectedEnv(v: string);
    namesFrom(): ConfigModels.EnvironmentName[];
    updateEndGetEnvironments(): Promise<void>;
    updaetAndGetProceses(): Promise<void>;
}
