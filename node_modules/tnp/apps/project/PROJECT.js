"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region isomorphic
var tnp_core_1 = require("tnp-core");
var morphi_1 = require("morphi");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var PROCESS_1 = require("../process/PROCESS");
var ng2_logger_1 = require("ng2-logger");
var tnp_config_1 = require("tnp-config");
//#endregion
//#region @backend
var tnp_db_1 = require("tnp-db");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
//#endregion
var BehaviorSubject_1 = require("rxjs/BehaviorSubject");
var log = ng2_logger_1.Log.create('PROJECT');
var PROJECT = /** @class */ (function (_super) {
    tslib_1.__extends(PROJECT, _super);
    function PROJECT() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectedTabChanged = new BehaviorSubject_1.BehaviorSubject(0);
        _this.envionments = [];
        _this._selectedIndex = 0;
        return _this;
    }
    PROJECT_1 = PROJECT;
    PROJECT.getAllProjects = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, projects, mapped, index, p;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.getProjects()];
                    case 2:
                        projects = _a.sent();
                        mapped = projects
                            .filter(function (p) { return !!p.project; })
                            .map(function (p) {
                            var res = p.project;
                            return res;
                        });
                        index = 0;
                        _a.label = 3;
                    case 3:
                        if (!(index < mapped.length)) return [3 /*break*/, 6];
                        p = mapped[index];
                        return [4 /*yield*/, addProcessesToModel(p)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        index++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/, mapped];
                }
            });
        });
    };
    PROJECT.getAll = function (config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!morphi_1.Morphi.isNode) return [3 /*break*/, 2];
                        return [4 /*yield*/, PROCESS_1.PROCESS.db.find()];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2: return [4 /*yield*/, this.ctrl.getAll(config).received];
                    case 3:
                        data = _a.sent();
                        return [2 /*return*/, data.body.json];
                }
            });
        });
    };
    PROJECT.getAllForMenu = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data_1, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.ctrl.getAllStandalone().received.cache) {
                            data_1 = this.ctrl.getAllStandalone().received.cache.response;
                            return [2 /*return*/, data_1.body.json];
                        }
                        return [4 /*yield*/, this.ctrl.getAllStandalone().received];
                    case 1:
                        data = _a.sent();
                        data.cache.store();
                        return [2 /*return*/, data.body.json];
                }
            });
        });
    };
    PROJECT.getByLocation = function (location, pconfig) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res, data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!morphi_1.Morphi.isNode) return [3 /*break*/, 2];
                        res = tnp_helpers_1.Project.From(decodeURIComponent(location));
                        return [4 /*yield*/, addProcessesToModel(res)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, res];
                    case 2: return [4 /*yield*/, this.ctrl.getByLocation(location).received];
                    case 3:
                        data = _a.sent();
                        return [2 /*return*/, data.body.json];
                }
            });
        });
    };
    PROJECT.createFrom = function (obj) {
        var classFn = typescript_class_helpers_1.CLASS.getFromObject(obj);
        if (!classFn) {
            return obj;
        }
        // @QUICK_FIX this is how to extend unknow class with new methods
        Object.keys(PROJECT_1.prototype).forEach(function (key) {
            console.log(key);
            if (typeof classFn.prototype[key] === 'undefined') {
                classFn.prototype[key] = PROJECT_1.prototype[key];
            }
        });
        return obj;
    };
    PROJECT.getProjectEnv = function (project) {
        var wasNulled = false;
        var result;
        if (project.env && project.env['project'] === null) {
            wasNulled = true;
            project.env['project'] = project;
        }
        result = project.env && project.env.config && project.env.config.name;
        if (wasNulled) {
            project.env['project'] = null;
        }
        return result;
    };
    Object.defineProperty(PROJECT.prototype, "selectedIndex", {
        get: function () {
            return this._selectedIndex;
        },
        set: function (v) {
            this._selectedIndex = v;
            this.selectedTabChanged.next(v);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROJECT.prototype, "selectedEnv", {
        get: function () {
            return this.browser.selectedEnv;
        },
        set: function (v) {
            this.browser.selectedEnv = v;
        },
        enumerable: true,
        configurable: true
    });
    PROJECT.prototype.namesFrom = function () {
        //#region @backendFunc
        var patter = this.location + "/" + tnp_config_1.config.file.environment + ".*";
        var names = tnp_core_2.glob
            .sync(patter)
            .filter(function (f) { return f.split('.').pop() === 'js'; })
            .map(function (f) { return tnp_core_3.path
            .basename(f)
            .replace(tnp_config_1.config.file.environment + ".", '')
            .replace(/\.?js$/, ''); })
            .map(function (f) { return f.trim() === '' ? 'local' : f; });
        return names;
        //#endregion
    };
    PROJECT.prototype.updateEndGetEnvironments = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.ctrl.getEnvironments(this.location).received];
                    case 1:
                        data = _a.sent();
                        // @ts-ignore
                        this.envionments = data.body.json.filter(function (f) { return f !== 'local'; });
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    PROJECT.prototype.updaetAndGetProceses = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ctrl.getByLocation(this.location).received];
                    case 1:
                        data = _a.sent();
                        Object
                            .keys(data.body.json)
                            .forEach(function (key) {
                            if (key.startsWith('proc')) {
                                // log.i('update proc', key)
                                _this[key] = data.body.json[key];
                            }
                        });
                        log.i('Update project', this);
                        return [2 /*return*/];
                }
            });
        });
    };
    var PROJECT_1;
    PROJECT = PROJECT_1 = tslib_1.__decorate([
        morphi_1.Morphi.Entity({
            className: 'PROJECT',
            uniqueKeyProp: 'location',
            mapping: {
                procClear: 'PROCESS',
                procInitEnv: 'PROCESS',
                procServeStatic: 'PROCESS',
                procStaticBuild: 'PROCESS',
                procWatchBuild: 'PROCESS',
            },
            additionalMapping: {
                'browser.procClear': 'PROCESS',
                'browser.procInitEnv': 'PROCESS',
                'browser.procServeStatic': 'PROCESS',
                'browser.procStaticBuild': 'PROCESS',
                'browser.procWatchBuild': 'PROCESS',
            },
            //#region @backend
            createTable: false,
            browserTransformFn: function (entity) {
                // entity = PROJECT.createFrom(entity);
                // const project = PROJECT.createFrom(entity);
                entity.browser.selectedEnv = PROJECT_1.getProjectEnv(entity);
                return entity;
            }
            //#endregion
        })
    ], PROJECT);
    return PROJECT;
}(tnp_helpers_1.Project));
exports.PROJECT = PROJECT;
//#region @backend
function addProcessesToModel(project) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    if (!project) {
                        return [2 /*return*/]; // TODO QUICK_FIX
                    }
                    return [4 /*yield*/, assignProc(project, db, 'procStaticBuild', {
                            // cmd: 'tnp build:dist',
                            cmd: 'tnp staticbuild --env={env} --tnpShowProgress',
                            cwd: project.location,
                            async: true,
                            name: "Static Build of project " + project.name
                        })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, assignProc(project, db, 'procWatchBuild', {
                            // cmd: 'tnp build:dist:watch',
                            cmd: 'tnp show:loop:messages --max 6 --tnpShowProgress',
                            cwd: project.location,
                            async: true,
                            name: "Watch build of project " + project.name
                        })];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, assignProc(project, db, 'procServeStatic', {
                            cmd: 'tnp show:loop:messages --max 6 --tnpShowProgress',
                            // cmd: 'tnp start',
                            cwd: project.location,
                            async: true,
                            name: "Server staticlyu project " + project.name
                        })];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, assignProc(project, db, 'procInitEnv', {
                            cmd: 'tnp show:loop:messages --max 6 --tnpShowProgress',
                            // cmd: 'tnp init --env=%s',
                            cwd: project.location,
                            async: false,
                            name: "Init environment of project " + project.name
                        })];
                case 5:
                    _a.sent();
                    return [4 /*yield*/, assignProc(project, db, 'procClear', {
                            cmd: 'tnp show:loop:messages --max 6 --tnpShowProgress',
                            // cmd: 'tnp clear:%s',
                            cwd: project.location,
                            async: false,
                            name: "Clear project " + project.name
                        })];
                case 6:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//#endregion
//#region @backend
function assignProc(p, db, property, processOptions) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var processInDB, relation1TO1entityId, metaInfo;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (p.modelDataConfig && tnp_core_1._.isArray(p.modelDataConfig.include) &&
                        p.modelDataConfig.include.length > 0 &&
                        !p.modelDataConfig.include.includes(property)) {
                        return [2 /*return*/];
                    }
                    metaInfo = {
                        className: 'PROJECT',
                        entityId: p.location,
                        entityProperty: property,
                        pid: void 0,
                        cmd: void 0,
                        cwd: void 0
                    };
                    return [4 /*yield*/, db.boundActions(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                return [2 /*return*/, { metaInfo: metaInfo, relation1TO1entityId: relation1TO1entityId }];
                            });
                        }); }, function (proc) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var toSave;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        toSave = { metaInfo: metaInfo, relation1TO1entityId: relation1TO1entityId };
                                        relation1TO1entityId = proc.relation1TO1entityId;
                                        if (!tnp_core_1._.isNumber(relation1TO1entityId)) return [3 /*break*/, 2];
                                        return [4 /*yield*/, PROCESS_1.PROCESS.db.findOne({ id: relation1TO1entityId })];
                                    case 1:
                                        processInDB = _a.sent();
                                        _a.label = 2;
                                    case 2:
                                        if (!processInDB) return [3 /*break*/, 3];
                                        toSave = void 0;
                                        return [3 /*break*/, 5];
                                    case 3:
                                        processInDB = new PROCESS_1.PROCESS(processOptions);
                                        return [4 /*yield*/, PROCESS_1.PROCESS.db.save(processInDB)];
                                    case 4:
                                        processInDB = _a.sent();
                                        relation1TO1entityId = processInDB.id;
                                        toSave.relation1TO1entityId = relation1TO1entityId;
                                        _a.label = 5;
                                    case 5:
                                        p[property] = processInDB;
                                        return [2 /*return*/, toSave];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//#endregion
//# sourceMappingURL=PROJECT.js.map