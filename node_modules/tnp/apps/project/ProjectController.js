"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var morphi_1 = require("morphi");
var PROJECT_1 = require("./PROJECT");
//#endregion
var ProjectController = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectController, _super);
    function ProjectController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectController.prototype.getAll = function (configCrud) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PROJECT_1.PROJECT.getAllProjects()];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, function () { return res; }];
                }
            });
        }); };
        //#endregion
    };
    ProjectController.prototype.getAllStandalone = function () {
        var _this = this;
        //#region @backendFunc
        return function (req, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var menuPorojects;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        req.headers[morphi_1.Morphi.MDC_KEY] = morphi_1.MDC.create({ include: ['name'] }).toString();
                        return [4 /*yield*/, PROJECT_1.PROJECT.getAllProjects()];
                    case 1:
                        menuPorojects = _a.sent();
                        return [2 /*return*/, function () { return menuPorojects.filter(function (f) { return !f || !f.isGenerated; }); }];
                }
            });
        }); };
        //#endregion
    };
    ProjectController.prototype.getByLocation = function (location) {
        var config = morphi_1.MDC.create({
            exclude: ['children', 'parent']
        });
        return this._getByLocation(encodeURIComponent(location), config);
    };
    ProjectController.prototype._getByLocation = function (location, configCrud) {
        var _this = this;
        //#region @backendFunc
        return function (req) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        req.headers[morphi_1.Morphi.MDC_KEY] = configCrud.toString();
                        return [4 /*yield*/, PROJECT_1.PROJECT.getByLocation(decodeURIComponent(location))];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, function () { return res; }];
                }
            });
        }); };
        //#endregion
    };
    ProjectController.prototype.getEnvironments = function (location) {
        var _this = this;
        //#region @backendFunc
        return function (req) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var proj;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        location = decodeURIComponent(location);
                        return [4 /*yield*/, PROJECT_1.PROJECT.getByLocation(location)];
                    case 1:
                        proj = _a.sent();
                        return [2 /*return*/, !proj ? [] : proj.namesFrom()];
                }
            });
        }); };
        //#endregion
    };
    //#region @backend
    ProjectController.prototype.initExampleDbData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // console.log('Don not init this! OK ')
                // const db = await TnpDB.Instance();
                // await db.resetProcessess() // TODO WHAT THE FuCK
                console.log('Ininting projects !');
                return [2 /*return*/];
            });
        });
    };
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET(),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Header(morphi_1.Morphi.MDC_KEY)),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [morphi_1.Morphi.CRUD.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProjectController.prototype, "getAll", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", Object)
    ], ProjectController.prototype, "getAllStandalone", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET('/location/:location'),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Path('location')),
        tslib_1.__param(1, morphi_1.Morphi.Http.Param.Header(morphi_1.Morphi.MDC_KEY)),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [String, morphi_1.Morphi.CRUD.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProjectController.prototype, "_getByLocation", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET('/environments/:location'),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Path('location')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [String]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProjectController.prototype, "getEnvironments", null);
    ProjectController = tslib_1.__decorate([
        morphi_1.Morphi.Controller({
            className: 'ProjectController',
            entity: PROJECT_1.PROJECT
        })
    ], ProjectController);
    return ProjectController;
}(morphi_1.Morphi.Base.Controller));
exports.ProjectController = ProjectController;
//# sourceMappingURL=ProjectController.js.map