"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var morphi_1 = require("morphi");
var core_1 = require("@angular/core");
var tnp_core_1 = require("tnp-core");
// formly
var PROCESS_1 = require("../PROCESS");
var tnp_helpers_1 = require("tnp-helpers");
// logger
var ng2_logger_1 = require("ng2-logger");
var rxjs_1 = require("rxjs");
var tnp_ui_1 = require("tnp-ui");
var ngx_store_1 = require("ngx-store");
//#endregion
var log = ng2_logger_1.Log.create('process loger'
// , Level.__NOTHING
);
var DualComponentControllerExtended = /** @class */ (function (_super) {
    tslib_1.__extends(DualComponentControllerExtended, _super);
    function DualComponentControllerExtended() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DualComponentControllerExtended.prototype, "modelDataConfig", {
        get: function () {
            return this.getValTemplateOptions('modelDataConfig');
        },
        enumerable: true,
        configurable: true
    });
    return DualComponentControllerExtended;
}(tnp_helpers_1.DualComponentController));
exports.DualComponentControllerExtended = DualComponentControllerExtended;
var ProcessLoggerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ProcessLoggerComponent, _super);
    //#endregion
    function ProcessLoggerComponent(changeDetectionRef) {
        var _this = _super.call(this) || this;
        _this.changeDetectionRef = changeDetectionRef;
        _this.DualComponentController = DualComponentControllerExtended;
        _this.changes = new rxjs_1.BehaviorSubject(void 0);
        _this.actionClicked = false;
        _this.size = 'normal';
        //#region getters
        _this.isOpen = false;
        return _this;
    }
    ProcessLoggerComponent.prototype.onLongPressEnd = function () {
        var _this = this;
        log.d('long presss ended');
        this.isOpen = true;
        setTimeout(function () {
            log.d("this.popup", _this.popup);
            if (_this.popup) {
                _this.popup.reset();
            }
        });
    };
    Object.defineProperty(ProcessLoggerComponent.prototype, "isOpenOnStart", {
        get: function () {
            if (tnp_core_1._.isNil(this.id)) {
                return;
            }
            return this.openOnStartById[this.id];
        },
        set: function (v) {
            if (tnp_core_1._.isNil(this.id)) {
                return;
            }
            this.openOnStartById = this.openOnStartById;
            this.openOnStartById[this.id] = v;
            this.openOnStartById.save();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "isExpanded", {
        get: function () {
            return this.expandedById[this.id];
        },
        set: function (v) {
            if (this.id) {
                this.expandedById = this.expandedById;
                this.expandedById[this.id] = v;
                this.expandedById.save();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "process", {
        get: function () {
            return this.ctrl && this.ctrl.value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "cmd", {
        get: function () {
            var _a;
            return (_a = this.process) === null || _a === void 0 ? void 0 : _a.cmd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "title", {
        get: function () {
            return this.process && this.process.name + " - process ID: " + this.process.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "color", {
        get: function () {
            if (!this.process) {
                return;
            }
            if (this.process.progress && this.process.progress.value === 100
                || this.process.state === 'exitedWithSuccess') {
                return 'green';
            }
            if (this.process.progress && this.process.progress.value === 100) {
                return 'green';
            }
            if (this.process.state === 'running' ||
                this.process.state === 'inProgressOfStarting' ||
                this.process.state === 'inProgressOfStopping') {
                return 'blue';
            }
            if (this.process.state === 'exitedWithError') {
                return 'red';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "icon", {
        get: function () {
            if (!this.process) {
                return;
            }
            if (this.process.state === 'inProgressOfStarting' ||
                this.process.state === 'inProgressOfStopping') {
                return 'waiting';
            }
            if (this.process.state === 'notStarted') {
                return 'play_arrow';
            }
            if (this.process.state === 'running') {
                return 'stop';
            }
            return 'replay';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "state", {
        get: function () {
            if (!this.process || this.process.state === 'notStarted') {
                return 'start';
            }
            if (this.process.state === 'running') {
                return 'stop';
            }
            return 'restart';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "progress", {
        get: function () {
            if (!this.process) {
                return '...loading process';
            }
            if (!this.process.progress) {
                return '-';
            }
            if (this.process.isSync) {
                return this.process.progress.msg;
            }
            if (this.process.isInLoadingState) {
                return '...in loading state';
            }
            return this.process.progress.value + '%';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProcessLoggerComponent.prototype, "id", {
        get: function () {
            return !!this.process ? "process" + (this.process && this.process.id) : void 0;
        },
        enumerable: true,
        configurable: true
    });
    //#region angular hooks
    ProcessLoggerComponent.prototype.ngOnInit = function () {
        this.expandedById = this.expandedById ? this.expandedById : {};
        this.openOnStartById = this.openOnStartById ? this.openOnStartById : {};
        _super.prototype.ngOnInit.call(this);
        if (tnp_core_1._.isNil(this.expandedById[this.id])) {
            this.isExpanded = true;
        }
        if (tnp_core_1._.isNil(this.openOnStartById[this.id])) {
            this.isOpenOnStart = false;
        }
        this.subscribe();
        if (this.isOpenOnStart) {
            this.isOpen = true;
        }
    };
    ProcessLoggerComponent.prototype.ngAfterViewInit = function () {
    };
    ProcessLoggerComponent.prototype.ngOnDestroy = function () {
        if (this.model instanceof PROCESS_1.PROCESS) {
            this.model.unsubscribeRealtimeUpdates();
        }
    };
    ProcessLoggerComponent.prototype.onChange = function (v) {
        this.formControl.setValue(v);
        console.log(this.model);
    };
    //#endregion
    ProcessLoggerComponent.prototype.onPin = function (v) {
        this.isOpenOnStart = v;
    };
    ProcessLoggerComponent.prototype.openOrClose = function () {
        this.isOpen = !this.isOpen;
    };
    ProcessLoggerComponent.prototype.action = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.process.state === 'running')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.process.stop()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.process.start()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        this.changes.next(void 0);
                        return [2 /*return*/];
                }
            });
        });
    };
    ProcessLoggerComponent.prototype.subscribe = function () {
        var _this = this;
        if (this.process && !this.process.isSync) {
            if (!(this.process instanceof PROCESS_1.PROCESS)) {
                console.error('[processLogger] Process in not instance of PROCESS');
                return;
            }
            // log.d(`SUBSCRIBE ENTITY: ${this.process.id}`);
            this.process.subscribeRealtimeUpdates({
                modelDataConfig: this.config,
                callback: function () {
                    log.d("update callback ");
                    _this.changes.next(void 0);
                    _this.changeDetectionRef.detectChanges();
                }
            });
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", morphi_1.ModelDataConfig)
    ], ProcessLoggerComponent.prototype, "config", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], ProcessLoggerComponent.prototype, "size", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('popup'),
        tslib_1.__metadata("design:type", tnp_ui_1.DraggablePopupComponent)
    ], ProcessLoggerComponent.prototype, "popup", void 0);
    tslib_1.__decorate([
        ngx_store_1.LocalStorage(),
        tslib_1.__metadata("design:type", Object)
    ], ProcessLoggerComponent.prototype, "expandedById", void 0);
    tslib_1.__decorate([
        ngx_store_1.LocalStorage(),
        tslib_1.__metadata("design:type", Object)
    ], ProcessLoggerComponent.prototype, "openOnStartById", void 0);
    ProcessLoggerComponent = tslib_1.__decorate([
        morphi_1.Morphi.Formly.RegisterComponentForEntity(PROCESS_1.PROCESS),
        core_1.Component({
            selector: 'app-process-logger',
            templateUrl: './process-logger.component.html',
            styleUrls: ['./process-logger.component.scss'],
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ChangeDetectorRef])
    ], ProcessLoggerComponent);
    return ProcessLoggerComponent;
}(tnp_helpers_1.BaseFormlyComponent));
exports.ProcessLoggerComponent = ProcessLoggerComponent;
//# sourceMappingURL=process-logger.component.js.map