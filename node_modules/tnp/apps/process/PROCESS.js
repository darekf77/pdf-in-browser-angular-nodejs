"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// console.log('INITING PROCESS')
//#region isomorphic
var tnp_core_1 = require("tnp-core");
var tnp_models_1 = require("tnp-models");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var morphi_1 = require("morphi");
var tnp_helpers_2 = require("tnp-helpers");
//#endregion
//#region @backend
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_core_4 = require("tnp-core");
var tnp_core_5 = require("tnp-core");
var psList = require("ps-list");
//#endregion
var PROCESS_ENTITY = /** @class */ (function (_super) {
    tslib_1.__extends(PROCESS_ENTITY, _super);
    function PROCESS_ENTITY() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        //#region @backend
        //#endregion
        _this.name = undefined;
        //#region @backend
        //#endregion
        _this.id = undefined;
        //#region @backend
        //#endregion
        _this.isSync = true;
        //#region @backend
        //#endregion
        _this.cmd = undefined;
        //#region @backend
        //#endregion
        _this.cwd = undefined;
        //#region @backend
        //#endregion
        _this.pid = undefined;
        //#region @backend
        //#endregion
        _this.ppid = undefined;
        //#region @backend
        //#endregion
        _this.previousPid = undefined;
        return _this;
    }
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Custom('varchar', { length: 200, nullable: true }),
        tslib_1.__metadata("design:type", String)
    ], PROCESS_ENTITY.prototype, "name", void 0);
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Generated(),
        tslib_1.__metadata("design:type", Number)
    ], PROCESS_ENTITY.prototype, "id", void 0);
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Custom('boolean'),
        tslib_1.__metadata("design:type", Object)
    ], PROCESS_ENTITY.prototype, "isSync", void 0);
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Custom('varchar', { length: 500, nullable: true }),
        tslib_1.__metadata("design:type", String)
    ], PROCESS_ENTITY.prototype, "cmd", void 0);
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Custom('varchar', { length: 2000, nullable: true }),
        tslib_1.__metadata("design:type", String)
    ], PROCESS_ENTITY.prototype, "cwd", void 0);
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Custom('bigint', { nullable: true }),
        tslib_1.__metadata("design:type", Number)
    ], PROCESS_ENTITY.prototype, "pid", void 0);
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Custom('bigint', { nullable: true }),
        tslib_1.__metadata("design:type", Number)
    ], PROCESS_ENTITY.prototype, "ppid", void 0);
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Custom('bigint', { nullable: true }),
        tslib_1.__metadata("design:type", Number)
    ], PROCESS_ENTITY.prototype, "previousPid", void 0);
    return PROCESS_ENTITY;
}(morphi_1.Morphi.Base.Entity));
exports.PROCESS_ENTITY = PROCESS_ENTITY;
var PROCESS = /** @class */ (function (_super) {
    tslib_1.__extends(PROCESS, _super);
    //#endregion
    function PROCESS(options) {
        var _this = _super.call(this) || this;
        _this.browser = {};
        _this.cmdOrg = undefined;
        // private _stder: string;
        _this.tempState = null;
        //#region @backend
        _this.starting = {};
        _this.name = options && options.name;
        _this.cmd = options && options.cmd;
        _this.cwd = options && options.cwd;
        if (options && tnp_core_1._.isBoolean(options.async)) {
            _this.isSync = !options.async;
        }
        //#region @backend
        if (!_this.cwd) {
            _this.cwd = tnp_core_2.crossPlatformPath(process.cwd());
        }
        return _this;
        //#endregion
    }
    PROCESS_1 = PROCESS;
    Object.defineProperty(PROCESS.prototype, "_stder", {
        get: function () {
            return this.__stder;
        },
        set: function (v) {
            // debugger
            this.__stder = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS, "db", {
        //#endregion
        //#region @backend
        get: function () {
            var repo = this.ctrl.connection.getRepository(PROCESS_1);
            return repo;
        },
        enumerable: true,
        configurable: true
    });
    PROCESS.prototype._files = function (propertyName, surfix) {
        if (morphi_1.Morphi.IsBrowser) {
            return this.browser && this.browser[propertyName];
        }
        //#region @backend
        var p = tnp_core_2.path.join(tnp_helpers_2.Project.Tnp.location, 'tmp-processes-logs', this.id + "." + surfix + ".txt");
        if (!tnp_core_3.fse.existsSync(tnp_core_2.path.dirname(p))) {
            tnp_core_3.fse.mkdirpSync(tnp_core_2.path.dirname(p));
        }
        return p;
        //#endregion
    };
    PROCESS.prototype.__readLog = function (propertyName) {
        if (morphi_1.Morphi.IsBrowser) {
            return this.browser && this.browser[propertyName];
        }
        //#region @backend
        var p = this[propertyName + "Path"];
        if (!tnp_core_3.fse.existsSync(p)) {
            return;
        }
        return tnp_core_3.fse.readFileSync(p, 'utf8').toString();
        //#endregion
    };
    Object.defineProperty(PROCESS.prototype, "progress", {
        /**
         * Number from 0-100 or undefined
         */
        get: function () {
            if (morphi_1.Morphi.IsBrowser && tnp_core_1._.isUndefined(this._allProgressData)) {
                return this.browser && this.browser.progress;
            }
            return tnp_core_1._.last(this.allProgressData);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "isInLoadingState", {
        get: function () {
            return PROCESS_1.LOADING_STATE.includes(this.state);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "allProgressData", {
        get: function () {
            if (tnp_core_1._.isArray(this._allProgressData)) {
                return this._allProgressData;
            }
            return tnp_models_1.PROGRESS_DATA.resolveFrom(this.stdoutLog)
                .concat(tnp_models_1.PROGRESS_DATA.resolveFrom(this.stderLog));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "stder", {
        get: function () {
            var res;
            if (tnp_core_1._.isString(this._stder) && this._stder.trim() !== '') {
                res = this._stder;
            }
            else {
                res = (tnp_core_1._.isString(this.stderLog) ? this.stderLog.replace(/\[\[\[.*\]\]\]/g, '') : '');
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "stdout", {
        get: function () {
            var res;
            if (tnp_core_1._.isString(this._stdout) && this._stdout.trim() !== '') {
                res = this._stdout;
            }
            else {
                res = tnp_core_1._.isString(this.stdoutLog) ? this.stdoutLog.replace(/\[\[\[.*\]\]\]/g, '') : '';
            }
            // console.log(`stdout: "${res}"`)
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "stdoutLog", {
        get: function () {
            return this.__readLog('stdoutLog');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "stdoutLogPath", {
        get: function () {
            return this._files('stdoutLogPath', 'stdout');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "stderLog", {
        get: function () {
            return this.__readLog('stderLog');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "stderLogPath", {
        get: function () {
            return this._files('stderLogPath', 'stder');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "exitCode", {
        get: function () {
            return Number(this.__readLog('exitCode'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "exitCodePath", {
        get: function () {
            return this._files('exitCodePath', 'exitcode');
        },
        enumerable: true,
        configurable: true
    });
    PROCESS.prototype.start = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var COMMAND_TO_EXECUTE, stdout, stderr, p, data;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!morphi_1.Morphi.isNode) return [3 /*break*/, 4];
                        if (!!this.starting[this.id]) {
                            console.log('ommiting start');
                            return [2 /*return*/, this];
                        }
                        this.starting[this.id] = true;
                        setTimeout(function () {
                            _this.starting[_this.id] = false;
                        }, 1000);
                        tnp_core_4.rimraf.sync(this.stdoutLogPath);
                        tnp_core_4.rimraf.sync(this.stderLogPath);
                        tnp_core_4.rimraf.sync(this.exitCodePath);
                        COMMAND_TO_EXECUTE = this.parameters ? tnp_helpers_1.Helpers
                            .strings
                            .interpolateString(this.cmd)
                            .withParameters(this.parameters)
                            : this.cmd;
                        console.log("COMMAND_TO_EXECUTE: " + COMMAND_TO_EXECUTE);
                        if (!this.isSync) return [3 /*break*/, 1];
                        try {
                            stdout = tnp_core_5.child_process.execSync(COMMAND_TO_EXECUTE, { cwd: this.cwd });
                            tnp_core_3.fse.writeFileSync(this.exitCodePath, (0).toString());
                        }
                        catch (err) {
                            tnp_core_3.fse.writeFileSync(this.exitCodePath, (((err && tnp_core_1._.isNumber(err.status)) ? err.status : 1)).toString());
                            stderr = err.stack;
                        }
                        tnp_core_3.fse.writeFileSync(this.stdoutLogPath, !stdout ? '' : stdout);
                        tnp_core_3.fse.writeFileSync(this.stderLogPath, !stderr ? '' : stderr);
                        return [3 /*break*/, 3];
                    case 1:
                        p = tnp_helpers_1.Helpers.run(COMMAND_TO_EXECUTE, { cwd: this.cwd, output: false }).async();
                        // console.log(`PROCESS STARTED ON PID: ${p.pid}`)
                        this.pid = p.pid;
                        this.previousPid = p.pid;
                        return [4 /*yield*/, PROCESS_1.db.update(this.id, this)];
                    case 2:
                        _a.sent();
                        tnp_core_3.fse.writeFileSync(this.stdoutLogPath, '');
                        tnp_core_3.fse.writeFileSync(this.stderLogPath, '');
                        attach(p, this);
                        _a.label = 3;
                    case 3: return [2 /*return*/, this];
                    case 4:
                        //#endregion
                        this.cmdOrg = this.cmd;
                        this.tempState = 'inProgressOfStarting';
                        return [4 /*yield*/, this.ctrl.start(this.id, this.modelDataConfig, this.parameters).received];
                    case 5:
                        data = _a.sent();
                        this._allProgressData = void 0;
                        this._stder = void 0;
                        this._stdout = void 0;
                        tnp_core_1._.merge(this, data.body.json);
                        this.tempState = null;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    PROCESS.prototype.stop = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!morphi_1.Morphi.isNode) return [3 /*break*/, 2];
                        try {
                            tnp_core_5.child_process.execSync("pkill -9 -P " + this.pid);
                            console.log("Process (pid: " + this.pid + ") childs killed successfully");
                        }
                        catch (err) {
                            console.log(err);
                            console.log("Process (pid: " + this.pid + ") childs NOT KILLED " + this.pid);
                        }
                        try {
                            tnp_core_5.child_process.execSync("kill -9 " + this.pid);
                            console.log("Process (pid: " + this.pid + ") killed successfully");
                        }
                        catch (error) {
                            console.log("Process (pid: " + this.pid + ") NOT KILLED");
                        }
                        tnp_core_3.fse.writeFileSync(this.exitCodePath, 0);
                        this.pid = void 0;
                        return [4 /*yield*/, PROCESS_1.db.update(this.id, this)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this];
                    case 2:
                        //#endregion
                        this.tempState = 'inProgressOfStopping';
                        return [4 /*yield*/, this.ctrl.stop(this.id, this.modelDataConfig).received];
                    case 3:
                        data = _a.sent();
                        tnp_core_1._.merge(this, data.body.json);
                        this.tempState = null;
                        return [2 /*return*/, this];
                }
            });
        });
    };
    Object.defineProperty(PROCESS.prototype, "context", {
        get: function () {
            return "" + (this.name ? this.name : '') + this.id + "_" + typescript_class_helpers_1.CLASS.getNameFromObject(this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PROCESS.prototype, "state", {
        get: function () {
            if (!tnp_core_1._.isNull(this.tempState)) {
                return this.tempState;
            }
            if (morphi_1.Morphi.IsBrowser) {
                return this.browser.state;
            }
            //#region @backend
            if (tnp_core_1._.isNumber(this.pid)) {
                return 'running';
            }
            if (tnp_core_1._.isNull(this.exitCode)) {
                return 'inProgressOfStopping';
            }
            if (tnp_core_3.fse.existsSync(this.exitCodePath)) {
                var exitcode = Number(tnp_core_3.fse.readFileSync(this.exitCodePath).toString());
                if (!isNaN(exitcode)) {
                    return exitcode === 0 ? 'exitedWithSuccess' : 'exitedWithError';
                }
            }
            return 'notStarted';
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    PROCESS.getAll = function (config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PROCESS_1.ctrl.getAll(config).received];
                    case 1:
                        data = _a.sent();
                        // console.log('BACKENDDATA', data)
                        return [2 /*return*/, data.body.json];
                }
            });
        });
    };
    //#region @backend
    PROCESS.updateActive = function (processOrProcesses, activeProcesses) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index, p_1, p;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!tnp_core_1._.isUndefined(activeProcesses)) return [3 /*break*/, 2];
                        return [4 /*yield*/, psList()];
                    case 1:
                        activeProcesses = _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!tnp_core_1._.isArray(processOrProcesses)) return [3 /*break*/, 7];
                        index = 0;
                        _a.label = 3;
                    case 3:
                        if (!(index < processOrProcesses.length)) return [3 /*break*/, 6];
                        p_1 = processOrProcesses[index];
                        return [4 /*yield*/, PROCESS_1.updateActive(p_1, activeProcesses)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        index++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/];
                    case 7:
                        p = processOrProcesses;
                        if (!(tnp_core_1._.isNumber(p.pid) && !activeProcesses.find(function (ap) { return ap.pid == p.pid; }))) return [3 /*break*/, 9];
                        p.pid = undefined;
                        return [4 /*yield*/, PROCESS_1.db.update(p.id, p)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    var PROCESS_1;
    PROCESS.LOADING_STATE = [
        'inProgressOfStarting',
        'inProgressOfStopping',
    ];
    PROCESS = PROCESS_1 = tslib_1.__decorate([
        morphi_1.Morphi.Entity({
            className: 'PROCESS',
            mapping: {
                progress: 'PROGRESS_DATA',
                allProgressData: ['PROGRESS_DATA']
            },
            defaultModelValues: {
                pid: void 0,
                cmd: 'echo "Hello from tnp process"'
            },
            additionalMapping: {},
            //#region @backend
            browserTransformFn: function (entity) {
                entity.browser.state = entity.state;
                entity.browser.stderLog = entity.stderLog;
                entity.browser.stderLogPath = entity.stderLogPath;
                entity.browser.stdoutLog = entity.stdoutLog;
                entity.browser.stdoutLogPath = entity.stdoutLogPath;
                entity.browser.exitCode = entity.exitCode;
                entity.browser.exitCodePath = entity.exitCodePath;
                entity.browser.progress = entity.progress;
                // if (entity.modelDataConfig) {
                //   entity.modelDataConfig.set.exclude(entity.browser)
                //   entity.modelDataConfig = void 0;
                // }
                return entity;
            }
            //#endregion
        }),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], PROCESS);
    return PROCESS;
}(PROCESS_ENTITY));
exports.PROCESS = PROCESS;
//#region @backend
function attach(p, proc, resolve) {
    var _this = this;
    attachListeners(p, {
        msgAction: function (chunk) {
            // console.log('MSG:', chunk)
            tnp_core_3.fse.appendFileSync(proc.stdoutLogPath, chunk);
            morphi_1.Morphi.Realtime.Server.TrigggerEntityChanges(proc);
            morphi_1.Morphi.Realtime.Server.TrigggerEntityPropertyChanges(proc, ['stderLog', 'stdoutLog', 'allProgressData']);
        },
        errorAction: function (chunk) {
            // console.log('ERR:', chunk)
            tnp_core_3.fse.appendFileSync(proc.stderLogPath, chunk);
            morphi_1.Morphi.Realtime.Server.TrigggerEntityChanges(proc);
            morphi_1.Morphi.Realtime.Server.TrigggerEntityPropertyChanges(proc, ['stderLog', 'stdoutLog', 'allProgressData']);
        },
        endAction: function (exitCode) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PROCESS.db.findOne(proc.id)];
                    case 1:
                        // console.log('END:')
                        proc = _a.sent();
                        proc.pid = void 0;
                        tnp_core_3.fse.writeFileSync(proc.exitCodePath, (tnp_core_1._.isNumber(exitCode) ? exitCode : '-111'));
                        return [4 /*yield*/, PROCESS.db.update(proc.id, proc)];
                    case 2:
                        _a.sent();
                        morphi_1.Morphi.Realtime.Server.TrigggerEntityChanges(proc);
                        morphi_1.Morphi.Realtime.Server.TrigggerEntityPropertyChanges(proc, ['stderLog', 'stdoutLog', 'allProgressData']);
                        if (tnp_core_1._.isFunction(resolve)) {
                            resolve(proc);
                        }
                        return [2 /*return*/];
                }
            });
        }); }
    });
}
function attachListeners(childProcess, actions) {
    var msgAction = actions.msgAction, endAction = actions.endAction, errorAction = actions.errorAction;
    childProcess.stdout.on('data', function (m) {
        msgAction(m.toString());
    });
    childProcess.stdout.on('error', function (m) {
        errorAction(JSON.stringify(m));
    });
    childProcess.stderr.on('data', function (m) {
        errorAction(m.toString());
    });
    childProcess.stderr.on('error', function (m) {
        errorAction(JSON.stringify(m));
    });
    childProcess.on('exit', function (exit, signal) {
        endAction(exit);
        // childProcess.removeAllListeners();
    });
}
//#endregion
//# sourceMappingURL=PROCESS.js.map