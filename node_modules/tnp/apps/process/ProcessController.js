"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region isomorphic
var morphi_1 = require("morphi");
var tnp_helpers_1 = require("tnp-helpers");
var PROCESS_1 = require("./PROCESS");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_core_4 = require("tnp-core");
//#endregion
var ProcessController = /** @class */ (function (_super) {
    tslib_1.__extends(ProcessController, _super);
    function ProcessController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProcessController.prototype.start = function (id, config, parameters) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var proc, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PROCESS_1.PROCESS.db.findOne(id)];
                    case 1:
                        proc = _a.sent();
                        if (tnp_core_1._.isObject(parameters) && !tnp_core_1._.isArray(parameters)) {
                            proc.parameters = parameters;
                            console.log("[process] Parameters are set " + parameters);
                        }
                        else {
                            console.log("[process] Parameters is not a object " + parameters);
                        }
                        return [4 /*yield*/, proc.start()];
                    case 2:
                        res = _a.sent();
                        res.modelDataConfig = config;
                        return [2 /*return*/, function () { return res; }];
                }
            });
        }); };
        //#endregion
    };
    ProcessController.prototype.stop = function (id, config) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var proc, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PROCESS_1.PROCESS.db.findOne(id)];
                    case 1:
                        proc = _a.sent();
                        return [4 /*yield*/, proc.stop()];
                    case 2:
                        res = _a.sent();
                        res.modelDataConfig = config;
                        return [2 /*return*/, function () { return res; }];
                }
            });
        }); };
        //#endregion
    };
    ProcessController.prototype.progressMessages = function (id, alreadyInFE) {
        var _this = this;
        if (alreadyInFE === void 0) { alreadyInFE = 0; }
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var proc, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, PROCESS_1.PROCESS.db.findOne(id)];
                    case 1:
                        proc = _a.sent();
                        return [4 /*yield*/, proc.start()];
                    case 2:
                        res = _a.sent();
                        return [2 /*return*/, function () { return res.allProgressData.slice(alreadyInFE); }];
                }
            });
        }); };
        //#endregion
    };
    ProcessController.prototype.getAll = function (config) {
        var _this = this;
        //#region @backendFunc
        return function (req, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var s, processes;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        s = _super.prototype.getAll.call(this, config);
                        return [4 /*yield*/, morphi_1.Morphi.getResponseValue(s, req, res)];
                    case 1:
                        processes = _a.sent();
                        return [4 /*yield*/, PROCESS_1.PROCESS.updateActive(processes)];
                    case 2:
                        _a.sent();
                        processes.forEach(function (p) { return p.modelDataConfig = config; });
                        return [2 /*return*/, function () { return processes; }];
                }
            });
        }); };
        //#endregion
    };
    ProcessController.prototype.getBy = function (id, config) {
        var _this = this;
        //#region @backendFunc
        return function (req, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var s, process;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        s = _super.prototype.getBy.call(this, id, config);
                        return [4 /*yield*/, morphi_1.Morphi.getResponseValue(s, req, res)];
                    case 1:
                        process = _a.sent();
                        return [4 /*yield*/, PROCESS_1.PROCESS.updateActive(process)];
                    case 2:
                        _a.sent();
                        process.modelDataConfig = config;
                        return [2 /*return*/, function () { return process; }];
                }
            });
        }); };
        //#endregion
    };
    ProcessController.prototype.example = function () {
        //#region @backendFunc
        return function () {
            var p = tnp_helpers_1.Project.Tnp;
            // const d:any = { dupa: 'dupa' };
            return (function () { return p; });
        };
        //#endregion
    };
    //#region @backend
    ProcessController.prototype.removeProcesesfolder = function () {
        var folder = tnp_core_2.path.join(tnp_helpers_1.Project.Tnp.location, 'tmp-processes-logs');
        if (tnp_core_4.fse.existsSync(folder)) {
            tnp_core_3.rimraf.sync(folder);
        }
    };
    //#endregion
    //#region @backend
    ProcessController.prototype.initExampleDbData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.removeProcesesfolder();
                        return [4 /*yield*/, PROCESS_1.PROCESS.db.save(new PROCESS_1.PROCESS({ name: 'Test async', cmd: 'tnp test:async:proc --max 1 ', cwd: tnp_core_1.crossPlatformPath(process.cwd()), async: true }))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, PROCESS_1.PROCESS.db.save(new PROCESS_1.PROCESS({ name: 'Test sync error', cmd: 'tnp show:loop --max 2 --err', cwd: tnp_core_1.crossPlatformPath(process.cwd()) }))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, PROCESS_1.PROCESS.db.save(new PROCESS_1.PROCESS({ name: 'Messages sync', cmd: 'tnp show:loop:messages --max 6', cwd: tnp_core_1.crossPlatformPath(process.cwd()) }))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, PROCESS_1.PROCESS.db.save(new PROCESS_1.PROCESS({ name: 'Messages async', cmd: 'tnp show:loop:messages', cwd: tnp_core_1.crossPlatformPath(process.cwd()), async: true }))];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, PROCESS_1.PROCESS.db.save(new PROCESS_1.PROCESS({ name: 'Test sync proc', cmd: 'echo "siema"', cwd: tnp_core_1.crossPlatformPath(process.cwd()) }))];
                    case 5:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET('/start/:id'),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Path('id')),
        tslib_1.__param(1, morphi_1.Morphi.Http.Param.Query('config')),
        tslib_1.__param(2, morphi_1.Morphi.Http.Param.Query('parameters')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Number, morphi_1.Morphi.CRUD.ModelDataConfig, Object]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProcessController.prototype, "start", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET('/stop/:id'),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Path('id')),
        tslib_1.__param(1, morphi_1.Morphi.Http.Param.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Number, morphi_1.Morphi.CRUD.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProcessController.prototype, "stop", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET('/progress/:id'),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Path('id')),
        tslib_1.__param(1, morphi_1.Morphi.Http.Param.Query('alreadyInFE')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Number, Number]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProcessController.prototype, "progressMessages", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET(),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [morphi_1.Morphi.CRUD.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProcessController.prototype, "getAll", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET(),
        tslib_1.__param(0, morphi_1.Morphi.Http.Param.Path('id')), tslib_1.__param(1, morphi_1.Morphi.Http.Param.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Number, morphi_1.Morphi.CRUD.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], ProcessController.prototype, "getBy", null);
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", Object)
    ], ProcessController.prototype, "example", null);
    ProcessController = tslib_1.__decorate([
        morphi_1.Morphi.Controller({
            className: 'ProcessController',
            entity: PROCESS_1.PROCESS,
        })
    ], ProcessController);
    return ProcessController;
}(morphi_1.Morphi.Base.Controller));
exports.ProcessController = ProcessController;
//# sourceMappingURL=ProcessController.js.map