import { PROGRESS_DATA } from 'tnp-models';
import { Morphi, ModelDataConfig } from 'morphi';
import { ProcessDescriptor } from 'ps-list';
import type { ProcessController } from './ProcessController';
export interface IPROCESS extends PROCESS {
    state: PROCESS_STATE;
    stderLog: string;
    stderLogPath: string;
    stdoutLog: string;
    stdoutLogPath: string;
    exitCode: number;
    exitCodePath: string;
    allProgressData: PROGRESS_DATA[];
    progress: PROGRESS_DATA;
    id: number;
}
export declare type PROCESS_STATE = 'notStarted' | 'inProgressOfStarting' | 'running' | 'inProgressOfStopping' | 'exitedWithSuccess' | 'exitedWithError';
export declare class PROCESS_ENTITY extends Morphi.Base.Entity<PROCESS, IPROCESS, ProcessController> {
    name: string;
    id: number;
    isSync: boolean;
    cmd: string;
    cwd: string;
    pid: number;
    ppid: number;
    previousPid: number;
}
export declare class PROCESS<PARAMS = any> extends PROCESS_ENTITY {
    static ctrl: ProcessController;
    static LOADING_STATE: PROCESS_STATE[];
    parameters: PARAMS;
    browser: IPROCESS;
    private cmdOrg?;
    private _allProgressData;
    private __stder;
    get _stder(): string;
    set _stder(v: string);
    private tempState;
    private starting;
    static get db(): import("typeorm").Repository<PROCESS<unknown>>;
    constructor(options?: {
        name: string;
        cmd: string;
        cwd?: string;
        async?: boolean;
    });
    private _files;
    private __readLog;
    /**
     * Number from 0-100 or undefined
     */
    get progress(): PROGRESS_DATA;
    get isInLoadingState(): boolean;
    get allProgressData(): PROGRESS_DATA[];
    get stder(): string;
    _stdout: string;
    get stdout(): string;
    get stdoutLog(): string;
    get stdoutLogPath(): any;
    get stderLog(): string;
    get stderLogPath(): any;
    get exitCode(): number;
    get exitCodePath(): any;
    start(): Promise<PROCESS>;
    stop(): Promise<this>;
    get context(): string;
    get state(): PROCESS_STATE;
    static getAll(config?: ModelDataConfig): Promise<PROCESS<any>[]>;
    static updateActive(processOrProcesses: PROCESS | PROCESS[], activeProcesses?: ProcessDescriptor[]): Promise<void>;
}
