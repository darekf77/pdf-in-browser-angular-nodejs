"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var TerminalProgressBar = require("progress");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_db_1 = require("tnp-db");
var tnp_config_1 = require("tnp-config");
// TODO this will be done with background-worker-process
function BENCH_PROJ_DB() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            // global.hideLog = false;
            // const db = await TnpDB.Instance();
            // await Helpers.mesureExectionInMs('get project from db and stringigy', async () => {
            //   // global.codePurposeBrowser = true;
            //   const projects = await db.getProjects();
            //   // global.codePurposeBrowser = false;
            //   Helpers.log(`projects length: ${projects.length}`)
            // });
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
var TEST_LENGTH = 1000;
var TEST_SIZE = 100;
var N = 5;
function $BENCHMARK_DB_TEST(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, size, length, db, data, prog, index, d;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = tnp_helpers_1.Helpers.cliTool.argsFrom(args), size = _a.size, length = _a.length;
                    console.log("size=" + size + " length=" + length + " args: " + args);
                    size = Number(size);
                    length = Number(length);
                    TEST_SIZE = (!_.isNaN(size) ? size : TEST_SIZE);
                    TEST_LENGTH = (!_.isNaN(length) ? length : TEST_LENGTH);
                    return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _b.sent();
                    data = _.times(TEST_SIZE, function (n) { return n; });
                    prog = new TerminalProgressBar("Please wait (size=" + TEST_SIZE + "): :current / :total", TEST_LENGTH);
                    index = 0;
                    _b.label = 2;
                case 2:
                    if (!(index < TEST_LENGTH)) return [3 /*break*/, 7];
                    prog.tick();
                    return [4 /*yield*/, db.rawSet('testData', data)];
                case 3:
                    _b.sent();
                    return [4 /*yield*/, db.rawGet('testData')];
                case 4:
                    d = _b.sent();
                    return [4 /*yield*/, db.rawSet('testData', [])];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6:
                    index++;
                    return [3 /*break*/, 2];
                case 7:
                    prog.terminate();
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
exports.$BENCHMARK_DB_TEST = $BENCHMARK_DB_TEST;
function $BENCHMARK_WORKER(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var a;
        return tslib_1.__generator(this, function (_a) {
            a = tnp_helpers_1.Helpers.cliTool.argsFrom(args);
            a.n = Number(a.n);
            N = !_.isNaN(a.n) ? a.n : N;
            a.size = Number(a.size);
            a.length = Number(a.length);
            TEST_SIZE = (!_.isNaN(a.size) ? a.size : TEST_SIZE);
            TEST_LENGTH = (!_.isNaN(a.length) ? a.length : TEST_LENGTH);
            _.times(N, function (n) {
                n++;
                var workerArgs = "--size=" + TEST_SIZE / n + " --length=" + TEST_LENGTH * n + " -useWorker=false ";
                tnp_helpers_1.Helpers.info("\n\n    TEST FOR n=" + n + "\n\n    ");
                tnp_helpers_1.Helpers.info("\n\n    WORKER = false\n\n    ");
                tnp_helpers_1.Helpers.run("time " + tnp_config_1.config.frameworkName + " " + tnp_helpers_1.Helpers.cliTool.simplifiedCmd($BENCHMARK_DB_TEST) + " " + workerArgs).sync();
                tnp_helpers_1.Helpers.info(tnp_helpers_1.Helpers.terminalLine());
                tnp_helpers_1.Helpers.info("\n\n    WORKER = true\n\n    ");
                tnp_helpers_1.Helpers.run("time " + tnp_config_1.config.frameworkName + " " + tnp_helpers_1.Helpers.cliTool.simplifiedCmd($BENCHMARK_DB_TEST) + " " + workerArgs).sync();
            });
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
exports.$BENCHMARK_WORKER = $BENCHMARK_WORKER;
exports.default = {
    $BENCHMARK_WORKER: tnp_helpers_1.Helpers.CLIWRAP($BENCHMARK_WORKER, '$BENCHMARK_WORKER'),
    $BENCHMARK_DB_TEST: tnp_helpers_1.Helpers.CLIWRAP($BENCHMARK_DB_TEST, '$BENCHMARK_DB_TEST'),
    BENCH_PROJ_DB: tnp_helpers_1.Helpers.CLIWRAP(BENCH_PROJ_DB, 'BENCH_PROJ_DB'),
};
//# sourceMappingURL=BENCHMARK-TNP-PROJECTS.backend.js.map