"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var project_1 = require("../../project");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_db_1 = require("tnp-db");
var chalk_1 = require("chalk");
function $OPEN_WORKSPACE() {
    var workspacePath = tnp_core_2.path.join(project_1.Project.Current.location);
    if (!tnp_core_3.fse.existsSync(workspacePath)) {
        project_1.Project.Current.recreateCodeWorkspace();
    }
    project_1.Project.Current.run("code " + project_1.Project.Current.location + " &").sync();
    process.exit(0);
}
function $OPEN_WORKSPACE_CHILDS() {
    var proj;
    if (project_1.Project.Current.isWorkspace) {
        proj = project_1.Project.Current;
    }
    else if (project_1.Project.Current.isWorkspaceChildProject) {
        proj = project_1.Project.Current.parent;
    }
    if (proj.isWorkspace) {
        proj.run("" + proj.children.map(function (c) { return "code " + c.name; }).join(' && ')).sync();
    }
    process.exit(0);
}
function $IS_CORE_PROJECT() {
    tnp_helpers_1.Helpers.info("(" + project_1.Project.Current.genericName + ")\n  - is core project: " + chalk_1.default.bold(String(project_1.Project.Current.isCoreProject)));
    process.exit(0);
}
function $OPEN_CORE_PROJECT() {
    if (project_1.Project.Current.isCoreProject && project_1.Project.Current.frameworkVersionAtLeast('v2')) {
        project_1.Project.Current.run("code " + project_1.Project.by(project_1.Project.Current._type, project_1.Project.Current.frameworkVersionMinusOne).location + " &").sync();
    }
    else {
        project_1.Project.Current.run("code " + project_1.Project.by(project_1.Project.Current._type, project_1.Project.Current._frameworkVersion).location + " &").sync();
    }
    process.exit(0);
}
function $LOCATION() {
    tnp_helpers_1.Helpers.info("\n\n  " + project_1.Project.Tnp.location + "\n\n  ");
    process.exit(0);
}
function $OPEN_TNP_PROJECT() {
    project_1.Project.Tnp.run("code " + project_1.Project.Tnp.location + " &").sync();
    process.exit(0);
}
function $OPEN_BASELINE() {
    if (project_1.Project.Current.isSite) {
        if (project_1.Project.Current.isWorkspace) {
            project_1.Project.Current.baseline.run("code " + project_1.Project.Current.baseline.location + " &").sync();
        }
        else {
            project_1.Project.Current.baseline.run("code . &").sync();
        }
        process.exit(0);
    }
    tnp_helpers_1.Helpers.error("This is not \"site project\"", false, true);
}
function $OPEN(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, name, projects, index, p;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    if (args.length === 0) {
                        tnp_helpers_1.Helpers.openFolderInFileExploer(process.cwd());
                        process.exit(0);
                    }
                    name = tnp_core_1._.first(args.split(' '));
                    projects = [];
                    if (!(tnp_config_1.config.coreProjectVersions.includes(name) && project_1.Project.Current.isContainer)) return [3 /*break*/, 2];
                    projects = project_1.Project.Current.children.filter(function (c) { return c.frameworkVersionAtLeast(name); });
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, db.getProjects()];
                case 3:
                    projects = (_a.sent()).filter(function (p) {
                        return (p.project.name === name) || (p.project.genericName === name);
                    }).map(function (c) { return c.project; });
                    _a.label = 4;
                case 4:
                    if (projects.length > 0) {
                        for (index = 0; index < projects.length; index++) {
                            p = projects[index];
                            tnp_helpers_1.Helpers.run("code " + p.location, { biggerBuffer: false }).sync();
                        }
                        process.exit(0);
                    }
                    else {
                        tnp_helpers_1.Helpers.log("Projects not found");
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function $RECENT_SAVE_ACTIVE(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.recent.saveActiveProjects()];
                case 1:
                    _a.sent();
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
var $RECENT_ACTIVE_SAVE = function (args) { return $RECENT_SAVE_ACTIVE(args); };
function $RECENT_SET(args) {
    project_1.Project.Current.recent.setFrom(args);
    process.exit(0);
}
function $OPEN_RECENT() {
    project_1.Project.Current.recent.openRecent();
    process.exit(0);
}
function $CLOSE_RECENT() {
}
function $SET_RECENT(args) {
    $RECENT_SET(args);
}
function $RECENT_OPEN() {
    $OPEN_RECENT();
}
function $RECENT() {
    $OPEN_RECENT();
}
function $RECENT_CLOSE() {
    $CLOSE_RECENT();
}
function $OPEN_NAVI_CLI() {
    tnp_helpers_1.Helpers.run("code " + project_1.Project.NaviCliLocation, { biggerBuffer: false }).sync();
}
exports.default = {
    $LOCATION: tnp_helpers_1.Helpers.CLIWRAP($LOCATION, '$LOCATION'),
    $OPEN: tnp_helpers_1.Helpers.CLIWRAP($OPEN, '$OPEN'),
    $RECENT_SAVE_ACTIVE: tnp_helpers_1.Helpers.CLIWRAP($RECENT_SAVE_ACTIVE, '$RECENT_SAVE_ACTIVE'),
    $RECENT_SET: tnp_helpers_1.Helpers.CLIWRAP($RECENT_SET, '$RECENT_SET'),
    $OPEN_RECENT: tnp_helpers_1.Helpers.CLIWRAP($OPEN_RECENT, '$OPEN_RECENT'),
    $CLOSE_RECENT: tnp_helpers_1.Helpers.CLIWRAP($CLOSE_RECENT, '$CLOSE_RECENT'),
    $RECENT_CLOSE: tnp_helpers_1.Helpers.CLIWRAP($RECENT_CLOSE, '$RECENT_CLOSE'),
    $RECENT_OPEN: tnp_helpers_1.Helpers.CLIWRAP($RECENT_OPEN, '$RECENT_OPEN'),
    $RECENT: tnp_helpers_1.Helpers.CLIWRAP($RECENT, '$RECENT'),
    $RECENT_ACTIVE_SAVE: tnp_helpers_1.Helpers.CLIWRAP($RECENT_ACTIVE_SAVE, '$RECENT_ACTIVE_SAVE'),
    $SET_RECENT: tnp_helpers_1.Helpers.CLIWRAP($SET_RECENT, '$SET_RECENT'),
    $OPEN_WORKSPACE_CHILDS: tnp_helpers_1.Helpers.CLIWRAP($OPEN_WORKSPACE_CHILDS, '$OPEN_WORKSPACE_CHILDS'),
    $OPEN_WORKSPACE: tnp_helpers_1.Helpers.CLIWRAP($OPEN_WORKSPACE, '$OPEN_WORKSPACE'),
    $OPEN_NAVI_CLI: tnp_helpers_1.Helpers.CLIWRAP($OPEN_NAVI_CLI, '$OPEN_NAVI_CLI'),
    $IS_CORE_PROJECT: tnp_helpers_1.Helpers.CLIWRAP($IS_CORE_PROJECT, '$IS_CORE_PROJECT'),
    $OPEN_CORE_PROJECT: tnp_helpers_1.Helpers.CLIWRAP($OPEN_CORE_PROJECT, '$OPEN_CORE_PROJECT'),
    $OPEN_TNP_PROJECT: tnp_helpers_1.Helpers.CLIWRAP($OPEN_TNP_PROJECT, '$OPEN_TNP_PROJECT'),
    $OPEN_BASELINE: tnp_helpers_1.Helpers.CLIWRAP($OPEN_BASELINE, '$OPEN_BASELINE'),
};
//# sourceMappingURL=OPEN.backend.js.map