"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_core_1 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_db_1 = require("tnp-db");
var project_1 = require("../../project/abstract/project");
function $VSCODE_EXT(args, exit) {
    if (exit === void 0) { exit = true; }
    tnp_helpers_1.Helpers.run("npm install && npm-run tsc && npm run build:install", {
        cwd: tnp_config_1.config.pathes.tnp_vscode_ext_location,
        output: true
    }).sync();
    if (tnp_helpers_1.Helpers.isWsl) {
        tnp_helpers_1.Helpers.warn("MANUALL INSTALL NEEDED FOR EXTENSION " + tnp_core_1.path.join(tnp_config_1.config.pathes.tnp_vscode_ext_location, 'tnp-vscode-ext-0.0.1.vsix'));
    }
    exit && process.exit(0);
}
exports.$VSCODE_EXT = $VSCODE_EXT;
function showfilesfor(project) {
    project.recreate.vscode.settings.excludedFiles(false);
    project.recreate.vscode.settings.colorsFromWorkspace();
}
function hidefilesfor(project) {
    project.recreate.vscode.settings.excludedFiles(true);
    project.recreate.vscode.settings.colorsFromWorkspace();
}
function $VSCODE_TEMP_SHOW(args, exit) {
    if (exit === void 0) { exit = true; }
    showfilesfor(project_1.Project.Current);
    exit && process.exit(0);
}
exports.$VSCODE_TEMP_SHOW = $VSCODE_TEMP_SHOW;
function $VSCODE_TEMP_HIDE(args, exit) {
    if (exit === void 0) { exit = true; }
    hidefilesfor(project_1.Project.Current);
    exit && process.exit(0);
}
exports.$VSCODE_TEMP_HIDE = $VSCODE_TEMP_HIDE;
function $INIT_VSCODE() {
    project_1.Project.Current.recreate.vscode.settings.excludedFiles();
    project_1.Project.Current.recreate.vscode.settings.colorsFromWorkspace();
    process.exit(0);
}
exports.$INIT_VSCODE = $INIT_VSCODE;
;
function $VSCODE_INIT_ALL() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, projects, index, proj;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.getProjects()];
                case 2:
                    projects = _a.sent();
                    for (index = 0; index < projects.length; index++) {
                        proj = projects[index];
                        proj.project.recreate.vscode.settings.excludedFiles();
                        proj.project.recreate.vscode.settings.colorsFromWorkspace();
                    }
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
exports.$VSCODE_INIT_ALL = $VSCODE_INIT_ALL;
function $WSL_FIX() {
    tnp_helpers_1.Helpers.run("echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf && sudo sysctl -p").sync();
    process.exit(0);
}
function $VSCODE() {
    $INIT_VSCODE();
}
function $VSCODE_INIT() {
    $INIT_VSCODE();
}
function $INIT_ALL_VSCODE() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, $VSCODE_INIT_ALL()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function PROJECT_KILL_ALL() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var command;
        return tslib_1.__generator(this, function (_a) {
            if (process.platform === 'darwin') {
                command = "kill -9 $(pgrep 'Code Helper') && kill -9 $(pgrep 'Code')";
            }
            // run(`killÂ§ `).sync()
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
function $FIX_WSL() {
    $WSL_FIX();
}
function $VSCODE_GLOBAL() {
    var keybindingPathLinxu = tnp_helpers_1.Helpers.resolve('~/.config/Code/User/keybindings.json');
    var keybindingPath = tnp_helpers_1.Helpers.resolve("~/Library/Application Support/Code/User/keybindings.json");
    var keys = [
        {
            'key': 'shift+cmd+s',
            'command': 'workbench.action.files.saveAll'
        },
        {
            'key': 'alt+cmd+s',
            'command': '-workbench.action.files.saveAll'
        },
        {
            'key': 'shift+cmd+c',
            'command': 'extension.firedevstopdefaultbuild'
        },
        {
            'key': 'shift+cmd+b',
            'command': 'extension.firedevrundefaultbuild'
        },
        {
            'key': 'ctrl+cmd+p',
            'command': 'extension.vscode-git-automator.pushLocalCommits'
        },
        {
            'key': 'shift+cmd+z',
            'command': 'default:redo'
        },
    ];
    tnp_helpers_1.Helpers.writeFile(process.platform === 'linux' ? keybindingPathLinxu : keybindingPath, keys);
    var windowsSettings = {
        "terminal.integrated.shell.windows": "C:\\Program Files\\Git\\bin\\bash.exe",
        "terminal.integrated.shellArgs.windows": [
            "--login"
        ],
        "window.customMenuBarAltFocus": false,
        "window.enableMenuBarMnemonics": false,
        "terminal.integrated.rightClickBehavior": "selectWord",
    };
    var settingsMacOS = {
        "terminal.integrated.shell.osx": "/bin/bash",
    };
    var settings = {
        'git.enableSmartCommit': true,
        'terminal.integrated.scrollback': 10000,
        // 'files.insertFinalNewline': true,
        'html.format.endWithNewline': true,
        'html.format.wrapAttributes': 'force-aligned',
        'files.hotExit': 'onExitAndWindowClose',
        'typescript.referencesCodeLens.enabled': true,
        'git.autoRepositoryDetection': false,
        // Whether auto fetching is enabled.
        'git.autofetch': false,
        'gitlens.keymap': 'none',
        'gitlens.advanced.messages': {
            'suppressCommitHasNoPreviousCommitWarning': false,
            'suppressCommitNotFoundWarning': false,
            'suppressFileNotUnderSourceControlWarning': false,
            'suppressGitVersionWarning': false,
            'suppressLineUncommittedWarning': false,
            'suppressNoRepositoryWarning': false,
            'suppressResultsExplorerNotice': false,
            'suppressShowKeyBindingsNotice': true
        },
        'search.followSymlinks': false,
        'javascript.implicitProjectConfig.experimentalDecorators': true,
        "js/ts.implicitProjectConfig.experimentalDecorators": true,
        'gitlens.historyExplorer.enabled': true,
        'diffEditor.ignoreTrimWhitespace': true,
        'explorer.confirmDelete': false,
        'typescript.updateImportsOnFileMove.enabled': 'never',
        'javascript.updateImportsOnFileMove.enabled': 'never',
        'window.restoreWindows': 'one',
        'search.searchOnType': false,
        'scm.alwaysShowProviders': false,
        'breadcrumbs.enabled': true,
        'extensions.ignoreRecommendations': true,
        'git.showProgress': true,
        'debug.node.showUseWslIsDeprecatedWarning': false,
        'explorer.compactFolders': false,
        'workbench.colorTheme': 'Default Light+',
        "update.mode": "none",
        "debug.onTaskErrors": "abort",
        "typescript.tsdk": "node_modules/typescript/lib"
    };
    var settingspathLinux = tnp_helpers_1.Helpers.resolve('~/.config/Code/User/settings.json');
    var settingspath = tnp_helpers_1.Helpers.resolve(process.platform === 'linux' ? settingspathLinux : '~/Library/Application Support/Code/User/settings.json');
    tnp_helpers_1.Helpers.writeFile(settingspath, settings);
    tnp_helpers_1.Helpers.info("Vscode configured !");
    process.exit(0);
}
var $VSCODE_FIX = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var db, projects, index, proj, index, proj, index, proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
            case 1:
                db = _a.sent();
                return [4 /*yield*/, db.getProjects()];
            case 2:
                projects = _a.sent();
                for (index = 0; index < projects.length; index++) {
                    proj = projects[index];
                    proj.project && proj.project.recreate.vscode.settings.changeColorTheme(false);
                }
                return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(function () { return resolve(void 0); }, 1000); })];
            case 3:
                _a.sent();
                for (index = 0; index < projects.length; index++) {
                    proj = projects[index];
                    proj.project && proj.project.recreate.vscode.settings.changeColorTheme();
                }
                return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(function () { return resolve(void 0); }, 1000); })];
            case 4:
                _a.sent();
                for (index = 0; index < projects.length; index++) {
                    proj = projects[index];
                    proj.project && proj.project.recreate.vscode.settings.gitReset();
                }
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
var $FILES_HIDE = function (args, exit) { return $VSCODE_TEMP_HIDE(args, exit); };
var $FILES_SHOW = function (args, exit) { return $VSCODE_TEMP_SHOW(args, exit); };
var $FILES_SHOW_ALL = function (args, exit) {
    if (exit === void 0) { exit = true; }
    var proj;
    if (project_1.Project.Current.isWorkspaceChildProject) {
        proj = project_1.Project.Current.parent;
    }
    else {
        proj = project_1.Project.Current;
    }
    showfilesfor(proj);
    if (proj.isWorkspace) {
        proj.children.forEach(function (c) { return showfilesfor(c); });
    }
    exit && process.exit(0);
};
var $FILES_HIDE_ALL = function (args, exit) {
    if (exit === void 0) { exit = true; }
    var proj;
    if (project_1.Project.Current.isWorkspaceChildProject) {
        proj = project_1.Project.Current.parent;
    }
    else {
        proj = project_1.Project.Current;
    }
    hidefilesfor(proj);
    if (proj.isWorkspace) {
        proj.children.forEach(function (c) { return hidefilesfor(c); });
    }
    exit && process.exit(0);
};
function $EXT(args, exit) {
    return $VSCODE_EXT(args, exit);
}
exports.$EXT = $EXT;
exports.default = {
    $EXT: tnp_helpers_1.Helpers.CLIWRAP($EXT, '$EXT'),
    $VSCODE_EXT: tnp_helpers_1.Helpers.CLIWRAP($VSCODE_EXT, '$VSCODE_EXT'),
    $VSCODE_TEMP_SHOW: tnp_helpers_1.Helpers.CLIWRAP($VSCODE_TEMP_SHOW, '$VSCODE_TEMP_SHOW'),
    $FILES_SHOW: tnp_helpers_1.Helpers.CLIWRAP($FILES_SHOW, '$FILES_SHOW'),
    $FILES_SHOW_ALL: tnp_helpers_1.Helpers.CLIWRAP($FILES_SHOW_ALL, '$FILES_SHOW_ALL'),
    $VSCODE_TEMP_HIDE: tnp_helpers_1.Helpers.CLIWRAP($VSCODE_TEMP_HIDE, '$VSCODE_TEMP_HIDE'),
    $FILES_HIDE: tnp_helpers_1.Helpers.CLIWRAP($FILES_HIDE, '$FILES_HIDE'),
    $FILES_HIDE_ALL: tnp_helpers_1.Helpers.CLIWRAP($FILES_HIDE_ALL, '$FILES_HIDE_ALL'),
    $INIT_VSCODE: tnp_helpers_1.Helpers.CLIWRAP($INIT_VSCODE, '$INIT_VSCODE'),
    $VSCODE_INIT_ALL: tnp_helpers_1.Helpers.CLIWRAP($VSCODE_INIT_ALL, '$VSCODE_INIT_ALL'),
    $VSCODE: tnp_helpers_1.Helpers.CLIWRAP($VSCODE, '$VSCODE'),
    $VSCODE_INIT: tnp_helpers_1.Helpers.CLIWRAP($VSCODE_INIT, '$VSCODE_INIT'),
    $INIT_ALL_VSCODE: tnp_helpers_1.Helpers.CLIWRAP($INIT_ALL_VSCODE, '$INIT_ALL_VSCODE'),
    PROJECT_KILL_ALL: tnp_helpers_1.Helpers.CLIWRAP(PROJECT_KILL_ALL, 'PROJECT_KILL_ALL'),
    $WSL_FIX: tnp_helpers_1.Helpers.CLIWRAP($WSL_FIX, '$WSL_FIX'),
    $FIX_WSL: tnp_helpers_1.Helpers.CLIWRAP($FIX_WSL, '$FIX_WSL'),
    $VSCODE_GLOBAL: tnp_helpers_1.Helpers.CLIWRAP($VSCODE_GLOBAL, '$VSCODE_GLOBAL'),
    $VSCODE_FIX: tnp_helpers_1.Helpers.CLIWRAP($VSCODE_FIX, '$VSCODE_FIX'),
};
//# sourceMappingURL=VSCODE.backend.js.map