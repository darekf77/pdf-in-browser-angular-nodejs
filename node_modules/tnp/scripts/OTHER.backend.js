"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var project_1 = require("../project");
var psList = require("ps-list");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_1 = require("tnp-helpers");
var chalk_1 = require("chalk");
var tnp_config_1 = require("tnp-config");
// console.log('hello')
function $CONFIGS() {
    tnp_helpers_1.Helpers.log(project_1.Project.Current.env.configsFromJs.map(function (c) { return c.domain; }).join('\n'));
    process.exit(0);
}
function CHECK_ENV() {
    tnp_helpers_1.Helpers.checkEnvironment(tnp_config_1.config.required);
    process.exit(0);
}
function recreate() {
    project_1.Project.Current.recreate.initAssets();
    project_1.Project.Current.recreate.gitignore();
    process.exit(0);
}
function version() {
    //#region @notForNpm
    if (ENV.notForNpm) {
        console.log("I am secret project!");
    }
    //#endregion
    !global.hideLog && console.log("tnp location: " + project_1.Project.Tnp.location);
    tnp_helpers_1.Helpers.info(project_1.Project.Tnp.version);
    process.exit(0);
}
function RUN_PROCESS() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            console.log("RUNNING ON PID: " + chalk_1.default.bold(process.pid.toString()));
            console.log("----------PPID: " + process.ppid);
            process.env['teststttt'] = '12';
            process.env['hello'] = 'world';
            return [2 /*return*/];
        });
    });
}
function $PSINFO(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var pid, ps, info;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    pid = Number(args);
                    return [4 /*yield*/, psList()];
                case 1:
                    ps = _a.sent();
                    info = ps.find(function (p) { return p.pid == pid; });
                    if (!info) {
                        tnp_helpers_1.Helpers.error("No process found with pid: " + args, false, true);
                    }
                    console.log(info);
                    return [2 /*return*/];
            }
        });
    });
}
function $COMMAND(args) {
    var command = decodeURIComponent(args);
    // info(`Starting command: ${command}`)
    tnp_helpers_1.Helpers.run(decodeURIComponent(args)).sync();
    // info(`Finish command: ${command}`)
    process.exit(0);
}
function NPM_FIXES() {
    console.log(project_1.Project.Current.node_modules.fixesForNodeModulesPackages);
    process.exit(0);
}
function CIRCURAL_CHECK() {
    project_1.Project.Current.run("madge --circular --extensions ts ./src").sync();
    process.exit(0);
}
var $FILEINFO = function (args) {
    console.log(tnp_helpers_1.Helpers.getMostRecentFilesNames(tnp_core_1.crossPlatformPath(process.cwd())));
    process.exit(0);
};
var PSINFO = function (a) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, $PSINFO(a)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
function $isbundlemode(args) {
    console.log('IS BUNDLE MODE? ', project_1.Project.isBundleMode);
    process.exit(0);
}
var $ASSETS = function () { return recreate(); };
var $VERSION = function () { return version(); };
var PATH = function () {
    console.log(project_1.Project.Tnp.location);
    process.exit(0);
};
var COPY_RESOURCES = function () {
    project_1.Project.Current.checkIfReadyForNpm();
    project_1.Project.Current.bundleResources();
    process.exit(0);
};
var $CHECK_ENV = function (args) {
    tnp_helpers_1.Helpers.checkEnvironment();
    process.exit(0);
};
var $CHECK_ENVIRONMENT = function (args) {
    tnp_helpers_1.Helpers.checkEnvironment();
    process.exit(0);
};
function ENV_CHECK() {
    CHECK_ENV();
}
function $AA() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            console.log(typescript_class_helpers_1.CLASS.getBy('Project'));
            return [2 /*return*/];
        });
    });
}
exports.default = {
    $AA: tnp_helpers_1.Helpers.CLIWRAP($AA, '$AA'),
    NPM_FIXES: tnp_helpers_1.Helpers.CLIWRAP(NPM_FIXES, 'NPM_FIXES'),
    // $COPY_FROM(args: string) {
    //   const [from, to, pkgName] = args.trim().split(' ');
    //   Project.From<Project>(from).node_modules.copy(pkgName).to(Project.From<Project>(to))
    //   process.exit()
    // },
    $COMMAND: tnp_helpers_1.Helpers.CLIWRAP($COMMAND, '$COMMAND'),
    CIRCURAL_CHECK: tnp_helpers_1.Helpers.CLIWRAP(CIRCURAL_CHECK, 'CIRCURAL_CHECK'),
    $FILEINFO: tnp_helpers_1.Helpers.CLIWRAP($FILEINFO, '$FILEINFO'),
    RUN_PROCESS: tnp_helpers_1.Helpers.CLIWRAP(RUN_PROCESS, 'RUN_PROCESS'),
    PSINFO: tnp_helpers_1.Helpers.CLIWRAP(PSINFO, 'PSINFO'),
    $isbundlemode: tnp_helpers_1.Helpers.CLIWRAP($isbundlemode, '$isbundlemode'),
    $ASSETS: tnp_helpers_1.Helpers.CLIWRAP($ASSETS, '$ASSETS'),
    $VERSION: tnp_helpers_1.Helpers.CLIWRAP($VERSION, '$VERSION'),
    PATH: tnp_helpers_1.Helpers.CLIWRAP(PATH, 'PATH'),
    COPY_RESOURCES: tnp_helpers_1.Helpers.CLIWRAP(COPY_RESOURCES, 'COPY_RESOURCES'),
    $CHECK_ENV: tnp_helpers_1.Helpers.CLIWRAP($CHECK_ENV, '$CHECK_ENV'),
    $CHECK_ENVIRONMENT: tnp_helpers_1.Helpers.CLIWRAP($CHECK_ENVIRONMENT, '$CHECK_ENVIRONMENT'),
    $CONFIGS: tnp_helpers_1.Helpers.CLIWRAP($CONFIGS, '$CONFIGS'),
    CHECK_ENV: [tnp_helpers_1.Helpers.CLIWRAP(CHECK_ENV, 'CHECK_ENV'), "Sample docs"],
    ENV_CHECK: tnp_helpers_1.Helpers.CLIWRAP(ENV_CHECK, 'ENV_CHECK'),
};
//# sourceMappingURL=OTHER.backend.js.map