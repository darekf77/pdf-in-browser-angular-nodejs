"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var project_1 = require("../../project");
var ProjectFactory = /** @class */ (function () {
    function ProjectFactory() {
    }
    Object.defineProperty(ProjectFactory, "Instance", {
        get: function () {
            if (!this._instance) {
                this._instance = new ProjectFactory();
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    ProjectFactory.prototype.getDestinationPath = function (projectName, cwd) {
        if (tnp_core_2.path.isAbsolute(projectName)) {
            return projectName;
        }
        return tnp_core_2.path.join(cwd, projectName);
    };
    ProjectFactory.prototype.errorMsgCreateProject = function () {
        tnp_helpers_1.Helpers.log(chalk_1.default.green("Good examples:"));
        tnp_config_1.config.projectTypes.forNpmLibs.forEach(function (t) {
            tnp_helpers_1.Helpers.log("\t" + chalk_1.default.gray('tnp new') + " " + chalk_1.default.black(t) + " " + chalk_1.default.gray('mySuperLib'));
        });
        tnp_helpers_1.Helpers.error(chalk_1.default.red("Please use example above."), false, true);
    };
    ProjectFactory.prototype.errorMsgCreateSite = function () {
        console.log(chalk_1.default.green("Good examples: " +
            (tnp_config_1.config.frameworkName + " new site:strict:site  path-to-baseline-project") +
            (tnp_config_1.config.frameworkName + " new site:dependenct:site  path-to-baseline-project")));
        tnp_helpers_1.Helpers.error("Please use example above.", false, true);
    };
    ProjectFactory.prototype.pacakgeJsonFixAfterCreation = function (locationDest, basedOn, name, isDependencySite) {
        if (isDependencySite === void 0) { isDependencySite = false; }
        var pkgJSONpath = tnp_core_2.path.join(locationDest, tnp_config_1.config.file.package_json);
        var json = tnp_core_3.fse.readJSONSync(pkgJSONpath);
        json.name = ((name === tnp_core_2.path.basename(locationDest)) ? name : tnp_core_1._.kebabCase(tnp_core_2.path.basename(locationDest)));
        json.tnp.isCoreProject = false;
        json.tnp.isGenerated = false;
        json.tnp.useFramework = false;
        json.tnp.required = [];
        json.tnp.requiredServers = [];
        if (!isDependencySite && basedOn) {
            json.tnp.basedOn = basedOn;
        }
        tnp_helpers_1.Helpers.writeFile(pkgJSONpath, json);
    };
    ProjectFactory.prototype.fixOptions_create = function (options) {
        if (tnp_core_1._.isNil(options)) {
            options = {};
        }
        if (tnp_core_1._.isNil(options.version)) {
            options.version = 'v2';
        }
        if (tnp_core_1._.isNil(options.skipInit)) {
            options.skipInit = true;
        }
        if (!tnp_core_1._.isArray(options.alsoBasedOn)) {
            options.alsoBasedOn = [];
        }
        return options;
    };
    ProjectFactory.prototype.create = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, type, name, cwd, basedOn, version, skipInit, siteProjectMode, alsoBasedOn, cwdProj, nameKebakCase, basedOnProject, baseline, destinationPath, workspacePrroject, newCreatedProject, skipNodeModules, argsForInit, parentOrigin, projOrigin;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.fixOptions_create(options), type = _a.type, name = _a.name, cwd = _a.cwd, basedOn = _a.basedOn, version = _a.version, skipInit = _a.skipInit, siteProjectMode = _a.siteProjectMode, alsoBasedOn = _a.alsoBasedOn;
                        cwdProj = project_1.Project.From(cwd);
                        if (cwdProj && cwdProj.isWorkspace) {
                            version = cwdProj._frameworkVersion;
                        }
                        if (cwdProj && cwdProj.isContainer) {
                            version = cwdProj._frameworkVersion;
                        }
                        tnp_helpers_1.Helpers.log("[create] version: " + version);
                        tnp_helpers_1.Helpers.log("[create] cwdProj: " + (cwdProj && cwdProj.name));
                        tnp_helpers_1.Helpers.log("[create] skip init " + skipInit);
                        nameKebakCase = tnp_core_1._.kebabCase(name);
                        if (nameKebakCase !== name) {
                            tnp_helpers_1.Helpers.info("[craete] Project name renemed to: " + nameKebakCase + " ");
                            name = nameKebakCase;
                        }
                        if (tnp_core_1._.isString(basedOn)) {
                            basedOn = basedOn.replace(/\/$/, '');
                        }
                        basedOnProject = basedOn && project_1.Project.nearestTo(tnp_core_2.path.join(cwd, basedOn));
                        if (basedOn && !basedOnProject) {
                            tnp_helpers_1.Helpers.error("[create] Not able to find baseline project from relative path: " + basedOn + " ", false, true);
                        }
                        if (basedOn && basedOnProject && basedOnProject.typeIsNot('workspace')) {
                            tnp_helpers_1.Helpers.error("[create] Site project only can be workspace, wrong--basedOn param: " + basedOn + " ", false, true);
                        }
                        baseline = basedOn ? basedOnProject : project_1.Project.by(type, version);
                        tnp_helpers_1.Helpers.log("[create] PROJECT BASELINE " + baseline.name + " in " + baseline.location);
                        return [4 /*yield*/, baseline.reset()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, baseline.filesStructure.init(" --recrusive ")];
                    case 2:
                        _b.sent();
                        destinationPath = this.getDestinationPath(name, cwd);
                        tnp_helpers_1.Helpers.log("[create] Destination path: " + destinationPath);
                        if (tnp_core_3.fse.pathExistsSync(destinationPath)) {
                            tnp_helpers_1.Helpers.info("[create] Project \"" + name + "\" already exist in this locationzation: " + destinationPath + " ");
                        }
                        else {
                            if (baseline) {
                                try {
                                    baseline.copyManager.generateSourceCopyIn(destinationPath, {
                                        // ommitSourceCode: global.testMode,
                                        regenerateOnlyCoreProjects: !basedOn,
                                        markAsGenerated: false,
                                        regenerateProjectChilds: true,
                                        forceCopyPackageJSON: type === 'single-file-project'
                                    });
                                    // console.log(destinationPath)
                                    this.pacakgeJsonFixAfterCreation(destinationPath, basedOn ? basedOn : void 0, name, siteProjectMode === 'dependency');
                                    tnp_helpers_1.Helpers.info("[create] project " + name + " created from baseline projec " + baseline.name + " success");
                                    if (project_1.Project.emptyLocations.includes(destinationPath)) {
                                        project_1.Project.emptyLocations = project_1.Project.emptyLocations.filter(function (f) {
                                            return f !== destinationPath;
                                        });
                                        tnp_helpers_1.Helpers.info("[create] Path removed from empty locations");
                                    }
                                    else {
                                        tnp_helpers_1.Helpers.info("[create] Path NOT removed from empty locations");
                                    }
                                }
                                catch (err) {
                                    // console.log(require('callsite-record')({
                                    //   forError: err
                                    // }).renderSync({
                                    //   // stackFilter(frame) {
                                    //   //   return !frame.getFileName().includes('node_modules');
                                    //   // }
                                    // }))
                                    tnp_helpers_1.Helpers.error(err, true, true);
                                    tnp_helpers_1.Helpers.error("[create] Not able to create project", false, true);
                                }
                            }
                            else {
                                this.errorMsgCreateProject();
                            }
                        }
                        if (type === 'workspace') {
                            workspacePrroject = project_1.Project.From(destinationPath);
                            if (basedOn && (siteProjectMode === 'strict')) {
                                workspacePrroject.baseline.children.forEach(function (c) {
                                    tnp_helpers_1.Helpers.log("[craete] Basleine Child project \"" + c.genericName + "\"");
                                });
                            }
                            workspacePrroject.children.forEach(function (c) {
                                tnp_helpers_1.Helpers.log("[create] Child project \"" + c.genericName + "\"");
                            });
                        }
                        tnp_helpers_1.Helpers.log("[create] destinationPath: " + destinationPath);
                        newCreatedProject = project_1.Project.From(destinationPath);
                        if (!newCreatedProject) {
                            tnp_helpers_1.Helpers.error("Not able to crate project in " + destinationPath, false, true);
                        }
                        if (type !== 'single-file-project' && newCreatedProject.typeIs('angular-lib', 'isomorphic-lib')) {
                            newCreatedProject.replaceSourceForStandalone();
                        }
                        if (newCreatedProject.isWorkspace) {
                            newCreatedProject.children.forEach(function (c) { return c.removeStandaloneSources(); });
                        }
                        if (newCreatedProject.isContainer) {
                            newCreatedProject.children.forEach(function (c) {
                                if (c.isWorkspace) {
                                    c.children.forEach(function (wc) { return wc.removeStandaloneSources(); });
                                }
                                else {
                                    c.removeStandaloneSources();
                                }
                            });
                        }
                        if (!newCreatedProject.git.isGitRepo) {
                            tnp_helpers_1.Helpers.info("[create] Git repository inited");
                            newCreatedProject.run("git init").sync();
                        }
                        tnp_helpers_1.Helpers.log("[create] Project from create method: " + (newCreatedProject && newCreatedProject.genericName) + " ");
                        if (!newCreatedProject) return [3 /*break*/, 8];
                        newCreatedProject.recreate.vscode.settings.excludedFiles();
                        newCreatedProject.recreate.vscode.settings.colorsFromWorkspace();
                        if (siteProjectMode === 'dependency') {
                            newCreatedProject.packageJson.data.tnp.dependsOn = [
                                baseline.name,
                            ];
                            newCreatedProject.packageJson.save("Update required for site dependency project");
                        }
                        if (!newCreatedProject.isVscodeExtension) return [3 /*break*/, 4];
                        tnp_helpers_1.Helpers.setValueToJSON(newCreatedProject.path('.vscode/settings.json').absolute.normal, "['workbench.colorCustomizations']['statusBar.background']", void 0);
                        tnp_helpers_1.Helpers.setValueToJSON(newCreatedProject.path('.vscode/settings.json').absolute.normal, "['workbench.colorCustomizations']['statusBar.debuggingBackground']", void 0);
                        return [4 /*yield*/, newCreatedProject.filesStructure.init('')];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 4:
                        if (!!skipInit) return [3 /*break*/, 6];
                        skipNodeModules = true;
                        argsForInit = "--recrusive " + (skipNodeModules ? '--skipNodeModules' : '');
                        return [4 /*yield*/, newCreatedProject.filesStructure.init(argsForInit)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!(newCreatedProject.parent.isContainer && newCreatedProject.typeIs('angular-lib', 'isomorphic-lib', 'vscode-ext'))) return [3 /*break*/, 8];
                        newCreatedProject.parent.packageJson.linkedProjects.push(tnp_core_2.path.basename(newCreatedProject.location));
                        newCreatedProject.parent.packageJson.save('updating container linked projects');
                        if (newCreatedProject.parent.git.isGitRepo && newCreatedProject.parent.git.isGitRoot) {
                            parentOrigin = newCreatedProject.parent.git.originURL;
                            projOrigin = parentOrigin.replace(tnp_core_2.path.basename(parentOrigin), newCreatedProject.name + '.git');
                            tnp_helpers_1.Helpers.info("Adding git origin: " + projOrigin + "\n          to project " + newCreatedProject.name + " ...");
                            newCreatedProject.run("git init "
                                + ("&& git remote add origin " + projOrigin + " ") +
                                "&& git branch -M master " +
                                "&& git push --set-upstream origin master").sync();
                        }
                        return [4 /*yield*/, newCreatedProject.parent.filesStructure.struct('')];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/, newCreatedProject];
                }
            });
        });
    };
    ProjectFactory.prototype.createModelFromArgs = function (args, exit, cwd) {
        if (exit === void 0) { exit = true; }
        var argv = args.split(' ');
        var name = argv[1];
        var relativePath = argv[2];
        project_1.Project.From(cwd).filesFactory.createModel(relativePath, name);
        if (exit) {
            process.exit(0);
        }
    };
    ProjectFactory.prototype.workspaceFromArgs = function (args, exit, cwd) {
        if (exit === void 0) { exit = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var argv, _a, basedOn, version, skipInit, type, name;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        argv = args.split(' ');
                        if (!tnp_core_1._.isArray(argv) || argv.length < 2) {
                            tnp_helpers_1.Helpers.error("Top few argument for " + chalk_1.default.black('init') + " parameter.", true);
                            this.errorMsgCreateProject();
                        }
                        _a = require('minimist')(args.split(' ')), basedOn = _a.basedOn, version = _a.version, skipInit = _a.skipInit;
                        if (basedOn) {
                            tnp_helpers_1.Helpers.error("To create workspace site use command: " + tnp_config_1.config.frameworkName + " new: site name - of - workspace - site"
                                + "--basedOn relativePathToBaselineWorkspace", false, true);
                        }
                        type = argv[0];
                        name = argv[1];
                        return [4 /*yield*/, this.create({
                                type: type,
                                name: name,
                                cwd: cwd,
                                basedOn: void 0,
                                version: (tnp_core_1._.isString(version) && version.length <= 3 && version.startsWith('v')) ? version : void 0,
                                skipInit: skipInit
                            })];
                    case 1:
                        _b.sent();
                        if (exit) {
                            process.exit(0);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ProjectFactory.prototype.workspaceSiteFromArgs = function (args, exit, cwd, strictSiteMode) {
        if (exit === void 0) { exit = true; }
        if (strictSiteMode === void 0) { strictSiteMode = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var argv, alsoBasedOn;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        argv = args.split(' ');
                        if (args.length < 2) {
                            this.errorMsgCreateSite();
                        }
                        alsoBasedOn = ((argv.length > 2 && !strictSiteMode) ? (argv.slice(2)) : []);
                        return [4 /*yield*/, this.create({
                                type: 'workspace',
                                name: argv[0],
                                cwd: cwd,
                                basedOn: argv[1],
                                siteProjectMode: strictSiteMode ? 'strict' : 'dependency',
                                alsoBasedOn: alsoBasedOn
                            })];
                    case 1:
                        _a.sent();
                        if (exit) {
                            process.exit(0);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return ProjectFactory;
}());
exports.ProjectFactory = ProjectFactory;
//# sourceMappingURL=project-factory.backend.js.map