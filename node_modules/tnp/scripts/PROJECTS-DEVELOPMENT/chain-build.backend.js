"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var project_1 = require("../../project");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var chalk_1 = require("chalk");
/**
 * THIS FUNCTION CAN'T BE RECURIVE
 * event in worksapce childs...
 */
function chainBuild(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var allowedLibs, project, firstArg_1, selectedChild, orgArgs, deps, copyto, standaloneProjects, baselineProjects, depsWithBaseline_1, index, buildedOK, copytoPathes, projDep, action, error_1;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    allowedLibs = [
                        'angular-lib',
                        'isomorphic-lib',
                        'docker',
                    ];
                    project = project_1.Project.Current;
                    if (!project.isContainer) return [3 /*break*/, 1];
                    return [3 /*break*/, 3];
                case 1:
                    firstArg_1 = tnp_core_1._.first(args.split(' '));
                    if (project.isWorkspace || project.isContainer) {
                        selectedChild = project.children.find(function (c) { return c.name === firstArg_1; });
                        if (!selectedChild) {
                            selectedChild = project.children.find(function (c) {
                                var ok = (firstArg_1.search(c.name) !== -1);
                                if (ok) {
                                    args = args.replace(firstArg_1, c.name);
                                }
                                ;
                                return ok;
                            });
                        }
                        if (selectedChild) {
                            project = selectedChild;
                        }
                    }
                    return [4 /*yield*/, tnp_helpers_1.Helpers.compilationWrapper(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        project.removeFileByRelativePath(tnp_config_1.config.file.tnpEnvironment_json);
                                        return [4 /*yield*/, project.env.init(args)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, "Reiniting environment for chaing build...")];
                case 2:
                    _a.sent();
                    if (project.typeIsNot.apply(project, allowedLibs)) {
                        tnp_helpers_1.Helpers.error("Command only for project types: " + allowedLibs.join(','), false, true);
                    }
                    _a.label = 3;
                case 3:
                    orgArgs = args;
                    if (project.isWorkspaceChildProject) {
                        args += " --forClient=" + project.name;
                    }
                    deps = [];
                    copyto = {};
                    if (project.isStandaloneProject) {
                        deps = [project];
                    }
                    else if (project.isContainer) {
                        standaloneProjects = project.projectsFromArgs(args, function (newArgs) {
                            args = newArgs;
                        });
                        deps = standaloneProjects.map(function (p) {
                            copyto[p.project.location] = p.copyto;
                            return p.project;
                        });
                    }
                    else {
                        deps = project.projectsInOrderForChainBuild();
                    }
                    baselineProjects = [];
                    if (project.isSite) {
                        depsWithBaseline_1 = [];
                        deps.forEach(function (d) {
                            if (!!d.baseline) {
                                depsWithBaseline_1.push(d.baseline);
                                baselineProjects.push(d.baseline);
                            }
                            depsWithBaseline_1.push(d);
                        });
                        deps = depsWithBaseline_1;
                        //#endregion
                    }
                    tnp_helpers_1.Helpers.info("\n\n  CHAIN BUILD PLAN:\n" + deps.map(function (d, i) {
                        var s = tnp_core_1._.isArray(copyto[d.location]) ? " copy to: " + ((copyto[d.location].length === 0) ? '-' : copyto[d.location]
                            .map(function (p) { return chalk_1.default.italic(p.name); }
                        // + '(' + p.location + ')'
                        ).join(', ')) : '';
                        return (i + 1) + '. ' + chalk_1.default.bold(d.genericName) + s;
                    }).join('\n') + "\n\n  ");
                    index = 0;
                    buildedOK = [];
                    if (!(project.isStandaloneProject && !project.isDocker)) return [3 /*break*/, 5];
                    args += " --skipCopyToSelection true";
                    return [4 /*yield*/, project.selectProjectToCopyTO()];
                case 4:
                    copytoPathes = _a.sent();
                    if (copytoPathes.length > 0) {
                        copytoPathes.forEach(function (pathToPorjectToCopy) {
                            args += " --copyto=" + pathToPorjectToCopy;
                        });
                    }
                    _a.label = 5;
                case 5:
                    if (!(index < deps.length)) return [3 /*break*/, 10];
                    projDep = deps[index];
                    action = function (proj) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var isBaselineForThisBuild, argsForProjct, watchModeAvailable, command;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    isBaselineForThisBuild = baselineProjects.includes(proj);
                                    argsForProjct = args;
                                    return [4 /*yield*/, proj.compilerCache.isWatchModeAllowed];
                                case 1:
                                    watchModeAvailable = _a.sent();
                                    if (watchModeAvailable) {
                                        tnp_helpers_1.Helpers.info("[chainbuild] watch mode added for " + proj.name);
                                        argsForProjct += " --watchOnly";
                                    }
                                    else {
                                        tnp_helpers_1.Helpers.info("[chainbuild] full compilation needed for " + proj.name);
                                    }
                                    command = tnp_config_1.config.frameworkName + " bdw " + argsForProjct + " "
                                        + (" " + (!project.isStandaloneProject ? '--tnpNonInteractive' : ''))
                                        + (" " + (!global.hideLog ? '-verbose' : ''))
                                        + (" " + (isBaselineForThisBuild ? '--skipBuild=true' : ''))
                                        + (tnp_core_1._.isArray(copyto[proj.location]) ?
                                            copyto[proj.location].map(function (p) { return " --copyto=" + p.location + " "; }).join(' ')
                                            : '');
                                    tnp_helpers_1.Helpers.info("\n\n      Running command in " + (isBaselineForThisBuild ? 'baseline' : '') + " dependency \"" + chalk_1.default.bold(proj.genericName) + "\" : " + command + "\n\n      ");
                                    if (!(proj.isWorkspaceChildProject || proj.isStandaloneProject)) return [3 /*break*/, 3];
                                    return [4 /*yield*/, proj.run(command, {
                                            output: true,
                                            prefix: chalk_1.default.bold((isBaselineForThisBuild ? '[baseline]' : '') + "[" + proj.name + "]")
                                        }).unitlOutputContains(isBaselineForThisBuild ?
                                            'Skip build for ' :
                                            [
                                                'Waching files.. started.. please wait',
                                                'No need to copying on build finsh',
                                                'Build steps ended...',
                                            ], [
                                            'Error: Command failed',
                                            ': error ',
                                            'Command failed:',
                                            'Compilation error',
                                            'Error: Please compile your'
                                        ])];
                                case 2:
                                    _a.sent();
                                    _a.label = 3;
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); };
                    if (!!buildedOK.includes(projDep)) return [3 /*break*/, 9];
                    _a.label = 6;
                case 6:
                    _a.trys.push([6, 8, , 9]);
                    return [4 /*yield*/, action(projDep)];
                case 7:
                    _a.sent();
                    buildedOK.push(projDep);
                    return [3 /*break*/, 9];
                case 8:
                    error_1 = _a.sent();
                    tnp_helpers_1.Helpers.pressKeyAndContinue("Fix errors for project " + projDep.genericName + " and press ENTER to build again");
                    return [3 /*break*/, 5];
                case 9:
                    index++;
                    return [3 /*break*/, 5];
                case 10:
                    if (!!project.isContainer) return [3 /*break*/, 12];
                    return [4 /*yield*/, project.buildProcess.startForAppFromArgs(false, true, 'dist', orgArgs)];
                case 11:
                    _a.sent();
                    _a.label = 12;
                case 12: return [2 /*return*/];
            }
        });
    });
}
exports.chainBuild = chainBuild;
//# sourceMappingURL=chain-build.backend.js.map