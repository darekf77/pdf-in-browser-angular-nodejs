"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var express = require("express");
var tnp_core_2 = require("tnp-core");
var tnp_db_1 = require("tnp-db");
var project_1 = require("../../project");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var chalk_1 = require("chalk");
var chain_build_backend_1 = require("./chain-build.backend");
//#endregion
//#region BUILD
var $BUILD = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, chain_build_backend_1.chainBuild(args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var $CLEAN_BUILD = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                args += ' --nocache';
                return [4 /*yield*/, BUILD_DIST(args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var BUILD_DIST_WATCH = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    return [2 /*return*/, project_1.Project.Current.buildProcess.startForLibFromArgs(false, true, 'dist', args)];
}); }); };
var $BUILDWATCH = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                if (proj.isStandaloneProject && proj.typeIsNot('vscode-ext')) {
                    // TODO skipCopyToSelection no loger ipmortant
                    args = args + " --skipCopyToSelection --copytoAll";
                }
                return [4 /*yield*/, proj.buildProcess.startForLibFromArgs(false, true, 'dist', args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
function $DEFAULT_BUILD(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var project;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    project = project_1.Project.Current;
                    if (!project.isStandaloneProject) return [3 /*break*/, 4];
                    if (!project.typeIs('angular-lib')) return [3 /*break*/, 2];
                    return [4 /*yield*/, BUILD_DIST_WATCH(args)];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2:
                    if (!project.typeIs('isomorphic-lib')) return [3 /*break*/, 4];
                    return [4 /*yield*/, BUILD_DIST_WATCH(args)];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    if (!project.isWorkspaceChildProject) return [3 /*break*/, 6];
                    return [4 /*yield*/, $BUILD(args)];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 7];
                case 6:
                    process.exit(0);
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
}
var BUILD_DIST_WATCH_ALL = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        args += ' --buildForAllClients';
        project_1.Project.Current.buildProcess.startForLibFromArgs(false, true, 'dist', args);
        return [2 /*return*/];
    });
}); };
var BUILD_APP_WATCH = function (args) { return project_1.Project.Current.buildProcess.startForAppFromArgs(false, true, 'dist', args); };
var BUILD_DIST = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                return [4 /*yield*/, proj.buildProcess.startForLibFromArgs(false, false, 'dist', args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var BUILD_DIST_ALL = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                // console.log('AM FUCKING HEre',(Project.Current as Project).isGenerated)
                // process.exit(0)
                args += ' --buildForAllClients';
                return [4 /*yield*/, project_1.Project.Current.buildProcess.startForLibFromArgs(false, false, 'dist', args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var BUILD_BUNDLE = function (args) { return project_1.Project.Current.buildProcess.startForLibFromArgs(false, false, 'bundle', args); };
var BUILD_BUNDLE_PROD = function (args) { return project_1.Project.Current.buildProcess.startForLibFromArgs(true, false, 'bundle', args); };
//#endregion
//#region STATIC BUILD
var STATIC_BUILD = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var staticVersionOfProject;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!project_1.Project.Current.isWorkspace) {
                    tnp_helpers_1.Helpers.error("Please use:\n" + chalk_1.default.gray("$ " + tnp_config_1.config.frameworkName + " static:build:lib") + "\nor\n" + chalk_1.default.gray("$ " + tnp_config_1.config.frameworkName + " static:build:app") + "\n\ninside workspace children.\n    ", false, true);
                }
                return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
            case 1:
                staticVersionOfProject = _a.sent();
                if (!staticVersionOfProject) return [3 /*break*/, 3];
                return [4 /*yield*/, staticVersionOfProject.buildProcess.startForLib({ args: args, staticBuildAllowed: true })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                tnp_helpers_1.Helpers.log("No static version for project: " + project_1.Project.Current.name);
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
var STATIC_BUILD_LIB = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var staticVersionOfProject;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
            case 1:
                staticVersionOfProject = _a.sent();
                if (!staticVersionOfProject) return [3 /*break*/, 3];
                return [4 /*yield*/, staticVersionOfProject.buildProcess.startForLib({ args: args, staticBuildAllowed: true })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                tnp_helpers_1.Helpers.log("No static version for project: " + project_1.Project.Current.name);
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
var STATIC_BUILD_PROD = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var staticVersionOfProject;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
            case 1:
                staticVersionOfProject = _a.sent();
                if (!staticVersionOfProject) return [3 /*break*/, 3];
                return [4 /*yield*/, staticVersionOfProject.buildProcess.startForLib({ prod: true, args: args, staticBuildAllowed: true })];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                tnp_helpers_1.Helpers.log("No static version for project: " + project_1.Project.Current.name);
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
var STATIC_BUILD_LIB_PROD = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
            case 1: return [2 /*return*/, (_a.sent()).buildProcess
                    .startForLib({ prod: true, args: args, staticBuildAllowed: true })];
        }
    });
}); };
var STATIC_BUILD_APP = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
            case 1: return [2 /*return*/, (_a.sent()).buildProcess
                    .startForApp({ args: args, staticBuildAllowed: true })];
        }
    });
}); };
var STATIC_BUILD_APP_PROD = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
            case 1: return [2 /*return*/, (_a.sent()).buildProcess
                    .startForApp({ prod: true, args: args, staticBuildAllowed: true })];
        }
    });
}); };
var SB = function (args) { return STATIC_BUILD(args); };
var SBP = function (args) { return STATIC_BUILD_PROD(args); };
var SBL = function (args) { return STATIC_BUILD_LIB(args); };
var SBLP = function (args) { return STATIC_BUILD_LIB_PROD(args); };
var SBA = function (args) { return STATIC_BUILD_APP(args); };
var SBAP = function (args) { return STATIC_BUILD_APP_PROD(args); };
//#endregion
//#region SERVE
var $SERVE = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var proj, localUrl_1, app, filesLocation_1, mainfestOverride, configServe_1, app;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                if (!proj) {
                    proj = project_1.Project.nearestTo(tnp_core_1.crossPlatformPath(process.cwd()));
                }
                if (!(proj && proj.isStandaloneProject)) return [3 /*break*/, 3];
                if (!proj.env || !proj.env.config || !proj.env.config.build.options) {
                    tnp_helpers_1.Helpers.error("Please build your project first", false, true);
                }
                if (proj.typeIs('angular-lib')) {
                    localUrl_1 = "http://localhost:" + 8080 + "/" + proj.name + "/";
                    app = express();
                    filesLocation_1 = tnp_core_2.path.join(proj.location, tnp_config_1.config.folder.docs);
                    mainfestOverride = "/" + proj.name + "/" + tnp_config_1.config.file.manifest_webmanifest;
                    app.get("/" + proj.name + "/*", function (req, res) {
                        // res.set('Service-Worker-Allowed',
                        //   [
                        //     '/bs4-breakpoint/',
                        //   ].join(', '))
                        // console.log(`path: "${req.path}"`)
                        // console.log(`ORIG: "${req.originalUrl}"`)
                        var filePath = req.originalUrl
                            .replace(/\/$/, '')
                            .replace(new RegExp(tnp_helpers_1.Helpers.escapeStringForRegEx("/" + proj.name)), '')
                            .replace(new RegExp(tnp_helpers_1.Helpers.escapeStringForRegEx("/" + proj.name)), '') // QUICKFIX
                            .replace(/^\//, '');
                        // console.log(`path file: "${filePath}"`)
                        // res.send(filePath)
                        // res.end()
                        if (filePath.includes('?')) {
                            filePath = filePath.split('?')[0];
                        }
                        if (filePath === '') {
                            filePath = 'index.html';
                        }
                        if (filePath === tnp_config_1.config.file.manifest_webmanifest) {
                            var localMainfest = tnp_core_2.path.join(filesLocation_1, tnp_config_1.config.file.manifest_webmanifest);
                            var file = JSON.parse(tnp_helpers_1.Helpers.readFile(localMainfest));
                            file.start_url = localUrl_1;
                            // console.log('mainfest override')
                            res.json(file);
                        }
                        else {
                            res.sendFile(filePath, { root: filesLocation_1 });
                        }
                    });
                    app.listen(8080, function () {
                        console.log(tnp_config_1.config.frameworkName + " standalone serve is runnning on: " + localUrl_1);
                    });
                    //#endregion
                }
                if (!proj.typeIs('isomorphic-lib', 'docker')) return [3 /*break*/, 2];
                return [4 /*yield*/, proj.start(args)];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2: return [3 /*break*/, 4];
            case 3:
                configServe_1 = require('minimist')(args.split(' '));
                if (!configServe_1.port && !configServe_1.baseUrl && !configServe_1.outDir) {
                    tnp_helpers_1.Helpers.error("Bad arguments for " + tnp_config_1.config.frameworkName + " serve: " + configServe_1);
                }
                app = express();
                app.use(configServe_1.baseUrl, express.static(tnp_core_1.crossPlatformPath(tnp_core_2.path.join(tnp_core_1.crossPlatformPath(process.cwd()), configServe_1.outDir))));
                app.listen(configServe_1.port, function () {
                    console.log(tnp_config_1.config.frameworkName + " serve is runnning on: http://localhost:" + configServe_1.port + configServe_1.baseUrl + "\n\n      Access project link: http://localhost:" + proj.env.config.workspace.workspace.port + configServe_1.baseUrl + "\n\n      ");
                });
                _a.label = 4;
            case 4: return [2 /*return*/];
        }
    });
}); };
var $START = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                if (!proj.isStandaloneProject) return [3 /*break*/, 2];
                return [4 /*yield*/, $SERVE(args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
            case 2:
                if (!proj.isWorkspace) {
                    tnp_helpers_1.Helpers.error("Please use this command only on workspace level", false, true);
                }
                return [4 /*yield*/, proj.start(args)];
            case 3:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var $RUN = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, $START(args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
//#endregion
//#region BUILD
function BUILD_LIB(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, BUILD_DIST(args)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function BD(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, BUILD_DIST(args)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function BL(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, BUILD_DIST(args)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function BB(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, BUILD_BUNDLE(args)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
var $BUILD_DIST_PROD = function (args) { return project_1.Project.Current.buildProcess.startForLibFromArgs(true, false, 'dist', args); };
var $BUILD_BUNDLE_WATCH = function (args) { return project_1.Project.Current.buildProcess.startForLibFromArgs(false, true, 'bundle', args); };
var $BUILD_BUNDLE_PROD = function (args) { return project_1.Project.Current.buildProcess.startForLibFromArgs(true, false, 'bundle', args); };
var $BUILD_BUNDLE_PROD_WATCH = function (args) { return project_1.Project.Current.buildProcess.startForLibFromArgs(true, true, 'bundle', args); };
var $BUILD_APP_PROD = function (args) { return project_1.Project.Current.buildProcess.startForAppFromArgs(true, false, 'dist', args); };
var $BUILD_APP = function (args) { return project_1.Project.Current.buildProcess.startForAppFromArgs(false, false, 'dist', args); };
var $BUILD_APP_WATCH_PROD = function (args) { return project_1.Project.Current.buildProcess.startForAppFromArgs(false, true, 'dist', args); };
var $START_APP = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.start(args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var $BUILD_PROD = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var _a, _b;
    return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                if (!(_a = project_1.Project.Current).typeIs.apply(_a, tnp_config_1.config.allowedTypes.libs)) return [3 /*break*/, 2];
                return [4 /*yield*/, project_1.Project.Current.buildProcess.startForLibFromArgs(true, false, 'dist', args)];
            case 1:
                _c.sent();
                _c.label = 2;
            case 2:
                if (!(_b = project_1.Project.Current).typeIs.apply(_b, tnp_config_1.config.allowedTypes.app)) return [3 /*break*/, 4];
                return [4 /*yield*/, project_1.Project.Current.buildProcess.startForAppFromArgs(true, false, 'dist', args)];
            case 3:
                _c.sent();
                _c.label = 4;
            case 4:
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
var BUILD_LIB_WATCH = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    return [2 /*return*/, BUILD_DIST_WATCH(args)];
}); }); };
//#endregion
//#region RELEASE
//#region RELEASE NORMAL
var $RELEASE = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var argsObj, proj, _a, resolved, commandString, npmDeps_1, otherDeps, deps_1, projsTemplate, index, child, lastBuildHash, lastTagHash, sameHashes, error_1;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                argsObj = require('minimist')(args.split(' '));
                argsObj.args = args;
                proj = project_1.Project.Current;
                //  Helpers.cliTool.resolveChildProject(args, Project.Current) as Project;
                proj.packageJson.showDeps('Release');
                if (!proj.isContainer) return [3 /*break*/, 11];
                global.tnpNonInteractive = true;
                _a = tnp_helpers_1.Helpers.cliTool.argsFromBegin(args, function (a) {
                    return project_1.Project.From(tnp_core_2.path.join(proj.location, a));
                }), resolved = _a.resolved, commandString = _a.commandString;
                args = commandString;
                npmDeps_1 = proj.projectsInOrderForChainBuild(resolved).filter(function (d) { return d.name !== proj.name; });
                otherDeps = proj.children.filter(function (c) {
                    return !npmDeps_1.includes(c);
                });
                deps_1 = tslib_1.__spreadArrays(npmDeps_1, otherDeps);
                projsTemplate = function (child) {
                    return "\n\n    PROJECTS FOR RELEASE CHAIN:\n\n" + deps_1.map(function (p, i) {
                        var bold = ((child === null || child === void 0 ? void 0 : child.name) === p.name);
                        var index = i + 1;
                        return (bold ? chalk_1.default.bold(index.toString()) : index) + ". " + (bold ? chalk_1.default.bold(p.name) : p.name);
                    }).join('\n') + "\n\n\n" + tnp_helpers_1.Helpers.terminalLine() + "\nprocessing...\n    ";
                };
                index = 0;
                _b.label = 1;
            case 1:
                if (!(index < deps_1.length)) return [3 /*break*/, 10];
                tnp_helpers_1.Helpers.clearConsole();
                child = deps_1[index];
                tnp_helpers_1.Helpers.info(projsTemplate(child));
                lastBuildHash = child.packageJson.getBuildHash();
                lastTagHash = child.git.lastTagHash();
                sameHashes = false;
                if (!!sameHashes) return [3 /*break*/, 8];
                _b.label = 2;
            case 2:
                if (!true) return [3 /*break*/, 7];
                _b.label = 3;
            case 3:
                _b.trys.push([3, 5, , 6]);
                return [4 /*yield*/, child.release(handleStandalone(child, {}), true)];
            case 4:
                _b.sent();
                return [3 /*break*/, 7];
            case 5:
                error_1 = _b.sent();
                tnp_helpers_1.Helpers.pressKeyAndContinue("Please fix your project " + chalk_1.default.bold(child.name) + " and try again..");
                return [3 /*break*/, 6];
            case 6: return [3 /*break*/, 2];
            case 7: return [3 /*break*/, 9];
            case 8:
                tnp_helpers_1.Helpers.warn("\n\n        RELEASE SKIP\n        No realase needed for " + chalk_1.default.bold(child.name) + " ..just pushing to git...\n\n        "); // hash in package.json to check
                tnp_helpers_1.Helpers.pressKeyAndContinue();
                child.git.commit();
                child.git.pushCurrentBranch();
                _b.label = 9;
            case 9:
                index++;
                return [3 /*break*/, 1];
            case 10:
                tnp_helpers_1.Helpers.clearConsole();
                tnp_helpers_1.Helpers.info(projsTemplate());
                proj.git.commit("Update after release");
                proj.git.pushCurrentBranch();
                project_1.Project.Tnp.git.commit("Update after release");
                project_1.Project.Tnp.git.pushCurrentBranch();
                tnp_helpers_1.Helpers.info("\n\n\n    R E L E A S E   O F   C O N T I A I N E R  " + chalk_1.default.bold(proj.genericName) + "  D O N E\n\n\n    ");
                process.exit(0);
                return [3 /*break*/, 13];
            case 11: return [4 /*yield*/, proj.release(handleStandalone(proj, argsObj))];
            case 12:
                _b.sent();
                _b.label = 13;
            case 13:
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
function handleStandalone(proj, argsObj) {
    if (proj.packageJson.libReleaseOptions.obscure) {
        argsObj.obscure = true;
    }
    if (proj.packageJson.libReleaseOptions.ugly) {
        argsObj.uglify = true;
    }
    if (proj.packageJson.libReleaseOptions.nodts) {
        argsObj.nodts = true;
    }
    return argsObj;
}
//#endregion
//#region RELEASE OBSCURE
var $RELEASE_OBSCURED = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var argsObj, proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                argsObj = require('minimist')(args.split(' '));
                argsObj.obscure = true;
                argsObj.uglify = true;
                argsObj.prod = true;
                argsObj.args = args;
                proj = project_1.Project.Current;
                proj.checkIfReadyForNpm();
                proj.packageJson.showDeps('Release');
                return [4 /*yield*/, proj.release(argsObj)];
            case 1:
                _a.sent();
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
//#endregion
//#endregion
//#region OTHER
var BDW = function (args) { return BUILD_DIST_WATCH(args); };
var BLW = function (args) { return BUILD_DIST_WATCH(args); };
var $BAW = function (args) { return BUILD_APP_WATCH(args); };
var $RECREATE = function () {
    var proj = project_1.Project.Current;
    if (proj.isContainer) {
        var childs = proj.children
            .filter(function (c) { return c.frameworkVersionAtLeast('v2') && !c.isTnp; });
        for (var index = 0; index < childs.length; index++) {
            var c = childs[index];
            c.git.restoreLastVersion(tnp_config_1.config.file.package_json);
        }
        project_1.Project.projects = [];
        for (var index = 0; index < childs.length; index++) {
            var c = childs[index];
            childs[index] = project_1.Project.From(c.location);
            c = childs[index];
            tnp_helpers_1.Helpers.info("Saving package for " + c.location);
            c.packageJson.save("rereating container");
        }
    }
    process.exit(0);
};
var $BACKUP = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                return [4 /*yield*/, proj.saveToFile()];
            case 1:
                _a.sent();
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
var $STATIC_START = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    return [2 /*return*/, $START(args)];
}); }); };
var $INSTALL_LOCALLY = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var argsObj, proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                argsObj = require('minimist')(args.split(' '));
                argsObj.args = args;
                proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                if (!proj.isVscodeExtension) return [3 /*break*/, 2];
                return [4 /*yield*/, proj.installLocaly(argsObj)];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2:
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
function $BUILD_DOCS(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!project_1.Project.Current.isStandaloneProject) return [3 /*break*/, 3];
                    return [4 /*yield*/, project_1.Project.Current.filesStructure.init('')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, project_1.Project.Current.buildProcess.startForAppFromArgs(false, false, 'dist', args)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $BUILD_DOCS_PROD(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!project_1.Project.Current.isStandaloneProject) return [3 /*break*/, 3];
                    return [4 /*yield*/, project_1.Project.Current.filesStructure.init('')];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, project_1.Project.Current.buildProcess.startForAppFromArgs(true, false, 'dist', args)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
var $STOP = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var proj;
    return tslib_1.__generator(this, function (_a) {
        proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
        if (proj) {
            proj.stop();
        }
        process.exit(0);
        return [2 /*return*/];
    });
}); };
var $STOP_BUILD_DIST_WATCH = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var db, projectLocation, pidsToKill, index, pid;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
            case 1:
                db = _a.sent();
                projectLocation = project_1.Project.Current.location;
                return [4 /*yield*/, db.updateProcesses()];
            case 2:
                _a.sent();
                return [4 /*yield*/, db.getBuilds()];
            case 3:
                pidsToKill = (_a.sent())
                    .filter(function (f) {
                    return f.location === projectLocation
                        && f.buildOptions
                        && f.buildOptions.watch
                        && !f.buildOptions.appBuild;
                })
                    .map(function (f) { return f.pid; });
                tnp_helpers_1.Helpers.info("Killing build dist process in " + projectLocation);
                for (index = 0; index < pidsToKill.length; index++) {
                    pid = pidsToKill[index];
                    try {
                        tnp_helpers_1.Helpers.killProcess(pid);
                        tnp_helpers_1.Helpers.info("Process killed on pid " + pid);
                    }
                    catch (error) {
                        tnp_helpers_1.Helpers.warn("Not able to kill process on pid " + pid);
                    }
                }
                tnp_helpers_1.Helpers.info('Done');
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
function $DB_BUILDS_UPDATE() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.updateProcesses()];
                case 2:
                    _a.sent();
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $ACTIVE_SINGULAR_BUILD(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.hasParentWithSingularBuild()
                    // process.stdout.write();
                ];
                case 1:
                    _a.sent();
                    // process.stdout.write();
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
//#endregion
exports.default = {
    //#region export default
    $RECREATE: tnp_helpers_1.Helpers.CLIWRAP($RECREATE, '$RECREATE'),
    $BUILD_DOCS: tnp_helpers_1.Helpers.CLIWRAP($BUILD_DOCS, '$BUILD_DOCS'),
    $BUILD_DOCS_PROD: tnp_helpers_1.Helpers.CLIWRAP($BUILD_DOCS_PROD, '$BUILD_DOCS_PROD'),
    $BUILD: tnp_helpers_1.Helpers.CLIWRAP($BUILD, '$BUILD'),
    $CLEAN_BUILD: tnp_helpers_1.Helpers.CLIWRAP($CLEAN_BUILD, '$CLEAN_BUILD'),
    $BUILDWATCH: tnp_helpers_1.Helpers.CLIWRAP($BUILDWATCH, '$BUILDWATCH'),
    $ACTIVE_SINGULAR_BUILD: tnp_helpers_1.Helpers.CLIWRAP($ACTIVE_SINGULAR_BUILD, '$ACTIVE_SINGULAR_BUILD'),
    $DEFAULT_BUILD: tnp_helpers_1.Helpers.CLIWRAP($DEFAULT_BUILD, '$DEFAULT_BUILD'),
    $DB_BUILDS_UPDATE: tnp_helpers_1.Helpers.CLIWRAP($DB_BUILDS_UPDATE, '$DB_BUILDS_UPDATE'),
    $STOP_BUILD_DIST_WATCH: tnp_helpers_1.Helpers.CLIWRAP($STOP_BUILD_DIST_WATCH, '$STOP_BUILD_DIST_WATCH'),
    STATIC_BUILD: tnp_helpers_1.Helpers.CLIWRAP(STATIC_BUILD, 'STATIC_BUILD'),
    SB: tnp_helpers_1.Helpers.CLIWRAP(SB, 'SB'),
    STATIC_BUILD_PROD: tnp_helpers_1.Helpers.CLIWRAP(STATIC_BUILD_PROD, 'STATIC_BUILD_PROD'),
    SBP: tnp_helpers_1.Helpers.CLIWRAP(STATIC_BUILD_PROD, 'STATIC_BUILD_PROD'),
    STATIC_BUILD_LIB: tnp_helpers_1.Helpers.CLIWRAP(STATIC_BUILD_LIB, 'STATIC_BUILD_LIB'),
    SBL: tnp_helpers_1.Helpers.CLIWRAP(SBL, 'SBL'),
    STATIC_BUILD_LIB_PROD: tnp_helpers_1.Helpers.CLIWRAP(STATIC_BUILD_LIB_PROD, 'STATIC_BUILD_LIB_PROD'),
    SBLP: tnp_helpers_1.Helpers.CLIWRAP(SBLP, 'SBLP'),
    STATIC_BUILD_APP: tnp_helpers_1.Helpers.CLIWRAP(STATIC_BUILD_APP, 'STATIC_BUILD_APP'),
    SBA: tnp_helpers_1.Helpers.CLIWRAP(SBA, 'SBA'),
    STATIC_BUILD_APP_PROD: tnp_helpers_1.Helpers.CLIWRAP(STATIC_BUILD_APP_PROD, 'STATIC_BUILD_APP_PROD'),
    SBAP: tnp_helpers_1.Helpers.CLIWRAP(SBAP, 'SBAP'),
    BUILD_DIST: tnp_helpers_1.Helpers.CLIWRAP(BUILD_DIST, 'BUILD_DIST'),
    BUILD_DIST_ALL: tnp_helpers_1.Helpers.CLIWRAP(BUILD_DIST_ALL, 'BUILD_DIST_ALL'),
    BUILD_LIB: tnp_helpers_1.Helpers.CLIWRAP(BUILD_LIB, 'BUILD_LIB'),
    BD: tnp_helpers_1.Helpers.CLIWRAP(BD, 'BD'),
    BL: tnp_helpers_1.Helpers.CLIWRAP(BL, 'BL'),
    BUILD_BUNDLE_PROD: tnp_helpers_1.Helpers.CLIWRAP(BUILD_BUNDLE_PROD, 'BUILD_BUNDLE_PROD'),
    BUILD_BUNDLE: tnp_helpers_1.Helpers.CLIWRAP(BUILD_BUNDLE, 'BUILD_BUNDLE'),
    BB: tnp_helpers_1.Helpers.CLIWRAP(BB, 'BB'),
    BUILD_DIST_WATCH: tnp_helpers_1.Helpers.CLIWRAP(BUILD_DIST_WATCH, 'BUILD_DIST_WATCH'),
    BUILD_DIST_WATCH_ALL: tnp_helpers_1.Helpers.CLIWRAP(BUILD_DIST_WATCH_ALL, 'BUILD_DIST_WATCH_ALL'),
    BDW: tnp_helpers_1.Helpers.CLIWRAP(BDW, 'BDW'),
    BUILD_LIB_WATCH: tnp_helpers_1.Helpers.CLIWRAP(BUILD_LIB_WATCH, 'BUILD_LIB_WATCH'),
    BLW: tnp_helpers_1.Helpers.CLIWRAP(BLW, 'BLW'),
    BUILD_APP_WATCH: tnp_helpers_1.Helpers.CLIWRAP(BUILD_APP_WATCH, 'BUILD_APP_WATCH'),
    $BAW: tnp_helpers_1.Helpers.CLIWRAP($BAW, '$BAW'),
    $BUILD_DIST_PROD: tnp_helpers_1.Helpers.CLIWRAP($BUILD_DIST_PROD, '$BUILD_DIST_PROD'),
    $BUILD_BUNDLE_WATCH: tnp_helpers_1.Helpers.CLIWRAP($BUILD_BUNDLE_WATCH, '$BUILD_BUNDLE_WATCH'),
    $BUILD_BUNDLE_PROD: tnp_helpers_1.Helpers.CLIWRAP($BUILD_BUNDLE_PROD, '$BUILD_BUNDLE_PROD'),
    $BUILD_BUNDLE_PROD_WATCH: tnp_helpers_1.Helpers.CLIWRAP($BUILD_BUNDLE_PROD_WATCH, '$BUILD_BUNDLE_PROD_WATCH'),
    $BUILD_APP_PROD: tnp_helpers_1.Helpers.CLIWRAP($BUILD_APP_PROD, '$BUILD_APP_PROD'),
    $BUILD_APP: tnp_helpers_1.Helpers.CLIWRAP($BUILD_APP, '$BUILD_APP'),
    $BUILD_APP_WATCH_PROD: tnp_helpers_1.Helpers.CLIWRAP($BUILD_APP_WATCH_PROD, '$BUILD_APP_WATCH_PROD'),
    $START_APP: tnp_helpers_1.Helpers.CLIWRAP($START_APP, '$START_APP'),
    $BUILD_PROD: tnp_helpers_1.Helpers.CLIWRAP($BUILD_PROD, '$BUILD_PROD'),
    $START: tnp_helpers_1.Helpers.CLIWRAP($START, '$START'),
    $RUN: tnp_helpers_1.Helpers.CLIWRAP($RUN, '$RUN'),
    $STOP: tnp_helpers_1.Helpers.CLIWRAP($STOP, '$STOP'),
    $STATIC_START: tnp_helpers_1.Helpers.CLIWRAP($STATIC_START, '$STATIC_START'),
    $SERVE: tnp_helpers_1.Helpers.CLIWRAP($SERVE, '$SERVE'),
    $RELEASE: tnp_helpers_1.Helpers.CLIWRAP($RELEASE, '$RELEASE'),
    $INSTALL_LOCALLY: tnp_helpers_1.Helpers.CLIWRAP($INSTALL_LOCALLY, '$INSTALL_LOCALLY'),
    $BACKUP: tnp_helpers_1.Helpers.CLIWRAP($BACKUP, '$BACKUP'),
    $RELEASE_OBSCURED: tnp_helpers_1.Helpers.CLIWRAP($RELEASE_OBSCURED, '$RELEASE_OBSCURED'),
};
//# sourceMappingURL=BUILD.backend.js.map