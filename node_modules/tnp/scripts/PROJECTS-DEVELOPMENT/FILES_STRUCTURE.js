"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var project_1 = require("../../project");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
function $LINK_PROJECTS_AND_FILES(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            if (exit) {
                process.exit(0);
            }
            return [2 /*return*/];
        });
    });
}
exports.$LINK_PROJECTS_AND_FILES = $LINK_PROJECTS_AND_FILES;
function askForWhenEmpty() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var proj, yesNewProj, response;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (tnp_helpers_1.Helpers.exists(tnp_core_1.crossPlatformPath(tnp_core_2.path.join(tnp_core_1.crossPlatformPath(process.cwd()), tnp_config_1.config.file.package_json)))) {
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, tnp_helpers_1.Helpers.questionYesNo("Do you wanna init project in this folder ?")];
                case 1:
                    yesNewProj = _a.sent();
                    if (!yesNewProj) return [3 /*break*/, 3];
                    return [4 /*yield*/, tnp_helpers_1.Helpers.autocompleteAsk("Choose type of project", [
                            { name: 'Container', value: 'container' },
                            { name: 'Workspace', value: 'workspace' },
                            { name: 'Isomorphic Lib', value: 'isomorphic-lib' },
                            { name: 'Angular Lib', value: 'angular-lib' }
                        ])];
                case 2:
                    response = _a.sent();
                    tnp_helpers_1.Helpers.writeFile([tnp_core_1.crossPlatformPath(process.cwd()), tnp_config_1.config.file.package_json], {
                        name: tnp_core_1.crossPlatformPath(tnp_core_2.path.basename(tnp_core_1.crossPlatformPath(process.cwd()))),
                        version: '0.0.0',
                        tnp: {
                            type: response,
                            version: 'v2'
                        }
                    });
                    proj = project_1.Project.From(tnp_core_1.crossPlatformPath(process.cwd()));
                    return [2 /*return*/, proj];
                case 3: return [2 /*return*/, proj];
            }
        });
    });
}
function $STRUCT(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var proj;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, askForWhenEmpty()];
                case 1:
                    _a.sent();
                    proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                    if (!proj) return [3 /*break*/, 3];
                    return [4 /*yield*/, proj.filesStructure.struct(args)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.$STRUCT = $STRUCT;
function STRUCTURE(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, $STRUCT(args, exit)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.STRUCTURE = STRUCTURE;
function $INIT(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var proj;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, askForWhenEmpty()];
                case 1:
                    _a.sent();
                    proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                    if (!proj) return [3 /*break*/, 3];
                    return [4 /*yield*/, proj.filesStructure.init(args)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.$INIT = $INIT;
function INIT_ALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var proj;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    proj = tnp_helpers_1.Helpers.cliTool.resolveChildProject(args, project_1.Project.Current);
                    if (!proj) return [3 /*break*/, 2];
                    if (!args) {
                        args = '';
                    }
                    args += " --recrusive";
                    return [4 /*yield*/, proj.filesStructure.init(args)];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.INIT_ALL = INIT_ALL;
// export async function INIT_ALL(args: string, exit = true) {
//   await (Project.Current as Project).filesStructure.init(args);
//   if ((Project.Current as Project).isWorkspace || (Project.Current as Project).isContainer) {
//     for (let index1 = 0; index1 < (Project.Current as Project).children.length; index1++) {
//       const child1 = (Project.Current as Project).children[index1];
//       await child1.filesStructure.init(args);
//       for (let index2 = 0; index2 < child1.children.length; index2++) {
//         const child2 = child1.children[index2];
//         await child2.filesStructure.init(args);
//       }
//     }
//   }
//   if (exit) {
//     process.exit(0)
//   }
// }
function STATIC_INIT(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var staticVersion;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
                case 1:
                    staticVersion = _a.sent();
                    if (!staticVersion) return [3 /*break*/, 3];
                    return [4 /*yield*/, staticVersion.filesStructure.init(args)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.STATIC_INIT = STATIC_INIT;
function STATIC_INIT_ALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!args) {
                        args = '';
                    }
                    args += " --recrusive";
                    return [4 /*yield*/, project_1.Project.Current.StaticVersion()];
                case 1: 
                // process.exit(0)
                return [4 /*yield*/, (_a.sent()).filesStructure.init(args)];
                case 2:
                    // process.exit(0)
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.STATIC_INIT_ALL = STATIC_INIT_ALL;
function CLEAN(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.filesStructure.clearFromArgs(args)];
                case 1:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.CLEAN = CLEAN;
exports.CLEAR = CLEAN;
function STATIC_CLEAN(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion(false)];
                case 1: return [4 /*yield*/, (_a.sent()).filesStructure.clearFromArgs(args)];
                case 2:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.STATIC_CLEAN = STATIC_CLEAN;
exports.STATIC_CLEAR = STATIC_CLEAN;
function CLEAN_ALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!project_1.Project.Current.isWorkspaceChildProject) return [3 /*break*/, 2];
                    return [4 /*yield*/, project_1.Project.Current.parent.filesStructure.clear({ recrusive: true })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, project_1.Project.Current.filesStructure.clear({ recrusive: true })];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.CLEAN_ALL = CLEAN_ALL;
exports.CLEAR_ALL = CLEAN_ALL;
function STATIC_CLEAN_ALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion(false)];
                case 1: return [4 /*yield*/, (_a.sent()).filesStructure.clear({ recrusive: true })];
                case 2:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.STATIC_CLEAN_ALL = STATIC_CLEAN_ALL;
exports.STATIC_CLEAR_ALL = STATIC_CLEAN_ALL;
function RESET(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.filesStructure.resetFromArgs(args)];
                case 1:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.RESET = RESET;
function RESET_ALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!project_1.Project.Current.isWorkspaceChildProject) return [3 /*break*/, 2];
                    return [4 /*yield*/, project_1.Project.Current.parent.filesStructure.reset({ recrusive: true })];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 2: return [4 /*yield*/, project_1.Project.Current.filesStructure.reset({ recrusive: true })];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.RESET_ALL = RESET_ALL;
function STATIC_RESET(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion(false)];
                case 1: return [4 /*yield*/, (_a.sent()).filesStructure.resetFromArgs(args)];
                case 2:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.STATIC_RESET = STATIC_RESET;
function STATIC_RESET_ALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var staticProj;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.StaticVersion(false)];
                case 1:
                    staticProj = _a.sent();
                    if (staticProj.isWorkspaceChildProject) {
                        staticProj = staticProj.parent;
                    }
                    return [4 /*yield*/, project_1.Project.Current.StaticVersion(false)];
                case 2: return [4 /*yield*/, (_a.sent()).filesStructure.reset({ recrusive: true })];
                case 3:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.STATIC_RESET_ALL = STATIC_RESET_ALL;
function TEMPLATES_BUILDER() {
    project_1.Project.Current.filesTemplatesBuilder.rebuild();
    process.exit(0);
}
var $INIT_EVERYWHERE = function (args) {
    project_1.Project.projects.forEach(function (p) {
        p.run("tnp init").sync();
    });
};
// init().project();
// init().watch.project()
var S_INIT = function (args, exit) { return STATIC_INIT(args, exit); };
var CL = function (args, exit) { return CLEAN(args, exit); };
var SCL = function (args, exit) { return STATIC_CLEAN(args, exit); };
var SCLA = function (args, exit) { return STATIC_CLEAN_ALL(args, exit); };
var RST = function (args, exit) { return RESET(args, exit); };
var RSTA = function (args, exit) { return RESET_ALL(args, exit); };
var SRST = function (args, exit) { return STATIC_RESET(args, exit); };
var SRSTA = function (args, exit) { return STATIC_RESET_ALL(args, exit); };
exports.default = {
    $INIT: tnp_helpers_1.Helpers.CLIWRAP($INIT, '$INIT'),
    $STRUCT: tnp_helpers_1.Helpers.CLIWRAP($STRUCT, '$STRUCT'),
    INIT_ALL: tnp_helpers_1.Helpers.CLIWRAP(INIT_ALL, 'INIT_ALL'),
    STATIC_INIT: tnp_helpers_1.Helpers.CLIWRAP(STATIC_INIT, 'STATIC_INIT'),
    STATIC_INIT_ALL: tnp_helpers_1.Helpers.CLIWRAP(STATIC_INIT_ALL, 'STATIC_INIT_ALL'),
    S_INIT: tnp_helpers_1.Helpers.CLIWRAP(S_INIT, 'S_INIT'),
    CLEAN: tnp_helpers_1.Helpers.CLIWRAP(CLEAN, 'CLEAN'),
    CLEAR: tnp_helpers_1.Helpers.CLIWRAP(exports.CLEAR, 'CLEAR'),
    CL: tnp_helpers_1.Helpers.CLIWRAP(CL, 'CL'),
    STATIC_CLEAN: tnp_helpers_1.Helpers.CLIWRAP(STATIC_CLEAN, 'STATIC_CLEAN'),
    STATIC_CLEAR: tnp_helpers_1.Helpers.CLIWRAP(exports.STATIC_CLEAR, 'STATIC_CLEAR'),
    SCL: tnp_helpers_1.Helpers.CLIWRAP(SCL, 'SCL'),
    CLEAN_ALL: tnp_helpers_1.Helpers.CLIWRAP(CLEAN_ALL, 'CLEAN_ALL'),
    CLEAR_ALL: tnp_helpers_1.Helpers.CLIWRAP(exports.CLEAR_ALL, 'CLEAR_ALL'),
    STATIC_CLEAN_ALL: tnp_helpers_1.Helpers.CLIWRAP(STATIC_CLEAN_ALL, 'STATIC_CLEAN_ALL'),
    STATIC_CLEAR_ALL: tnp_helpers_1.Helpers.CLIWRAP(exports.STATIC_CLEAR_ALL, 'STATIC_CLEAR_ALL,'),
    SCLA: tnp_helpers_1.Helpers.CLIWRAP(SCLA, 'SCLA'),
    RESET: tnp_helpers_1.Helpers.CLIWRAP(RESET, 'RESET'),
    RESET_ALL: tnp_helpers_1.Helpers.CLIWRAP(RESET_ALL, 'RESET_ALL'),
    RST: tnp_helpers_1.Helpers.CLIWRAP(RST, 'RST'),
    RSTA: tnp_helpers_1.Helpers.CLIWRAP(RSTA, 'RSTA'),
    STATIC_RESET: tnp_helpers_1.Helpers.CLIWRAP(STATIC_RESET, 'STATIC_RESET'),
    STATIC_RESET_ALL: tnp_helpers_1.Helpers.CLIWRAP(STATIC_RESET_ALL, 'STATIC_RESET_ALL'),
    SRST: tnp_helpers_1.Helpers.CLIWRAP(SRST, 'SRST'),
    SRSTA: tnp_helpers_1.Helpers.CLIWRAP(SRSTA, 'SRSTA'),
    TEMPLATES_BUILDER: tnp_helpers_1.Helpers.CLIWRAP(TEMPLATES_BUILDER, 'TEMPLATES_BUILDER'),
    $INIT_EVERYWHERE: tnp_helpers_1.Helpers.CLIWRAP($INIT_EVERYWHERE, '$INIT_EVERYWHERE'),
};
//#endregion
//# sourceMappingURL=FILES_STRUCTURE.js.map