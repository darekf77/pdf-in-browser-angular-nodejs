"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var project_1 = require("../../project");
var tnp_models_1 = require("tnp-models");
function SHOW_LOOP(c, maximum, errExit) {
    if (c === void 0) { c = 0; }
    if (maximum === void 0) { maximum = Infinity; }
    if (errExit === void 0) { errExit = false; }
    if (tnp_core_1._.isString(c)) {
        var _a = require('minimist')(c.split(' ')), _b = _a.max, max = _b === void 0 ? Infinity : _b, _c = _a.err, err = _c === void 0 ? false : _c;
        maximum = max;
        errExit = err;
        // console.log('max',max)
        // console.log('err',err)
        c = 0;
    }
    if (c === maximum) {
        process.exit(errExit ? 1 : 0);
    }
    console.log("counter: " + c);
    setTimeout(function () {
        SHOW_LOOP(++c, maximum, errExit);
    }, 1000);
}
function SHOW_LOOP_MESSAGES(c, maximum, errExit) {
    if (c === void 0) { c = 0; }
    if (maximum === void 0) { maximum = Infinity; }
    if (errExit === void 0) { errExit = false; }
    if (tnp_core_1._.isString(c)) {
        var _a = require('minimist')(c.split(' ')), _b = _a.max, max = _b === void 0 ? Infinity : _b, _c = _a.err, err = _c === void 0 ? false : _c;
        maximum = tnp_core_1._.isNumber(max) ? max : Infinity;
        errExit = err;
        // console.log('max',max)
        // console.log('err',err)
        c = 0;
    }
    if (c === maximum) {
        process.exit(errExit ? 1 : 0);
    }
    tnp_models_1.PROGRESS_DATA.log({ msg: "counter: " + c, value: c * 7 });
    setTimeout(function () {
        SHOW_LOOP_MESSAGES(++c, maximum, errExit);
    }, 3000);
}
function $PROCESS_CWD() {
    console.log(tnp_core_1.crossPlatformPath(process.cwd()));
    process.exit(0);
}
var $TEST_WATCH = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.filesStructure.init(args)];
            case 1:
                _a.sent();
                return [4 /*yield*/, project_1.Project.Current.tests.startAndWatch(args.trim().split(' '))];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var $TEST_WATCH_DEBUG = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.filesStructure.init(args)];
            case 1:
                _a.sent();
                return [4 /*yield*/, project_1.Project.Current.tests.startAndWatch(args.trim().split(' '), true)];
            case 2:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var $TEST = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.filesStructure.init(args)];
            case 1:
                _a.sent();
                return [4 /*yield*/, project_1.Project.Current.tests.start(args.trim().split(' '))];
            case 2:
                _a.sent();
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
var $TEST_DEBUG = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, project_1.Project.Current.filesStructure.init(args)];
            case 1:
                _a.sent();
                return [4 /*yield*/, project_1.Project.Current.tests.start(args.trim().split(' '), false, true)];
            case 2:
                _a.sent();
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
var $READLAST = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var argsObj, _a, lines, _b, file, res;
    return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                argsObj = require('minimist')(args.split(' '));
                _a = argsObj.lines, lines = _a === void 0 ? 100 : _a, _b = argsObj.file, file = _b === void 0 ? '' : _b;
                return [4 /*yield*/, tnp_helpers_1.Helpers.getLinesFromFiles(argsObj.file, Number(argsObj.lines))];
            case 1:
                res = _c.sent();
                console.log('lines', res);
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
var TEST_ASYNC_PROC = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var p;
    return tslib_1.__generator(this, function (_a) {
        global.tnpShowProgress = true;
        p = tnp_helpers_1.Helpers.run("tnp show:loop " + args, { output: false, cwd: process.cwd() }).async();
        p.stdout.on('data', function (chunk) {
            console.log('prod:' + chunk);
        });
        p.on('exit', function (c) {
            console.log('process exited with code: ' + c);
            process.exit(0);
        });
        return [2 /*return*/];
    });
}); };
var TEST_SYNC_PROC = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var p;
    return tslib_1.__generator(this, function (_a) {
        global.tnpShowProgress = true;
        try {
            p = tnp_helpers_1.Helpers.run("tnp show:loop " + args, { output: false, cwd: process.cwd() }).sync();
            process.exit(0);
        }
        catch (err) {
            console.log('Erroroejk');
            process.exit(1);
        }
        return [2 /*return*/];
    });
}); };
function $SHOW_LOOP(args) {
    global.tnpShowProgress = true;
    console.log('process pid', process.pid);
    console.log('process ppid', process.ppid);
    // process.on('SIGTERM', () => {
    //   process.exit(0)
    // })
    SHOW_LOOP(args);
}
function $SHOW_LOOP_MESSAGES(args) {
    global.tnpShowProgress = true;
    console.log('process pid', process.pid);
    console.log('process ppid', process.ppid);
    // process.on('SIGTERM', () => {
    //   process.exit(0)
    // })
    SHOW_LOOP_MESSAGES(args);
}
exports.default = {
    $PROCESS_CWD: tnp_helpers_1.Helpers.CLIWRAP($PROCESS_CWD, '$PROCESS_CWD'),
    $TEST_WATCH: tnp_helpers_1.Helpers.CLIWRAP($TEST_WATCH, '$TEST_WATCH'),
    $TEST_WATCH_DEBUG: tnp_helpers_1.Helpers.CLIWRAP($TEST_WATCH_DEBUG, '$TEST_WATCH_DEBUG'),
    $TEST: tnp_helpers_1.Helpers.CLIWRAP($TEST, '$TEST'),
    $TEST_DEBUG: tnp_helpers_1.Helpers.CLIWRAP($TEST_DEBUG, '$TEST_DEBUG'),
    $READLAST: tnp_helpers_1.Helpers.CLIWRAP($READLAST, '$READLAST'),
    TEST_ASYNC_PROC: tnp_helpers_1.Helpers.CLIWRAP(TEST_ASYNC_PROC, 'TEST_ASYNC_PROC'),
    TEST_SYNC_PROC: tnp_helpers_1.Helpers.CLIWRAP(TEST_SYNC_PROC, 'TEST_SYNC_PROC'),
    $SHOW_LOOP: tnp_helpers_1.Helpers.CLIWRAP($SHOW_LOOP, '$SHOW_LOOP'),
    $SHOW_LOOP_MESSAGES: tnp_helpers_1.Helpers.CLIWRAP($SHOW_LOOP_MESSAGES, '$SHOW_LOOP_MESSAGES'),
};
//#endregion
//# sourceMappingURL=TESTS.js.map