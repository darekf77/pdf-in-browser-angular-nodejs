"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_cli_1 = require("tnp-cli");
var tnp_config_1 = require("tnp-config");
var generalHelp = "\n\nTo use help run:\ntnp help <command name>\n\n";
function getHelpFor(command, warnings) {
    if (warnings === void 0) { warnings = false; }
    var docs;
    tnp_core_2.glob.sync(tnp_config_1.config.pathes.scripts.allHelpFiles)
        .find(function (file) {
        var exportetFunctions = tnp_helpers_1.Helpers.require(tnp_core_2.path.resolve(file));
        var groupHelp = [];
        var commandNameFit = false;
        var result = !!(tnp_core_1._.isObject(exportetFunctions) && Object.keys(exportetFunctions).find(function (k) {
            console.log('k', k);
            var v = exportetFunctions[k];
            if (typeof v === 'string') {
                groupHelp.push({ title: k, content: v });
            }
            if (warnings && typeof v === 'function') {
                var tsFile = file.replace(tnp_core_2.path.basename(file), tnp_core_2.path.basename(file).replace('.js', '.ts'));
                console.log("WARN: No documentation for: " + v.name + "  in " + tsFile.replace('dist', 'src') + " ");
            }
            if (tnp_helpers_1.Helpers.cliTool.simplifiedCmd(k) === tnp_helpers_1.Helpers.cliTool.simplifiedCmd(command)) {
                commandNameFit = true;
            }
            var res = Array.isArray(v) && v.length == 2 && tnp_core_1._.isString(v[1]) && command !== undefined
                && tnp_helpers_1.Helpers.cliTool.simplifiedCmd(k) === tnp_helpers_1.Helpers.cliTool.simplifiedCmd(command);
            if (res) {
                docs = v[1];
            }
            return res;
        }));
        if (!result && commandNameFit && !!groupHelp) {
            docs = groupHelp.map(function (gh) {
                return gh.title + "\n" + gh.content;
            }).join('\n');
            return true;
        }
        return result;
    });
    return docs;
}
exports.getHelpFor = getHelpFor;
function help(argsString) {
    var args = argsString.trim().split(' ').filter(function (f) { return !!f; });
    console.log(args);
    if (args.length === 0) {
        getHelpFor(undefined, true);
    }
    else if (args.length >= 2 && args[1] === '!') {
        getHelpFor('', true);
    }
    else if (args.length >= 1) {
        var command = args[0];
        var docs = getHelpFor(command);
        if (docs) {
            tnp_helpers_1.Helpers.clearConsole();
            console.log("\nHelp for command \"" + tnp_cli_1.CLI.chalk.green(command) + "\":\n");
            console.log(docs);
        }
        else {
            tnp_helpers_1.Helpers.error("No documentation for " + tnp_cli_1.CLI.chalk.bold(command));
        }
    }
    process.exit(0);
}
var $HELP = function (args) {
    help(args);
};
var HELP = function (args) {
    help(args);
};
exports.default = {
    $HELP: tnp_helpers_1.Helpers.CLIWRAP($HELP, '$HELP'),
    HELP: tnp_helpers_1.Helpers.CLIWRAP(HELP, 'HELP'),
};
//#endregion
//# sourceMappingURL=HELP.backend.js.map