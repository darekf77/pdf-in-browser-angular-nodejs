"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var open = require("open");
var tnp_core_4 = require("tnp-core");
var chalk_1 = require("chalk");
var project_1 = require("../../project/abstract/project");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var tnp_db_1 = require("tnp-db");
var npm_packages_helpers_backend_1 = require("../../project/features/npm-packages/npm-packages-helpers.backend");
var morphi_1 = require("morphi");
function copyModuleto(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, packageName, project;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = args.split(' '), packageName = _a[0], project = _a[1];
                    if (!(tnp_core_1._.isString(packageName) && packageName.trim() !== '' && tnp_core_1._.isString(project) && project.trim() !== '')) return [3 /*break*/, 2];
                    if (packageName.startsWith(tnp_config_1.config.folder.node_modules + "/")) {
                        packageName = packageName.replace(tnp_config_1.config.folder.node_modules + "/", '');
                    }
                    if (!tnp_core_2.path.isAbsolute(project)) {
                        project = project_1.Project.From(tnp_core_2.path.join(process.cwd(), project));
                    }
                    else {
                        project = project_1.Project.From(project);
                    }
                    return [4 /*yield*/, project.node_modules.copy(packageName).to(project)];
                case 1:
                    _b.sent();
                    tnp_helpers_1.Helpers.info("Copy DONE");
                    return [3 /*break*/, 3];
                case 2:
                    tnp_helpers_1.Helpers.error("Bad argument for " + chalk_1.default.bold('copy to module') + " : \"" + args + "\"");
                    _b.label = 3;
                case 3:
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function copyToDestination(destLocaiton) {
    var currentLib = project_1.Project.Current;
    var destination = project_1.Project.From(destLocaiton);
    if (!destination) {
        tnp_helpers_1.Helpers.error("Incorect project in: " + destLocaiton);
    }
    currentLib.copyManager.copyBuildedDistributionTo(destination, void 0, false);
    tnp_helpers_1.Helpers.info("Project \"" + chalk_1.default.bold(currentLib.name) + "\" successfully installed in \"" + destination.name + "\"");
}
function copyToHandleArgs(args) {
    var destLocaitons = args.split(' ').filter(function (a) { return a.trim() !== ''; });
    destLocaitons.forEach(function (c) { return copyToDestination(c); });
    process.exit(0);
}
function $INSTALL(args, smooth, exit) {
    if (smooth === void 0) { smooth = false; }
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.npmPackages.installFromArgs(args, smooth)];
                case 1:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.$INSTALL = $INSTALL;
function $UNINSTALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.npmPackages.uninstallFromArgs(args)];
                case 1:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.$UNINSTALL = $UNINSTALL;
function $DEPS_SET_CATEGORY(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var argumn, packages, index, pkg;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    argumn = (args.trim() === '' ? [] : args.split(' '));
                    process.chdir(project_1.Project.Tnp.location);
                    packages = npm_packages_helpers_backend_1.resolvePacakgesFromArgs(argumn);
                    index = 0;
                    _a.label = 1;
                case 1:
                    if (!(index < packages.length)) return [3 /*break*/, 4];
                    pkg = packages[index];
                    return [4 /*yield*/, project_1.Project.Tnp.packageJson.setCategoryFor(pkg)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    index++;
                    return [3 /*break*/, 1];
                case 4:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.$DEPS_SET_CATEGORY = $DEPS_SET_CATEGORY;
function $DEPS_UPDATE_FROM(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var locations;
        return tslib_1.__generator(this, function (_a) {
            locations = (args.trim() === '' ? [] : args.split(' '));
            if (tnp_core_1._.isArray(locations)) {
                locations = locations
                    .map(function (l) {
                    if (tnp_core_2.path.isAbsolute(l)) {
                        return tnp_core_2.path.resolve(l);
                    }
                    return tnp_core_2.path.resolve(tnp_core_2.path.join(process.cwd(), l));
                });
            }
            project_1.Project.Current.packageJson.updateFrom(locations);
            if (exit) {
                process.exit(0);
            }
            return [2 /*return*/];
        });
    });
}
exports.$DEPS_UPDATE_FROM = $DEPS_UPDATE_FROM;
function $RESET_NPM(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, project_1.Project.Current.packageJson.reset()];
                case 1:
                    _a.sent();
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.$RESET_NPM = $RESET_NPM;
function $RESET_NPM_ALL(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, projects, index, project;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.getProjects()];
                case 2:
                    projects = _a.sent();
                    for (index = 0; index < projects.length; index++) {
                        project = projects[index];
                        // console.log(project.project.genericName)
                        project.project.packageJson.reset();
                    }
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.$RESET_NPM_ALL = $RESET_NPM_ALL;
function DEPS_SHOW(args) {
    project_1.Project.Current.packageJson.showDeps('deps show');
    process.exit(0);
}
var SHOW_DEPS = function (args) { return DEPS_SHOW(args); };
function DEPS_HIDE(args) {
    if (project_1.Project.Current.isCoreProject) {
        project_1.Project.Current.packageJson.showDeps('deps show');
    }
    else {
        project_1.Project.Current.packageJson.hideDeps('deps hide');
    }
    process.exit(0);
}
var HIDE_DEPS = function (args) { return DEPS_HIDE(args); };
function $INSTALL_IN_TNP() {
    var inTnp = tnp_core_2.path.join(project_1.Project.Tnp.location, tnp_config_1.config.folder.node_modules, project_1.Project.Current.name);
    var inCurrent = tnp_core_2.path.join(project_1.Project.Current.location, tnp_config_1.config.folder.dist);
    if (!tnp_core_3.fse.existsSync(inCurrent)) {
        tnp_helpers_1.Helpers.error("Please build dist version of project first with tsc: tsc", false, true);
    }
    tnp_helpers_1.Helpers.tryRemoveDir(inTnp);
    tnp_helpers_1.Helpers.tryCopyFrom(inCurrent, inTnp);
    tnp_helpers_1.Helpers.info("Current project \"" + project_1.Project.Current.genericName + "\" installed in node_moduels of tnp");
    process.exit(0);
}
var $I_IN_TNP = function () {
    $INSTALL_IN_TNP();
};
var $DEPS_SET_CAT = function (args) {
    $DEPS_SET_CATEGORY(args);
};
function $DEPS_FROM(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, $DEPS_UPDATE_FROM(args)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function $DEPS_RESET(args) {
    $RESET_NPM(args);
}
function $DEPS_RESET_ALL(args) {
    $RESET_NPM_ALL(args);
}
function $DEDUPE(args) {
    project_1.Project.Current.node_modules.dedupe(args.trim() === '' ? void 0 : args.split(' '));
    process.exit(0);
}
function $DEDUPE_COUNT(args) {
    project_1.Project.Current.node_modules.dedupeCount(args.trim() === '' ? void 0 : args.split(' '));
    process.exit(0);
}
function $DEDUPE_CHECK(args) {
    project_1.Project.Current.node_modules.dedupeCount(args.trim() === '' ? void 0 : args.split(' '));
    process.exit(0);
}
function $DEPS_DEDUPE(args) {
    project_1.Project.Current.node_modules.dedupe();
    process.exit(0);
}
function $DEPS_RECREATE(args) {
    DEPS_SHOW(args);
}
function $SHOW_CHILDREN() {
    console.log(project_1.Project.Current.children.map(function (c) { return c.genericName; }).join('\n'));
    process.exit(0);
}
function $SHOW_DB() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, port, addressToShow;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.getWokerPort()];
                case 2:
                    port = _a.sent();
                    if (!tnp_core_1._.isNumber(port)) return [3 /*break*/, 4];
                    addressToShow = morphi_1.Morphi.getHttpPathBy(tnp_db_1.DbDaemonController, port, 'info');
                    return [4 /*yield*/, open(addressToShow)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    tnp_helpers_1.Helpers.run("code --goto " + tnp_config_1.config.dbLocation).sync(); // TODO it will never happen
                    _a.label = 5;
                case 5:
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $DB_SHOW() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, $SHOW_DB()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function $DB_CODE() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    tnp_helpers_1.Helpers.run("code " + db.location).sync();
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $CODE_DB() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, $DB_CODE()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
var $OPEN_DB = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    switch (_a.label) {
        case 0: return [4 /*yield*/, $SHOW_DB()];
        case 1: return [2 /*return*/, _a.sent()];
    }
}); }); };
var $DB_OPEN = function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
    switch (_a.label) {
        case 0: return [4 /*yield*/, $SHOW_DB()];
        case 1: return [2 /*return*/, _a.sent()];
    }
}); }); };
function $SHOW_WORKER() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, $SHOW_DB()];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function $SHOW_PROJECTS() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, projects;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.getProjects()];
                case 2:
                    projects = (_a.sent());
                    console.log(projects.map(function (p) { return p.locationOfProject; }).join('\n'));
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $SHOW_PROJECTS_NAVI() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, projects;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.getProjects()];
                case 2:
                    projects = (_a.sent());
                    console.log(projects.filter(function (p) { return p.project.typeIs('navi'); }).map(function (p) { return p.locationOfProject; }).join('\n'));
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $SHOW_CORE_MODULES() {
    var container = project_1.Project.by('container', 'v1');
    var workspace = project_1.Project.by('workspace', 'v1');
    var al = project_1.Project.by('angular-lib', 'v1');
    var il = project_1.Project.by('isomorphic-lib', 'v1');
    var containerv2 = project_1.Project.by('container', 'v2');
    var workspacev2 = project_1.Project.by('workspace', 'v2');
    var alv2 = project_1.Project.by('angular-lib', 'v2');
    var ilv2 = project_1.Project.by('isomorphic-lib', 'v2');
    console.log("\nv1 Container core:\t    " + container.location + "\nv1 Workspace core:\t    " + workspace.location + "\nv1 Angular-lib core:\t  " + al.location + "\nv1 Isomorphic-lib core:\t  " + il.location + "\n\nv2 Container core:\t    " + containerv2.location + "\nv2 Workspace core:\t    " + workspacev2.location + "\nv2 Angular-lib core:\t  " + alv2.location + "\nv2 Isomorphic-lib core:\t  " + ilv2.location + "\n  ");
    process.exit(0);
}
function DEPS_SHOW_IF_STANDALONE(args) {
    tnp_helpers_1.Helpers.log("Hook update start");
    if (project_1.Project.Current.isStandaloneProject) {
        tnp_helpers_1.Helpers.info("Showing deps for standalone project");
        project_1.Project.Current.packageJson.save('is standalone show');
    }
    tnp_helpers_1.Helpers.git.commitWhatIs("show package.json dependencies");
    tnp_helpers_1.Helpers.log("Hook update ended");
    process.exit(0);
}
function $DEPS_CLEAN(args) {
    DEPS_HIDE(args);
}
var $I = function (args) {
    $INSTALL(args);
};
var $REINSTALL = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var proj;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                proj = project_1.Project.Current;
                return [4 /*yield*/, proj.clear()];
            case 1:
                _a.sent();
                return [4 /*yield*/, proj.filesStructure.init(args)];
            case 2:
                _a.sent();
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
var $SINSTALL = function (args) {
    $INSTALL(args, true);
};
function $LINKCORE() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            project_1.Project.linkCoreFolders();
            tnp_helpers_1.Helpers.info('Done linking core folders');
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
function templateBin(debug) {
    if (debug === void 0) { debug = false; }
    return "#!/usr/bin/env node " + (debug ? '--inspect' : '') + "\nvar { fse, crossPlatformPath, path } = require('tnp-core');\nvar path = {\n  dist: path.join(crossPlatformPath(__dirname), '../dist/start.backend.js'),\n  bundle: path.join(crossPlatformPath(__dirname), '../start.backend.js')\n}\nvar p = fse.existsSync(path.dist) ? path.dist : path.bundle;\nglobal.globalSystemToolMode = true;\nvar run = require(p).run;\nrun(process.argv.slice(2));\n  ";
}
function templateStartBackedn() {
    return "import { Helpers } from 'tnp-helpers';\n\nexport async function run(args: string[]) {\n    const command = args.shift() as any;\n    if (command === 'test') {\n      Helpers.clearConsole();\n    }\n    process.stdin.resume();\n  }";
}
function $LINK() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var project, glboalBinFolderPath_1, globalNodeModules, packageInGlobalNodeModules, pattern, countLinkInPackageJsonBin, pathNormalLink, pathDebugLink, startBackendFile, childrens, index, c, ownPackage, _loop_1, index;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    project = project_1.Project.Current;
                    if (!project.isStandaloneProject) return [3 /*break*/, 3];
                    if (!(process.platform !== 'win32')) return [3 /*break*/, 2];
                    return [4 /*yield*/, tnp_helpers_1.Helpers.isElevated()];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2:
                    glboalBinFolderPath_1 = tnp_core_2.path.dirname(tnp_helpers_1.Helpers.run("which " + tnp_config_1.config.frameworkName, { output: false }).sync().toString());
                    if (process.platform === 'win32') {
                        glboalBinFolderPath_1 = tnp_core_1.crossPlatformPath(glboalBinFolderPath_1);
                        if (/^\/[a-z]\//.test(glboalBinFolderPath_1)) {
                            glboalBinFolderPath_1 = glboalBinFolderPath_1.replace(/^\/[a-z]\//, glboalBinFolderPath_1.charAt(1).toUpperCase() + ":/");
                        }
                    }
                    globalNodeModules = tnp_core_1.crossPlatformPath(tnp_core_2.path.join(glboalBinFolderPath_1, (process.platform === 'win32') ? tnp_config_1.config.folder.node_modules : "../lib/" + tnp_config_1.config.folder.node_modules));
                    packageInGlobalNodeModules = tnp_core_1.crossPlatformPath(tnp_core_2.path.resolve(tnp_core_2.path.join(globalNodeModules, project.name)));
                    // packageInGlobalNodeModules
                    tnp_helpers_1.Helpers.removeIfExists(packageInGlobalNodeModules);
                    project.linkTo(packageInGlobalNodeModules);
                    if (!tnp_helpers_1.Helpers.exists(project.path(tnp_config_1.config.folder.bin).absolute.normal)) {
                        tnp_helpers_1.Helpers.mkdirp(project.path(tnp_config_1.config.folder.bin).absolute.normal);
                    }
                    pattern = project.path(tnp_config_1.config.folder.bin).absolute.normal + "/*";
                    countLinkInPackageJsonBin = tnp_core_4.glob
                        .sync(pattern)
                        .map(function (f) { return tnp_core_1.crossPlatformPath(f); })
                        .filter(function (f) {
                        return (tnp_helpers_1.Helpers.readFile(f) || '').startsWith('#!/usr/bin/env');
                    });
                    if (countLinkInPackageJsonBin.length === 0) {
                        pathNormalLink = tnp_helpers_1.Helpers.path.create(project.location, tnp_config_1.config.folder.bin, "" + project.name);
                        tnp_helpers_1.Helpers.writeFile(pathNormalLink, templateBin());
                        countLinkInPackageJsonBin.push(pathNormalLink);
                        pathDebugLink = tnp_helpers_1.Helpers.path.create(project.location, tnp_config_1.config.folder.bin, project.name + "-debug");
                        tnp_helpers_1.Helpers.writeFile(pathDebugLink, templateBin(true));
                        countLinkInPackageJsonBin.push(pathDebugLink);
                        startBackendFile = tnp_helpers_1.Helpers.path.create(project.location, tnp_config_1.config.folder.src, tnp_config_1.config.file.start_backend_ts);
                        if (!tnp_helpers_1.Helpers.exists(startBackendFile)) {
                            tnp_helpers_1.Helpers.writeFile(startBackendFile, templateStartBackedn());
                        }
                    }
                    project.packageJson.data.bin = {};
                    countLinkInPackageJsonBin.forEach(function (p) {
                        project.packageJson.data.bin[tnp_core_2.path.basename(p)] = "bin/" + tnp_core_2.path.basename(p);
                    });
                    project.packageJson.save("update bin data");
                    if (tnp_core_1._.isObject(project.packageJson.data.bin)) {
                        Object.keys(project.packageJson.data.bin).forEach(function (globalName) {
                            var localPath = tnp_core_2.path.join(project.location, project.packageJson.data.bin[globalName]);
                            var destinationGlobalLink = tnp_core_2.path.join(glboalBinFolderPath_1, globalName);
                            tnp_helpers_1.Helpers.removeIfExists(destinationGlobalLink);
                            if (process.platform === 'win32') {
                                tnp_helpers_1.Helpers.writeFile(destinationGlobalLink, ("\n#!/bin/sh\nbasedir=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")\n\ncase `uname` in\n    *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;;\nesac\n\nif [ -x \"$basedir/node\" ]; then\n  \"$basedir/node\"  \"$basedir/node_modules/" + tnp_core_2.path.basename(project.location) + "/bin/" + globalName + "\" \"$@\"\n  ret=$?\nelse\n  node  \"$basedir/node_modules/" + tnp_core_2.path.basename(project.location) + "/bin/" + globalName + "\" \"$@\"\n  ret=$?\nfi\nexit $ret\n          ").trim() + '\n');
                                var destinationGlobalLinkPS1File = tnp_core_2.path.join(glboalBinFolderPath_1, globalName + ".ps1");
                                tnp_helpers_1.Helpers.writeFile(destinationGlobalLinkPS1File, ("\n#!/usr/bin/env pwsh\n$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\n\n$exe=\"\"\nif ($PSVersionTable.PSVersion -lt \"6.0\" -or $IsWindows) {\n  # Fix case when both the Windows and Linux builds of Node\n  # are installed in the same directory\n  $exe=\".exe\"\n}\n$ret=0\nif (Test-Path \"$basedir/node$exe\") {\n  & \"$basedir/node$exe\"  \"$basedir/node_modules/" + tnp_core_2.path.basename(project.location) + "/bin/" + globalName + "\" $args\n  $ret=$LASTEXITCODE\n} else {\n  & \"node$exe\"  \"$basedir/node_modules/" + tnp_core_2.path.basename(project.location) + "/bin/" + globalName + "\" $args\n  $ret=$LASTEXITCODE\n}\nexit $ret\n          ").trim() + '\n');
                                var destinationGlobalLinkCmdFile = tnp_core_2.path.join(glboalBinFolderPath_1, globalName + ".cmd");
                                tnp_helpers_1.Helpers.writeFile(destinationGlobalLinkCmdFile, ("\n@ECHO off\nSETLOCAL\nCALL :find_dp0\n\nIF EXIST \"%dp0%\\node.exe\" (\n  SET \"_prog=%dp0%\\node.exe\"\n) ELSE (\n  SET \"_prog=node\"\n  SET PATHEXT=%PATHEXT:;.JS;=;%\n)\n\n\"%_prog%\"  \"%dp0%\\node_modules\\" + tnp_core_2.path.basename(project.location) + "\\bin\\" + globalName + "\" %*\nENDLOCAL\nEXIT /b %errorlevel%\n:find_dp0\nSET dp0=%~dp0\nEXIT /b\n\n          ").trim() + '\n');
                            }
                            else {
                                tnp_helpers_1.Helpers.createSymLink(localPath, destinationGlobalLink);
                                var command = "chmod +x " + destinationGlobalLink;
                                tnp_helpers_1.Helpers.info("Trying to make file exacutable global command \"" + chalk_1.default.bold(globalName) + "\".\n\n          command: " + command + "\n          ");
                                tnp_helpers_1.Helpers.run(command).sync();
                            }
                            tnp_helpers_1.Helpers.info("Global link created for: " + chalk_1.default.bold(globalName));
                        });
                    }
                    process.exit(0);
                    return [3 /*break*/, 14];
                case 3:
                    if (!project.isContainer) return [3 /*break*/, 13];
                    childrens = project.children.filter(function (p) { return p.frameworkVersionAtLeast('v2'); });
                    tnp_helpers_1.Helpers.info("Installing pacakge / Removing own pacakge..");
                    index = 0;
                    _a.label = 4;
                case 4:
                    if (!(index < childrens.length)) return [3 /*break*/, 8];
                    c = childrens[index];
                    tnp_helpers_1.Helpers.log("Processing " + c.genericName);
                    if (!!c.node_modules.exist) return [3 /*break*/, 6];
                    return [4 /*yield*/, c.npmPackages.installFromArgs('')];
                case 5:
                    _a.sent();
                    _a.label = 6;
                case 6:
                    ownPackage = c.path(tnp_config_1.config.folder.node_modules + "/" + c.name).absolute.normal;
                    tnp_helpers_1.Helpers.removeIfExists(ownPackage);
                    _a.label = 7;
                case 7:
                    index++;
                    return [3 /*break*/, 4];
                case 8:
                    tnp_helpers_1.Helpers.info("Removing own pacakge..done");
                    tnp_helpers_1.Helpers.info("Linking pacakges...");
                    _loop_1 = function (index) {
                        var c, childGenericName, copyToChildrens, copyToChildrensNames, opt;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    c = childrens[index];
                                    childGenericName = c.genericName;
                                    copyToChildrens = childrens.filter(function (ic) { return c.name !== ic.name; });
                                    copyToChildrensNames = copyToChildrens.map(function (ic) { return ic.name; });
                                    tnp_helpers_1.Helpers.log("Linking " + childGenericName + " for every package in container... ");
                                    return [4 /*yield*/, tnp_db_1.BuildOptions.from(tnp_config_1.config.frameworkName + " bd", c, { copyto: copyToChildrens })];
                                case 1:
                                    opt = _a.sent();
                                    return [4 /*yield*/, c.copyManager.initCopyingOnBuildFinish(opt)];
                                case 2:
                                    _a.sent();
                                    tnp_helpers_1.Helpers.log("Linking " + childGenericName + " for every package in container... DONE");
                                    return [2 /*return*/];
                            }
                        });
                    };
                    index = 0;
                    _a.label = 9;
                case 9:
                    if (!(index < childrens.length)) return [3 /*break*/, 12];
                    return [5 /*yield**/, _loop_1(index)];
                case 10:
                    _a.sent();
                    _a.label = 11;
                case 11:
                    index++;
                    return [3 /*break*/, 9];
                case 12:
                    tnp_helpers_1.Helpers.info("Linking pacakges...DONE");
                    process.exit(0);
                    return [3 /*break*/, 14];
                case 13:
                    if (project.isWorkspaceChildProject) {
                        project = project.parent;
                    }
                    if (!project.isWorkspace) {
                        tnp_helpers_1.Helpers.error("This is not workspace or workpace child projct", false, true);
                    }
                    project.workspaceSymlinks.add("Add workspace symlinks");
                    _a.label = 14;
                case 14:
                    tnp_helpers_1.Helpers.info("Linking DONE!");
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $UNLINK() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var project;
        return tslib_1.__generator(this, function (_a) {
            project = project_1.Project.Current;
            if (project.isWorkspaceChildProject) {
                project = project.parent;
            }
            if (!project.isWorkspace) {
                tnp_helpers_1.Helpers.error("This is not workspace or workpace child projct", false, true);
            }
            project.workspaceSymlinks.remove("Remove workspace symlinks");
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
function ACTION_COPYTO(action, args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var proj, db, cmd, b, error_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    proj = tnp_helpers_1.Helpers.cliTool.resolveProject(args, project_1.Project.Current, project_1.Project);
                    if (!proj) return [3 /*break*/, 10];
                    tnp_helpers_1.Helpers.info("[copyto] " + action.toUpperCase() + " project: " + proj.name);
                    return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    tnp_helpers_1.Helpers.log("instance ok");
                    return [4 /*yield*/, db.getCommands()];
                case 2:
                    cmd = (_a.sent()).find(function (c) { return c.isBuildCommand && c.location === project_1.Project.Current.location; });
                    if (!cmd) return [3 /*break*/, 9];
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, tnp_db_1.BuildOptions.from(cmd.command, project_1.Project.Current)];
                case 4:
                    b = _a.sent();
                    return [3 /*break*/, 6];
                case 5:
                    error_1 = _a.sent();
                    console.log(error_1);
                    return [3 /*break*/, 6];
                case 6:
                    if (action === 'add') {
                        b.copyto.push(proj);
                    }
                    if (action === 'remove') {
                        b.copyto = b.copyto.filter(function (p) { return p !== proj; });
                    }
                    tnp_helpers_1.Helpers.info("Updating command");
                    return [4 /*yield*/, db.updateCommandBuildOptions(project_1.Project.Current.location, b)];
                case 7:
                    _a.sent();
                    tnp_helpers_1.Helpers.info("Build option update done.. " + action + "ed " + chalk_1.default.bold(proj.genericName));
                    return [4 /*yield*/, db.triggerChangeForProject(project_1.Project.Current, "tnp-copyto-" + action)];
                case 8:
                    _a.sent();
                    return [3 /*break*/, 10];
                case 9:
                    tnp_helpers_1.Helpers.warn("No command to update");
                    _a.label = 10;
                case 10:
                    tnp_helpers_1.Helpers.info("DONE");
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $COPY_TO_REMOVE(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ACTION_COPYTO('remove', args)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function $COPY_TO_ADD(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ACTION_COPYTO('add', args)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function $COPY_TO_LIST(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        });
    });
}
var $copytoproject = function (args) {
    copyToHandleArgs(args);
};
var $copy_to_project = function (args) {
    copyToHandleArgs(args);
};
var $copyto = function (args) {
    copyToHandleArgs(args);
};
var $copymoduletoproject = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, copyModuleto(args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var $copy_module_to_project = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, copyModuleto(args)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
function $DEPS_TREE() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var proj, c, libs;
        return tslib_1.__generator(this, function (_a) {
            proj = project_1.Project.Current;
            if (proj.isWorkspaceChildProject) {
                c = proj;
                tnp_helpers_1.Helpers.info("child: " + c.name);
                libs = c.libsForTraget(c);
                if (libs.length === 0) {
                    tnp_helpers_1.Helpers.log("-- no deps --");
                }
                else {
                    libs.forEach(function (d) {
                        tnp_helpers_1.Helpers.log("dep " + d.name);
                    });
                }
            }
            else if (proj.isWorkspace) {
                proj.children.forEach(function (c) {
                    tnp_helpers_1.Helpers.info("child: " + c.name);
                    var libs = c.libsForTraget(c);
                    if (libs.length === 0) {
                        tnp_helpers_1.Helpers.log("-- no deps --");
                    }
                    else {
                        libs.forEach(function (d) {
                            tnp_helpers_1.Helpers.log("dep " + d.name);
                        });
                    }
                });
            }
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
function $DEPS_TREE2() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var proj;
        return tslib_1.__generator(this, function (_a) {
            proj = project_1.Project.Current;
            proj.children.forEach(function (c) {
                tnp_helpers_1.Helpers.info("child: " + c.name);
                if (c.workspaceDependencies.length === 0) {
                    tnp_helpers_1.Helpers.log("-- no deps --");
                }
                else {
                    c.workspaceDependencies.forEach(function (d) {
                        tnp_helpers_1.Helpers.log("dep " + d.name);
                    });
                }
            });
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
function $LN(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, source, dest;
        return tslib_1.__generator(this, function (_b) {
            _a = args.split(' '), source = _a[0], dest = _a[1];
            tnp_helpers_1.Helpers.createSymLink(source, dest);
            process.exit(0);
            return [2 /*return*/];
        });
    });
}
exports.default = {
    $DEPS_TREE2: tnp_helpers_1.Helpers.CLIWRAP($DEPS_TREE2, '$DEPS_TREE2'),
    $DEPS_TREE: tnp_helpers_1.Helpers.CLIWRAP($DEPS_TREE, '$DEPS_TREE'),
    $INSTALL_IN_TNP: tnp_helpers_1.Helpers.CLIWRAP($INSTALL_IN_TNP, '$INSTALL_IN_TNP'),
    $I_IN_TNP: tnp_helpers_1.Helpers.CLIWRAP($I_IN_TNP, '$I_IN_TNP'),
    $DEPS_SET_CATEGORY: tnp_helpers_1.Helpers.CLIWRAP($DEPS_SET_CATEGORY, '$DEPS_SET_CATEGORY'),
    $DEPS_SET_CAT: tnp_helpers_1.Helpers.CLIWRAP($DEPS_SET_CAT, '$DEPS_SET_CAT'),
    $DEPS_UPDATE_FROM: tnp_helpers_1.Helpers.CLIWRAP($DEPS_UPDATE_FROM, '$DEPS_UPDATE_FROM'),
    $DEPS_FROM: tnp_helpers_1.Helpers.CLIWRAP($DEPS_FROM, '$DEPS_FROM'),
    $RESET_NPM: tnp_helpers_1.Helpers.CLIWRAP($RESET_NPM, '$RESET_NPM'),
    $RESET_NPM_ALL: tnp_helpers_1.Helpers.CLIWRAP($RESET_NPM_ALL, '$RESET_NPM_ALL'),
    $DEPS_RESET: tnp_helpers_1.Helpers.CLIWRAP($DEPS_RESET, '$DEPS_RESET'),
    $DEPS_RESET_ALL: tnp_helpers_1.Helpers.CLIWRAP($DEPS_RESET_ALL, '$DEPS_RESET_ALL'),
    $DEDUPE: tnp_helpers_1.Helpers.CLIWRAP($DEDUPE, '$DEDUPE'),
    $DEDUPE_COUNT: tnp_helpers_1.Helpers.CLIWRAP($DEDUPE_COUNT, '$DEDUPE_COUNT'),
    $DEDUPE_CHECK: tnp_helpers_1.Helpers.CLIWRAP($DEDUPE_CHECK, '$DEDUPE_CHECK'),
    $DEPS_DEDUPE: tnp_helpers_1.Helpers.CLIWRAP($DEPS_DEDUPE, '$DEPS_DEDUPE'),
    DEPS_SHOW: tnp_helpers_1.Helpers.CLIWRAP(DEPS_SHOW, 'DEPS_SHOW'),
    SHOW_DEPS: tnp_helpers_1.Helpers.CLIWRAP(SHOW_DEPS, 'SHOW_DEPS'),
    $DEPS_RECREATE: tnp_helpers_1.Helpers.CLIWRAP($DEPS_RECREATE, '$DEPS_RECREATE'),
    $SHOW_PROJECTS: tnp_helpers_1.Helpers.CLIWRAP($SHOW_PROJECTS, '$SHOW_PROJECTS'),
    $SHOW_PROJECTS_NAVI: tnp_helpers_1.Helpers.CLIWRAP($SHOW_PROJECTS_NAVI, '$SHOW_PROJECTS_NAVI'),
    $DB_CODE: tnp_helpers_1.Helpers.CLIWRAP($DB_CODE, '$DB_CODE'),
    $CODE_DB: tnp_helpers_1.Helpers.CLIWRAP($CODE_DB, '$CODE_DB'),
    $SHOW_DB: tnp_helpers_1.Helpers.CLIWRAP($SHOW_DB, '$SHOW_DB'),
    $DB_SHOW: tnp_helpers_1.Helpers.CLIWRAP($DB_SHOW, '$DB_SHOW'),
    $OPEN_DB: tnp_helpers_1.Helpers.CLIWRAP($OPEN_DB, '$OPEN_DB'),
    $DB_OPEN: tnp_helpers_1.Helpers.CLIWRAP($DB_OPEN, '$DB_OPEN'),
    $SHOW_WORKER: tnp_helpers_1.Helpers.CLIWRAP($SHOW_WORKER, '$SHOW_WORKER'),
    $SHOW_CHILDREN: tnp_helpers_1.Helpers.CLIWRAP($SHOW_CHILDREN, '$SHOW_CHILDREN'),
    $SHOW_CORE_MODULES: tnp_helpers_1.Helpers.CLIWRAP($SHOW_CORE_MODULES, '$SHOW_CORE_MODULES'),
    DEPS_SHOW_IF_STANDALONE: tnp_helpers_1.Helpers.CLIWRAP(DEPS_SHOW_IF_STANDALONE, 'DEPS_SHOW_IF_STANDALONE'),
    DEPS_HIDE: tnp_helpers_1.Helpers.CLIWRAP(DEPS_HIDE, 'DEPS_HIDE'),
    HIDE_DEPS: tnp_helpers_1.Helpers.CLIWRAP(HIDE_DEPS, 'HIDE_DEPS'),
    $DEPS_CLEAN: tnp_helpers_1.Helpers.CLIWRAP($DEPS_CLEAN, '$DEPS_CLEAN'),
    $INSTALL: tnp_helpers_1.Helpers.CLIWRAP($INSTALL, '$INSTALL'),
    $UNINSTALL: tnp_helpers_1.Helpers.CLIWRAP($UNINSTALL, 'UNINSTALL'),
    $I: tnp_helpers_1.Helpers.CLIWRAP($I, '$I'),
    $SINSTALL: tnp_helpers_1.Helpers.CLIWRAP($SINSTALL, '$SINSTALL'),
    $REINSTALL: tnp_helpers_1.Helpers.CLIWRAP($REINSTALL, '$REINSTALL'),
    $LINKCORE: tnp_helpers_1.Helpers.CLIWRAP($LINKCORE, '$LINKCORE'),
    $LINK: tnp_helpers_1.Helpers.CLIWRAP($LINK, '$LINK'),
    $LN: tnp_helpers_1.Helpers.CLIWRAP($LN, '$LN'),
    $UNLINK: tnp_helpers_1.Helpers.CLIWRAP($UNLINK, '$UNLINK'),
    $copytoproject: tnp_helpers_1.Helpers.CLIWRAP($copytoproject, '$copytoproject'),
    $copy_to_project: tnp_helpers_1.Helpers.CLIWRAP($copy_to_project, '$copy_to_project'),
    $copyto: tnp_helpers_1.Helpers.CLIWRAP($copyto, '$copyto'),
    $COPY_TO_LIST: tnp_helpers_1.Helpers.CLIWRAP($COPY_TO_LIST, '$COPY_TO_LIST'),
    $COPY_TO_ADD: tnp_helpers_1.Helpers.CLIWRAP($COPY_TO_ADD, '$COPY_TO_ADD'),
    $COPY_TO_REMOVE: tnp_helpers_1.Helpers.CLIWRAP($COPY_TO_REMOVE, '$COPY_TO_REMOVE'),
    $copymoduletoproject: tnp_helpers_1.Helpers.CLIWRAP($copymoduletoproject, '$copymoduletoproject'),
    $copy_module_to_project: tnp_helpers_1.Helpers.CLIWRAP($copy_module_to_project, '$copy_module_to_project'),
};
//# sourceMappingURL=DEPS.backend.js.map