"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var incremental_compiler_1 = require("incremental-compiler");
var tnp_config_1 = require("tnp-config");
//#endregion
var FeatureCompilerForProject = /** @class */ (function (_super) {
    tslib_1.__extends(FeatureCompilerForProject, _super);
    function FeatureCompilerForProject(project, options, allowFolderOutSideProject) {
        if (allowFolderOutSideProject === void 0) { allowFolderOutSideProject = false; }
        var _this = _super.call(this, checkFolderCompiler(project, options, allowFolderOutSideProject)) || this;
        _this.project = project;
        return _this;
    }
    Object.defineProperty(FeatureCompilerForProject.prototype, "notAllowedToWachFiles", {
        get: function () {
            var notAllowedFiles = [];
            notAllowedFiles = notAllowedFiles.concat([
                tnp_config_1.config.file.controllers_ts,
                tnp_config_1.config.file.entities_ts,
            ]);
            return notAllowedFiles;
        },
        enumerable: true,
        configurable: true
    });
    return FeatureCompilerForProject;
}(incremental_compiler_1.IncCompiler.Base));
exports.FeatureCompilerForProject = FeatureCompilerForProject;
function checkFolderCompiler(project, options, dontCheck) {
    if (dontCheck === void 0) { dontCheck = false; }
    if (tnp_core_2._.isUndefined(options.folderPath)) {
        options.folderPath = [];
    }
    var folders = tnp_core_2._.isArray(options.folderPath) ? options.folderPath : [options.folderPath];
    options.folderPath = folders.map(function (f) {
        f = tnp_core_1.crossPlatformPath(f);
        if (!dontCheck) {
            if (f.startsWith(tnp_core_1.path.join(project.location, tnp_config_1.config.folder.node_modules))) {
                tnp_helpers_1.Helpers.error("[checkFolderCompiler] Please don't watch node_module folder for " + project.location, false, true);
            }
            if ((!f.startsWith(project.location)) || (f.startsWith(project.location + "/.."))) {
                tnp_helpers_1.Helpers.error("[checkFolderCompiler] Please watch only folder inside project " + project.location, false, true);
            }
        }
        return f;
    });
    return options;
}
//# sourceMappingURL=feature-compiler-for-project.backend.js.map