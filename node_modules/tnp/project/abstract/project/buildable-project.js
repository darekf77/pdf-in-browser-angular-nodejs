"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var features_1 = require("../../features");
var inquirer = require("inquirer");
var tnp_core_1 = require("tnp-core");
var tnp_db_1 = require("tnp-db");
var chalk_1 = require("chalk");
//#endregion
var tnp_core_2 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var BuildableProject = /** @class */ (function () {
    function BuildableProject() {
    }
    Object.defineProperty(BuildableProject.prototype, "availableIsomorphicPackagesInNodeModules", {
        get: function () {
            var jsonPath = tnp_core_1.path.join(this.location, features_1.PackagesRecognitionExtended.FILE_NAME_ISOMORPHIC_PACKAGES);
            try {
                var json = tnp_helpers_1.Helpers.readJson(jsonPath);
                return (json && tnp_core_2._.isArray(json.isomorphicPackages)) ? json.isomorphicPackages : [];
            }
            catch (error) {
                return [];
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * return copyto array with absulute pathes
     */
    BuildableProject.prototype.selectProjectToCopyTO = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var result, project, db, existedProjects, _a, projects;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        result = [];
                        project = this;
                        if (buildOptions && !tnp_core_2._.isArray(buildOptions.copyto)) {
                            buildOptions.copyto = [];
                        }
                        if (project.typeIs('unknow', 'docker') || (buildOptions && buildOptions.skipCopyToSelection)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _b.sent();
                        if (!!global.tnpNonInteractive) return [3 /*break*/, 6];
                        return [4 /*yield*/, db.getProjects()];
                    case 2:
                        existedProjects = (_b.sent())
                            .map(function (p) { return p.project; })
                            .filter(function (p) { return p && !p.isWorkspaceChildProject && !p.isContainer; })
                            .filter(function (p) { return p.location !== project.location; });
                        tnp_core_2._.sortBy(existedProjects, ['genericName']);
                        if (!global.tnpNonInteractive) return [3 /*break*/, 3];
                        // buildOptions.copyto = [];
                        result = [];
                        return [3 /*break*/, 6];
                    case 3:
                        if (!(project.isTnp || project.isNaviCli)) return [3 /*break*/, 4];
                        // buildOptions.copyto = [];
                        result = [];
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, inquirer
                            .prompt([
                            {
                                type: 'checkbox',
                                name: 'projects',
                                message: 'Select projects where to copy bundle after finish: ',
                                choices: existedProjects
                                    .map(function (c) {
                                    return { value: c.location, name: chalk_1.default.bold(c.name) + " (" + c.genericName + ")" };
                                })
                            }
                        ])];
                    case 5:
                        _a = (_b.sent()).projects, projects = _a === void 0 ? [] : _a;
                        // buildOptions.copyto = projects.map(p => $Project.From<Project>(p)) as any;
                        result = projects.map(function (p) { return tnp_helpers_1.Project.From(p); });
                        _b.label = 6;
                    case 6:
                        if (!buildOptions) return [3 /*break*/, 9];
                        buildOptions.copyto = result;
                        return [4 /*yield*/, db.updateCommandBuildOptions(project.location, buildOptions)];
                    case 7:
                        _b.sent();
                        return [4 /*yield*/, db.updateBuildOptions(buildOptions, process.pid)];
                    case 8:
                        _b.sent();
                        _b.label = 9;
                    case 9: return [2 /*return*/, result.map(function (p) { return p.location; })];
                }
            });
        });
    };
    Object.defineProperty(BuildableProject.prototype, "buildOptions", {
        //#endregion
        //#region @backend
        get: function () {
            if (!this._buildOptions) {
                return {};
            }
            return this._buildOptions;
        },
        set: function (v) {
            if (!v) {
                tnp_helpers_1.Helpers.log("Trying to assign empty buildOption for " + chalk_1.default.bold(this.name));
                return;
            }
            // Helpers.log(`
            // Assign build option for ${chalk.bold(this.name)}
            // ${_.isObject(v) ? JSON10.stringify(v) : ''};
            // `);
            this._buildOptions = v;
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region @backend
    BuildableProject.prototype.buildSteps = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Object.defineProperty(BuildableProject.prototype, "allowedEnvironments", {
        //#endregion
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.allowedEnvironments;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return [];
            }
            if (this.packageJson.data.tnp && tnp_core_2._.isArray(this.packageJson.data.tnp.allowedEnv)) {
                return this.packageJson.data.tnp.allowedEnv.concat('local');
            }
            return tnp_config_1.config.allowedEnvironments.concat('local');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    //#region @backend
    BuildableProject.prototype.selectAllProjectCopyto = function () {
        var _a;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var projects, db, projects;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isContainer) && this.parent.frameworkVersionAtLeast('v2'))) return [3 /*break*/, 1];
                        projects = this.parent.projectsInOrderForChainBuild([])
                            .filter(function (d) { return d.name !== _this.parent.name && d.frameworkVersionAtLeast('v2')
                            && d.typeIs('isomorphic-lib', 'angular-lib', 'vscode-ext', 'workspace', 'scenario', 'electron-client', 'ionic-client'); });
                        this.buildOptions.copyto = projects;
                        return [3 /*break*/, 4];
                    case 1: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 2:
                        db = _b.sent();
                        return [4 /*yield*/, db.getProjects()];
                    case 3:
                        projects = (_b.sent())
                            .map(function (p) { return p.project; })
                            .filter(function (p) { return p.location !== _this.location; });
                        this.buildOptions.copyto = projects;
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region @backend
    BuildableProject.prototype.isReadyForTarget = function (target) {
        var browserFor = tnp_core_1.path.join(this.location, "browser-for-" + target.name);
        // console.log(`Not exists ${browserFor}`)
        return tnp_helpers_1.Helpers.exists(browserFor);
    };
    //#endregion
    //#region @backend
    BuildableProject.prototype.build = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var baseHref, proj, withoutNodeModules, smartInstall, index, p, _a, skipBuild;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // Helpers.log(`BUILD OPTIONS: ${JSON10.stringify(buildOptions)}`)
                        if (this.typeIs('unknow')) {
                            return [2 /*return*/];
                        }
                        if (this.isCommandLineToolOnly) {
                            buildOptions.onlyBackend = true;
                        }
                        this.buildOptions = buildOptions;
                        // log('AM HERE')
                        if (this.typeIs('workspace')) {
                            baseHref = this.env.config.workspace.workspace.baseUrl;
                        }
                        else if (this.isWorkspaceChildProject) {
                            if (buildOptions.appBuild) {
                                proj = this.env.config && this.env.config.workspace.projects.find(function (p) {
                                    return p.name === _this.name;
                                });
                                baseHref = proj ? proj.baseUrl : void 0;
                            }
                        }
                        // log(`basehref for current project `, baseHref)
                        this.buildOptions.baseHref = baseHref;
                        if (!!buildOptions.appBuild) return [3 /*break*/, 5];
                        if (!this.buildOptions.copytoAll) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.selectAllProjectCopyto()];
                    case 1:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!!this.isVscodeExtension) return [3 /*break*/, 4];
                        if (!(!Array.isArray(this.buildOptions.copyto) || this.buildOptions.copyto.length === 0)) return [3 /*break*/, 4];
                        if (!(this.isStandaloneProject && this.buildOptions.watch)) return [3 /*break*/, 4];
                        if (!!this.isGenerated) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.selectProjectToCopyTO(this.buildOptions)];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        if (this.node_modules.isLink && buildOptions.outDir === 'dist') {
                            if (!tnp_core_2._.isArray(this.buildOptions.copyto)) {
                                this.buildOptions.copyto = [];
                            }
                            this.buildOptions.copyto.push(this);
                        }
                        if (tnp_core_2._.isArray(this.buildOptions.copyto) && this.buildOptions.copyto.length > 0) {
                            // const unique = {};
                            // (this.buildOptions.copyto as any[]).forEach((p: Project) => unique[p.location] = p);
                            // this.buildOptions.copyto = Object.keys(unique).map(location => unique[location]);
                            if (!(this.isStandaloneProject && this.node_modules.isLink)) {
                                if (this.buildOptions.copyto.includes(this)) {
                                    tnp_helpers_1.Helpers.info("\n\n            Please don't use " + chalk_1.default.bold('--copyto') + " for project itself.\n            node_modules/" + this.name + " will be reaplce with folder:\n            - src (for isomorphic lib)\n            or\n            - componetnts (for angular-lib)\n\n            ");
                                    this.buildOptions.copyto = this.buildOptions.copyto.filter(function (p) { return p !== _this; });
                                }
                            }
                            this.buildOptions.copyto = tnp_helpers_1.Helpers.arrays.uniqArray(this.buildOptions.copyto, 'location');
                            this.buildOptions.copyto.forEach(function (proj) {
                                var project = proj;
                                var projectCurrent = _this;
                                var projectName = projectCurrent.name;
                                var what = tnp_core_1.path.normalize(project.location + "/" + tnp_config_1.config.folder.node_modules + "/" + projectName);
                                tnp_helpers_1.Helpers.info("\n\n" + chalk_1.default.bold('+ After each build finish') + " " + tnp_helpers_1.Helpers.formatPath(what) + " will be update.");
                            });
                        }
                        if (this.buildOptions.copytoAll || (tnp_core_2._.isArray(this.buildOptions.copyto) && this.buildOptions.copyto.length > 0)) {
                            this.packageJson.save('show before build');
                        }
                        _b.label = 5;
                    case 5:
                        withoutNodeModules = [];
                        if (tnp_core_2._.isArray(this.buildOptions.copyto) && !global.tnpNonInteractive) {
                            this.buildOptions.copyto.forEach(function (c) {
                                tnp_helpers_1.Helpers.info("Checking node_modules for " + c.genericName);
                                if (!c.node_modules.exist) {
                                    withoutNodeModules.push(c);
                                }
                            });
                        }
                        smartInstall = withoutNodeModules.filter(function (p) { return p.npmPackages.useSmartInstall; });
                        withoutNodeModules = withoutNodeModules.filter(function (p) { return !smartInstall.includes(p); });
                        if (withoutNodeModules.length > 0 && !this.isVscodeExtension) {
                            tnp_helpers_1.Helpers.error("[--copyto] Please install node_modules for projects:\n\n" + withoutNodeModules.map(function (c) { return "\t- " + c.name + " in " + c.location; }).join('\n ') + "\n\n      ", false, true);
                        }
                        index = 0;
                        _b.label = 6;
                    case 6:
                        if (!(index < smartInstall.length)) return [3 /*break*/, 9];
                        p = smartInstall[index];
                        tnp_helpers_1.Helpers.warn("\n\n      [copyto] Smart npm instalation for " + p.name + "\n\n      ");
                        return [4 /*yield*/, p.npmPackages.installFromArgs('')];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8:
                        index++;
                        return [3 /*break*/, 6];
                    case 9:
                        if (!this.isVscodeExtension) {
                            features_1.PackagesRecognitionExtended.fromProject(this).start(void 0, '[buildable-project]');
                        }
                        _a = require('minimist')(this.buildOptions.args.split(' ')).skipBuild, skipBuild = _a === void 0 ? false : _a;
                        if (!skipBuild) return [3 /*break*/, 10];
                        tnp_helpers_1.Helpers.log("[buildable-project] Skip build for " + this.genericName);
                        return [3 /*break*/, 12];
                    case 10: 
                    // console.log('before build steps')
                    return [4 /*yield*/, this.buildSteps(buildOptions)];
                    case 11:
                        // console.log('before build steps')
                        _b.sent();
                        _b.label = 12;
                    case 12:
                        tnp_helpers_1.Helpers.info("Build steps ended... ");
                        if (!this.isStandaloneProject) return [3 /*break*/, 14];
                        return [4 /*yield*/, this.copyManager.initCopyingOnBuildFinish(buildOptions)];
                    case 13:
                        _b.sent();
                        _b.label = 14;
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return BuildableProject;
}());
exports.BuildableProject = BuildableProject;
//# sourceMappingURL=buildable-project.js.map