export { ChildProcess } from 'child_process';
import type { Project } from './project';
export declare abstract class BaseProject {
    get extensionVsixName(this: Project): string;
    get genericName(this: Project): string;
    private findParentsNames;
    get isPreviewFor(this: Project): Project;
    get backupName(this: Project): any;
    get isContainerWorkspaceRelated(this: Project): any;
    get isVscodeExtension(this: Project): any;
    get isWorkspace(this: Project): any;
    get isDocker(this: Project): any;
    get isContainer(this: Project): any;
    get isContainerCoreProject(this: Project): any;
    get isContainerChild(this: Project): any;
    get labels(this: Project): {
        readonly generated: "" | "(generated)";
        readonly extendedBoldName: string;
    };
    get allResources(this: Project): string[];
    get isWorkspaceChildProject(this: Project): any;
    /**
     * Standalone project ready for publish on npm
     * Types of standalone project:
     * - isomorphic-lib : backend/fronded ts library with server,app preview
     * - angular-lib: frontend ui lib with angular preview
     */
    get isStandaloneProject(this: Project): any;
    get linkedFolders(this: Project): {
        from: string;
        to: string;
    }[];
    get dependsOn(this: Project): Project[];
    __cacheStandaloneDependencies: Project[];
    get workspaceDependencies(this: Project): Project[];
    get workspaceDependenciesServers(this: Project): Project[];
    linkTo(this: Project, destPackageLocation: string): void;
}
