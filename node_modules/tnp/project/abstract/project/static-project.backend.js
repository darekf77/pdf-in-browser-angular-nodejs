"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var project_1 = require("./project");
var tnp_helpers_1 = require("tnp-helpers");
var StaticProject = /** @class */ (function () {
    function StaticProject() {
    }
    Object.defineProperty(StaticProject.prototype, "isGenerated", {
        //#endregion
        /**
         * Project can be generated becouse it is a part of:
         * 1. Static build -> bulding 'bundle; in workspace from all childrens
         * 2. Standalone Container singular build -> watcg build in 'dist' of all standalone libs from container as one
         * 3. [WIP] Workspace watch build of all childrens in 'dist'
         */
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isGenerated;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return false;
            }
            if (this.isStandaloneProject && this.packageJson.isGenerated) {
                return true;
            }
            return (this.isWorkspaceChildProject && this.parent.packageJson.isGenerated) ||
                (this.isWorkspace && this.packageJson.isGenerated);
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StaticProject.prototype, "isGeneratedForRelease", {
        get: function () {
            return this.packageJson.isGeneratedForRelease;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StaticProject.prototype, "origin", {
        /**
         * Only for generated projects
         */
        get: function () {
            if (this.typeIs('unknow')) {
                return;
            }
            if (!this.isGenerated) {
                // console.log('global.globalSystemToolMode',global.globalSystemToolMode)
                if (global.globalSystemToolMode) {
                    tnp_helpers_1.Helpers.warn("Trying to access origin of not static project for " + this.location);
                }
                return;
            }
            var project;
            if (this.isWorkspace) {
                var originPath = tnp_core_1.path.resolve(tnp_core_1.path.join(this.location, '..', '..'));
                // console.log('originPath', originPath)
                project = project_1.Project.From(originPath);
            }
            else if (this.isWorkspaceChildProject) {
                var originChildPath = tnp_core_1.path.resolve(tnp_core_1.path.join(this.location, '..', '..', '..', this.name));
                // console.log('originChildPath', originChildPath)
                project = project_1.Project.From(originChildPath);
            }
            return project;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StaticProject.prototype, "bundledWorkspace", {
        /**
         * generated version of workspace/worskpace-childs project
         * ready for serving by  framework router/proxy
         */
        get: function () {
            if (this.typeIs('unknow')) {
                return;
            }
            var outDir = 'bundle';
            var projectToBuild;
            if (this.isGenerated) {
                if (!global.globalSystemToolMode) {
                    return;
                }
                tnp_helpers_1.Helpers.warn("Trying to access bundle of bundle for project of location:\n        " + this.location + "\n      ");
                return;
            }
            if (this.isWorkspace) {
                projectToBuild = project_1.Project.From(tnp_core_1.path.join(this.location, outDir, this.name));
            }
            else if (this.isWorkspaceChildProject) {
                projectToBuild = project_1.Project.From(tnp_core_1.path.join(this.parent.location, outDir, this.parent.name, this.name));
            }
            else if (this.isStandaloneProject) {
                projectToBuild = project_1.Project.From(tnp_core_1.path.join(this.location, outDir));
            }
            return projectToBuild;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Same thing as bundle workspace, but it will generate folder in
     * case that the does not exists
     */
    StaticProject.prototype.StaticVersion = function (regenerate) {
        if (regenerate === void 0) { regenerate = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var staticVersion;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.typeIs('unknow')) {
                            return [2 /*return*/];
                        }
                        if (!this.isGenerated) return [3 /*break*/, 4];
                        if (!regenerate) return [3 /*break*/, 3];
                        if (!this.origin) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.origin.staticBuild.regenerate()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2: return [2 /*return*/, void 0];
                    case 3:
                        staticVersion = this;
                        return [3 /*break*/, 7];
                    case 4:
                        if (!(regenerate || !this.bundledWorkspace)) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.staticBuild.regenerate()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        staticVersion = this.bundledWorkspace;
                        _a.label = 7;
                    case 7: return [2 /*return*/, staticVersion];
                }
            });
        });
    };
    return StaticProject;
}());
exports.StaticProject = StaticProject;
// export interface StaticProject extends Partial<Project> { }
//# sourceMappingURL=static-project.backend.js.map