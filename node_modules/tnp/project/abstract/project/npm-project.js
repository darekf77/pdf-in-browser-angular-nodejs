"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_models_1 = require("tnp-models");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var NpmProject = /** @class */ (function () {
    function NpmProject() {
    }
    Object.defineProperty(NpmProject.prototype, "canBePublishToNpmRegistry", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.canBePublishToNpmRegistry;
            }
            //#region @backend
            return this.packageJson && this.packageJson.canBePublishToNpmRegistry;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "version", {
        /**
         * Version from package.json
         */
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.version;
            }
            //#region @backend
            return this.packageJson && this.packageJson.version;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "isPrivate", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isPrivate;
            }
            //#region @backend
            return this.packageJson && this.packageJson.isPrivate;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "lastNpmVersion", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.lastNpmVersion;
            }
            //#region @backend
            var lastNpmVersion = void 0;
            try {
                var ver = this.run("npm show " + this.name + " version", { output: false }).sync().toString();
                if (ver) {
                    lastNpmVersion = ver.trim();
                }
            }
            catch (error) { }
            return lastNpmVersion;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "resources", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.resources;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return [];
            }
            return this.packageJson.resources;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "isUnknowNpmProject", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isUnknowNpmProject;
            }
            //#region @backend
            return this.typeIs('unknow-npm-project');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "preview", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.preview;
            }
            //#region @backend
            return tnp_core_1._.isString(this.location) && tnp_helpers_1.Project.From(tnp_core_3.path.join(this.location, 'preview'));
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "versionPatchedPlusOne", {
        //#region @backend
        get: function () {
            if (this.typeIs('unknow')) {
                return '';
            }
            if (!this.version) {
                if (!global[tnp_core_1.CoreConfig.message.globalSystemToolMode]) {
                    return;
                }
                tnp_helpers_1.Helpers.error("Please define " + chalk_1.default.bold('version') + " property in your package.json:\n      location: " + tnp_core_3.path.join(this.location, tnp_config_1.config.file.package_json) + "\n\n      ", true, true);
            }
            var ver = this.version.split('.');
            if (ver.length > 0) {
                ver[ver.length - 1] = (parseInt(ver[ver.length - 1]) + 1).toString();
            }
            return ver.join('.');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "name", {
        //#endregion
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.name;
            }
            //#region @backendFunc
            if (this.packageJson && this.typeIs('unknow-npm-project')) {
                if (this.packageJson.name !== tnp_core_3.path.basename(this.location)
                    && tnp_core_3.path.basename(tnp_core_3.path.dirname(this.location)) === 'external') {
                    return tnp_core_3.path.basename(this.location);
                }
            }
            return this.packageJson ? this.packageJson.name : tnp_core_3.path.basename(this.location);
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "hasNpmOrganization", {
        //#region @backend
        get: function () {
            // log('path.dirname(this.location)', path.dirname(this.location))
            if (this.typeIs('unknow')) {
                return false;
            }
            return tnp_core_3.path.basename(tnp_core_3.path.dirname(this.location)).startsWith('@');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NpmProject.prototype, "npmOrganization", {
        get: function () {
            if (!this.hasNpmOrganization) {
                return;
            }
            return tnp_core_3.path.basename(tnp_core_3.path.dirname(this.location));
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region @backend
    NpmProject.prototype.allPackageJsonDeps = function (contextFolder) {
        var _this = this;
        if (this.typeIs('unknow')) {
            return [];
        }
        var projectsInNodeModules = [];
        tnp_models_1.Models.npm.ArrNpmDependencyType.forEach(function (depName) {
            projectsInNodeModules = projectsInNodeModules
                .concat(_this.getDepsAsProject(depName, contextFolder));
        });
        return projectsInNodeModules;
    };
    //#endregion
    //#region @backend
    NpmProject.prototype.getDepsAsProject = function (type, contextFolder) {
        var _this = this;
        if (this.typeIs('unknow')) {
            return [];
        }
        return this.getDepsAsPackage(type).map(function (packageObj) {
            if (type === 'tnp_required_workspace_child') {
                var p_1 = tnp_core_3.path.resolve(tnp_core_3.path.join(_this.location, '..', packageObj.name));
                if (_this.isWorkspaceChildProject && tnp_core_2.fse.existsSync(p_1)) {
                    var project = tnp_helpers_1.Project.From(p_1);
                    return project;
                }
            }
            var p = tnp_core_3.path.join(contextFolder ? contextFolder : _this.location, tnp_config_1.config.folder.node_modules, packageObj.name);
            if (tnp_core_2.fse.existsSync(p)) {
                var project = tnp_helpers_1.Project.From(p);
                return project;
            }
            // warn(`Dependency '${packageObj.name}' doen't exist in ${p}`)
        })
            .filter(function (f) { return !!f; });
    };
    //#endregion
    //#region @backend
    NpmProject.prototype.getDepsAsPackage = function (type) {
        if (this.typeIs('unknow')) {
            return [];
        }
        if (!this.packageJson.data) {
            return [];
        }
        var isTnpOverridedDependency = (type === 'tnp_overrided_dependencies') &&
            this.packageJson.data.tnp &&
            this.packageJson.data.tnp.overrided &&
            this.packageJson.data.tnp.overrided.dependencies;
        var isTnpRequredWorkspaceChildren = (type === 'tnp_required_workspace_child') &&
            this.packageJson.data.tnp &&
            this.packageJson.data.tnp.required;
        var installType;
        var data;
        if (isTnpOverridedDependency) {
            data = this.packageJson.data.tnp.overrided.dependencies;
        }
        else if (isTnpRequredWorkspaceChildren) {
            data = this.packageJson.data.tnp.required;
        }
        else {
            data = this.packageJson.data[type];
            if (type === 'dependencies') {
                installType = '--save';
            }
            else if (type === 'devDependencies') {
                installType = '--save-dev';
            }
        }
        var names = tnp_core_1._.isArray(data) ? data : tnp_core_1._.keys(data);
        return names
            .map(function (p) {
            if (tnp_core_1._.isString(data[p])) {
                return { name: p, version: data[p], installType: installType };
            }
            else {
                if (!~p.search('@')) {
                    return { name: p, installType: installType };
                }
                var isOrg = p.startsWith('@');
                var _a = (isOrg ? p.slice(1) : p).split('@'), name_1 = _a[0], version = _a[1];
                return { name: isOrg ? "@" + name_1 : name_1, version: version, installType: installType };
            }
        });
    };
    //#endregion
    //#region @backend
    NpmProject.prototype.checkIfReadyForNpm = function (soft) {
        if (soft === void 0) { soft = false; }
        if (this.typeIs('unknow')) {
            return false;
        }
        // log('TYPEEEEE', this.type)
        var libs = ['angular-lib', 'isomorphic-lib', 'vscode-ext'];
        if (this.typeIsNot.apply(this, libs)) {
            if (soft) {
                return false;
            }
            tnp_helpers_1.Helpers.error("This project '" + chalk_1.default.bold(this.name) + "' isn't library type project (" + libs.join(', ') + ").", false, true);
        }
        return true;
    };
    Object.defineProperty(NpmProject.prototype, "childrenThatAreThirdPartyInNodeModules", {
        //#endregion
        get: function () {
            var _this = this;
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.childrenThatAreThirdPartyInNodeModules;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return;
            }
            return this.isomorphicPackages.map(function (c) {
                var p = tnp_core_3.path.join(_this.location, tnp_config_1.config.folder.node_modules, c);
                return tnp_helpers_1.Project.From(p);
            }).filter(function (f) { return !!f; });
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    return NpmProject;
}());
exports.NpmProject = NpmProject;
//# sourceMappingURL=npm-project.js.map