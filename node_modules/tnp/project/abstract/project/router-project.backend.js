"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var chalk_1 = require("chalk");
var project_1 = require("./project");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var RouterProject = /** @class */ (function () {
    function RouterProject() {
    }
    Object.defineProperty(RouterProject.prototype, "port", {
        get: function () {
            var _this = this;
            var _a, _b, _c, _d, _e, _f, _g;
            var env;
            if (this.isWorkspace) {
                env = (_c = (_b = (_a = this.env) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.workspace) === null || _c === void 0 ? void 0 : _c.workspace;
            }
            else {
                env = (_g = (_f = (_e = (_d = this.env) === null || _d === void 0 ? void 0 : _d.config) === null || _e === void 0 ? void 0 : _e.workspace) === null || _f === void 0 ? void 0 : _f.projects) === null || _g === void 0 ? void 0 : _g.find(function (p) { return p.name === _this.name; });
            }
            var envPort = env === null || env === void 0 ? void 0 : env.port;
            return tnp_core_2._.isNumber(envPort) ? envPort : this.__defaultPort;
        },
        enumerable: true,
        configurable: true
    });
    //#region @backend
    RouterProject.prototype.startOnCommand = function (args) {
        // should be abstract
        return undefined;
    };
    //#endregion
    RouterProject.prototype.routerTargetHttp = function () {
        if (tnp_helpers_1.Helpers.isBrowser) {
            return this.browser._routerTargetHttp;
        }
        if (this.typeIs('unknow')) {
            return;
        }
        return "http://localhost:" + this.getDefaultPort();
    };
    RouterProject.prototype.setDefaultPort = function (port) {
        this.__defaultPort = port;
    };
    RouterProject.prototype.getDefaultPort = function () {
        if (tnp_helpers_1.Helpers.isBrowser) {
            return this.browser && this.browser.defaultPort;
        }
        return this.__defaultPort;
    };
    RouterProject.prototype.setDefaultPortByType = function () {
        this.setDefaultPort(project_1.Project.DefaultPortByType(this._type));
    };
    /**
     * Start server on top of static build
     * @param port
     */
    RouterProject.prototype.start = function (args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var genLocationWOrkspace, genWorkspace, command, err_1, command;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.typeIs('unknow')) {
                            return [2 /*return*/];
                        }
                        if (!(this.isWorkspace && !this.isGenerated)) return [3 /*break*/, 2];
                        genLocationWOrkspace = tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, this.name);
                        genWorkspace = project_1.Project.From(genLocationWOrkspace);
                        if (!genWorkspace) {
                            tnp_helpers_1.Helpers.error("Workspace folder \"" + tnp_config_1.config.folder.bundle + "\" does not exists."
                                + (" Please run: " + chalk_1.default.bold('tnp static:build') + " in this workspace.\nGenerated workspace should be here: " + genLocationWOrkspace + "\n        "));
                        }
                        return [4 /*yield*/, genWorkspace.start(args)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2:
                        if (!this.isStandaloneProject) return [3 /*break*/, 6];
                        command = this.startOnCommand(args);
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.run(command).asyncAsPromise()];
                    case 4:
                        _a.sent();
                        tnp_helpers_1.Helpers.info("Project instance ended normaly.");
                        process.exit(0);
                        return [3 /*break*/, 6];
                    case 5:
                        err_1 = _a.sent();
                        tnp_helpers_1.Helpers.error("Project instance ended with error " + err_1 + " ", false, true);
                        return [3 /*break*/, 6];
                    case 6:
                        if (!this.isWorkspaceChildProject) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.env.init(args, true)];
                    case 7:
                        _a.sent();
                        this.filesTemplatesBuilder.rebuild(true);
                        tnp_helpers_1.Helpers.log("Killing proces on port " + this.getDefaultPort());
                        return [4 /*yield*/, tnp_helpers_1.Helpers.killProcessByPort(this.getDefaultPort())];
                    case 8:
                        _a.sent();
                        tnp_helpers_1.Helpers.log("Project: " + this.name + " is running on port " + this.getDefaultPort());
                        command = this.startOnCommand(args);
                        this.run(command).async();
                        _a.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    return RouterProject;
}());
exports.RouterProject = RouterProject;
// export interface RouterProject extends Partial<Project> { }
//# sourceMappingURL=router-project.backend.js.map