"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var packages_recognition_extended_1 = require("../../features/packages-recognition-extended");
var morphi_1 = require("morphi");
var morphi_2 = require("morphi");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_helpers_2 = require("tnp-helpers");
var TnpProject = /** @class */ (function () {
    function TnpProject() {
    }
    Object.defineProperty(TnpProject.prototype, "_frameworkVersion", {
        get: function () {
            //#region @backendFunc
            return this.packageJson.frameworkVersion;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TnpProject.prototype, "frameworkVersionMinusOne", {
        get: function () {
            //#region @backendFunc
            var curr = Number(tnp_core_3._.isString(this._frameworkVersion) && this._frameworkVersion.replace('v', ''));
            if (!isNaN(curr) && curr >= 2) {
                return "v" + (curr - 1);
            }
            ;
            return 'v1';
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    //#region @backend
    TnpProject.prototype.frameworkVersionEquals = function (version) {
        var ver = Number(tnp_core_3._.isString(version) && version.replace('v', ''));
        var curr = Number(tnp_core_3._.isString(this._frameworkVersion) && this._frameworkVersion.replace('v', ''));
        return !isNaN(ver) && !isNaN(curr) && (curr === ver);
    };
    TnpProject.prototype.frameworkVersionAtLeast = function (version) {
        var ver = Number(tnp_core_3._.isString(version) && version.replace('v', ''));
        var curr = Number(tnp_core_3._.isString(this._frameworkVersion) && this._frameworkVersion.replace('v', ''));
        return !isNaN(ver) && !isNaN(curr) && (curr >= ver);
    };
    Object.defineProperty(TnpProject.prototype, "frameworks", {
        //#endregion
        //#region @backend
        /**
         * available frameworks in project
         */
        get: function () {
            if (this.typeIs('unknow')) {
                return [];
            }
            return this.packageJson.frameworks;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TnpProject.prototype, "isTnp", {
        //#endregion
        get: function () {
            if (tnp_helpers_2.Helpers.isBrowser) {
                return this.browser.isTnp;
            }
            //#region @backend
            if (this.typeIsNot('isomorphic-lib')) {
                return false;
            }
            return this.location === tnp_helpers_1.Project.Tnp.location;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TnpProject.prototype, "isNaviCli", {
        get: function () {
            if (tnp_helpers_2.Helpers.isBrowser) {
                return this.browser.isNaviCli;
            }
            //#region @backend
            if (this.typeIsNot('isomorphic-lib')) {
                return false;
            }
            return this.location === tnp_helpers_1.Project.NaviCliLocation;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TnpProject.prototype, "useFramework", {
        get: function () {
            if (tnp_helpers_2.Helpers.isBrowser) {
                return this.browser.useFramework;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return false;
            }
            if (!!this.baseline) {
                var baselineValue = this.baseline.packageJson.useFramework;
                if (!tnp_core_3._.isUndefined(this.packageJson.useFramework)) {
                    this.packageJson.data.tnp.useFramework = void 0;
                    this.packageJson.writeToDisc();
                }
                return this.baseline.packageJson.useFramework;
            }
            return this.packageJson.useFramework;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TnpProject.prototype, "isomorphicPackages", {
        //#region @backend
        get: function () {
            var isomorphicPackagesArr = [];
            if (this.typeIs('unknow')) {
                return isomorphicPackagesArr;
            }
            try {
                var p = tnp_core_1.crossPlatformPath(tnp_core_2.path.join(this.location, morphi_1.FILE_NAME_ISOMORPHIC_PACKAGES));
                if (!tnp_core_1.fse.existsSync(p)) {
                    packages_recognition_extended_1.PackagesRecognitionExtended.fromProject(this).start(void 0, '[tnp-projct][getter isomorphic pacakges ]');
                }
                var f = tnp_helpers_2.Helpers.readJson(p);
                var arr = f[morphi_2.config.array.isomorphicPackages];
                if (tnp_core_3._.isArray(arr)) {
                    return isomorphicPackagesArr.concat(arr);
                }
                else {
                    return isomorphicPackagesArr;
                }
                // warn(`Isomorphic package file does not exists : ${p}`);
            }
            catch (e) {
                if (global.globalSystemToolMode) {
                    tnp_helpers_2.Helpers.log(e);
                    tnp_helpers_2.Helpers.error("Erro while reading ismorphic package file: " + p, true, true);
                }
                return isomorphicPackagesArr;
            }
            ;
        },
        enumerable: true,
        configurable: true
    });
    return TnpProject;
}());
exports.TnpProject = TnpProject;
//# sourceMappingURL=tnp-project.js.map