export { ChildProcess } from 'child_process';
import { Project as $Project } from 'tnp-helpers';
import { BaseProject } from './base-project';
import { NpmProject } from './npm-project';
import { FeatureProject } from './feature-project';
import { TnpProject } from './tnp-project';
import { FolderProject } from './folder-project';
import { LibProject } from './lib-project.backend';
import { VscodeProject } from './vscode-project.backend';
import { StaticProject } from './static-project.backend';
import { RouterProject } from './router-project.backend';
import { RecreatableProject } from './recreatable-project.backend';
import { EntityProject } from './entity-projects.backend';
import { BuildableProject } from './buildable-project';
import { SiteProject } from './site-project.backend';
import { DbProcessProject } from './db-process-project.backend';
import { DependencyProject } from './dependency-project.backend';
import { CompilerCache } from '../../features/compiler-cache.backend';
export declare class Project extends $Project<Project> {
    browser: any;
    location: string;
    static linkCoreFolders(): void;
    get info(this: Project): any;
    get TnpProject(): Project;
    get isBundleMode(): boolean;
    removeItself(this: Project): void;
    /**
     * DO NOT USE function isWorkspace, isWOrkspace child.. it is to expensive
     */
    constructor(location?: string);
}
export interface Project extends BaseProject, NpmProject, FeatureProject, TnpProject, FolderProject, LibProject, VscodeProject, TnpProject, StaticProject, RouterProject, RecreatableProject, EntityProject, BuildableProject, SiteProject, DbProcessProject, DependencyProject, CompilerCache {
}
