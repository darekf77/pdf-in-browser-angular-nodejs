import type { Project } from './project';
export declare abstract class FolderProject {
    abstract location: string;
    get sourceFolder(this: Project): 'src' | 'components';
    get linkedProjects(this: Project): Project[];
    hasChild(this: Project, child: Project): boolean;
    get children(this: Project): Project[];
    get childrenThatAreLibs(this: Project): Project[];
    get childrenThatAreClients(this: Project): Project[];
    private getAllChildren;
    replaceSourceForStandalone(this: Project): void;
    removeStandaloneSources(this: Project): void;
    child(this: Project, name: string, errors?: boolean): Project;
    get parent(this: Project): Project;
    get grandpa(this: Project): Project;
    getFolders(this: Project): string[];
    clear(this: Project): Promise<void>;
    private _path;
    path(this: Project, relativePath: string, currentProjectLocation?: string): {
        readonly relative: {
            /**
             * Normal path as you expect
             * <absolute path to project> / < relative path from param >
             */
            normal: string;
            custom: string;
            __prefixed: string;
        };
        readonly absolute: {
            /**
             * Normal path as you expect
             * <absolute path to project> / < relative path from param >
             */
            normal: string;
            custom: string;
            __prefixed: string;
        };
    };
    containsFile(this: Project, fileRelativeToProjectPath: string): boolean;
    removeFile(this: Project, fileRelativeToProjectPath: string): void;
    containsFolder(this: Project, filePaht: string): boolean;
    removeFileByRelativePath(this: Project, relativePathToFile: string): void;
    removeFolderByRelativePath(this: Project, relativePathToFolder: string): void;
    private clearNodeModulesFromLinks;
    reset(this: Project, showMsg?: boolean): Promise<void>;
    removeRecognizedIsomorphicLIbs(this: Project): void;
    notAllowedFiles(): any[];
}
