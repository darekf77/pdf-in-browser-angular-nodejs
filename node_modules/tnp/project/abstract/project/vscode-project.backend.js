"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var json5 = require("json5");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
//#endregion
var VscodeProject = /** @class */ (function () {
    function VscodeProject() {
    }
    Object.defineProperty(VscodeProject.prototype, "vscodeFileTemplates", {
        //#region vscode *.filetemplae
        get: function () {
            if (this.frameworkVersionAtLeast('v2')) {
                return [
                    '.vscode/launch.json.filetemplate',
                    '.vscode/tasks.json.filetemplate',
                ];
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region @backend
    VscodeProject.prototype.recreateCodeWorkspace = function () {
        //#region  recreate tmp.code-workspace
        if (!this.isWorkspace) {
            return;
        }
        var configSettings = {};
        try {
            var settings_1 = json5.parse(tnp_helpers_1.Helpers.readFile(tnp_core_2.path.join(this.location, '.vscode', 'settings.json')));
            // console.log(settings)
            Object.keys(settings_1)
                .filter(function (key) {
                var start = key.startsWith('workbench');
                // console.log(`${key} ${start}`)
                return start;
            })
                .forEach(function (key) {
                configSettings[key] = settings_1[key];
            });
        }
        catch (err) {
            // console.log(err)
        }
        var bundledChildrensFolder = tnp_core_2.path.join(this.location, tnp_config_1.config.folder.bundle);
        if (!tnp_core_1.fse.existsSync(bundledChildrensFolder)) {
            tnp_helpers_1.Helpers.mkdirp(bundledChildrensFolder);
        }
        configSettings['terminal.integrated.cwd'] = '${workspaceFolder}';
        var codeWorkspace = {
            folders: tslib_1.__spreadArrays([
                { path: '.' }
            ], this.children
                .map(function (c) {
                return { path: c.name };
            }), [
                { path: 'bundle' },
                { path: 'dist' }
            ]),
            settings: configSettings,
        };
        var codeworkspacefilepath = tnp_core_2.path.join(this.location, this.nameOfCodeWorkspace);
        tnp_helpers_1.Helpers.removeFileIfExists(codeworkspacefilepath);
        // fse.writeJSONSync(codeworkspacefilepath, codeWorkspace, {
        //   encoding: 'utf8',
        //   spaces: 2
        // });
        //#endregion
    };
    Object.defineProperty(VscodeProject.prototype, "nameOfCodeWorkspace", {
        get: function () {
            return "tmp.code-workspace";
        },
        enumerable: true,
        configurable: true
    });
    VscodeProject.prototype.openInVscode = function () {
        //#region open in vscode
        this.recreateCodeWorkspace();
        if (this.isStandaloneProject || this.isUnknowNpmProject) {
            this.run("code " + this.location).sync();
        }
        else {
            var isomorphicServers = this.children.filter(function (c) { return c.typeIs('isomorphic-lib'); });
            // this.run(`code ${this.location}/${this.nameOfCodeWorkspace}`).sync();
            this.run("code " + this.location).sync();
            isomorphicServers.forEach(function (s) {
                s.run("code " + s.location).sync();
            });
        }
        //#endregion
    };
    VscodeProject.prototype.temlateOfTasksJSON = function (currentWorkspaceConfig) {
        var tasks = [];
        var inputs = [];
        //#region post debug kill task (not working now)
        // {
        //   "label": "postdebugkill",
        //   "command": [
        //     "${command:workbench.action.tasks.terminate}",
        //     "${command:workbench.action.acceptSelectedQuickOpenItem}"
        //   ],
        //   "type": "process"
        // },
        //#endregion
        //#region tasks, input for terminating all tasks
        var templateTerminalAllTasks = {
            "id": "terminate",
            "type": "command",
            "command": "workbench.action.tasks.terminate",
            "args": "terminateAll"
        };
        inputs.push(templateTerminalAllTasks);
        var terminate = {
            "label": "terminateall",
            "command": "echo ${input:terminate}",
            "type": "shell",
            "problemMatcher": []
        };
        tasks.push(terminate);
        //#endregion
        //#region ng serve task
        var templateNgServeTask = function (project) {
            var ngServeTask = {
                "label": "Ng Serve",
                "type": "shell",
                "command": "tnp build",
                "isBackground": true,
                "presentation": {
                    "reveal": "always"
                },
                "group": {
                    "kind": "build",
                    "isDefault": true
                },
                "problemMatcher": {
                    "owner": "typescript",
                    "source": "ts",
                    "applyTo": "closedDocuments",
                    "fileLocation": [
                        "relative",
                        "${cwd}"
                    ],
                    "pattern": "$tsc",
                    "background": {
                        "activeOnStart": true,
                        "beginsPattern": {
                            "regexp": "(.*?)"
                        },
                        "endsPattern": {
                            "regexp": "Compiled |Failed to compile."
                        }
                    }
                }
            };
            if (project) {
                ngServeTask.label = ngServeTask.label + " for " + project.name;
                ngServeTask.command = ngServeTask.command + " " + project.name;
            }
            return ngServeTask;
        };
        //#endregion
        if (this.isWorkspace) {
            //#region handle worksapce
            this.children
                .filter(function (c) { return c.typeIs('angular-lib'); })
                .forEach(function (c) {
                tasks.push(templateNgServeTask(c));
            });
            //#endregion
        }
        else {
            //#region handle standalone and workspace childs
            if (this.typeIs('angular-lib', 'isomorphic-lib')) {
                tasks.push(templateNgServeTask());
            }
            //#endregion
        }
        return JSON.stringify({
            "version": "2.0.0",
            tasks: tasks,
            inputs: inputs
        });
    };
    VscodeProject.prototype.temlateOfLaunchJSON = function (currentWorkspaceConfig) {
        var _this = this;
        var configurations = [];
        var compounds = [];
        //#region template attach process
        var temlateAttachProcess = {
            "type": "node",
            "request": "attach",
            "name": "Attach to global cli tool",
            "port": 9229,
            "skipFiles": [
                "<node_internals>/**"
            ]
        };
        //#endregion
        //#region tempalte start normal nodejs server
        var templateForServer = function (serverChild, clientProject, workspaceLevel) {
            var startServerTemplate = {
                "type": "node",
                "request": "launch",
                "name": "Launch Server",
                "program": "${workspaceFolder}/run.js",
                "cwd": void 0,
                "args": [],
                "runtimeArgs": [
                    "--nolazy", "-r", "ts-node/register",
                    "--experimental-worker"
                ]
            };
            if (serverChild.name !== clientProject.name) {
                var cwd = '${workspaceFolder}' + ("/../" + serverChild.name);
                if (workspaceLevel) {
                    cwd = '${workspaceFolder}' + ("/" + serverChild.name);
                }
                startServerTemplate.program = cwd + '/run.js';
                startServerTemplate.cwd = cwd;
            }
            if ((serverChild.location === clientProject.location) && serverChild.isStandaloneProject) {
                startServerTemplate.name = startServerTemplate.name + " standalone";
            }
            else {
                startServerTemplate.name = startServerTemplate.name + " " + serverChild.name + " for " + clientProject.name;
            }
            startServerTemplate.args.push("--ENVoverride=" + encodeURIComponent(JSON.stringify({
                clientProjectName: clientProject.name
            }, null, 4)));
            return startServerTemplate;
        };
        //#endregion
        //#region tempalte start nodemon nodejs server
        function startNodemonServer() {
            var result = {
                "type": "node",
                "request": "launch",
                "remoteRoot": "${workspaceRoot}",
                "localRoot": "${workspaceRoot}",
                "name": "Launch Nodemon server",
                "runtimeExecutable": "nodemon",
                "program": "${workspaceFolder}/run.js",
                "restart": true,
                "sourceMaps": true,
                "console": "internalConsole",
                "internalConsoleOptions": "neverOpen",
                "runtimeArgs": [
                    // "--nolazy", "-r", "ts-node/register",
                    "--experimental-worker"
                ]
            };
            return result;
        }
        //#endregion
        //#region  tempalte start ng serve
        function startNgServeTemplate(servePort, workspaceChild, workspaceLevel) {
            var result = {
                "name": "Debugger with ng serve",
                "type": "chrome",
                "request": "launch",
                cwd: void 0,
                // "userDataDir": false,
                "preLaunchTask": "Ng Serve",
                "postDebugTask": "terminateall",
                "sourceMaps": true,
                // "url": `http://localhost:${!isNaN(servePort) ? servePort : 4200}/#`,
                "webRoot": "${workspaceFolder}",
                "sourceMapPathOverrides": {
                    "webpack:/*": "${webRoot}/*",
                    "/./*": "${webRoot}/*",
                    "/tmp-src/*": "${webRoot}/*",
                    "/*": "*",
                    "/./~/*": "${webRoot}/node_modules/*"
                }
            };
            if (workspaceChild) {
                result.cwd = "${workspaceFolder}" + ("/" + workspaceChild.name);
                result.webRoot = "${workspaceFolder}" + ("/" + workspaceChild.name);
                result.name = result.name + " for " + workspaceChild.name;
            }
            if (workspaceLevel) {
                result.preLaunchTask = result.preLaunchTask + " for " + workspaceChild.name;
            }
            return result;
        }
        ;
        //#endregion
        if (this.isWorkspace) {
            //#region handle workspace
            var servers = this.children
                .filter(function (c) { return c.typeIs('isomorphic-lib'); });
            var clients_1 = this.children
                .filter(function (c) { return c.typeIs('angular-lib'); });
            var serverConfigs_1 = [];
            servers.forEach(function (server) {
                clients_1.forEach(function (client) {
                    serverConfigs_1.push(templateForServer(server, client, true));
                });
            });
            var clientConfigs = clients_1.map(function (c) {
                var servePort = getPort(c, currentWorkspaceConfig);
                return startNgServeTemplate(servePort, c, true);
            });
            configurations = tslib_1.__spreadArrays(clientConfigs, serverConfigs_1);
            configurations.forEach(function (c) {
                c.presentation = {
                // "hidden": true
                // "order": 1,
                // "group": "configs"
                };
            });
            clients_1.forEach(function (c) {
                var requiredServersForClient = tslib_1.__spreadArrays(c.workspaceDependencies, c.workspaceDependenciesServers).filter(function (s) { return s.typeIs('isomorphic-lib'); })
                    .map(function (s) { return s.name; });
                var serversForClient = serverConfigs_1
                    .filter(function (s) {
                    return requiredServersForClient.filter(function (r) {
                        return s.name.endsWith(r + " for " + c.name);
                    }).length > 0;
                })
                    .map(function (s) { return s.name; });
                compounds.push({
                    name: "Debug backend/frontend - " + c.name + " ( " + tslib_1.__spreadArrays(c.workspaceDependencies, c.workspaceDependenciesServers).map(function (d) { return d.name; }).join(', ') + " )",
                    configurations: tslib_1.__spreadArrays([
                        "Debugger with ng serve for " + c.name
                    ], serversForClient)
                });
            });
            //#endregion
        }
        else {
            //#region handle standalone or worksapce child
            if (this.typeIs('angular-lib')) {
                var servePort = getPort(this, currentWorkspaceConfig);
                configurations = [
                    startNgServeTemplate(servePort, void 0, false)
                ];
                if (this.isWorkspaceChildProject) {
                    this.parent.children
                        .filter(function (c) { return c.typeIs('isomorphic-lib'); })
                        .forEach(function (c) {
                        configurations.push(templateForServer(c, _this, false));
                    });
                    configurations.forEach(function (c) {
                        c.presentation = {
                            // "hidden": true
                            // "order": 1,
                            "group": "configs"
                        };
                    });
                }
                if (!(this.isStandaloneProject && this.typeIs('angular-lib'))) {
                    compounds.push({
                        name: 'Debug backend/frontend',
                        configurations: tslib_1.__spreadArrays(configurations.map(function (c) { return c.name; }))
                    });
                }
                ;
            }
            if (this.typeIs('isomorphic-lib')) {
                configurations = [
                // startNodemonServer()
                ];
                if (this.isStandaloneProject) {
                    configurations.push(templateForServer(this, this, false));
                    configurations.push(startNgServeTemplate(9000, void 0, false));
                    compounds.push({
                        name: 'Debug backend/frontend',
                        configurations: tslib_1.__spreadArrays(configurations.map(function (c) { return c.name; }))
                    });
                    configurations.push(temlateAttachProcess);
                }
                //#region start serve for each agnular-lib ?
                if (this.isWorkspaceChildProject) {
                    this.parent.children
                        .filter(function (c) { return c.typeIs('angular-lib', 'isomorphic-lib'); })
                        .forEach(function (c) {
                        var t = templateForServer(_this, c, false);
                        t['presentation'] = {
                            group: 'workspaceServers'
                        };
                        configurations.push(t);
                    });
                }
                //#endregion
            }
            //#endregion
        }
        return JSON.stringify({
            version: "0.2.0",
            configurations: configurations,
            compounds: compounds
        });
    };
    return VscodeProject;
}());
exports.VscodeProject = VscodeProject;
function getPort(project, workspaceConfig) {
    var _a, _b, _c;
    if (!workspaceConfig) {
        console.log('not working !');
    }
    var env;
    if (project.isWorkspace) {
        env = (_a = workspaceConfig.workspace) === null || _a === void 0 ? void 0 : _a.workspace;
    }
    else {
        env = (_c = (_b = workspaceConfig.workspace) === null || _b === void 0 ? void 0 : _b.projects) === null || _c === void 0 ? void 0 : _c.find(function (p) { return p.name === project.name; });
    }
    var envPort = env === null || env === void 0 ? void 0 : env.port;
    return tnp_core_3._.isNumber(envPort) ? envPort : project.getDefaultPort();
}
//# sourceMappingURL=vscode-project.backend.js.map