"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var project_1 = require("./project");
var tnp_helpers_1 = require("tnp-helpers");
var SiteProject = /** @class */ (function () {
    function SiteProject() {
    }
    Object.defineProperty(SiteProject.prototype, "isSite", {
        get: function () {
            if (tnp_core_2._.isUndefined(this.cache['isSite'])) {
                var result = this.isSiteInStrictMode || this.isSiteInDependencyMode;
                this.cache['isSite'] = result;
                return result;
            }
            else {
                return this.cache['isSite'];
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SiteProject.prototype, "isSiteInStrictMode", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isSiteInStrictMode;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return false;
            }
            if (this.isSiteInDependencyMode) {
                return false;
            }
            var basedOn = '';
            if (this.isWorkspace) {
                basedOn = this.packageJson.pathToBaseline;
            }
            else if (this.isWorkspaceChildProject) {
                basedOn = this.parent.packageJson.pathToBaseline;
            }
            // log('[tnp] basedOn' + basedOn)
            var res = (basedOn && basedOn !== '');
            // log(`[tnp] Project '${this.location}' is site: ${res}`)
            return !!res;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SiteProject.prototype, "isSiteInDependencyMode", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isSiteInDependencyMode;
            }
            //#region @backend
            if (this.typeIs('unknow') || this.isStandaloneProject) {
                return false;
            }
            if (this.isWorkspace || this.isWorkspaceChildProject) {
                var workspace = (this.isWorkspace ? this : this.parent);
                return workspace.packageJson.dependsOn.length > 0;
            }
            return false;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SiteProject.prototype, "isBasedOnOtherProject", {
        /**
           * Check if project is based on baseline ( in package json workspace )
           * (method works from any level)
           */
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isBasedOnOtherProject;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return false;
            }
            if (this.isWorkspace) {
                return !!this.packageJson.pathToBaseline;
            }
            else if (this.isWorkspaceChildProject) {
                return this.parent && !!this.parent.packageJson.pathToBaseline;
            }
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SiteProject.prototype, "baseline", {
        /**
         * DONT USE WHEN IS NOT TO RESOLVE BASELINE PROJECT
         * USE isBasedOnOtherProject instead
         *
         * For site worksapce is baseline worksapace
         * For child site worksapce is baseline worksapce child
         */
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.baseline;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return;
            }
            if (this.isContainer) {
                if (global.globalSystemToolMode) {
                    tnp_helpers_1.Helpers.warn("Baseline for container is not supported");
                }
                return;
            }
            else if (this.isWorkspace) {
                return this.packageJson.pathToBaseline && project_1.Project.From(this.packageJson.pathToBaseline);
            }
            else if (this.isWorkspaceChildProject) {
                return this.parent && this.parent.baseline && project_1.Project.From(tnp_core_1.path.join(this.parent.baseline.location, this.name));
            }
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    return SiteProject;
}());
exports.SiteProject = SiteProject;
// export interface SiteProject extends Partial<Project> { };
//# sourceMappingURL=site-project.backend.js.map