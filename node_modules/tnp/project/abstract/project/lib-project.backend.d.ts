import type { Project } from './project';
import { Models } from 'tnp-models';
/**
 * Project ready to be build/publish as npm package.
 * Also ready to be linked as package in workspace.
 *  - isomorphic-lib
 *  - angular-lib
 */
export declare abstract class LibProject {
    get isGlobalSystemTool(this: Project): any;
    get isCommandLineToolOnly(this: Project): any;
    get isGeneratingControllerEntities(this: Project): boolean;
    projectLinkedFiles(this: Project): {
        sourceProject: Project;
        relativePath: string;
    }[];
    recreateIfNotExists(): any[];
    projectSpecyficFiles(this: Project): string[];
    projectSpecyficFilesLinked(this: Project): any[];
    buildLib(): Promise<void>;
    checkIfLogginInToNpm(this: Project, noExitOnError: boolean): void;
    protected beforeLibBuild(this: Project, outDir: Models.dev.BuildDir): void;
    protected copyWhenExist(this: Project, source: string, outDir: string): void;
    protected linkWhenExist(this: Project, source: string, outLInk: string): void;
    /**
     * Return how many projects has changed
     * @param bumbVersionIn
     * @param newVersion
     * @param onlyInThisProjectSubprojects
     */
    bumpVersionInOtherProjects(this: Project, newVersion: any, onlyInThisProjectSubprojects?: boolean): Promise<void>;
    private commit;
    compileES5version(this: Project): void;
    installLocaly(this: Project, releaseOptions?: Models.dev.ReleaseOptions): Promise<void>;
    createVscePackage(this: Project, showInfo?: boolean): Promise<void>;
    release(this: Project, releaseOptions?: Models.dev.ReleaseOptions, automaticRelease?: boolean): Promise<void>;
    private tagVersion;
    pushToGitRepo(this: Project, newVersion: string): Promise<void>;
    private createClientVersionAsCopyOfBrowser;
    bundleResources(this: Project): void;
}
export declare function updateChildrenVersion(project: Project, newVersion: any, name: any, updatedProjectw?: Project[]): void;
