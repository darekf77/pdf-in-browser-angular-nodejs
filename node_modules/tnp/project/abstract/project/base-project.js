"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var chalk_1 = require("chalk");
//#endregion
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var BaseProject = /** @class */ (function () {
    function BaseProject() {
    }
    Object.defineProperty(BaseProject.prototype, "extensionVsixName", {
        get: function () {
            return this.name + "-" + this.version + ".vsix";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "genericName", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.genericName;
            }
            //#region @backendFunc
            if (this.typeIs('unknow')) {
                return;
            }
            if (!tnp_core_1._.isNil(this.cache['genericName'])) {
                this.cache['genericName'];
            }
            var result = [
                (this.isWorkspace && this.isGenerated) ? "" + ((this.origin && this.origin.parent) ?
                    this.origin.parent.name : ' - no origin - ') : ''
            ];
            result = result.concat(this.findParentsNames(this));
            if (this.isGenerated) {
                result.push("((" + chalk_1.default.bold('GENERATED') + "))" + this.name);
            }
            else {
                result.push(this.name);
            }
            var res = result.filter(function (f) { return !!f; }).join('/').trim();
            if (tnp_core_1._.isNil(this.cache['genericName'])) {
                this.cache['genericName'] = res;
            }
            return this.cache['genericName'];
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    BaseProject.prototype.findParentsNames = function (project, result) {
        if (result === void 0) { result = []; }
        //#region @backendFunc
        if (!project) {
            return result.reverse();
        }
        if (project && project.parent) {
            result.push(project.parent.name);
        }
        return this.findParentsNames(project.parent, result);
        //#endregion
    };
    Object.defineProperty(BaseProject.prototype, "isPreviewFor", {
        get: function () {
            //#region @backendFunc
            var previewFor;
            if (this.parent &&
                this.parent.isStandaloneProject &&
                (this.name === tnp_config_1.config.folder.preview)) {
                previewFor = this.parent;
            }
            else if (this.parent &&
                this.parent.parent &&
                this.parent.parent.isStandaloneProject &&
                (this.parent.name === tnp_config_1.config.folder.preview)) {
                previewFor = this.parent.parent;
            }
            else if (this.parent &&
                this.parent.parent &&
                this.parent.parent.parent &&
                this.parent.parent.parent.isStandaloneProject &&
                (this.parent.parent.name === tnp_config_1.config.folder.preview)) {
                previewFor = this.parent.parent;
            }
            if (previewFor && previewFor.isTnp) {
                return;
            }
            return previewFor;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "backupName", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.backupName;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return;
            }
            return "tmp-" + this.name;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isContainerWorkspaceRelated", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isForRecreation;
            }
            //#region @backend
            return (this.isWorkspaceChildProject || this.isWorkspace || this.isContainer);
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isVscodeExtension", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isForRecreation;
            }
            //#region @backend
            return this.typeIs('vscode-ext');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isWorkspace", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isWorkspace;
            }
            //#region @backend
            return this.typeIs('workspace');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isDocker", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isDocker;
            }
            //#region @backend
            return this.typeIs('docker');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isContainer", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isContainer;
            }
            //#region @backend
            return this.typeIs('container');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isContainerCoreProject", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isContainerCoreProject;
            }
            //#region @backend
            return this.isContainer && this.isCoreProject;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isContainerChild", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isContainerChild;
            }
            //#region @backend
            return !!this.parent && this.parent.typeIs('container');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "labels", {
        get: function () {
            var self = this;
            return {
                get generated() {
                    //#region @backendFunc
                    return self.isGenerated ? '(generated)' : '';
                    //#endregion
                },
                get extendedBoldName() {
                    //#region @backendFunc
                    return chalk_1.default.bold(self.labels.generated + " " + (self.parent ? (self.parent.name + '/') : '') + self.name);
                    //#endregion
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "allResources", {
        //#region @backend
        get: function () {
            var resurces = tslib_1.__spreadArrays([
                tnp_config_1.config.file.package_json,
                tnp_config_1.config.file._npmrc,
                tnp_config_1.config.file._npmignore,
                tnp_config_1.config.file._gitignore,
                tnp_config_1.config.file.environment_js,
                tnp_config_1.config.file.tnpEnvironment_json,
                tnp_config_1.config.folder.bin,
                tnp_config_1.config.folder._vscode
            ], this.resources);
            return resurces;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isWorkspaceChildProject", {
        //#endregion
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isWorkspaceChildProject;
            }
            //#region @backend
            if (!!this.parent && this.parent.isWorkspaceChildProject) { // QUICK_FIX for temporary projects
                return true;
            }
            return !!this.parent && this.parent.typeIs('workspace');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "isStandaloneProject", {
        /**
         * Standalone project ready for publish on npm
         * Types of standalone project:
         * - isomorphic-lib : backend/fronded ts library with server,app preview
         * - angular-lib: frontend ui lib with angular preview
         */
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.isStandaloneProject;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return false;
            }
            return (!this.isWorkspaceChildProject
                && !this.isWorkspace
                && !this.isContainer
                && !this.isUnknowNpmProject
                && !this.isDocker);
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "linkedFolders", {
        //#region @backend
        get: function () {
            return this.packageJson.linkedFolders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "dependsOn", {
        //#endregion
        get: function () {
            var _this = this;
            //#region @backendFunc
            if (this.isWorkspace) {
                return this.packageJson.dependsOn.map(function (name) {
                    var child = _this.parent.child(name);
                    if (!child) {
                        tnp_helpers_1.Helpers.error("Unknow baseline project \"" + name + "\" inside " + _this.packageJson.path, false, true);
                    }
                    return child;
                }).filter(function (f) { return !!f; });
            }
            return [];
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "workspaceDependencies", {
        get: function () {
            var _this = this;
            //#region @backendFunc
            if (this.typeIs('unknow')) {
                return [];
            }
            if (this.isWorkspaceChildProject) {
                if (this.isSite) {
                    return this.baseline.workspaceDependencies.map(function (c) {
                        return _this.parent.child(c.name);
                    });
                }
                return this.packageJson.workspaceDependencies.map(function (name) {
                    var child = _this.parent.child(name);
                    if (!child) {
                        tnp_helpers_1.Helpers.error("Unknow child \"" + name + "\" inside " + _this.packageJson.path, false, true);
                    }
                    return child;
                }).filter(function (f) { return !!f; });
            }
            else if (this.isStandaloneProject) {
                if (!tnp_core_1._.isUndefined(this.__cacheStandaloneDependencies)) {
                    return this.__cacheStandaloneDependencies;
                }
                var dependenciesNames = this.packageJson.dependencies();
                var res = dependenciesNames.map(function (d) {
                    var child = _this.parent.children.find(function (f) { return f.name === d; });
                    return child;
                }).filter(function (f) { return !!f; });
                this.__cacheStandaloneDependencies = res;
                return res;
            }
            return [];
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseProject.prototype, "workspaceDependenciesServers", {
        get: function () {
            var _this = this;
            //#region @backendFunc
            if (this.typeIs('unknow')) {
                return [];
            }
            var servers = [];
            if (this.isWorkspaceChildProject) {
                if (this.isSite) {
                    servers = this.baseline.workspaceDependenciesServers.map(function (c) {
                        return _this.parent.child(c.name);
                    });
                }
                else {
                    servers = this.packageJson.workspaceDependenciesServers.map(function (name) {
                        var child = _this.parent.child(name);
                        if (!child) {
                            tnp_helpers_1.Helpers.error("Unknow child \"" + name + "\" inside " + _this.packageJson.path, false, true);
                        }
                        return child;
                    }).filter(function (f) { return !!f; });
                }
            }
            var foundedBadServer;
            if (!tnp_core_1._.isUndefined(servers.find(function (c) {
                var res = _this.workspaceDependencies.indexOf(c) !== -1;
                if (res) {
                    foundedBadServer = c;
                }
                return res;
            }))) {
                tnp_helpers_1.Helpers.error("\n\nPlease put your server dependencies (in package.json) to :\nworkspaceDependencies: [\"" + foundedBadServer.name + "\"]\nworkspaceDependenciesServer: []\nor\nworkspaceDependencies: []\nworkspaceDependenciesServer: [\"" + foundedBadServer.name + "\"]\n\nNEVER like this:\nworkspaceDependencies: [\"" + foundedBadServer.name + "\"]\nworkspaceDependenciesServer: [\"" + foundedBadServer.name + "\"]\n\n      ");
            }
            return servers;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    BaseProject.prototype.linkTo = function (destPackageLocation) {
        //#region @backend
        tnp_helpers_1.Helpers.createSymLink(this.location, destPackageLocation);
        //#endregion
    };
    return BaseProject;
}());
exports.BaseProject = BaseProject;
//# sourceMappingURL=base-project.js.map