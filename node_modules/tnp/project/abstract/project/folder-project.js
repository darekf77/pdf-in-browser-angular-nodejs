"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var morphi_1 = require("morphi");
//#endregion
var tnp_core_3 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var FolderProject = /** @class */ (function () {
    function FolderProject() {
    }
    Object.defineProperty(FolderProject.prototype, "sourceFolder", {
        //#region @backend
        get: function () {
            return (this.typeIs('angular-lib')
                ? tnp_config_1.config.folder.components : tnp_config_1.config.folder.src);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderProject.prototype, "linkedProjects", {
        //#endregion
        //#region @backend
        get: function () {
            var _this = this;
            return this.packageJson.linkedProjects
                .filter(function (f) { return !tnp_helpers_1.Helpers.isValidGitRepuUrl(f); })
                .map(function (f) {
                return tnp_helpers_1.Project.From(tnp_core_2.path.join(_this.location, f));
            })
                .filter(function (f) { return !f; });
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    FolderProject.prototype.hasChild = function (child) {
        return !tnp_core_3._.isUndefined(this.children.find(function (c) { return c.name === (child === null || child === void 0 ? void 0 : child.name); }));
    };
    Object.defineProperty(FolderProject.prototype, "children", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.children;
            }
            //#region @backend
            if (this.isTnp && !global.globalSystemToolMode) {
                return [];
            }
            if (this.typeIs('unknow')) {
                return [];
            }
            return this.getAllChildren();
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderProject.prototype, "childrenThatAreLibs", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.childrenThatAreLibs;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return [];
            }
            return this.children.filter(function (c) {
                return c.typeIs.apply(c, [
                    'angular-lib',
                    'isomorphic-lib'
                ]);
            });
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderProject.prototype, "childrenThatAreClients", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.childrenThatAreClients;
            }
            //#region @backend
            if (this.typeIs('unknow')) {
                return [];
            }
            return this.children.filter(function (c) {
                return c.typeIs.apply(c, [
                    'angular-lib',
                    'isomorphic-lib',
                    'angular-client',
                    'ionic-client',
                ]);
            });
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    //#region @backend
    FolderProject.prototype.getAllChildren = function (options) {
        if (this.typeIs('unknow')) {
            return [];
        }
        if (tnp_core_3._.isUndefined(options)) {
            options = {};
        }
        if (tnp_core_3._.isUndefined(options.excludeUnknowProjects)) {
            options.excludeUnknowProjects = true;
        }
        var excludeUnknowProjects = options.excludeUnknowProjects;
        var subdirectories = this.getFolders();
        var res = subdirectories
            .map(function (dir) {
            // log('child:', dir)
            return tnp_helpers_1.Project.From(dir);
        })
            .filter(function (c) { return !!c; });
        if (excludeUnknowProjects) {
            res = res.filter(function (c) {
                var isNot = c.typeIsNot('unknow');
                // if (!isNot) {
                //   console.log(`KURWA ${isNot}`)
                // }
                return isNot;
            });
        }
        return res;
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.replaceSourceForStandalone = function () {
        var _this = this;
        [
            tnp_config_1.config.folder.src,
            tnp_config_1.config.folder.components,
        ].forEach(function (folderName) {
            var orgSource = tnp_core_2.path.join(_this.location, folderName);
            tnp_helpers_1.Helpers.removeFolderIfExists(orgSource);
            var standalone = tnp_core_2.path.join(_this.location, folderName + "-for-standalone");
            if (tnp_helpers_1.Helpers.exists(standalone)) {
                tnp_helpers_1.Helpers.move(standalone, orgSource);
            }
        });
    };
    FolderProject.prototype.removeStandaloneSources = function () {
        var _this = this;
        [
            tnp_config_1.config.folder.src,
            tnp_config_1.config.folder.components,
        ].forEach(function (folderName) {
            var standalone = tnp_core_2.path.join(_this.location, folderName + "-for-standalone");
            tnp_helpers_1.Helpers.removeFolderIfExists(standalone);
        });
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.child = function (name, errors) {
        if (errors === void 0) { errors = true; }
        var c = this.children.find(function (c) { return c.name === name; });
        if (errors && !c) {
            tnp_helpers_1.Helpers.warn("Project doesnt contain child with name: " + name);
        }
        return c;
    };
    Object.defineProperty(FolderProject.prototype, "parent", {
        //#endregion
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.parent;
            }
            //#region @backend
            if (!tnp_core_3._.isString(this.location) || this.location.trim() === '') {
                return void 0;
            }
            var parent = tnp_helpers_1.Project.From(tnp_core_2.path.join(this.location, '..'));
            if (parent && parent.isWorkspaceChildProject && this.isWorkspaceChildProject) { // QUICK_FIX for temporary projects
                return parent.parent;
            }
            return parent;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FolderProject.prototype, "grandpa", {
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.grandpa;
            }
            //#region @backend
            if (!tnp_core_3._.isString(this.location) || this.location.trim() === '') {
                return void 0;
            }
            var grandpa = tnp_helpers_1.Project.From(tnp_core_2.path.join(this.location, '..', '..'));
            return grandpa;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    //#region @backend
    FolderProject.prototype.getFolders = function () {
        var notAllowed = tslib_1.__spreadArrays([
            '^\.vscode$', '^node\_modules$'
        ], tnp_core_3._.values(tnp_config_1.config.tempFolders).map(function (v) { return "^" + v + "$"; }), [
            '^e2e$', '^tmp.*', '^dist.*', '^tests$', '^module$', '^browser', 'bundle*',
            '^components$', '\.git', '^bin$', '^custom$'
        ]).map(function (s) { return new RegExp(s); });
        var isDirectory = function (source) { return tnp_core_1.fse.lstatSync(source).isDirectory(); };
        var getDirectories = function (source) {
            return tnp_core_1.fse.readdirSync(source).map(function (name) { return tnp_core_2.path.join(source, name); }).filter(isDirectory);
        };
        var subdirectories = getDirectories(this.location)
            .filter(function (f) {
            var folderNam = tnp_core_2.path.basename(f);
            return (notAllowed.filter(function (p) { return p.test(folderNam); }).length === 0);
        });
        if (this.isTnp && tnp_core_1.fse.existsSync(tnp_core_2.path.join(this.location, '../firedev-projects'))) {
            subdirectories = subdirectories.concat(getDirectories(tnp_core_2.path.join(this.location, '../firedev-projects'))
                .filter(function (f) {
                var folderNam = tnp_core_2.path.basename(f);
                return (notAllowed.filter(function (p) { return p.test(folderNam); }).length === 0);
            }));
        }
        return subdirectories;
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.clear = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.typeIs('unknow')) {
                            return [2 /*return*/];
                        }
                        tnp_helpers_1.Helpers.info("\n\n    Cleaning project: " + this.genericName + "\n\n    ");
                        this.node_modules.remove();
                        return [4 /*yield*/, this.reset(false)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region @backend
    FolderProject.prototype._path = function (relativePath, currentProjectLocation) {
        if (tnp_core_3._.isUndefined(currentProjectLocation)) {
            currentProjectLocation = this.location;
        }
        return {
            /**
             * Normal path as you expect
             * <absolute path to project> / < relative path from param >
             */
            normal: tnp_core_1.crossPlatformPath(tnp_core_2.path.join(currentProjectLocation, relativePath)),
            custom: tnp_core_1.crossPlatformPath(tnp_core_2.path.join(currentProjectLocation, tnp_config_1.config.folder.custom, relativePath)),
            __prefixed: tnp_core_1.crossPlatformPath(tnp_core_2.path.join(currentProjectLocation, tnp_core_2.path.dirname(relativePath), "__" + tnp_core_2.path.basename(relativePath))),
        };
    };
    FolderProject.prototype.path = function (relativePath, currentProjectLocation) {
        var self = this;
        return {
            get relative() {
                return self._path(relativePath, '');
            },
            get absolute() {
                return self._path(relativePath);
            }
        };
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.containsFile = function (fileRelativeToProjectPath) {
        var fullPath = tnp_core_2.path.resolve(tnp_core_2.path.join(this.location, fileRelativeToProjectPath));
        return tnp_helpers_1.Helpers.exists(fullPath);
    };
    FolderProject.prototype.removeFile = function (fileRelativeToProjectPath) {
        var fullPath = tnp_core_2.path.resolve(tnp_core_2.path.join(this.location, fileRelativeToProjectPath));
        return tnp_helpers_1.Helpers.removeFileIfExists(fullPath);
    };
    FolderProject.prototype.containsFolder = function (filePaht) {
        var fullPath = tnp_core_2.path.resolve(tnp_core_2.path.join(this.location, filePaht));
        var res = tnp_core_1.fse.existsSync(fullPath);
        // if (!res && process.platform === 'darwin') {
        //   fullPath = path.join('/private', fullPath);
        //   res = fse.existsSync(fullPath);
        // }
        // log(`res: ${res} : ${fullPath}`)
        return res;
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.removeFileByRelativePath = function (relativePathToFile) {
        relativePathToFile = relativePathToFile.replace(/^\//, '');
        var location = this.location;
        var p = tnp_core_2.path.join(location, relativePathToFile);
        tnp_helpers_1.Helpers.removeFileIfExists(p);
    };
    FolderProject.prototype.removeFolderByRelativePath = function (relativePathToFolder) {
        relativePathToFolder = relativePathToFolder.replace(/^\//, '');
        var location = this.location;
        var p = tnp_core_2.path.join(location, relativePathToFolder);
        tnp_helpers_1.Helpers.removeFolderIfExists(p);
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.clearNodeModulesFromLinks = function () {
        if (!this.isStandaloneProject) {
            return;
        }
        tnp_helpers_1.Helpers.log("Reseting symbolic links from node_mouels.. start..");
        var node_modules = tnp_core_2.path.join(this.location, tnp_config_1.config.folder.node_modules);
        var folders = !tnp_core_1.fse.existsSync(node_modules) ? [] : tnp_core_1.fse.readdirSync(node_modules);
        folders
            .map(function (f) { return tnp_core_2.path.join(node_modules, f); })
            .filter(function (f) { return tnp_core_1.fse.lstatSync(f).isSymbolicLink(); })
            .forEach(function (f) {
            tnp_helpers_1.Helpers.log("Deleting link  node_modules/" + tnp_core_2.path.basename(f));
            tnp_helpers_1.Helpers.remove(f);
        });
        tnp_helpers_1.Helpers.log("Reseting symbolic links from node_mouels.. DONE ");
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.reset = function (showMsg) {
        if (showMsg === void 0) { showMsg = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var siteLocationInDist, gitginoredfiles, index, head, fileOrDirPath;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.compilerCache.unsetData()];
                    case 1:
                        _a.sent();
                        this.quickFixes.removeUncessesaryFiles();
                        if (this.isWorkspace && this.isGenerated && this.isBasedOnOtherProject) {
                            siteLocationInDist = tnp_core_2.path.resolve(tnp_core_2.path.join('..', this.location, this.baseline.name));
                            tnp_helpers_1.Helpers.tryRemoveDir(siteLocationInDist);
                        }
                        if (this.typeIs('unknow')) {
                            return [2 /*return*/];
                        }
                        if (showMsg) {
                            tnp_helpers_1.Helpers.info("\n\n      Reseting project: " + this.genericName + "\n\n      ");
                        }
                        this.removeRecognizedIsomorphicLIbs();
                        gitginoredfiles = this.recreate.filesIgnoredBy.gitignore
                            .map(function (f) { return f.startsWith('/') ? f.substr(1) : f; })
                            .filter(function (f) {
                            if (f.startsWith('tsconfig.') && _this.isTnp) {
                                return false;
                            }
                            if (f === tnp_config_1.config.folder.node_modules) {
                                return false;
                            }
                            if (tnp_config_1.config.filesNotAllowedToClean.includes(f)) {
                                return false;
                            }
                            if (f.startsWith(tnp_config_1.config.folder.bundle) && _this.isTnp) {
                                return false;
                            }
                            return true;
                        });
                        if (this.isWorkspace) {
                            gitginoredfiles = gitginoredfiles.filter(function (f) { return !f.startsWith(tnp_config_1.config.folder.dist); });
                        }
                        if (this.isCoreProject) {
                            gitginoredfiles = gitginoredfiles.filter(function (f) {
                                return [
                                    tnp_config_1.config.folder.node_modules
                                ].map(function (c) { return "/" + c; }).includes(f);
                            });
                        }
                        for (index = 0; index < gitginoredfiles.length; index++) {
                            head = gitginoredfiles[index].trim();
                            fileOrDirPath = tnp_core_2.path.join(this.location, head);
                            if (!head.startsWith('**')) {
                                tnp_helpers_1.Helpers.log("Removing: \"" + head + "\"");
                                tnp_helpers_1.Helpers.remove(fileOrDirPath);
                            }
                        }
                        if (this.isCoreProject) {
                            tnp_helpers_1.Helpers.remove(this.location + "/tmp*");
                            tnp_helpers_1.Helpers.remove(this.location + "/browser-*");
                            tnp_helpers_1.Helpers.remove(this.location + "/dist");
                        }
                        this.clearNodeModulesFromLinks();
                        this.quickFixes.missingSourceFolders();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.removeRecognizedIsomorphicLIbs = function () {
        if (this.typeIs('unknow')) {
            return;
        }
        try {
            var pjPath = tnp_core_2.path.join(this.location, tnp_config_1.config.file.package_json);
            var pj = tnp_core_1.fse.readJsonSync(pjPath, {
                encoding: 'utf8'
            });
            pj[morphi_1.config.array.isomorphicPackages] = void 0;
            tnp_core_1.fse.writeJsonSync(pjPath, pj, {
                encoding: 'utf8',
                spaces: 2
            });
        }
        catch (e) {
        }
    };
    //#endregion
    //#region @backend
    FolderProject.prototype.notAllowedFiles = function () {
        return [];
    };
    return FolderProject;
}());
exports.FolderProject = FolderProject;
// export interface FolderProject extends Partial<Project> { }
//# sourceMappingURL=folder-project.js.map