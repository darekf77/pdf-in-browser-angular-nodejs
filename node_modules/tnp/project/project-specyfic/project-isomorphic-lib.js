"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var inquirer = require("inquirer");
var tnp_config_1 = require("tnp-config");
var incremental_build_process_backend_1 = require("../compilers/build-isomorphic-lib/incremental-build-process.backend");
var project_1 = require("../abstract/project/project");
//#endregion
var tnp_core_3 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#region @backend
var ProjectIsomorphicLib = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectIsomorphicLib
    //#region @backend
    , _super);
    //#endregion
    function ProjectIsomorphicLib() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectIsomorphicLib.prototype.initProcedure = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                //#region @backend
                if (this.isCoreProject && this.frameworkVersionAtLeast('v2')) {
                }
                return [2 /*return*/];
            });
        });
    };
    ProjectIsomorphicLib.prototype.startOnCommand = function (args) {
        //#region @backendFunc
        var command = "ts-node run.js " + args;
        return command;
        //#endregion
    };
    ProjectIsomorphicLib.prototype.sourceFilesToIgnore = function () {
        //#region @backendFunc
        var toIgnore = [
            "src/" + tnp_config_1.config.file.entities_ts,
            "src/" + tnp_config_1.config.file.controllers_ts,
        ];
        if (this.isSiteInStrictMode) {
            toIgnore = toIgnore.concat(toIgnore.map(function (f) { return tnp_config_1.config.folder.custom + "/" + f; }));
        }
        return toIgnore;
        //#endregion
    };
    ProjectIsomorphicLib.prototype.projectSpecyficFiles = function () {
        //#region @backendFunc
        var files = _super.prototype.projectSpecyficFiles.call(this)
            .concat(tslib_1.__spreadArrays([
            'tsconfig.browser.json',
            'webpack.config.js',
            'webpack.backend-bundle-build.js',
            'run.js'
        ], this.filesTemplates())).concat(!this.isStandaloneProject ? [
            'src/typings.d.ts',
        ] : []);
        if (this.frameworkVersionAtLeast('v2')) {
            files = files.filter(function (f) { return f !== 'tsconfig.browser.json'; });
        }
        return files;
        //#endregion
    };
    ProjectIsomorphicLib.prototype.filesTemplates = function () {
        //#region @backendFunc
        var files = [
            'tsconfig.json.filetemplate',
        ];
        if (this.frameworkVersionAtLeast('v2')) {
            files = tslib_1.__spreadArrays([
                'tsconfig.isomorphic.json.filetemplate',
                'tsconfig.browser.json.filetemplate'
            ], this.vscodeFileTemplates, files);
        }
        return files;
        //#endregion
    };
    ProjectIsomorphicLib.prototype.projectLinkedFiles = function () {
        //#region @backendFunc
        var files = _super.prototype.projectLinkedFiles.call(this);
        if (this.frameworkVersionAtLeast('v2')) {
            files.push({
                sourceProject: project_1.Project.by(this._type, 'v1'),
                relativePath: 'webpack.backend-bundle-build.js'
            });
        }
        return files;
        //#endregion
    };
    ProjectIsomorphicLib.prototype.projectSpecyficIgnoredFiles = function () {
        //#region @backendFunc
        return [
            'src/entities.ts',
            'src/controllers.ts'
        ].concat(this.projectSpecyficFiles());
        //#endregion
    };
    ProjectIsomorphicLib.prototype.selectToSimulate = function (
    //#region @backend
    outDir, watch, forClient, args
    //#endregion
    ) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var webpackEnvParams, client, answer, port, argsAdditionalParams, command;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        webpackEnvParams = "--env.outFolder=" + outDir;
                        webpackEnvParams = webpackEnvParams + (watch ? ' --env.watch=true' : '');
                        client = tnp_core_3._.first(forClient);
                        if (!!global.tnpNonInteractive) return [3 /*break*/, 2];
                        if (!(!this.isStandaloneProject && forClient.length === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, inquirer
                                .prompt([
                                {
                                    type: 'list',
                                    name: 'project',
                                    message: 'Which project do you wanna simulate ?',
                                    choices: this.parent.children
                                        .filter(function (c) { return c.typeIs.apply(c, tnp_config_1.config.allowedTypes.app); })
                                        .filter(function (c) { return c.name !== _this.name; })
                                        .map(function (c) { return c.name; }),
                                    filter: function (val) {
                                        return val.toLowerCase();
                                    }
                                }
                            ])];
                    case 1:
                        answer = _a.sent();
                        client = project_1.Project.From(tnp_core_1.path.join(this.location, '..', answer.project));
                        _a.label = 2;
                    case 2:
                        if (client) {
                            port = client.getDefaultPort();
                            webpackEnvParams = webpackEnvParams + " --env.moduleName=" + client.name;
                        }
                        argsAdditionalParams = tnp_helpers_1.Helpers.cliTool.argsFrom(args) || {};
                        if (tnp_core_3._.isNumber(argsAdditionalParams.port)) {
                            port = argsAdditionalParams.port;
                        }
                        if (!tnp_core_3._.isNumber(port)) return [3 /*break*/, 4];
                        return [4 /*yield*/, tnp_helpers_1.Helpers.killProcessByPort(port)];
                    case 3:
                        _a.sent();
                        webpackEnvParams = webpackEnvParams + " --env.port=" + port;
                        _a.label = 4;
                    case 4:
                        command = "npm-run webpack-dev-server " + webpackEnvParams;
                        tnp_helpers_1.Helpers.info("\n\n    WEBPACK COMMAND: " + command + "\n\n    ");
                        this.run(command).sync();
                        return [2 /*return*/];
                }
            });
        });
    };
    ProjectIsomorphicLib.prototype.buildSteps = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var prod, watch, outDir, onlyWatchNoBuild, appBuild, args, _a, forClient;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        prod = buildOptions.prod, watch = buildOptions.watch, outDir = buildOptions.outDir, onlyWatchNoBuild = buildOptions.onlyWatchNoBuild, appBuild = buildOptions.appBuild, args = buildOptions.args, _a = buildOptions.forClient, forClient = _a === void 0 ? [] : _a;
                        if (!!onlyWatchNoBuild) return [3 /*break*/, 4];
                        if (!appBuild) return [3 /*break*/, 2];
                        if (!watch) {
                            tnp_helpers_1.Helpers.log("App build not possible for isomorphic-lib in static build mode");
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.selectToSimulate(outDir, watch, forClient, buildOptions.args)];
                    case 1:
                        _b.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.buildLib()];
                    case 3:
                        _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //#region @backend
    ProjectIsomorphicLib.prototype.cutReleaseCode = function () {
        var _this = this;
        if (!(tnp_core_1.path.basename(tnp_core_1.path.dirname(tnp_core_1.path.dirname(this.location))) === tnp_config_1.config.folder.bundle &&
            tnp_core_1.path.basename(tnp_core_1.path.dirname(this.location)) === tnp_config_1.config.folder.project)) {
            tnp_helpers_1.Helpers.warn("Npm code cut available only for command: " + tnp_config_1.config.frameworkName + " release");
            return;
        }
        var releaseSrcLocation = tnp_core_1.path.join(this.location, tnp_config_1.config.folder.src);
        var filesForModyficaiton = tnp_core_2.glob.sync(releaseSrcLocation + "/**/*");
        filesForModyficaiton
            .filter(function (absolutePath) { return !tnp_helpers_1.Helpers.isFolder(absolutePath); })
            .forEach(function (absolutePath) {
            var rawContent = tnp_helpers_1.Helpers.readFile(absolutePath);
            rawContent = _this.replaceRegionsWith(rawContent, ['@notForNpm']);
            tnp_helpers_1.Helpers.writeFile(absolutePath, rawContent);
        });
    };
    ProjectIsomorphicLib.prototype.REGEX_REGION = function (word) {
        return new RegExp("[\\t ]*\\/\\/\\s*#?region\\s+" + word + " ?[\\s\\S]*?\\/\\/\\s*#?endregion ?[\\t ]*\\n?", "g");
    };
    ProjectIsomorphicLib.prototype.replaceRegionsWith = function (stringContent, words) {
        if (stringContent === void 0) { stringContent = ''; }
        if (words === void 0) { words = []; }
        if (words.length === 0) {
            return stringContent;
        }
        var word = words.shift();
        var replacement = '';
        if (Array.isArray(word) && word.length === 2) {
            replacement = word[1];
            word = word[0];
        }
        stringContent = stringContent.replace(this.REGEX_REGION(word), replacement);
        return this.replaceRegionsWith(stringContent, words);
    };
    //#endregion
    ProjectIsomorphicLib.prototype.buildLib = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var outDir, webpackCommandFn, webpackCommand, _a, obscure, uglify, nodts, reservedNames;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        outDir = this.buildOptions.outDir;
                        tnp_helpers_1.Helpers.log("[buildLib] start of building");
                        this.beforeLibBuild(outDir);
                        webpackCommandFn = function (watchCommand) {
                            return "npm-run webpack --config webpack.backend-bundle-build.js " + (watchCommand ? '--watch' : '');
                        };
                        webpackCommand = webpackCommandFn(this.buildOptions.watch);
                        _a = this.buildOptions, obscure = _a.obscure, uglify = _a.uglify, nodts = _a.nodts;
                        if (outDir === 'bundle') {
                            this.cutReleaseCode();
                        }
                        if (outDir === 'bundle' && (obscure || uglify)) {
                            this.quickFixes.overritenBadNpmPackages();
                            tnp_helpers_1.Helpers.info("\n\n        WEBPACK " + (this.buildOptions.watch ? 'WATCH' : '') + " BACKEND BUILD started...\n\n        command: " + webpackCommand + "\n\n        ");
                        }
                        if (!this.buildOptions.watch && (uglify || obscure || nodts) && outDir === 'bundle') {
                            this.buildOptions.genOnlyClientCode = true;
                        }
                        this.incrementalBuildProcess = new incremental_build_process_backend_1.IncrementalBuildProcessExtended(this, this.buildOptions);
                        if (!this.buildOptions.watch) return [3 /*break*/, 4];
                        if (!(outDir === 'bundle')) return [3 /*break*/, 1];
                        tnp_helpers_1.Helpers.error("Watch build not available for bundle build");
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.incrementalBuildProcess.startAndWatch('isomorphic compilation (watch mode)', {
                            watchOnly: this.buildOptions.watchOnly,
                            afterInitCallBack: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.compilerCache.setUpdatoDate.incrementalBuildProcess()];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }
                        })];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [3 /*break*/, 8];
                    case 4:
                        if (!(outDir === 'bundle' && (obscure || uglify || nodts))) return [3 /*break*/, 6];
                        try {
                            this.run(webpackCommand).sync();
                            reservedNames = [
                                'reservedExpOne',
                                'reservedExpSec'
                            ];
                            if (obscure || uglify) {
                                this.compileToEs5();
                            }
                            if (uglify) {
                                this.uglifyCode(reservedNames);
                            }
                            ;
                            if (obscure) {
                                this.obscureCode(reservedNames);
                            }
                            if (!nodts) {
                                this.compilerDeclarationFiles();
                            }
                            ;
                            // process.exit(0)
                        }
                        catch (er) {
                            tnp_helpers_1.Helpers.error("BUNDLE production build failed", false, true);
                        }
                        return [4 /*yield*/, this.incrementalBuildProcess.start('isomorphic compilation (only client) ')];
                    case 5:
                        _b.sent();
                        return [3 /*break*/, 8];
                    case 6: return [4 /*yield*/, this.incrementalBuildProcess.start('isomorphic compilation')];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    ProjectIsomorphicLib.prototype.compilerDeclarationFiles = function () {
        //#region @backend
        this.run("npm-run tsc --emitDeclarationOnly --declarationDir " + tnp_config_1.config.folder.bundle).sync();
        //#endregion
    };
    //#region @backend
    ProjectIsomorphicLib.prototype.compileToEs5 = function () {
        if (!tnp_helpers_1.Helpers.exists(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, 'index.js'))) {
            tnp_helpers_1.Helpers.warn("[compileToEs5] Nothing to compile to es5... no index.js in bundle");
            return;
        }
        var indexEs5js = "index-es5.js";
        tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, tnp_config_1.config.file._babelrc), '{ "presets": ["env"] }\n');
        this.run("npm-run babel  ./bundle/index.js --out-file ./bundle/" + indexEs5js).sync();
        tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, tnp_config_1.config.file.index_js), tnp_helpers_1.Helpers.readFile(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, indexEs5js)));
        tnp_helpers_1.Helpers.removeFileIfExists(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, indexEs5js));
        tnp_helpers_1.Helpers.removeFileIfExists(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, tnp_config_1.config.file._babelrc));
    };
    //#endregion
    ProjectIsomorphicLib.prototype.uglifyCode = function (reservedNames) {
        //#region @backendFunc
        if (!tnp_helpers_1.Helpers.exists(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, 'index.js'))) {
            tnp_helpers_1.Helpers.warn("[uglifyCode] Nothing to uglify... no index.js in bundle");
            return;
        }
        var command = "npm-run uglifyjs bundle/index.js --output bundle/index.js"
            + (" --mangle reserved=[" + reservedNames.map(function (n) { return "'" + n + "'"; }).join(',') + "]");
        // + ` --mangle-props reserved=[${reservedNames.join(',')}]` // it breakes code
        tnp_helpers_1.Helpers.info("\n\n    JAVASCRIPT-UGLIFY PROCESSING...\n\n    " + command + "\n\n      ");
        this.run(command).sync();
        //#endregion
    };
    ProjectIsomorphicLib.prototype.obscureCode = function (reservedNames) {
        //#region @backendFunc
        if (!tnp_helpers_1.Helpers.exists(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.bundle, 'index.js'))) {
            tnp_helpers_1.Helpers.warn("[obscureCode] Nothing to obscure... no index.js in bundle");
            return;
        }
        var commnad = "npm-run javascript-obfuscator bundle/index.js "
            + " --output bundle/index.js"
            + " --target node"
            + " --rotate-string-array true"
            // + ` --stringArray true`
            + " --string-array-encoding base64"
            + (" --reserved-names '" + reservedNames.join(',') + "'")
            + (" --reserved-strings '" + reservedNames.join(',') + "'");
        tnp_helpers_1.Helpers.info("\n\n        JAVASCRIPT-OBFUSCATOR PROCESSING...\n\n        " + commnad + "\n\n          ");
        this.run(commnad).sync();
        //#endregion
    };
    ProjectIsomorphicLib = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ProjectIsomorphicLib')
        //#endregion
    ], ProjectIsomorphicLib);
    return ProjectIsomorphicLib;
}(project_1.Project
//#endregion
));
exports.ProjectIsomorphicLib = ProjectIsomorphicLib;
//#region @backend
function getReservedClassNames(project) {
    if (project === void 0) { project = project_1.Project.Current; }
    // console.log('get class names from : ' + project.name)
    // console.log('parent : ' + (project.parent && project.parent.name))
    // console.log('childeren' + (project.parent && project.parent.children.map(c => c.name)));
    // console.log('children isomorphic: ' + (project.parent && project.parent.children
    //     .filter((p) => p.type === 'isomorphic-lib')
    //     .map(c => c.name))
    // );
    if (project && project.parent && project.parent.typeIs('workspace')
        && Array.isArray(project.parent.children)
        && project.parent.children.length > 0) {
        var names_1 = [];
        project.parent.children
            .filter(function (p) { return p.typeIs('isomorphic-lib'); })
            .forEach(function (p) {
            var controllers = tnp_helpers_1.Helpers.morphi.getControllers(tnp_core_1.path.join(p.location, tnp_config_1.config.folder.src));
            // console.log('controllers', controllers)
            controllers.forEach(function (c) {
                names_1.push(tnp_core_1.path.basename(c, '.ts'));
            });
            var entities = tnp_helpers_1.Helpers.morphi.getEntites(tnp_core_1.path.join(p.location, tnp_config_1.config.folder.src));
            // const entities = glob.sync(`${path.join(
            //   p.location,
            //   config.folder.src,
            //   config.folder.entities
            // )}/**/*.ts`)
            // console.log('entities', entities)
            entities.forEach(function (e) {
                names_1.push(tnp_core_1.path.basename(e, '.ts'));
            });
        });
        return names_1;
    }
    return [];
}
exports.getReservedClassNames = getReservedClassNames;
//#endregion
//# sourceMappingURL=project-isomorphic-lib.js.map