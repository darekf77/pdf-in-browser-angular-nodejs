"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var abstract_1 = require("../abstract");
var tnp_config_1 = require("tnp-config");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_1 = require("tnp-helpers");
//#region @backend
var ProjectDocker = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectDocker
    //#region @backend
    , _super);
    //#endregion
    function ProjectDocker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectDocker.prototype.stop = function () {
        //#region @backendFunc
        var imageId = this.dockerImageId;
        if (!tnp_core_2._.isString(imageId) || imageId.trim() === '') {
            tnp_helpers_1.Helpers.error("Please build first image: " + tnp_config_1.config.frameworkName + " build", false, true);
        }
        var containtersIds = [];
        try {
            containtersIds = tnp_helpers_1.Helpers.run("docker ps | grep " + imageId, { output: false })
                .sync().toString().trim().split('\n').map(function (line) {
                var lines = line.split(' ').filter(function (f) { return !!f; });
                var containerID = tnp_core_2._.first(lines);
                return containerID;
            });
        }
        catch (error) { }
        if (containtersIds.length > 0) {
            tnp_helpers_1.Helpers.info("Stoping containters..");
            try {
                this.run("docker stop " + containtersIds.join(' ')).sync();
                tnp_helpers_1.Helpers.info("Done");
            }
            catch (e) {
                tnp_helpers_1.Helpers.warn("Not able to stop containers: " + containtersIds.join(' ') + " from image id: " + imageId);
            }
        }
        else {
            tnp_helpers_1.Helpers.warn("No containers to stop by image id: " + imageId);
        }
        //#endregion
    };
    Object.defineProperty(ProjectDocker.prototype, "dockerImageId", {
        get: function () {
            //#region @backendFunc
            return tnp_helpers_1.Helpers.readFile(tnp_core_1.path.join(this.location, tnp_config_1.config.file.tmpDockerImageId));
            //#endregion
        },
        set: function (id) {
            //#region @backend
            tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(this.location, tnp_config_1.config.file.tmpDockerImageId), id);
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    ProjectDocker.prototype.buildLib = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    ProjectDocker.prototype.startOnCommand = function () {
        //#region @backendFunc
        this.stop();
        var id = this.dockerImageId;
        if (!tnp_core_2._.isString(id) || id.trim() === '') {
            tnp_helpers_1.Helpers.error("Please build first image: " + tnp_config_1.config.frameworkName + " build", false, true);
        }
        // 'docker run -v /var/run/docker.sock:/var/run/docker.sock';
        return "docker run " + id + " > ./tmp-docker-image-log-" + id + ".txt 2>&1";
        //#endregion
    };
    ProjectDocker.prototype.projectSpecyficFiles = function () {
        //#region @backendFunc
        return [
            'docker-help.md'
        ];
        //#endregion
    };
    ProjectDocker.prototype.filesTemplates = function () {
        //#region @backendFunc
        var files = _super.prototype.filesTemplates.call(this);
        return tslib_1.__spreadArrays(files, [
            'Dockerfile.filetemplate',
        ]);
        //#endregion
    };
    ProjectDocker.prototype.saveToFile = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                //#region @backendFunc
                tnp_helpers_1.Helpers.info("Exporting image..");
                this.run("docker save " + this.dockerImageId + " > tmp-container-backup-" + this.dockerImageId + ".tar").sync();
                return [2 /*return*/];
            });
        });
    };
    ProjectDocker.prototype.buildSteps = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var nocache, dockerImageId;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nocache = tnp_helpers_1.Helpers.cliTool.argsFrom(buildOptions.args).nocache;
                        tnp_helpers_1.Helpers.info("building docker");
                        return [4 /*yield*/, this.run("docker build " + (nocache ? '--no-cache' : '') + " .", {
                                output: true,
                                prefix: 'docker',
                                showCommand: true,
                                extractFromLine: ['Successfully built', function (id) { dockerImageId = id; }]
                            }).asyncAsPromise()];
                    case 1:
                        _a.sent();
                        tnp_helpers_1.Helpers.info("DockerId: " + dockerImageId);
                        this.dockerImageId = dockerImageId;
                        return [2 /*return*/];
                }
            });
        });
    };
    ProjectDocker = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ProjectDocker')
        //#endregion
    ], ProjectDocker);
    return ProjectDocker;
}(abstract_1.Project
//#endregion
));
exports.ProjectDocker = ProjectDocker;
//# sourceMappingURL=project-docker.js.map