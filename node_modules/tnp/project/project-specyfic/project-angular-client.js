"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var abstract_1 = require("../abstract");
//#endregion
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
/**
 * DO NOT USE environment variables in this project directly
 */
//#region @backend
var ProjectAngularClient = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectAngularClient
    //#region @backend
    , _super);
    //#endregion
    function ProjectAngularClient() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectAngularClient.prototype.buildLib = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    Object.defineProperty(ProjectAngularClient.prototype, "isEjectedProject", {
        get: function () {
            //#region @backendFunc
            return this.typeIs('angular-client');
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    ProjectAngularClient.prototype.filesTemplates = function () {
        //#region @backendFunc
        return [
            'src/tsconfig.app.json.filetemplate',
            'webpack.config.build.aot.js.filetemplate',
            'webpack.config.build.js.filetemplate',
            'webpack.config.common.js.filetemplate',
            'webpack.config.js.filetemplate',
            '.angular-cli.json.filetemplate'
        ];
        //#endregion
    };
    ProjectAngularClient.prototype.projectSpecyficFiles = function () {
        //#region @backendFunc
        return tslib_1.__spreadArrays([
            'tsconfig.json'
        ], (!this.isStandaloneProject ? [
            'src/typings.d.ts',
        ] : []), [
            'src/main.ts',
            'src/polyfills.ts',
            'src/tsconfig.spec.json',
            'src/tsconfig.app.json',
            'protractor.conf.js',
            'karma.conf.js'
        ], this.filesTemplates()
            .filter(function (f) { return f !== 'src/tsconfig.app.json.filetemplate'; })).concat(this.isEjectedProject ? [
            'webpack.config.build.aot.js',
            'webpack.config.build.js',
            'webpack.config.common.js',
            'webpack.config.js'
        ] : []);
        //#endregion
    };
    ProjectAngularClient.prototype.preventWarningTypescirptMismatch = function () {
        //#region @backendFunc
        this.run('npm-run ng set warnings.typescriptMismatch=false').sync();
        //#endregion
    };
    ProjectAngularClient.prototype.startOnCommand = function (args) {
        var _this = this;
        //#region @backendFunc
        var baseUrl = this.env.config && this.env.config.workspace.projects.find(function (_a) {
            var name = _a.name;
            return name === _this.name;
        }).baseUrl;
        var command = "tnp serve --port " + this.getDefaultPort() + " --outDir " + tnp_config_1.config.folder.previewDistApp + " --baseUrl " + baseUrl + " " + args;
        // console.log(`Angular command: ${command}`)
        return command;
        //#endregion
    };
    ProjectAngularClient.prototype.buildApp = function (watch, prod, port, baseHref, flags, args) {
        if (watch === void 0) { watch = false; }
        if (flags === void 0) { flags = []; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var outDirApp, argsAdditionalParams, portNumber, p, command, aot, command, statsCommand, outPutPathCommand, aot, showOutput;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        outDirApp = 'dist-app';
                        argsAdditionalParams = tnp_helpers_1.Helpers.cliTool.argsFrom(args) || {};
                        if (!watch) return [3 /*break*/, 4];
                        portNumber = (argsAdditionalParams.port && this.isStandaloneProject)
                            ? argsAdditionalParams.port : (port !== undefined ? port : void 0);
                        p = tnp_core_2._.isNumber(portNumber) ? "--port=" + argsAdditionalParams.port : '';
                        command = void 0;
                        if (!this.isEjectedProject) return [3 /*break*/, 2];
                        return [4 /*yield*/, tnp_helpers_1.Helpers.killProcessByPort(port)];
                    case 1:
                        _a.sent();
                        command = "npm-run webpack-dev-server  --host 0.0.0.0 " + p + " ";
                        return [3 /*break*/, 3];
                    case 2:
                        command = "npm-run ng serve " + p + " --aot=false";
                        _a.label = 3;
                    case 3:
                        tnp_helpers_1.Helpers.info("\n\n      ANGULAR SERVE COMMAND: " + command + "\n\n      ");
                        this.run(command, { biggerBuffer: true }).async();
                        return [3 /*break*/, 5];
                    case 4:
                        baseHref = this.isStandaloneProject ? "base-href " + this.name : (baseHref ? "base-href " + baseHref : '');
                        if (this.isEjectedProject) {
                            baseHref = "--env." + baseHref;
                            aot = (prod ? 'aot.' : '');
                            // const stats = [
                            //   "--display-chunks false",
                            //   "--display-optimization-bailout false",
                            //   "--display-provided-exports false',
                            //   "--display-used-exports false',
                            //   "--display-depth false",
                            //   "--display-reasons false",
                            //   "--display-cached-assets false",
                            //   "--display-cached false",
                            //   "--display-origins false",
                            //   "--display-entrypoints false",
                            //   "--display-max-modules false",
                            //   "--display-modules false",
                            //   "--display-exclude true",
                            //   "--verbose  false",
                            //   "--progress false",
                            //   "--hide-modules true",
                            //   "--display none"
                            // ]
                            tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(this.location, outDirApp));
                            this.run("npm-run webpack --config=webpack.config.build." + aot + "js " + baseHref, {
                                output: (this.env.config.name === 'local'),
                                silence: (this.env.config.name !== 'local'),
                                biggerBuffer: true
                            }).sync();
                        }
                        else {
                            baseHref = "--" + baseHref;
                            if (prod) {
                                tnp_helpers_1.Helpers.info("BUILDING PRODUCTION");
                            }
                            command = void 0;
                            statsCommand = (!this.isStandaloneProject ? (this.env.config.name === 'static' ? '--stats-json' : '') : '');
                            outPutPathCommand = "--output-path " + (this.isStandaloneProject ? tnp_config_1.config.folder.docs : tnp_config_1.config.folder.previewDistApp) + " " + baseHref;
                            if (this.frameworkVersionEquals('v1')) {
                                command = "npm-run ng build  " + statsCommand + " "
                                    + (" --aot=false " + (prod ? '-prod' : '') + " " + outPutPathCommand);
                            }
                            else {
                                aot = flags.includes('aot');
                                command = "npm-run ng build  " + statsCommand + " --serviceWorker=true "
                                    + (" --aot=" + (aot ? 'true' : 'false --build-optimizer=false') + " " + (prod ? '--prod' : '') + " " + outPutPathCommand);
                            }
                            tnp_helpers_1.Helpers.info("\n\nAngular cli build command: " + command + "\n\n        ");
                            try {
                                showOutput = this.isStandaloneProject ? true : ['local', 'static']
                                    .includes(this.env.config.name);
                                this.run(command, {
                                    output: showOutput,
                                    silence: !showOutput,
                                    biggerBuffer: true
                                }).sync();
                            }
                            catch (e) {
                                tnp_helpers_1.Helpers.error(e, true, true);
                                tnp_helpers_1.Helpers.error("Build app from lib command failed: " + command, false, true);
                            }
                        }
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ProjectAngularClient.prototype.buildSteps = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var prod, watch, outDir, appBuild, args, baseHref, flags;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //#region @backendFunc
                        this.buildOptions = buildOptions;
                        prod = buildOptions.prod, watch = buildOptions.watch, outDir = buildOptions.outDir, appBuild = buildOptions.appBuild, args = buildOptions.args;
                        if (this.isEjectedProject) {
                            this.preventWarningTypescirptMismatch();
                        }
                        if (!appBuild) return [3 /*break*/, 2];
                        baseHref = buildOptions.baseHref;
                        if (baseHref) {
                            baseHref = baseHref + "/";
                            baseHref = baseHref.replace(/\/\//g, '/');
                        }
                        flags = require('minimist')(args.split(' ')).flags;
                        flags = (tnp_core_2._.isString(flags) ? [flags] : []);
                        flags = (!tnp_core_2._.isArray(flags) ? [] : flags);
                        return [4 /*yield*/, this.buildApp(watch, prod, this.getDefaultPort(), baseHref && baseHref, flags, buildOptions.args)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    ProjectAngularClient = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ProjectAngularClient')
        //#endregion
    ], ProjectAngularClient);
    return ProjectAngularClient;
}(abstract_1.Project
//#endregion
));
exports.ProjectAngularClient = ProjectAngularClient;
//# sourceMappingURL=project-angular-client.js.map