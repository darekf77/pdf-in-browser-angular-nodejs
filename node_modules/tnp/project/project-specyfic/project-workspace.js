"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var chalk_1 = require("chalk");
var singular_build_backend_1 = require("../features/singular-build.backend");
var abstract_1 = require("../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var tnp_models_1 = require("tnp-models");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#region @backend
var ProjectWorkspace = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectWorkspace
    //#region @backend
    , _super);
    //#endregion
    function ProjectWorkspace() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectWorkspace.prototype.initProcedure = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                //#region @backend
                if (this.frameworkVersionAtLeast('v2') && this.isWorkspace) {
                    if (this.children.filter(function (c) {
                        tnp_helpers_1.Helpers.log("Checking child: " + c.name, 1);
                        var isNotMatch = (c._frameworkVersion !== _this._frameworkVersion);
                        if (isNotMatch) {
                            // TODO hmmm maybe change tnp to firedev in packagejson ?
                            tnp_helpers_1.Helpers.error("Please match framework in " + chalk_1.default.bold(c.name) + "/package.json/>>/" + tnp_config_1.config.frameworkName + "/version", true, true);
                        }
                        return isNotMatch;
                    }).length > 0) {
                        tnp_helpers_1.Helpers.error("Please match framework version in workspace-v2 children", false, true);
                    }
                    // checkForCircuralWorkspaceDeps(this); // TODO UNCOMMENT
                }
                return [2 /*return*/];
            });
        });
    };
    ProjectWorkspace.prototype.buildLib = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    ProjectWorkspace.prototype.startOnCommand = function (args) {
        //#region @backendFunc
        this.proxyRouter.activateServer(function (port) {
            tnp_helpers_1.Helpers.log("proxy server ready on port " + port);
        });
        var workspace = this;
        workspace.children
            .filter(function (child) {
            return !!workspace.env.config.workspace.projects.find(function (c) {
                return c.name === child.name && !c.ommitAppBuild;
            });
        })
            .forEach(function (child) {
            child.start(args);
        });
        return undefined;
        //#endregion
    };
    ProjectWorkspace.prototype.projectSpecyficFiles = function () {
        //#region @backendFunc
        return tslib_1.__spreadArrays([
            'environment.d.ts'
        ], this.filesTemplates());
        //#endregion
    };
    ProjectWorkspace.prototype.filesTemplates = function () {
        //#region @backendFunc
        var templates = _super.prototype.filesTemplates.call(this);
        return tslib_1.__spreadArrays(this.vscodeFileTemplates, templates);
        //#endregion
    };
    ProjectWorkspace.prototype.projectSourceFiles = function () {
        //#region @backendFunc
        var environmentFiles = [];
        if (this.isSiteInStrictMode) {
            environmentFiles = environmentFiles.concat(tnp_core_1.glob
                .sync(tnp_config_1.config.folder.custom + "/" + tnp_config_1.config.file.environment + "*", { cwd: this.location }));
        }
        else {
            environmentFiles = environmentFiles.concat(tnp_core_1.glob
                .sync(tnp_config_1.config.file.environment + "*", { cwd: this.location }));
        }
        environmentFiles = environmentFiles.concat(tnp_core_1.glob
            .sync(tnp_config_1.config.file.tnpEnvironment_json + "*", { cwd: this.location }));
        return tslib_1.__spreadArrays((_super.prototype.projectSourceFiles.call(this)), environmentFiles);
        //#endregion
    };
    ProjectWorkspace.prototype.buildSteps = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var prod, watch, outDir, args, appBuild, projects, index, c, _loop_1, this_1, index;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        //#region @backendFunc
                        if (!tnp_core_2.fse.existsSync(this.location)) {
                            return [2 /*return*/];
                        }
                        tnp_models_1.PROGRESS_DATA.log({ msg: 'Process started', value: 0 });
                        prod = buildOptions.prod, watch = buildOptions.watch, outDir = buildOptions.outDir, args = buildOptions.args, appBuild = buildOptions.appBuild;
                        tnp_helpers_1.Helpers.log("build opt  " + JSON.stringify({ prod: prod, watch: watch, outDir: outDir, args: args, appBuild: appBuild }));
                        projects = this.projectsInOrderForBuild(this.isGenerated ? true : (watch));
                        if (!this.isGenerated) return [3 /*break*/, 4];
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < projects.length)) return [3 /*break*/, 4];
                        c = projects[index];
                        return [4 /*yield*/, c.project.StaticVersion()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4:
                        tnp_helpers_1.Helpers.log("projects: " + projects.map(function (c) {
                            return c.project.genericName + " appBuild: " + c.appBuild;
                        }));
                        if (!watch) return [3 /*break*/, 6];
                        return [4 /*yield*/, (new singular_build_backend_1.SingularBuild(this)).init(watch, prod)];
                    case 5:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 6:
                        tnp_models_1.PROGRESS_DATA.log({ value: 0, msg: "Process started" });
                        _loop_1 = function (index) {
                            var _a, project, appBuild_1, sum, precentIndex;
                            return tslib_1.__generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0:
                                        _a = projects[index], project = _a.project, appBuild_1 = _a.appBuild;
                                        sum = projects.length;
                                        precentIndex = index;
                                        if (!appBuild_1) return [3 /*break*/, 4];
                                        if (!this_1.isGenerated) return [3 /*break*/, 2];
                                        showProgress('app', project.genericName, (precentIndex / sum));
                                        return [4 /*yield*/, project.buildProcess.startForApp({
                                                watch: watch,
                                                prod: prod,
                                                args: "--noConsoleClear  " + args,
                                                staticBuildAllowed: this_1.isGenerated,
                                                progressCallback: function (fraction) {
                                                    showProgress('app', project.genericName, ((precentIndex + fraction) / sum));
                                                }
                                            }, false)];
                                    case 1:
                                        _b.sent();
                                        return [3 /*break*/, 3];
                                    case 2:
                                        tnp_helpers_1.Helpers.log("Ommiting app build for " + project.genericName);
                                        _b.label = 3;
                                    case 3: return [3 /*break*/, 6];
                                    case 4:
                                        // Helpers.log(`AAAA BUILD HERER`)
                                        showProgress('lib', project.genericName, (precentIndex / sum));
                                        return [4 /*yield*/, project.buildProcess.startForLib({
                                                watch: watch,
                                                prod: prod,
                                                args: "--noConsoleClear  " + args,
                                                staticBuildAllowed: this_1.isGenerated,
                                                progressCallback: function (fraction) {
                                                    showProgress('lib', project.genericName, ((precentIndex + fraction) / sum));
                                                }
                                            }, false)];
                                    case 5:
                                        _b.sent();
                                        _b.label = 6;
                                    case 6: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        index = 0;
                        _a.label = 7;
                    case 7:
                        if (!(index < projects.length)) return [3 /*break*/, 10];
                        return [5 /*yield**/, _loop_1(index)];
                    case 8:
                        _a.sent();
                        _a.label = 9;
                    case 9:
                        index++;
                        return [3 /*break*/, 7];
                    case 10:
                        tnp_models_1.PROGRESS_DATA.log({ value: 100, msg: "Process Complete" });
                        _a.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    ProjectWorkspace = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ProjectWorkspace')
        //#endregion
    ], ProjectWorkspace);
    return ProjectWorkspace;
}(abstract_1.Project
//#endregion
));
exports.ProjectWorkspace = ProjectWorkspace;
//#region @backend
function showProgress(type, name, precentFraction) {
    tnp_models_1.PROGRESS_DATA.log({ value: (precentFraction) * 100, msg: "In progress of building " + type + " \"" + name + "\"" });
}
//#endregion
//#region @backend
/**
 * TODO Replace it with topological sorting
 */
function checkForCircuralWorkspaceDeps(workspace) {
    var childs = workspace.children;
    var _loop_2 = function (index) {
        var c = childs[index];
        var cWorkspaceDeps = c.workspaceDependencies.map(function (c) { return c.name; });
        // Helpers.log(`cWorkspaceDeps:
        // ${cWorkspaceDeps.join('\n')}
        // `);
        var circural = c.workspaceDependencies.find(function (d) {
            var dDeps = d.workspaceDependencies.map(function (aa) { return aa.name; });
            if (dDeps.includes(c.name)) {
                return true;
            }
            return false;
        });
        if (!!circural) {
            tnp_helpers_1.Helpers.error("Circural dependency detected in workspace " + workspace.genericName + ":\n\n        " + circural.name + " => " + c.name + "\n        " + c.name + " => " + circural.name + "\n\n      ", false, true);
        }
    };
    for (var index = 0; index < childs.length; index++) {
        _loop_2(index);
    }
}
//#endregion
//# sourceMappingURL=project-workspace.js.map