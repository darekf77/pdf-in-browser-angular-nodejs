"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var chalk_1 = require("chalk");
var project_1 = require("../abstract/project");
var tnp_config_1 = require("tnp-config");
var inquirer = require("inquirer");
var tnp_helpers_1 = require("tnp-helpers");
//#endregion
//#region select clients
/**
 * Resovle workspace child clients if needed
 */
function selectClients(buildOptions, currentProject, db) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!currentProject.isWorkspaceChildProject || buildOptions.forClient.length > 0) {
                        return [2 /*return*/];
                    }
                    if (!buildOptions.watch || buildOptions.buildForAllClients || global.tnpNonInteractive) {
                        buildOptions.forClient = currentProject.parent.children
                            .filter(function (c) { return c.typeIs.apply(c, tnp_config_1.config.allowedTypes.app); })
                            .filter(function (c) { return !tnp_core_1._.isUndefined(c.env.config.workspace.projects.find(function (p) { return p.name === c.name; })); });
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, selectClientsMenu(buildOptions, currentProject, db)];
                case 1:
                    _a.sent();
                    tnp_helpers_1.Helpers.info("\n\n  [selectClients] Selected Clients: " + buildOptions.forClient.map(function (c) { return c.name; }).join(',') + "\n\n  ");
                    return [2 /*return*/];
            }
        });
    });
}
exports.selectClients = selectClients;
//#endregion
//#region clients autocomplete menu
function selectClientsMenu(buildOptions, currentProject, db) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var menu;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!currentProject.isWorkspaceChildProject) {
                        return [2 /*return*/];
                    }
                    menu = function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var choices, selectedChoices, _a, projects;
                        return tslib_1.__generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    choices = currentProject.parent.children
                                        .filter(function (c) { return c.typeIs.apply(c, tnp_config_1.config.allowedTypes.app); })
                                        .map(function (c) {
                                        var notIncludedInEnv = (!c || !c.env || !c.env.config) ? true :
                                            !tnp_core_1._.isUndefined(c.env.config.workspace.projects.find(function (p) { return p.name === c.name; }));
                                        return {
                                            value: c.name,
                                            name: "" + c.name + (!notIncludedInEnv ? chalk_1.default.red(' -> not included in environment.js config') : '')
                                        };
                                    });
                                    selectedChoices = choices.map(function (c) { return c.value; });
                                    if (!buildOptions.buildForAllClients) return [3 /*break*/, 1];
                                    buildOptions.forClient = selectedChoices.map(function (p) { return project_1.Project.From(tnp_core_2.path.join(currentProject.location, '..', p)); });
                                    return [3 /*break*/, 3];
                                case 1:
                                    tnp_helpers_1.Helpers.info('Please select at lease one client..');
                                    return [4 /*yield*/, inquirer
                                            .prompt([
                                            {
                                                type: 'checkbox',
                                                name: 'projects',
                                                message: 'Select target projects to build library: ',
                                                choices: choices
                                            }
                                        ])];
                                case 2:
                                    _a = (_b.sent()).projects, projects = _a === void 0 ? [] : _a;
                                    selectedChoices = projects;
                                    buildOptions.forClient = selectedChoices.map(function (p) { return project_1.Project.From(tnp_core_2.path.join(currentProject.location, '..', p)); });
                                    _b.label = 3;
                                case 3: return [4 /*yield*/, db.updateCommandBuildOptions(currentProject.location, buildOptions)];
                                case 4:
                                    _b.sent();
                                    return [4 /*yield*/, db.updateBuildOptions(buildOptions, process.pid)];
                                case 5:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); };
                    _a.label = 1;
                case 1:
                    if (!(buildOptions.forClient.length === 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, menu()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    });
}
//#endregion
//# sourceMappingURL=select-clients.backend.js.map