"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var abstract_1 = require("../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#region @backend
var ProjectContainer = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectContainer
    //#region @backend
    , _super);
    //#endregion
    function ProjectContainer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProjectContainer.prototype.initProcedure = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                //#region @backendFunc
                this.addGitReposAsLinkedProjects();
                return [2 /*return*/];
            });
        });
    };
    ProjectContainer.prototype.addGitReposAsLinkedProjects = function () {
        var _this = this;
        //#region @backendFunc
        var repoChilds = this.getFolders()
            .map(function (c) {
            var proj = abstract_1.Project.From(c);
            if (!proj) {
                tnp_helpers_1.Helpers.info("No project from " + c);
            }
            return proj;
        })
            .filter(function (f) { return !!f; })
            .filter(function (c) { return c.git.isGitRoot; }).map(function (c) { return c.name; });
        var chagned = false;
        repoChilds.forEach(function (name) {
            var _a;
            if (tnp_core_1._.isUndefined(_this.packageJson.linkedProjects.find(function (p) { return p === name; }))
                && ((_a = abstract_1.Project.From(tnp_core_2.path.join(_this.location, name))) === null || _a === void 0 ? void 0 : _a.git.isGitRepo)) {
                chagned = true;
                _this.packageJson.linkedProjects.push(name);
            }
        });
        if (chagned) {
            this.packageJson.writeToDiscSync();
        }
        //#endregion
    };
    ProjectContainer.prototype.buildLib = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    ProjectContainer.prototype.startOnCommand = function () {
        //#region @backendFunc
        return 'echo "no container support jet"';
        //#endregion
    };
    ProjectContainer.prototype.projectSpecyficFiles = function () {
        //#region @backendFunc
        return [];
        //#endregion
    };
    ProjectContainer.prototype.buildSteps = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var prod, watch, outDir, args, appBuild;
            return tslib_1.__generator(this, function (_a) {
                //#region @backend
                if (!tnp_core_3.fse.existsSync(this.location)) {
                    return [2 /*return*/];
                }
                prod = buildOptions.prod, watch = buildOptions.watch, outDir = buildOptions.outDir, args = buildOptions.args, appBuild = buildOptions.appBuild;
                return [2 /*return*/];
            });
        });
    };
    ProjectContainer = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ProjectContainer')
        //#endregion
    ], ProjectContainer);
    return ProjectContainer;
}(abstract_1.Project
//#endregion
));
exports.ProjectContainer = ProjectContainer;
//# sourceMappingURL=project-container.js.map