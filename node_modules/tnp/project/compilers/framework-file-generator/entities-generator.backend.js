"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var abstract_1 = require("../../abstract");
var framework_files_generator_backend_1 = require("./framework-files-generator.backend");
var EntitesGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(EntitesGenerator, _super);
    function EntitesGenerator(project) {
        var _this = _super.call(this, project, framework_files_generator_backend_1.optionsFrameworkFileGen(project)) || this;
        _this.project = project;
        return _this;
    }
    EntitesGenerator.prototype.entityRepo = function (srcPath, entity, entityRelativePath, hideDot) {
        if (hideDot === void 0) { hideDot = false; }
        var repo = entityRelativePath.replace('entities', 'repositories') + "_REPOSITORY.ts";
        return tnp_core_1.fse.existsSync(tnp_core_2.path.join(srcPath, repo)) ? " " + (hideDot ? '' : ',') + " " + entity + "_REPOSITORY" : '';
    };
    EntitesGenerator.prototype.entitesTemplateExportImport = function (srcPath, entityRelativePath) {
        var entity = tnp_core_2.path.basename(entityRelativePath).toUpperCase();
        return "\n    import { " + entity + ", I" + entity + " } from '" + entityRelativePath + "';\n    export { " + entity + ", I" + entity + " } from '" + entityRelativePath + "';";
    };
    EntitesGenerator.prototype.entitesArray = function (srcPath, entityRelativePath) {
        var entity = tnp_core_2.path.basename(entityRelativePath);
        return entity;
    };
    EntitesGenerator.prototype.generateEntityTs = function (cwd, isSiteInStrictMode) {
        var _this = this;
        if (isSiteInStrictMode === void 0) { isSiteInStrictMode = false; }
        if (!tnp_core_1.fse.existsSync(cwd)) {
            tnp_helpers_1.Helpers.log("Entites not geenrated, folder doesnt exists: " + cwd);
            return;
        }
        var entitesFiles = tnp_helpers_1.Helpers.morphi.getEntites(cwd);
        entitesFiles = entitesFiles.map(function (f) { return "./" + f.replace(/\.ts$/, ''); });
        var newEntitesFile = ("\n    //// FILE GENERATED BY TNP /////\n    import { Morphi } from 'morphi';\n    " + (isSiteInStrictMode ? "\n    import { Entities as BaselineEntities }  from '" + this.project.parent.baseline.name + "/" + this.project.baseline.name + "/src/entities';\n    import * as baslineEntites from '" + this.project.parent.baseline.name + "/" + this.project.baseline.name + "/src/entities';\n    export * from '" + this.project.parent.baseline.name + "/" + this.project.baseline.name + "/src/entities';\n    " : '') + "\n\n    " + entitesFiles
            .map(function (f) { return _this.entitesTemplateExportImport(cwd, f); })
            .join('\n') + "\n\n      export const Entities: Morphi.Base.Entity<any>[] = [\n          " + entitesFiles
            .map(function (f) { return _this.entitesArray(cwd, f); })
            .join(',\n') + "\n        ]" + (isSiteInStrictMode ? '.concat(BaselineEntities as any)' : '') + " as any;\n\n      //#" + 'region' + " @backend\n\n      " + entitesFiles
            .map(function (f) { return _this.repositoriesTemplateExportImport(cwd, f); })
            .join('\n') + "\n\n      import { Repository } from 'typeorm';\n      export { Repository } from 'typeorm';\n      import { _ } from 'tnp-core'\n\n      export function entities<ADDITIONAL={}>(connection?: Morphi.Orm.Connection, decoratorsEntities?: ADDITIONAL) {\n        return _.merge(" + (isSiteInStrictMode ? 'baslineEntites.entities(connection),' : '') + "{\n          " + entitesFiles
            .map(function (f) { return _this.entitesTemplateDB(cwd, f); })
            .join('\n') + "\n      } " + (isSiteInStrictMode ? '' : ', decoratorsEntities') + " );\n      }\n      //#end" + 'region' + "\n      ").split('\n')
            .map(function (l) { return l.trim(); })
            .join('\n');
        ;
        var entitesFilePath = tnp_core_2.path.join(cwd, 'entities.ts');
        var currentFile = tnp_helpers_1.Helpers.readFile(entitesFilePath);
        if (currentFile !== newEntitesFile) {
            tnp_helpers_1.Helpers.writeFile(entitesFilePath, newEntitesFile);
        }
    };
    EntitesGenerator.prototype.repositoriesTemplateExportImport = function (srcPath, entityRelativePath) {
        var entity = tnp_core_2.path.basename(entityRelativePath).toUpperCase();
        var repository = entityRelativePath.replace('entities', 'repositories') + "_REPOSITORY";
        var repoExist = this.entityRepo(srcPath, entity, entityRelativePath, true);
        return tnp_core_1.fse.existsSync(tnp_core_2.path.join(srcPath, repository + ".ts")) ? "\n    import { " + repoExist + " } from '" + repository + "';\n    export { " + repoExist + " } from '" + repository + "';" : '';
    };
    EntitesGenerator.prototype.entitesTemplateDB = function (srcPath, entityRelativePath) {
        var entity = tnp_core_2.path.basename(entityRelativePath).toUpperCase();
        var repoExist = this.entityRepo(srcPath, entity, entityRelativePath);
        return "\n    " + entity + ": Morphi.Orm.RepositoryFrom<" + entity + repoExist + ">(connection as any, " + entity + repoExist + "),";
    };
    return EntitesGenerator;
}(abstract_1.FeatureCompilerForProject));
exports.EntitesGenerator = EntitesGenerator;
//# sourceMappingURL=entities-generator.backend.js.map