"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var entities_generator_backend_1 = require("./entities-generator.backend");
var ControllersGenerator = /** @class */ (function (_super) {
    tslib_1.__extends(ControllersGenerator, _super);
    function ControllersGenerator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ControllersGenerator.prototype.generateControllersTs = function (cwd, isSiteInStrictMode) {
        var _this = this;
        if (isSiteInStrictMode === void 0) { isSiteInStrictMode = false; }
        if (!tnp_core_1.fse.existsSync(cwd)) {
            tnp_helpers_1.Helpers.warn("Controllers not geenrated, folder doesnt exists: " + cwd);
            return;
        }
        var controllersFiles = tnp_helpers_1.Helpers.morphi.getControllers(cwd);
        controllersFiles = controllersFiles.map(function (f) { return "./" + f.replace(/\.ts$/, ''); });
        var newControllerFile = ("\n    //// FILE GENERATED BY TNP /////\n    import { Morphi } from 'morphi';\n    " + (isSiteInStrictMode ? "\n    import { Controllers as BaselineControllers }  from '" + this.project.parent.baseline.name + "/" + this.project.baseline.name + "/src/controllers';\n    import * as controllersBaseline from '" + this.project.parent.baseline.name + "/" + this.project.baseline.name + "/src/controllers';\n    export * from '" + this.project.parent.baseline.name + "/" + this.project.baseline.name + "/src/controllers';\n    " : '') + "\n\n    " + controllersFiles
            .map(function (f) { return _this.controllersTemplateExportImport(cwd, f); })
            .join('\n') + "\n\n      export const Controllers: Morphi.Base.Controller<any>[] = [\n        " + controllersFiles
            .map(function (f) { return _this.controllersArray(cwd, f); })
            .join(',\n') + "\n      ]" + (isSiteInStrictMode ? '.concat(BaselineControllers as any)' : '') + " as any;\n\n      //#" + 'region' + " @backend\n\n      import { CLASS } from 'typescript-class-helpers';\n      import { _ } from 'tnp-core'\n\n      export function controllers<ADDITIONAL={}>(decoratorsControllers?: ADDITIONAL) {\n        return _.merge(" + (isSiteInStrictMode ? 'controllersBaseline.controllers(),' : '') + " {\n          " + controllersFiles
            .map(function (f) { return _this.controllersTemplateSingleton(cwd, f); })
            .join('\n') + "\n      } " + (isSiteInStrictMode ? '' : ', decoratorsControllers') + " );\n      }\n      //#end" + 'region' + "\n      ").split('\n')
            .map(function (l) { return l.trim(); })
            .join('\n');
        ;
        var controllerFilePath = tnp_core_2.path.join(cwd, 'controllers.ts');
        var currentFile = tnp_helpers_1.Helpers.readFile(controllerFilePath);
        if (currentFile !== newControllerFile) {
            tnp_helpers_1.Helpers.writeFile(controllerFilePath, newControllerFile);
        }
    };
    ControllersGenerator.prototype.controllersTemplateExportImport = function (srcPath, controllerRelativePath) {
        var controller = tnp_core_2.path.basename(controllerRelativePath);
        return "\n    import { " + controller + " } from '" + controllerRelativePath + "';\n    export { " + controller + " } from '" + controllerRelativePath + "';";
    };
    ControllersGenerator.prototype.controllersArray = function (srcPath, controllerRelativePath) {
        var controller = tnp_core_2.path.basename(controllerRelativePath);
        return controller;
    };
    ControllersGenerator.prototype.controllersTemplateSingleton = function (srcPath, controllerRelativePath) {
        var controller = tnp_core_2.path.basename(controllerRelativePath);
        return "\n    " + controller + ": CLASS.getSingleton<" + controller + ">(" + controller + "),";
    };
    return ControllersGenerator;
}(entities_generator_backend_1.EntitesGenerator));
exports.ControllersGenerator = ControllersGenerator;
//# sourceMappingURL=controllers-generator.backend.js.map