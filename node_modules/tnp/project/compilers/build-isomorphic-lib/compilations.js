"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var morphi_1 = require("morphi");
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var extended_code_cut_backend_1 = require("./extended-code-cut.backend");
var incremental_compiler_1 = require("incremental-compiler");
var json10_1 = require("json10");
var tnp_config_1 = require("tnp-config");
var BackendCompilationExtended = /** @class */ (function (_super) {
    tslib_1.__extends(BackendCompilationExtended, _super);
    function BackendCompilationExtended() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.CompilationWrapper = tnp_helpers_1.Helpers.compilationWrapper;
        return _this;
    }
    BackendCompilationExtended.prototype.compile = function (watch) {
        if (watch === void 0) { watch = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentProject, generatedDeclarations, hideErrorsForBackend;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentProject = abstract_1.Project.From(this.cwd);
                        generatedDeclarations = !currentProject.isWorkspaceChildProject;
                        hideErrorsForBackend = currentProject.typeIs('angular-lib')
                            && this.compilationFolderPath.endsWith(tnp_config_1.config.folder.components);
                        return [4 /*yield*/, this.tscCompilation({
                                cwd: this.compilationFolderPath,
                                watch: watch,
                                outDir: "../" + this.outFolder,
                                generateDeclarations: generatedDeclarations,
                                hideErrors: hideErrorsForBackend,
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return BackendCompilationExtended;
}(morphi_1.BackendCompilation));
exports.BackendCompilationExtended = BackendCompilationExtended;
var BroswerForModuleCompilation = /** @class */ (function (_super) {
    tslib_1.__extends(BroswerForModuleCompilation, _super);
    function BroswerForModuleCompilation(compilationProject, moduleName, ENV, 
    /**
     * tmp-src-for-(dist|bundle)-browser
     */
    sourceOut, 
    /**
     * browser-for-(dist|bundle|projectName)
     */
    outFolder, location, cwd, backendOut, buildOptions) {
        var _this = _super.call(this, sourceOut, outFolder, location, cwd, backendOut) || this;
        _this.compilationProject = compilationProject;
        _this.moduleName = moduleName;
        _this.ENV = ENV;
        _this.buildOptions = buildOptions;
        _this.CompilationWrapper = tnp_helpers_1.Helpers.compilationWrapper;
        _this.compilerName = _this.customCompilerName;
        tnp_helpers_1.Helpers.log("[BroswerForModuleCompilation][constructor]\n\n    compilationProject.genericName: " + (compilationProject === null || compilationProject === void 0 ? void 0 : compilationProject.genericName) + "\n    compilationProject.type: " + (compilationProject === null || compilationProject === void 0 ? void 0 : compilationProject._type) + "\n    ENV?: " + !!ENV + "\n\n    cwd: " + cwd + "\n    sourceOut: " + sourceOut + "\n    location: " + location + "\n    backendOut: " + backendOut + "\n\n    ", 1);
        tnp_helpers_1.Helpers.log("\n\nbuildOptions: " + json10_1.JSON10.stringify(buildOptions) + "\n\n", 2);
        return _this;
        // console.log('SOURCE OUT', sourceOut)
        // console.log('OUT FOLDER', outFolder)
        // console.log('LOCATION', location)
        // console.log('MODULE NAME', moduleName)
        // console.log(Helpers.terminalLine())
    }
    BroswerForModuleCompilation.prototype.compile = function (watch) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, _super.prototype.compile.call(this, watch)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _a.sent();
                        tnp_helpers_1.Helpers.error("Browser compilation fail: " + e_1, false, true);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(BroswerForModuleCompilation.prototype, "customCompilerName", {
        get: function () {
            if (this.ENV) {
                return "Browser Extended compilation for " + this.ENV.currentProjectName;
            }
            return "Browser Extended compilation";
        },
        enumerable: true,
        configurable: true
    });
    BroswerForModuleCompilation.prototype.asyncAction = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var triggerTsEventExts, absoluteFilePath, relativeFilePath, destinationFilePath;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        triggerTsEventExts = ['css', 'scss', 'sass', 'html'].map(function (ext) { return "." + ext; });
                        if (triggerTsEventExts
                            .includes(tnp_core_2.path.extname(event.fileAbsolutePath))) {
                            absoluteFilePath = tnp_core_1.crossPlatformPath(event.fileAbsolutePath);
                            relativeFilePath = tnp_core_1.crossPlatformPath(absoluteFilePath.replace(tnp_core_2.path.join(this.cwd, this.location), ''));
                            destinationFilePath = tnp_core_1.crossPlatformPath(tnp_core_2.path.join(this.cwd, this.sourceOutBrowser, relativeFilePath));
                            if (event.eventName === 'unlink') {
                                tnp_helpers_1.Helpers.removeFileIfExists(destinationFilePath);
                                // console.log('FILE UNLINKED')
                            }
                            else {
                                if (tnp_core_3.fse.existsSync(absoluteFilePath)) {
                                    if (!tnp_core_3.fse.existsSync(tnp_core_2.path.dirname(destinationFilePath))) {
                                        tnp_helpers_1.Helpers.mkdirp(tnp_core_2.path.dirname(destinationFilePath));
                                    }
                                    if (tnp_core_3.fse.existsSync(destinationFilePath) && tnp_core_3.fse.lstatSync(destinationFilePath).isDirectory()) {
                                        tnp_core_3.fse.removeSync(destinationFilePath);
                                    }
                                    tnp_helpers_1.Helpers.copyFile(absoluteFilePath, destinationFilePath);
                                }
                                // console.log('FILE COPIED')
                            }
                            changeAbsoluteFilePathExt(event, 'ts');
                            // console.log(`AFTER CHAGE: ${event.fileAbsolutePath}`)
                        }
                        return [4 /*yield*/, _super.prototype.asyncAction.call(this, event)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BroswerForModuleCompilation.prototype.codeCuttFn = function (cutIftrue) {
        return function (expression, reservedExpOne, absoluteFilePath) {
            var result = false;
            // console.log(`------------------------`)
            // console.log('cutIftrue', cutIftrue)
            if (!reservedExpOne) {
                // console.log(`No environment`, e)
            }
            else {
                // console.log({
                //   currentProjectName: e.currentProjectName,
                // } as EnvConfig);
                var exp = "(function(ENV){\n          // console.log(typeof ENV)\n          return " + expression.trim() + "\n        })(reservedExpOne)";
                // console.log(`Eval expre
                // ${exp}
                // `);
                try {
                    var res = eval(exp);
                    // console.log(`[${path.basename(absoluteFilePath)}] Eval (${expression}) => ${res}`)
                    result = cutIftrue ? res : !res;
                }
                catch (err) {
                    // console.log(`Expression Failed`, err)
                    tnp_helpers_1.Helpers.error("[codecutFn] Eval failed ");
                    tnp_helpers_1.Helpers.error(err, true, true);
                }
            }
            // console.log(`Finally cut code  ? ${result} for ${path.basename(absoluteFilePath)}`)
            return result;
        };
    };
    BroswerForModuleCompilation.prototype.initCodeCut = function (filesPathes) {
        var _this = this;
        tnp_helpers_1.Helpers.log("[initCodeCut] filesPathes:\n\n    " + filesPathes.map(function (c) { return c + "\n"; }) + "\n\n    ", 1);
        // console.log('inside')
        var env = this.ENV;
        var compilationProject = this.compilationProject;
        var buildOptions = this.buildOptions;
        if (!compilationProject) {
            return;
        }
        env = tnp_core_1._.cloneDeep(env);
        this.ENV = env;
        // console.log('here1')
        var project;
        if (env) {
            project = abstract_1.Project.From(env.currentProjectLocation);
        }
        if (compilationProject.isStandaloneProject) {
            project = compilationProject;
        }
        filesPathes = filesPathes.map(function (f) {
            f = tnp_core_1.crossPlatformPath(f);
            return f.replace(tnp_core_1.crossPlatformPath(tnp_core_2.path.join(_this.cwd, _this.location)), '').replace(/^\//, '');
        });
        tnp_helpers_1.Helpers.log("[initCodeCut] filesPathes after:\n\n    " + filesPathes.map(function (c) { return c + "\n"; }) + "\n\n    ", 1);
        this.codecut = new extended_code_cut_backend_1.ExtendedCodeCut(this.compilationFolderPath, filesPathes, {
            replacements: [
                ['@backendFunc', "return undefined;"],
                '@backend',
                ['@cutCodeIfTrue', this.codeCuttFn(true)],
                ['@cutCodeIfFalse', this.codeCuttFn(false)]
            ].filter(function (f) { return !!f; }),
            env: env
        }, project, compilationProject, buildOptions, this.sourceOutBrowser);
    };
    tslib_1.__decorate([
        incremental_compiler_1.IncCompiler.methods.AsyncAction(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [incremental_compiler_1.IncCompiler.Change]),
        tslib_1.__metadata("design:returntype", Promise)
    ], BroswerForModuleCompilation.prototype, "asyncAction", null);
    return BroswerForModuleCompilation;
}(morphi_1.BroswerCompilation));
exports.BroswerForModuleCompilation = BroswerForModuleCompilation;
function changeAbsoluteFilePathExt(event, newExtension) {
    var ext = newExtension.replace(/^\./, '');
    var oldExt = tnp_core_2.path.extname(event.fileAbsolutePath).replace(/^\./, '');
    event.fileAbsolutePath = event.fileAbsolutePath
        .replace(new RegExp("\\." + oldExt + "$"), "." + ext);
}
//#endregion
//# sourceMappingURL=compilations.js.map