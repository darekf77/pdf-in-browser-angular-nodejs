import { BroswerCompilation, BackendCompilation } from 'morphi';
import { Models } from 'tnp-models';
import { Project } from '../../abstract';
import { BuildOptions } from 'tnp-db';
import { IncCompiler } from 'incremental-compiler';
import { ConfigModels } from 'tnp-config';
export declare class BackendCompilationExtended extends BackendCompilation {
    CompilationWrapper: any;
    compile(watch?: boolean): Promise<void>;
}
export declare class BroswerForModuleCompilation extends BroswerCompilation {
    compilationProject: Project;
    moduleName: string;
    ENV: Models.env.EnvConfig;
    buildOptions: BuildOptions;
    compile(watch: boolean): Promise<void>;
    get customCompilerName(): string;
    CompilationWrapper: any;
    asyncAction(event: IncCompiler.Change): Promise<void>;
    constructor(compilationProject: Project, moduleName: string, ENV: Models.env.EnvConfig, 
    /**
     * tmp-src-for-(dist|bundle)-browser
     */
    sourceOut: string, 
    /**
     * browser-for-(dist|bundle|projectName)
     */
    outFolder: ConfigModels.OutFolder, location: string, cwd: string, backendOut: string, buildOptions: BuildOptions);
    codeCuttFn(cutIftrue: boolean): (expression: string, reservedExpOne: Models.env.EnvConfig, absoluteFilePath?: string) => boolean;
    initCodeCut(filesPathes: string[]): void;
}
