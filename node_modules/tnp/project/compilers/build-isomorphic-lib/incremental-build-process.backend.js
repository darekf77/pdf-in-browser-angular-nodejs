"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var compilations_1 = require("./compilations");
var morphi_1 = require("morphi");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var IncrementalBuildProcessExtended = /** @class */ (function (_super) {
    tslib_1.__extends(IncrementalBuildProcessExtended, _super);
    //#endregion
    function IncrementalBuildProcessExtended(project, buildOptions) {
        var _a, _b;
        var _this = _super.call(this, buildOptions === null || buildOptions === void 0 ? void 0 : buildOptions.outDir, tnp_config_1.config === null || tnp_config_1.config === void 0 ? void 0 : tnp_config_1.config.folder.src, project === null || project === void 0 ? void 0 : project.location, false) || this;
        _this.project = project;
        _this.buildOptions = buildOptions;
        tnp_helpers_1.Helpers.log("[incremental-build-process] for project: " + project.genericName);
        //#region init variables
        _this.compileOnce = !buildOptions.watch;
        var outFolder = buildOptions.outDir;
        var location = ((project.typeIs('isomorphic-lib')) ?
            (project.isSiteInStrictMode ? tnp_config_1.config.folder.tempSrc : tnp_config_1.config.folder.src)
            : tnp_config_1.config.folder.components);
        var cwd = project.location;
        var projectIsFromSinglularBuild = (_this.project.isStandaloneProject && _this.project.isGenerated);
        //#region parent project
        /**
         * For 'watch:dist' build inside container (with standalone childs) or workspace (with workspace childs)
         * I am taking 'gradpa' project... to get this container or workspace
         *
         * For normal workspace build I am taking just parent
         */
        var parentProj = projectIsFromSinglularBuild ? _this.project.grandpa : _this.project.parent;
        //#endregion
        tnp_helpers_1.Helpers.log("[incremental-build-process]  this.project.grandpa: " + ((_a = _this.project.grandpa) === null || _a === void 0 ? void 0 : _a.genericName) + " ");
        tnp_helpers_1.Helpers.log("[incremental-build-process]  this.project.parent: " + ((_b = _this.project.parent) === null || _b === void 0 ? void 0 : _b.genericName) + " ");
        tnp_helpers_1.Helpers.log("[incremental-build-process] parentProj: " + (parentProj === null || parentProj === void 0 ? void 0 : parentProj.genericName) + " ");
        //#endregion
        //#region int backend compilation
        if (project.typeIs('isomorphic-lib')) {
            if (project.isSiteInStrictMode) {
                _this.backendCompilation = new compilations_1.BackendCompilationExtended(outFolder, tnp_config_1.config.folder.tempSrc, cwd);
            }
            else {
                _this.backendCompilation = new compilations_1.BackendCompilationExtended(outFolder, location, cwd);
            }
        }
        else {
            _this.backendCompilation = new compilations_1.BackendCompilationExtended(outFolder, location, cwd);
        }
        tnp_helpers_1.Helpers.log("[incremental-build-process] this.backendCompilation exists: " + !!_this.backendCompilation);
        if (buildOptions.genOnlyClientCode) {
            if (_this.backendCompilation) {
                _this.backendCompilation.isEnableCompilation = false;
            }
        }
        if (buildOptions.onlyBackend) {
            _this.browserCompilations = [];
            return _this;
        }
        //#endregion
        //#region making sure that there is environemnt generated for project
        _this.resolveModulesLocations
            .forEach(function (moduleName) {
            var proj = parentProj.child(moduleName);
            var envConfig = proj.env.config;
            if (!envConfig) {
                tnp_helpers_1.Helpers.info("\n\n\n(QUICKFIX) INITINT " + proj.genericName + "\n\n\n");
                proj.run(tnp_config_1.config.frameworkName + " struct").sync();
            }
        });
        //#endregion
        //#region modular build
        var modularBuild = function () {
            if (parentProj.isContainer) {
                var moduleName = '';
                var envConfig = {};
                var browserOutFolder = tnp_helpers_1.Helpers.getBrowserVerPath(moduleName);
                if (outFolder === 'bundle') {
                    browserOutFolder = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(outFolder, browserOutFolder));
                }
                _this.browserCompilations = [
                    new compilations_1.BroswerForModuleCompilation(_this.project, moduleName, envConfig, "tmp-src-" + outFolder + "-" + browserOutFolder, browserOutFolder, location, cwd, outFolder, buildOptions)
                ];
            }
            else {
                _this.resolveModulesLocations
                    .forEach(function (moduleName) {
                    var browserOutFolder = tnp_helpers_1.Helpers.getBrowserVerPath(moduleName);
                    if (outFolder === 'bundle') {
                        browserOutFolder = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(outFolder, browserOutFolder));
                    }
                    var proj = parentProj.child(moduleName);
                    var envConfig = proj.env.config;
                    if (!envConfig) {
                        tnp_helpers_1.Helpers.error("[incrementalBuildProcess] Please \"tnp init\" project: " + proj.genericName, false, true);
                    }
                    _this.browserCompilations.push(new compilations_1.BroswerForModuleCompilation(_this.project, moduleName, envConfig, "tmp-src-" + outFolder + "-" + browserOutFolder, browserOutFolder, location, cwd, outFolder, buildOptions));
                });
            }
        };
        //#endregion
        if (project.isStandaloneProject) {
            if (project.isGenerated) {
                modularBuild();
            }
            else {
                var browserOutFolder = tnp_helpers_1.Helpers.getBrowserVerPath();
                _this.browserCompilations = [
                    new compilations_1.BroswerForModuleCompilation(_this.project, void 0, void 0, "tmp-src-" + outFolder, browserOutFolder, location, cwd, outFolder, buildOptions)
                ];
            }
        }
        else {
            modularBuild();
        }
        var compilationsInfo = _this.browserCompilations
            .map(function (c) { var _a; return "compilationProject: " + ((_a = c.compilationProject) === null || _a === void 0 ? void 0 : _a.name) + ", location: " + c.location; }).join('\n');
        tnp_helpers_1.Helpers.log("BROWSER COMPILATIONS (length: " + _this.browserCompilations.length + " )"
            + "\n\n" + compilationsInfo + "\n\n");
        return _this;
    }
    Object.defineProperty(IncrementalBuildProcessExtended.prototype, "resolveModulesLocations", {
        //#region resolve modules from Location
        get: function () {
            if (this.project.isWorkspaceChildProject || (this.project.isStandaloneProject && this.project.isGenerated)) {
                if (tnp_core_2._.isArray(this.buildOptions.forClient) && this.buildOptions.forClient.length > 0) {
                    return this.buildOptions.forClient.map(function (c) { return c.name; });
                }
                var parent_1 = this.project.isStandaloneProject ? this.project.grandpa : this.project.parent;
                return parent_1.children
                    .filter(function (c) { return c.typeIs.apply(c, tnp_config_1.config.allowedTypes.app); })
                    .map(function (c) { return c.name; });
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    return IncrementalBuildProcessExtended;
}(morphi_1.IncrementalBuildProcess));
exports.IncrementalBuildProcessExtended = IncrementalBuildProcessExtended;
//# sourceMappingURL=incremental-build-process.backend.js.map