"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var sass = require("node-sass");
var morphi_1 = require("morphi");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var browser_code_cut_helpers_backend_1 = require("./browser-code-cut-helpers.backend");
var BrowserCodeCutExtended = /** @class */ (function (_super) {
    tslib_1.__extends(BrowserCodeCutExtended, _super);
    //#region constructor
    function BrowserCodeCutExtended(absoluteFilePath, project, compilationProject, buildOptions, sourceOutBrowser) {
        var _this = _super.call(this, absoluteFilePath) || this;
        _this.project = project;
        _this.compilationProject = compilationProject;
        _this.buildOptions = buildOptions;
        _this.sourceOutBrowser = sourceOutBrowser;
        return _this;
    }
    Object.defineProperty(BrowserCodeCutExtended.prototype, "allowedToReplace", {
        get: function () {
            return ['ts', 'html', 'css', 'sass', 'scss'];
        },
        enumerable: true,
        configurable: true
    });
    BrowserCodeCutExtended.prototype.debug = function (fileName) {
        // console.log('path.basename(this.absoluteFilePath)',path.basename(this.absoluteFilePath))
        if (this.project) {
            this.isDebuggingFile = true; // (path.basename(this.absoluteFilePath) === fileName);
        }
    };
    BrowserCodeCutExtended.prototype.handleTickInCode = function (replacement) {
        if (replacement.search('`') !== -1) {
            tnp_helpers_1.Helpers.warn("[browsercodecut] Please dont use tick ` ... in " + tnp_core_2.path.basename(this.absoluteFilePath));
            replacement = replacement.replace(/\`/g, '\\`');
        }
        return replacement;
    };
    BrowserCodeCutExtended.prototype.handleOutput = function (replacement, ext) {
        replacement = this.handleTickInCode(replacement);
        return replacement;
    };
    //#endregion
    //#region after regions replacement
    BrowserCodeCutExtended.prototype.afterRegionsReplacement = function (content) {
        var contentFromMorphi = content;
        var absoluteFilePath = this.absoluteFilePath.replace(/\/$/, '');
        var useBackupFile = false;
        ['html', 'css', 'scss', 'sass']
            .map(function (d) { return "." + d; })
            .find(function (ext) {
            if (absoluteFilePath.endsWith(ext)) {
                absoluteFilePath = absoluteFilePath.replace(ext, '.ts');
                useBackupFile = true;
                return true;
            }
        });
        var orgContentPath = absoluteFilePath + ".orginal";
        if (useBackupFile) {
            tnp_helpers_1.Helpers.writeFile(this.absoluteFilePath, contentFromMorphi);
            if (tnp_core_3.fse.existsSync(orgContentPath)) {
                var backuContent = tnp_helpers_1.Helpers.readFile(orgContentPath);
                if (backuContent.trim() !== '') {
                    content = backuContent;
                }
                else {
                    tnp_helpers_1.Helpers.removeFileIfExists(orgContentPath);
                    return content;
                }
            }
            else if (tnp_core_3.fse.existsSync(absoluteFilePath)) {
                var orgContent = tnp_helpers_1.Helpers.readFile(absoluteFilePath);
                if (orgContent.trim() !== '') {
                    tnp_helpers_1.Helpers.writeFile(orgContentPath, orgContent);
                    content = orgContent;
                }
                else {
                    return content;
                }
            }
            else {
                return content;
            }
        }
        if (['module', 'component']
            .map(function (c) { return "." + c + ".ts"; })
            .filter(function (c) { return absoluteFilePath.endsWith(c); }).length === 0) {
            return content;
        }
        else if (!tnp_core_3.fse.existsSync(orgContentPath)) {
            tnp_helpers_1.Helpers.writeFile(orgContentPath, contentFromMorphi);
        }
        var dir = tnp_core_2.path.dirname(absoluteFilePath);
        var base = tnp_core_2.path.basename(absoluteFilePath)
            .replace(/\.(component|module)\.ts$/, '');
        // if () {
        //   console.log('HEHEHHEHEH', absoluteFilePath)
        // }
        // this.debugging = !!~absoluteFilePath.search('process-info-message.component')
        // this.debugging && console.log(absoluteFilePath)
        content = this.replaceHtmlTemplateInComponent(dir, base, content);
        content = this.replaceCssInComponent(dir, base, content);
        content = this.replaceSCSSInComponent(dir, base, content, 'scss', absoluteFilePath);
        content = this.replaceSCSSInComponent(dir, base, content, 'sass', absoluteFilePath);
        // if (this.debugging) {
        //   process.exit(0)
        // }
        if (useBackupFile) {
            tnp_helpers_1.Helpers.writeFile(absoluteFilePath, content);
            return contentFromMorphi;
        }
        return content;
    };
    //#endregion
    //#region replace html
    BrowserCodeCutExtended.prototype.replaceHtmlTemplateInComponent = function (dir, base, content, orginalFileExists) {
        if (orginalFileExists === void 0) { orginalFileExists = true; }
        var htmlTemplatePath = tnp_core_1.crossPlatformPath(tnp_core_2.path.join(dir, base + ".component.html"));
        var replacement = " <!-- File " + base + ".component.html  does not exist -->";
        if (tnp_core_3.fse.existsSync(htmlTemplatePath)) {
            // console.log(`regex: ${regex}`)
            replacement = tnp_helpers_1.Helpers.readFile(htmlTemplatePath);
            if (!tnp_core_1._.isString(replacement) || replacement.trim() === '') {
                replacement = "\n        <!-- html tmeplate is empty: " + tnp_core_2.path.basename(htmlTemplatePath) + " -->\n        ";
            }
        }
        else if (!orginalFileExists) {
            return content;
        }
        var regex = "(templateUrl)\\s*\\:\\s*(\\'|\\\")?\\s*(\\.\\/)?" + tnp_helpers_1.Helpers.escapeStringForRegEx(tnp_core_2.path.basename(htmlTemplatePath)) + "\\s*(\\'|\\\")";
        content = content.replace(new RegExp(regex, 'g'), 'template: \`\n' + this.handleOutput(replacement, 'html') + '\n\`');
        return content;
    };
    //#endregion
    //#region replace css
    BrowserCodeCutExtended.prototype.replaceCssInComponent = function (dir, base, content, orginalFileExists) {
        if (orginalFileExists === void 0) { orginalFileExists = true; }
        var cssFilePath = tnp_core_1.crossPlatformPath(tnp_core_2.path.join(dir, base + ".component.css"));
        // console.log('cssFilePath', cssFilePath)
        var replacement = "\n      /* file " + base + ".component.css does not exist */\n    ";
        if (tnp_core_3.fse.existsSync(cssFilePath)) {
            // console.log(`regex: ${regex}`)
            replacement = tnp_helpers_1.Helpers.readFile(cssFilePath);
            if (!tnp_core_1._.isString(replacement) || replacement.trim() === '') {
                replacement = "\n        /* css file is empty: " + tnp_core_2.path.basename(cssFilePath) + " */\n        ";
            }
        }
        else {
            if (!orginalFileExists) {
                return content;
            }
            replacement = "\n      /* css file does not exists: " + tnp_core_2.path.basename(cssFilePath) + " */\n      ";
        }
        var regex = "(styleUrls)\\s*\\:\\s*\\[\\s*(\\'|\\\")?\\s*(\\.\\/)?" + tnp_helpers_1.Helpers.escapeStringForRegEx(tnp_core_2.path.basename(cssFilePath)) + "s*(\\'|\\\")\\s*\\]";
        content = content.replace(new RegExp(regex, 'g'), 'styles: [\`\n' + this.handleOutput(replacement, 'css') + '\n\`]');
        return content;
    };
    //#endregion
    //#region replace scss
    BrowserCodeCutExtended.prototype.replaceSCSSInComponent = function (dir, base, content, ext, absoluteFilePath, orginalFileExists) {
        if (orginalFileExists === void 0) { orginalFileExists = true; }
        var scssFilePath = tnp_core_1.crossPlatformPath(tnp_core_2.path.join(dir, base + ".component." + ext));
        // this.debugging && console.log(`(${ext}) scssFilePath`, scssFilePath)
        var replacement = "\n    /* file " + tnp_core_2.path.basename(scssFilePath) + " does not exist */\n  ";
        if (tnp_core_3.fse.existsSync(scssFilePath)) {
            var contentScss = tnp_helpers_1.Helpers.readFile(scssFilePath);
            // this.debugging && console.log(`content of file:\n${contentScss}`)
            if (contentScss.trim() !== '') {
                try {
                    var compiled = sass.renderSync({
                        data: contentScss,
                    });
                    replacement = compiled.css;
                    replacement = tnp_core_1._.isObject(replacement) ? replacement.toString() : replacement;
                    // this.debugging && console.log('compiled', compiled)
                    // this.debugging && console.log('compiled.css', compiled.css)
                    // this.debugging && console.log('typeof compiled.css', typeof compiled.css)
                    // this.debugging && console.log('compiled.css.toString', compiled.css.toString())
                }
                catch (e) {
                    // this.debugging && console.log('erorororor', e);
                    // error(error, true, true);
                    tnp_helpers_1.Helpers.error("[browser-code-dut] There are errors in your sass file: " + absoluteFilePath + " ", true, true);
                }
            }
            if (!tnp_core_1._.isString(replacement) || replacement.trim() === '') {
                replacement = "\n        /* " + ext + " file is empty : " + tnp_core_2.path.basename(scssFilePath) + " */\n        ";
            }
        }
        else if (!orginalFileExists) {
            return content;
        }
        var regex = "(styleUrls)\\s*\\:\\s*\\[\\s*(\\'|\\\")?\\s*(\\.\\/)?" + tnp_helpers_1.Helpers.escapeStringForRegEx(tnp_core_2.path.basename(scssFilePath)) + "s*(\\'|\\\")\\s*\\]";
        // console.log(`regex: ${regex}`)
        content = content.replace(new RegExp(regex, 'g'), 'styles: [\`\n' + this.handleOutput(replacement, ext) + '\n\`]');
        return content;
    };
    //#endregion
    //#region find replecaments
    BrowserCodeCutExtended.prototype.findReplacements = function (stringContent, pattern, codeCuttFn, ext) {
        var _this = this;
        if (ext === void 0) { ext = 'ts'; }
        // this.isDebuggingFile && console.log(`[findReplacements] START EXT: "${ext}"`)
        // const handleHtmlRegex = (ext === 'html' ? '\\s+\\-\\-\\>' : '');
        var handleHtmlString = (ext === 'html' ? ' -->' : '');
        var customReplacement = '@customReplacement';
        // this.isDebuggingFile && console.log(pattern)
        // this.isDebuggingFile && console.log(`[findReplacements] pattern: "${pattern}"`)
        var replacements = [];
        // console.log('WORD is fun')
        stringContent = stringContent.split('\n')
            .filter(function (f) { return !!f.trim(); })
            .map(function (line) {
            // this.isDebuggingFile && console.log(`[LINE] "${line}"`)
            var indexPatternStart = line.search(pattern);
            if (indexPatternStart !== -1) {
                var value = line.substr(indexPatternStart + pattern.length).trim();
                // this.isDebuggingFile && console.log(`[findReplacements] value: "${value}"`)
                // this.isDebuggingFile && console.log('value: ' + value)
                // value = value.trim().replace(/\-\-\>$/, '')
                if (codeCuttFn(value.replace(/\-\-\>$/, ''), _this.project && _this.project.env.config, _this.absoluteFilePath)) {
                    // this.isDebuggingFile && console.log('[findReplacements] CUT CODE ! ')
                    var regexRep = new RegExp(pattern + "\\s+" + tnp_helpers_1.Helpers.escapeStringForRegEx(value), 'g');
                    // this.isDebuggingFile && console.log(`[findReplacements] value: "${regexRep.source}"`)
                    // this.isDebuggingFile && console.log(regexRep.source)
                    line = line.replace(regexRep, customReplacement + handleHtmlString);
                    replacements.push(customReplacement);
                }
                else {
                    // this.isDebuggingFile && console.log(`[findReplacements] DO NOT CUT CODE ! `)
                }
            }
            return line;
        })
            .join('\n');
        return {
            stringContent: stringContent,
            replacements: replacements
        };
    };
    //#endregion
    //#region remove from line pkg
    BrowserCodeCutExtended.prototype.replaceFromLine = function (pkgName, imp) {
        // console.log(`Check package: "${pkgName}"`)
        // console.log(`imp: "${imp}"`)
        var inlinePkg = this.getInlinePackage(pkgName);
        if (inlinePkg.isIsomorphic) {
            // console.log('inlinePkg ', inlinePkg.realName)
            var replacedImp = imp.replace(inlinePkg.realName, inlinePkg.realName + "/" + this.browserString);
            this.rawContent = this.rawContent.replace(imp, replacedImp);
            return;
        }
        if (this.compilationProject.isWorkspaceChildProject && this.absoluteFilePath) {
            // console.log(`check child: ${pkgName}`)
            var parent_1 = (this.compilationProject.isGenerated && !this.compilationProject.isWorkspaceChildProject) ? this.compilationProject.grandpa : this.compilationProject.parent;
            var child = parent_1.child(pkgName, false);
            if (child && this.buildOptions && !this.buildOptions.appBuild) {
                // console.log(`child founded: ${pkgName}`)
                var orgImp = imp;
                var proceed = true;
                if (child.typeIs('isomorphic-lib')) {
                    var sourceRegex = pkgName + "/(" + tnp_config_1.config.moduleNameIsomorphicLib.join('|') + ")(?!-)";
                    var regex = new RegExp(sourceRegex);
                    // console.log(`[isomorphic-lib] Regex source: "${sourceRegex}"`)
                    if (regex.test(imp)) {
                        // console.log(`[isom] MATCH: ${imp}`)
                        imp = imp.replace(regex, pkgName);
                    }
                    else {
                        var regexAlreadyIs = new RegExp(pkgName + "/" + tnp_helpers_1.Helpers.getBrowserVerPath(this.project && this.project.name));
                        if (regexAlreadyIs.test(imp)) {
                            imp = imp.replace(regexAlreadyIs, pkgName);
                        }
                        else {
                            proceed = false;
                        }
                        // console.log(`[isom] NOTMATCH: ${imp}`)
                    }
                    // console.log(`[isomorphic-lib] Regex replaced: "${imp}"`)
                }
                else {
                    var sourceRegex = pkgName + "/(" + tnp_config_1.config.moduleNameAngularLib.join('|') + ")(?!-)";
                    var regex = new RegExp(sourceRegex);
                    // console.log(`[angular-lib] Regex source: "${sourceRegex}"`)
                    if (regex.test(imp)) {
                        // console.log(`[angul] MATCH: ${imp}`)
                        imp = imp.replace(regex, pkgName);
                    }
                    else {
                        var regexAlreadyIs = new RegExp(pkgName + "/" + tnp_helpers_1.Helpers.getBrowserVerPath(this.project && this.project.name));
                        if (regexAlreadyIs.test(imp)) {
                            imp = imp.replace(regexAlreadyIs, pkgName);
                        }
                        else {
                            proceed = false;
                        }
                        // console.log(`[angul] NOTMATCH: ${imp}`)
                    }
                    // console.log(`[angular-lib] Regex replaced: "${imp}"`)
                }
                if (proceed) {
                }
                var replacedImp = imp.replace(pkgName, pkgName + "/" + tnp_helpers_1.Helpers.getBrowserVerPath(this.project && this.project.name));
                this.rawContent = this.rawContent.replace(orgImp, replacedImp);
                return;
            }
        }
    };
    //#endregion
    //#region replace regions for isomorphic-lib/angular-lib
    BrowserCodeCutExtended.prototype.replaceRegionsForIsomorphicLib = function (options) {
        options = tnp_core_1._.clone(options);
        // console.log('options.replacements', options.replacements)
        var ext = tnp_core_2.path.extname(this.absoluteFilePath).replace('.', '');
        // console.log(`Ext: "${ext}" for file: ${path.basename(this.absoluteFilePath)}`)
        if (this.allowedToReplace.includes(ext)) {
            this.rawContent = this.project.sourceModifier.replaceBaslieneFromSiteBeforeBrowserCodeCut(this.rawContent);
            this.rawContent = this.replaceRegionsWith(this.rawContent, options.replacements, '', ext);
        }
        this.rawContent = this.afterRegionsReplacement(this.rawContent);
        return this;
    };
    //#endregion
    //#region replace region width
    BrowserCodeCutExtended.prototype.replaceRegionsWith = function (stringContent, replacementPatterns, replacement, ext) {
        if (stringContent === void 0) { stringContent = ''; }
        if (replacementPatterns === void 0) { replacementPatterns = []; }
        if (replacement === void 0) { replacement = ''; }
        if (ext === void 0) { ext = 'ts'; }
        if (replacementPatterns.length === 0) {
            return stringContent;
        }
        var pattern = replacementPatterns.shift();
        // console.log('replacementPatterns', replacementPatterns)
        if (Array.isArray(pattern) && pattern.length === 2) {
            var cutCodeFnOrString = pattern[1];
            pattern = pattern[0];
            if (tnp_core_1._.isFunction(cutCodeFnOrString)) {
                var rep = this.findReplacements(stringContent, pattern, cutCodeFnOrString, ext);
                // this.isDebuggingFile && console.log('replacements', replacements)
                // this.isDebuggingFile && console.log('replacements', rep.replacements)
                return this.replaceRegionsWith(rep.stringContent, rep.replacements.concat(replacementPatterns), '', ext);
            }
            else {
                replacement = cutCodeFnOrString;
            }
        }
        if (ext === 'html') {
            stringContent = stringContent.replace(browser_code_cut_helpers_backend_1.REGEX_REGION_HTML(pattern), replacement);
        }
        else {
            stringContent = stringContent.replace(this.REGEX_REGION(pattern), replacement);
        }
        // this.isDebuggingFile && console.log(`-------------------------- ${pattern} --------------------------------`)
        // this.isDebuggingFile && console.log(stringContent)
        return this.replaceRegionsWith(stringContent, replacementPatterns, '', ext);
    };
    //#endregion
    BrowserCodeCutExtended.prototype.saveOrDelete = function () {
        var modifiedFiles = { modifiedFiles: [] };
        tnp_helpers_1.Helpers.log("saving ismoprhic file: " + this.absoluteFilePath, 1);
        if (this.isEmpty && ['.ts', '.js'].includes(tnp_core_2.path.extname(this.absoluteFilePath))) {
            if (tnp_core_3.fse.existsSync(this.absoluteFilePath)) {
                tnp_core_3.fse.unlinkSync(this.absoluteFilePath);
            }
            tnp_helpers_1.Helpers.log("Delete empty: " + this.absoluteFilePath, 1);
        }
        else {
            tnp_helpers_1.Helpers.log("Not empty: " + this.absoluteFilePath, 1);
            if (!tnp_core_3.fse.existsSync(tnp_core_2.path.dirname(this.absoluteFilePath))) {
                tnp_core_3.fse.mkdirpSync(tnp_core_2.path.dirname(this.absoluteFilePath));
            }
            tnp_core_3.fse.writeFileSync(this.absoluteFilePath, this.rawContent, 'utf8');
            var relativePath = this.absoluteFilePath
                .replace(this.compilationProject.location + "/", '')
                .replace(/^\//, '');
            // if (path.isAbsolute(relativePath)) {
            //   console.log(`is ABsolute !`, relativePath)
            //   // process.exit(0)
            // }
            tnp_helpers_1.Helpers.log("Written file: " + relativePath, 1);
            this.compilationProject.sourceModifier.processFile(relativePath, modifiedFiles, 'tmp-src-for');
        }
        // }
    };
    return BrowserCodeCutExtended;
}(morphi_1.BrowserCodeCut));
exports.BrowserCodeCutExtended = BrowserCodeCutExtended;
//# sourceMappingURL=browser-code-cut.backend.js.map