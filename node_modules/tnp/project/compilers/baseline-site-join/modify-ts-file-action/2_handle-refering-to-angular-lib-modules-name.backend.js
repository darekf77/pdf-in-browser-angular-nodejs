"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var modify_ts_file_action_base_backend_1 = require("./modify-ts-file-action-base.backend");
var tnp_helpers_1 = require("tnp-helpers");
/**
 * FIST PROBLEM:
 * Handle situation when in site you are refering to angular-lib baseline module
 * ex:
 * `import { Helpers } from 'angular-lib-name/(components/module/browser/dist)/helpers-path'`
 *                                                        <- will be repaled do browser ->
 *
 * SECOND PROBLEM:
 * Handle situation when in site you are refering to angular-lib baseline module
 * ex:
 * `import { Helpers } from 'baseline-name/angular-lib-name/(components/module/browser/dist)/helpers-path'`
 *                                                        <- will be repaled do browser ->
 */
var HandleReferingToAndularLibModuleName = /** @class */ (function (_super) {
    tslib_1.__extends(HandleReferingToAndularLibModuleName, _super);
    function HandleReferingToAndularLibModuleName(project, debuggin) {
        var _this = _super.call(this) || this;
        _this.project = project;
        _this.debuggin = debuggin;
        return _this;
    }
    HandleReferingToAndularLibModuleName.prototype.action = function (relativeBaselineCustomPath, input) {
        // Helpers.log(`relativeBaselineCustomPath: "${relativeBaselineCustomPath}"`)
        if (this.project.isWorkspaceChildProject) {
            // if(!this.project) {
            //   console.trace('HERE')
            // }
            input = this.project.sourceModifier.process(input, relativeBaselineCustomPath);
        }
        if (this.debuggin)
            tnp_helpers_1.Helpers.log("\n[replace][2] result input:\n" + tnp_helpers_1.Helpers.terminalLine() + "\n  " + input + "\n" + tnp_helpers_1.Helpers.terminalLine() + "\n  ");
        return input;
    };
    return HandleReferingToAndularLibModuleName;
}(modify_ts_file_action_base_backend_1.ModifyTsFileActionBase));
exports.HandleReferingToAndularLibModuleName = HandleReferingToAndularLibModuleName;
//# sourceMappingURL=2_handle-refering-to-angular-lib-modules-name.backend.js.map