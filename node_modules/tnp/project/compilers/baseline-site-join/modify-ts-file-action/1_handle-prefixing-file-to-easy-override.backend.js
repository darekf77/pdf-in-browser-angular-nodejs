"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var modify_ts_file_action_base_backend_1 = require("./modify-ts-file-action-base.backend");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_helpers_2 = require("tnp-helpers");
//#endregion
/**
 * Replace imports/export
 * Scope: current files baseline path in current generated file
 * Example:
 *  File: exmpale.ts
 *   Code change:
 *     From  : `import {..} from 'baseline/exapmle.ts`
 *     To    : `import {..} from './__exapmle.ts`
 *
 * Notes:
 *  Problem1 : If import `import {..} from 'baseline/exapmle.ts` is included in different files
 * than example.ts it is not going to be excluded
 */
var HandlePrefixingFileToEasyOverride = /** @class */ (function (_super) {
    tslib_1.__extends(HandlePrefixingFileToEasyOverride, _super);
    function HandlePrefixingFileToEasyOverride(project, debuggin) {
        var _this = _super.call(this) || this;
        _this.project = project;
        _this.debuggin = debuggin;
        return _this;
    }
    HandlePrefixingFileToEasyOverride.prototype.action = function (relativeBaselineCustomPath, input) {
        var baselineFilePathNoExit = tnp_helpers_1.Helpers.path.removeExtension(relativeBaselineCustomPath);
        if (this.debuggin) {
            tnp_helpers_1.Helpers.log("[replace][1] baselineFilePathNoExit: " + baselineFilePathNoExit);
        }
        var toReplaceImportPath = tnp_helpers_1.Helpers.escapeStringForRegEx("" + tnp_core_1.path.join(tnp_helpers_2.HelpersMerge.pathToBaselineNodeModulesRelative(this.project)
            .replace(/\//g, '//'), baselineFilePathNoExit));
        var replacement = "./" + tnp_helpers_2.HelpersMerge.getPrefixedBasename(baselineFilePathNoExit);
        // if (debuggin) Helpers.log(`toReplaceImportPath: ${toReplaceImportPath}`)
        if (this.debuggin) {
            tnp_helpers_1.Helpers.log("[replace][1] replacement: " + replacement);
        }
        var replaceRegex = new RegExp("(\"|')" + toReplaceImportPath + "(\"|')", 'g');
        if (this.debuggin) {
            tnp_helpers_1.Helpers.log("[replace][1] replaceRegex: " + replaceRegex.source);
        }
        input = input.replace(replaceRegex, "'" + replacement + "'");
        if (this.debuggin) {
            tnp_helpers_1.Helpers.log("\n[replace][1] result input:\n" + tnp_helpers_1.Helpers.terminalLine() + "\n    " + input + "\n" + tnp_helpers_1.Helpers.terminalLine() + "\n    ");
        }
        return input;
    };
    return HandlePrefixingFileToEasyOverride;
}(modify_ts_file_action_base_backend_1.ModifyTsFileActionBase));
exports.HandlePrefixingFileToEasyOverride = HandlePrefixingFileToEasyOverride;
//# sourceMappingURL=1_handle-prefixing-file-to-easy-override.backend.js.map