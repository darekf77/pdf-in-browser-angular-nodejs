"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var modify_ts_file_action_base_backend_1 = require("./modify-ts-file-action-base.backend");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_helpers_2 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
/**
 * Same thing like in currentFilePath() but:
 *  - handle situation like in Problem1;
 *  - handle situation when in your custom files you are referening to custom files
 */
var HandleReferingToBaselinePathes = /** @class */ (function (_super) {
    tslib_1.__extends(HandleReferingToBaselinePathes, _super);
    function HandleReferingToBaselinePathes(project) {
        var _this = _super.call(this) || this;
        _this.project = project;
        return _this;
    }
    HandleReferingToBaselinePathes.prototype.action = function (relativeBaselineCustomPath, input) {
        var _this = this;
        relativeBaselineCustomPath = "/" + relativeBaselineCustomPath;
        var debuggin = (tnp_config_1.config.debug.baselineSiteJoin.DEBUG_PATHES
            .includes(relativeBaselineCustomPath));
        if (debuggin)
            tnp_helpers_1.Helpers.log("\n\n    relativeBaselineCustomPath:" + relativeBaselineCustomPath + "\n\n\n    ");
        var levelBack = relativeBaselineCustomPath.split('/').length - 3;
        var levelBackPath = tnp_core_1._.times(levelBack, function () { return '../'; }).join('').replace(/\/$/g, '');
        if (debuggin)
            tnp_helpers_1.Helpers.log("[replace][3] Level back for " + relativeBaselineCustomPath + " is " + levelBack + " " + levelBackPath);
        var tmpPathToBaselineNodeModulesRelative = tnp_helpers_1.Helpers
            .escapeStringForRegEx(tnp_helpers_2.HelpersMerge.pathToBaselineNodeModulesRelative(this.project));
        debuggin && tnp_helpers_1.Helpers.log("[replace][3] tmpPathToBaselineNodeModulesRelative: " + tmpPathToBaselineNodeModulesRelative);
        var patterns = this.getPattern(input, tmpPathToBaselineNodeModulesRelative, debuggin);
        if (debuggin)
            tnp_helpers_1.Helpers.log("[replace][3] recognized patterns\n\n      " + (tnp_core_1._.isArray(patterns) && patterns.map(function (d) { return "\t" + d; }).join('\n')) + "\n    ");
        if (Array.isArray(patterns) && patterns.length >= 1) {
            patterns.forEach(function (pathToReplaceInInput) {
                if (debuggin)
                    tnp_helpers_1.Helpers.log("[replace][3] PATTERN IN INPUT " + pathToReplaceInInput);
                if (debuggin)
                    tnp_helpers_1.Helpers.log("[replace][3] BASELINE: " + tnp_helpers_2.HelpersMerge.pathToBaselineNodeModulesRelative(_this.project));
                var patternWithoutBaselinePart = pathToReplaceInInput
                    .replace(tnp_helpers_2.HelpersMerge.pathToBaselineNodeModulesRelative(_this.project), '');
                if (debuggin)
                    tnp_helpers_1.Helpers.log("[replace][3] PATTERN WITHOUT BASELINE:" + patternWithoutBaselinePart);
                if (debuggin)
                    tnp_helpers_1.Helpers.log("[replace][3] pathPart = " + tnp_config_1.config.regexString.pathPartStringRegex);
                patternWithoutBaselinePart = tnp_helpers_1.Helpers.path.removeRootFolder(patternWithoutBaselinePart);
                if (debuggin)
                    tnp_helpers_1.Helpers.log("[replace][3] PATTERN WITHOUT BASELINE no path part : " + patternWithoutBaselinePart);
                var toReplace = "" + levelBackPath + patternWithoutBaselinePart;
                if (debuggin)
                    tnp_helpers_1.Helpers.log("[replace][3] toReplace:" + toReplace);
                input = input.replace(pathToReplaceInInput, ("." + toReplace).replace('...', '..'));
            });
        }
        if (debuggin)
            tnp_helpers_1.Helpers.log("\n[replace][3] result input:\n" + tnp_helpers_1.Helpers.terminalLine() + "\n    " + input + "\n" + tnp_helpers_1.Helpers.terminalLine() + "\n    ");
        return input;
    };
    /**
     *   "baseline/ss-common-logic/src/db-mocks";
     *                            |<--------->|
     */
    HandleReferingToBaselinePathes.prototype.getPattern = function (input, tmpPathToBaselineNodeModulesRelative, debuggin) {
        if (debuggin)
            tnp_helpers_1.Helpers.log("[replace][3] pathPart " + tnp_config_1.config.regexString.pathPartStringRegex);
        var baselineRegex = "" + tmpPathToBaselineNodeModulesRelative + tnp_config_1.config.regexString.pathPartStringRegex + "*";
        if (debuggin)
            tnp_helpers_1.Helpers.log("[replace][3] \nbaselineRegex: " + baselineRegex);
        var patterns = input.match(new RegExp(baselineRegex, 'g'));
        return patterns;
    };
    return HandleReferingToBaselinePathes;
}(modify_ts_file_action_base_backend_1.ModifyTsFileActionBase));
exports.HandleReferingToBaselinePathes = HandleReferingToBaselinePathes;
//# sourceMappingURL=3_handle-refering-to-baseline-pathes.backend.js.map