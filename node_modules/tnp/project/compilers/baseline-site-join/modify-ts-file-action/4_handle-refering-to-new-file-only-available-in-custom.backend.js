"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var modify_ts_file_action_base_backend_1 = require("./modify-ts-file-action-base.backend");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_helpers_2 = require("tnp-helpers");
/**
 * Prefixed replacement
 *
 * Example:
 *
 * Files:
 * - site: custom/src/example/totaly-new-file.ts
 * - site:  src/app.ts => is refereing to 'totaly-new-file.ts' which is new file only available in site/custom
 */
var HandleRefereingToNewFileOnlyAvailableInCustom = /** @class */ (function (_super) {
    tslib_1.__extends(HandleRefereingToNewFileOnlyAvailableInCustom, _super);
    function HandleRefereingToNewFileOnlyAvailableInCustom(project) {
        var _this = _super.call(this) || this;
        _this.project = project;
        return _this;
    }
    HandleRefereingToNewFileOnlyAvailableInCustom.prototype.action = function (relativeBaselineCustomPath, input) {
        var _this = this;
        tnp_helpers_2.HelpersMerge.relativePathesCustom(this.project).forEach(function (relativePthInCustom) {
            if (relativePthInCustom !== relativeBaselineCustomPath) {
                var baselineFilePathNoExit = tnp_helpers_1.Helpers.path.removeExtension(relativePthInCustom);
                var pathToSiteeFile = tnp_core_2.path.join(_this.project.location, baselineFilePathNoExit);
                var pathToBaselineFile = tnp_core_2.path.join(tnp_helpers_2.HelpersMerge.pathToBaselineAbsolute(_this.project), baselineFilePathNoExit);
                if (tnp_core_1.fse.existsSync(pathToBaselineFile) && !tnp_core_1.fse.existsSync(pathToSiteeFile)) {
                    var toReplace = tnp_helpers_2.HelpersMerge.getPrefixedBasename(baselineFilePathNoExit);
                    baselineFilePathNoExit = tnp_helpers_1.Helpers.escapeStringForRegEx(baselineFilePathNoExit);
                    baselineFilePathNoExit = "." + tnp_helpers_1.Helpers.path.removeRootFolder(baselineFilePathNoExit);
                    var dirPath = tnp_core_2.path.dirname(relativePthInCustom);
                    toReplace = tnp_helpers_1.Helpers.path.removeRootFolder(tnp_core_2.path.join(dirPath, toReplace));
                    toReplace = "." + toReplace;
                    // Helpers.log(`Replace: ${baselineFilePathNoExit} on self: ${toReplace}`)
                    input = input.replace(new RegExp(baselineFilePathNoExit, 'g'), toReplace);
                }
            }
        });
        return input;
    };
    return HandleRefereingToNewFileOnlyAvailableInCustom;
}(modify_ts_file_action_base_backend_1.ModifyTsFileActionBase));
exports.HandleRefereingToNewFileOnlyAvailableInCustom = HandleRefereingToNewFileOnlyAvailableInCustom;
//# sourceMappingURL=4_handle-refering-to-new-file-only-available-in-custom.backend.js.map