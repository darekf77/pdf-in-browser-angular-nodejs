"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_core_4 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var chalk_1 = require("chalk");
var abstract_1 = require("../../abstract");
var incremental_compiler_1 = require("incremental-compiler");
var project_1 = require("../../abstract/project");
var files_join_actions_backend_1 = require("./files-join-actions.backend");
var tnp_helpers_2 = require("tnp-helpers");
function optionsBaselineSiteJoin(project) {
    var folderPath = void 0;
    if (project.isSiteInStrictMode) {
        if (project.isWorkspace) {
            folderPath = tslib_1.__spreadArrays([
                tnp_core_3.path.join(project.location, tnp_config_1.config.folder.custom)
            ], tslib_1.__spreadArrays(project.baseline.customizableFilesAndFolders, project.baseline.quickFixes.nodeModulesReplacementsZips, project.baseline.node_modules.fixesForNodeModulesPackages).map(function (relativeFilePath) {
                return tnp_core_3.path.join(project.baseline.location, relativeFilePath);
            }));
        }
        if (project.isWorkspaceChildProject) {
            folderPath = [
                tnp_core_3.path.join(project.location, tnp_config_1.config.folder.custom),
                tnp_core_3.path.join(project.baseline.location, tnp_config_1.config.folder.src),
                (project.typeIs('angular-lib') && tnp_core_3.path.join(project.baseline.location, tnp_config_1.config.folder.components))
            ].filter(function (f) { return !!f; });
        }
    }
    var options = {
        folderPath: folderPath,
        notifyOnFileUnlink: true
    };
    // if(project.name === 'simple-site') {
    //   console.log(options)
    // }
    return options;
}
var BaselineSiteJoin = /** @class */ (function (_super) {
    tslib_1.__extends(BaselineSiteJoin, _super);
    function BaselineSiteJoin(project) {
        var _this = _super.call(this, project, optionsBaselineSiteJoin(project), true) || this;
        _this.project = project;
        return _this;
    }
    BaselineSiteJoin.prototype.asyncAction = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modifiedFiles, absolutePath, relativePath;
            return tslib_1.__generator(this, function (_a) {
                modifiedFiles = { modifiedFiles: [] };
                absolutePath = event.fileAbsolutePath;
                relativePath = this.resolveRelativePath(absolutePath);
                if (!relativePath) {
                    return [2 /*return*/];
                }
                this.merge(relativePath, modifiedFiles);
                return [2 /*return*/];
            });
        });
    };
    Object.defineProperty(BaselineSiteJoin.prototype, "syncActionAlreadyMergedFiles", {
        /**
         * check at start if files in (src|componets) should exisit in site project
         */
        get: function () {
            var _this = this;
            var files = [];
            files = files.concat(tnp_core_4.glob.sync(tnp_core_3.path.join(this.project.location, tnp_config_1.config.folder.src) + "/**/*.*"));
            if (this.project.typeIs('angular-lib')) {
                files = files.concat(tnp_core_4.glob.sync(tnp_core_3.path.join(this.project.location, tnp_config_1.config.folder.components) + "/**/*.*"));
            }
            var genratedFiles = tslib_1.__spreadArrays(this.project.projectSpecyficIgnoredFiles(), this.project.sourceFilesToIgnore(), this.project.filesTemplates(), this.project.quickFixes.nodeModulesReplacementsZips, this.project.node_modules.fixesForNodeModulesPackages);
            // console.log('genratedFiles', genratedFiles)
            // process.exit(0)
            // console.log('generated files', genratedFiles);
            return files.filter(function (f) {
                f = tnp_core_1.crossPlatformPath(f);
                if (tnp_core_3.path.basename(f).startsWith(tnp_helpers_2.BaselineSiteJoinprefix)) {
                    return false;
                }
                var relativePath = f.replace(_this.project.location).replace(/^\//, '');
                if (genratedFiles.includes(relativePath)) {
                    return false;
                }
                return true;
            });
        },
        enumerable: true,
        configurable: true
    });
    BaselineSiteJoin.prototype.syncAction = function (filesAbsolutePathes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modifiedFiles, index, relativePath;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                filesAbsolutePathes = filesAbsolutePathes.concat(this.syncActionAlreadyMergedFiles);
                // console.log('syncAction', filesAbsolutePathes)
                filesAbsolutePathes = filesAbsolutePathes.map(function (absolutePath) {
                    return _this.resolveRelativePath(absolutePath);
                }).filter(function (f) { return !!f; });
                // glob.sync(`${this.project.location}`)
                filesAbsolutePathes = tnp_helpers_1.Helpers.arrays.uniqArray(filesAbsolutePathes);
                modifiedFiles = { modifiedFiles: [] };
                for (index = 0; index < filesAbsolutePathes.length; index++) {
                    relativePath = filesAbsolutePathes[index];
                    // console.log(`= ${relativePath}`)
                    this.merge(relativePath, modifiedFiles);
                }
                return [2 /*return*/];
            });
        });
    };
    BaselineSiteJoin.prototype.returnRelativePathIfAllowed = function (relativePath, contactWith) {
        var pathToCheck = tnp_core_3.path.join(contactWith, relativePath);
        var res = tslib_1.__spreadArrays(this.project.sourceFilesToIgnore()).includes(pathToCheck);
        if (res) {
            // console.log(`ignore: ${pathToCheck}`);
            return;
        }
        return relativePath;
    };
    BaselineSiteJoin.prototype.resolveRelativePath = function (absolutePath) {
        var customPath = tnp_core_3.path.join(this.project.location, tnp_config_1.config.folder.custom);
        if (absolutePath.startsWith(customPath)) {
            var relativePath = absolutePath.replace(customPath, '').replace(/^\//, '');
            return this.returnRelativePathIfAllowed(relativePath, tnp_config_1.config.folder.custom);
        }
        var baselinePath = tnp_core_3.path.join(this.project.baseline.location);
        if (absolutePath.startsWith(baselinePath)) {
            var relativePath = absolutePath.replace(baselinePath, '').replace(/^\//, '');
            return this.returnRelativePathIfAllowed(relativePath, '');
        }
        var sitePath = tnp_core_3.path.join(this.project.location);
        if (absolutePath.startsWith(sitePath)) {
            var relativePath = absolutePath.replace(sitePath, '').replace(/^\//, '');
            return this.returnRelativePathIfAllowed(relativePath, '');
        }
        tnp_helpers_1.Helpers.warn("Unrecognized merge aciton for: " + absolutePath);
    };
    //#region merge strategy
    /**
     * relativeBaselineCustomPath -> example src/apps/auth/AuthController.ts
     */
    BaselineSiteJoin.prototype.merge = function (relativeBaselineCustomPath, modifiedFiles) {
        // console.log('relativeBaselineCustomPath', relativeBaselineCustomPath)
        //#region debug
        var isDebugMode = tnp_config_1.config.debug.baselineSiteJoin.DEBUG_MERGE_PATHES.includes(relativeBaselineCustomPath);
        if (isDebugMode) {
            tnp_helpers_1.Helpers.log("[merge] " + tnp_core_1._.times(5, function () { return '\n'; }).join());
            tnp_helpers_1.Helpers.log("[merge] " + chalk_1.default.blue("Baseline/Site modyfication detected..."));
            tnp_helpers_1.Helpers.log("[merge] File: " + relativeBaselineCustomPath);
        }
        //#endregion
        var baselineAbsoluteLocation = tnp_core_3.path.join(tnp_helpers_2.HelpersMerge
            .pathToBaselineThroughtNodeModules(this.project), relativeBaselineCustomPath);
        var baselineFileInCustomPath = tnp_core_3.path.join(tnp_helpers_2.HelpersMerge
            .pathToCustom(this.project), relativeBaselineCustomPath);
        var joinFilePath = tnp_core_3.path.join(this.project.location, relativeBaselineCustomPath);
        var variant;
        //#region debug
        if (isDebugMode) {
            tnp_helpers_1.Helpers.log("[merge] baselineAbsoluteLocation: " + baselineAbsoluteLocation);
            tnp_helpers_1.Helpers.log("[merge] baselineFileInCustomPath " + baselineFileInCustomPath);
            tnp_helpers_1.Helpers.log("[merge] joinFilePath " + joinFilePath);
        }
        //#endregion
        if (tnp_core_2.fse.existsSync(baselineFileInCustomPath)) {
            if (tnp_core_2.fse.existsSync(baselineAbsoluteLocation)) {
                variant = 'join';
                isDebugMode && tnp_helpers_1.Helpers.log("[merge] " + variant);
                tnp_helpers_1.Helpers.copyFile(baselineAbsoluteLocation, tnp_helpers_2.HelpersMerge.getPrefixedPathInJoin(relativeBaselineCustomPath, this.project), { modifiedFiles: modifiedFiles });
            }
            else {
                variant = 'no-in-baseline';
                isDebugMode && tnp_helpers_1.Helpers.log("[merge] " + variant);
                tnp_helpers_1.Helpers.removeFileIfExists(tnp_helpers_2.HelpersMerge.getPrefixedPathInJoin(relativeBaselineCustomPath, this.project), { modifiedFiles: modifiedFiles });
                // Helpers.log('after');
            }
            var replace = tnp_config_1.config.extensions.modificableByReplaceFn.includes(tnp_core_3.path.extname(baselineFileInCustomPath));
            var transformTextFn = replace ? this.replacePathFn(relativeBaselineCustomPath) : void 0;
            //#region debug
            if (isDebugMode)
                tnp_helpers_1.Helpers.log("[merge] SOURCE: " + baselineFileInCustomPath + " ,extname: " + tnp_core_3.path.extname(baselineFileInCustomPath));
            if (isDebugMode)
                tnp_helpers_1.Helpers.log("[merege] DEST: " + joinFilePath + " ,extname: " + tnp_core_3.path.extname(joinFilePath));
            if (isDebugMode)
                tnp_helpers_1.Helpers.log("[merge] Replace fn for " + baselineFileInCustomPath + " = " + !!transformTextFn);
            //#endregion
            tnp_helpers_1.Helpers.copyFile(baselineFileInCustomPath, joinFilePath, {
                transformTextFn: transformTextFn,
                debugMode: isDebugMode,
                fast: false,
                modifiedFiles: modifiedFiles
            });
        }
        else {
            if (tnp_core_2.fse.existsSync(baselineAbsoluteLocation)) {
                variant = 'no-in-custom';
                isDebugMode && tnp_helpers_1.Helpers.log("[merge] " + variant);
                tnp_helpers_1.Helpers.copyFile(baselineAbsoluteLocation, joinFilePath, { fast: true, modifiedFiles: modifiedFiles });
                tnp_helpers_1.Helpers.removeFileIfExists(tnp_helpers_2.HelpersMerge.getPrefixedPathInJoin(relativeBaselineCustomPath, this.project), { modifiedFiles: modifiedFiles });
            }
            else {
                variant = 'deleted';
                isDebugMode && tnp_helpers_1.Helpers.log("[merge] " + variant);
                tnp_helpers_1.Helpers.removeFileIfExists(joinFilePath, { modifiedFiles: modifiedFiles });
                tnp_helpers_1.Helpers.removeFileIfExists(tnp_helpers_2.HelpersMerge.getPrefixedPathInJoin(relativeBaselineCustomPath, this.project), { modifiedFiles: modifiedFiles });
            }
        }
        //#region debug
        if (isDebugMode) {
            tnp_helpers_1.Helpers.log("[merge] " + chalk_1.default.blueBright('Baseline/Site modyfication OK ') + ", (action: " + variant + ") ");
        }
        //#endregion
        return modifiedFiles;
    };
    BaselineSiteJoin.prototype.replacePathFn = function (relativeBaselineCustomPath) {
        var _this = this;
        // console.log('relativeBaselineCustomPath', relativeBaselineCustomPath)
        return function (input) {
            input = _this.replace(input, relativeBaselineCustomPath)._1___handlePrefixingFilesToEasyOverride();
            input = _this.replace(input, relativeBaselineCustomPath)._2___handleReferingTOAngularLibModulesName();
            input = _this.replace(input, relativeBaselineCustomPath)._3___handleReferingToBaselinePathes();
            input = _this.replace(input, relativeBaselineCustomPath)._4___handleReferingToNewFilesOnlyAvailableInCustom();
            return input;
        };
    };
    tslib_1.__decorate([
        incremental_compiler_1.IncCompiler.methods.AsyncAction(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [incremental_compiler_1.IncCompiler.Change]),
        tslib_1.__metadata("design:returntype", Promise)
    ], BaselineSiteJoin.prototype, "asyncAction", null);
    BaselineSiteJoin = tslib_1.__decorate([
        incremental_compiler_1.IncCompiler.Class({ className: 'BaselineSiteJoin' }),
        tslib_1.__metadata("design:paramtypes", [project_1.Project])
    ], BaselineSiteJoin);
    return BaselineSiteJoin;
}(abstract_1.FeatureCompilerForProject));
exports.BaselineSiteJoin = BaselineSiteJoin;
tnp_helpers_1.Helpers.applyMixins(BaselineSiteJoin, [files_join_actions_backend_1.FilesJoinActions]);
//# sourceMappingURL=baseline-site-join.backend.js.map