"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var abstract_1 = require("../../abstract");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var source_modifier_helpers_backend_1 = require("./source-modifier.helpers.backend");
var source_modifier_backend_1 = require("./source-modifier.backend");
var SourceModForStandaloneProjects = /** @class */ (function (_super) {
    tslib_1.__extends(SourceModForStandaloneProjects, _super);
    function SourceModForStandaloneProjects(project) {
        var _this = _super.call(this, project, source_modifier_backend_1.optionsSourceModifier(project)) || this;
        _this.project = project;
        return _this;
    }
    Object.defineProperty(SourceModForStandaloneProjects.prototype, "foldersSources", {
        get: function () {
            //#region folder with code visible to users
            return [
                tnp_config_1.config.folder.components,
                tnp_config_1.config.folder.src,
            ];
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(SourceModForStandaloneProjects.prototype, "foldersCompiledJsDtsMap", {
        get: function () {
            //#region folder with code invisible to user... compiler in backgroud
            return [
                tnp_config_1.config.folder.dist,
                tnp_config_1.config.folder.bundle,
                tnp_config_1.config.folder.browser,
                tnp_config_1.config.folder.client,
                tnp_config_1.config.folder.module,
            ];
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    ;
    SourceModForStandaloneProjects.prototype.process = function (input, relativePath) {
        var modType = this.getModType(this.project, relativePath);
        input = this.mod3rdPartyLibsReferces(input, modType, relativePath);
        return input;
    };
    SourceModForStandaloneProjects.prototype.processFile = function (relativePath, files, source) {
        //#region process file
        var absoluteFilePath = tnp_core_1.path.join(this.project.location, relativePath);
        if (!tnp_core_3.fse.existsSync(absoluteFilePath)) {
            return false;
        }
        if (source === 'tmp-src-for') {
            if (tnp_core_1.path.extname(relativePath) !== '.ts') {
                return false;
            }
        }
        else {
            if (this.project.sourceFilesToIgnore().includes(relativePath) ||
                !tnp_config_1.config.extensions.modificableByReplaceFn.includes(tnp_core_1.path.extname(relativePath))) {
                return false;
            }
        }
        var input = tnp_helpers_1.Helpers.readFile(absoluteFilePath);
        var modified = this.process(input, relativePath);
        if (input !== modified) {
            tnp_helpers_1.Helpers.writeFile(absoluteFilePath, modified);
            files.modifiedFiles.push(absoluteFilePath);
            return true;
        }
        //#endregion
        return false;
    };
    //#region get source type lib - for libs, app - for clients
    SourceModForStandaloneProjects.prototype.getModType = function (project, relativePath) {
        var startFolder = tnp_core_2._.first(relativePath.replace(/^\//, '')
            .split('/'));
        if (/^tmp\-src(?!\-)/.test(startFolder)) {
            return 'tmp-src';
        }
        if (/^tmp\-src\-/.test(startFolder)) {
            return 'tmp-src-for';
        }
        if (startFolder === 'src') {
            return project.typeIs('isomorphic-lib') ? 'lib' : 'app';
        }
        if (project.typeIs('angular-lib') && startFolder === 'components') {
            return 'lib';
        }
        if (project.isSiteInStrictMode && startFolder === tnp_config_1.config.folder.custom) {
            return tnp_config_1.config.folder.custom + "/" + this.getModType(project, relativePath.replace(startFolder + "/", ''));
        }
    };
    //#endregion
    //#region handle isomorphi-lib and angular-lib in node_modules
    SourceModForStandaloneProjects.prototype.mod3rdPartyLibsReferces = function (input, modType, relativePath) {
        var _this = this;
        var method = 'standalone';
        var folders = tslib_1.__spreadArrays(this.foldersSources, this.foldersCompiledJsDtsMap);
        var children = this.project.isWorkspaceChildProject ?
            this.project.parent.childrenThatAreThirdPartyInNodeModules
            : this.project.childrenThatAreThirdPartyInNodeModules;
        children.forEach(function (child) {
            var libName = child.name;
            input = source_modifier_helpers_backend_1.impReplace({
                name: "'" + libName + "*whatever*' -> " + libName + " strict solution for standalone libs",
                project: _this.project,
                input: input,
                modType: modType,
                urlParts: new RegExp("" + tnp_helpers_1.Helpers.escapeStringForRegEx(libName) + tnp_config_1.config.regexString.pathPartStringRegex),
                partsReplacements: [libName],
                relativePath: relativePath,
                partsReplacementsOptions: { replaceWhole: true },
                method: method
            });
            if (modType === 'lib' || modType === 'custom/lib' || modType === 'app' || modType === 'custom/app') {
                input = source_modifier_helpers_backend_1.impReplace({
                    name: libName + "/" + folders.join('|\n') + " -> " + libName,
                    project: _this.project,
                    input: input,
                    modType: modType,
                    urlParts: [libName, folders],
                    partsReplacements: [libName],
                    relativePath: relativePath,
                    method: method
                });
            }
            if (modType === 'tmp-src-for') {
                input = source_modifier_helpers_backend_1.impReplace({
                    name: libName + " -> " + libName + "/" + tnp_config_1.config.folder.browser,
                    project: _this.project,
                    input: input,
                    modType: modType,
                    urlParts: [libName],
                    notAllowedAfterSlash: [tnp_config_1.config.folder.browser],
                    partsReplacements: [libName, tnp_config_1.config.folder.browser],
                    relativePath: relativePath,
                    method: method
                });
                input = source_modifier_helpers_backend_1.impReplace({
                    name: libName + "/(" + folders.join('|\n') + ") -> " + libName + "/" + tnp_config_1.config.folder.browser,
                    project: _this.project,
                    input: input,
                    modType: modType,
                    urlParts: [libName, folders],
                    partsReplacements: [libName, tnp_config_1.config.folder.browser],
                    relativePath: relativePath,
                    method: method
                });
            }
            if (modType === 'tmp-src' && _this.project.typeIsNot('isomorphic-lib')) {
                input = source_modifier_helpers_backend_1.impReplace({
                    name: libName + " -> " + libName + "/" + tnp_config_1.config.folder.browser,
                    project: _this.project,
                    input: input,
                    modType: modType,
                    urlParts: [libName],
                    notAllowedAfterSlash: [tnp_config_1.config.folder.browser],
                    partsReplacements: [libName, tnp_config_1.config.folder.browser],
                    relativePath: relativePath,
                    method: method
                });
                input = source_modifier_helpers_backend_1.impReplace({
                    name: libName + "/(" + folders.join('|\n') + ") -> " + libName + "/" + tnp_config_1.config.folder.browser,
                    project: _this.project,
                    input: input,
                    modType: modType,
                    urlParts: [libName, folders],
                    partsReplacements: [libName, tnp_config_1.config.folder.browser],
                    relativePath: relativePath,
                    method: method
                });
            }
        });
        return input;
    };
    return SourceModForStandaloneProjects;
}(abstract_1.FeatureCompilerForProject));
exports.SourceModForStandaloneProjects = SourceModForStandaloneProjects;
//# sourceMappingURL=source-mod-for-standalone-projects.backend.js.map