"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var source_modifier_helpers_backend_1 = require("./source-modifier.helpers.backend");
var source_mod_for_worspace_childs_backend_1 = require("./source-mod-for-worspace-childs.backend");
var SourceModForSite = /** @class */ (function (_super) {
    tslib_1.__extends(SourceModForSite, _super);
    function SourceModForSite() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SourceModForSite.prototype.modSiteChildrenLibsInClient = function (input, modType, relativePath) {
        var _this = this;
        var method = 'site';
        if (!this.project.isSite) {
            // log(`Project is not site: ${this.project.genericName}`);
            return input;
        }
        var chidren = this.project.parent.childrenThatAreLibs;
        var baselineName = this.project.parent.baseline.name;
        chidren.forEach(function (child) {
            var libName = child.name;
            if (modType === 'lib' || modType === 'custom/lib' || modType === 'app' || modType === 'custom/app') {
                //#region find propert source folder for lib
                var sourceFolder_1;
                if (child.typeIs('angular-lib')) {
                    sourceFolder_1 = tnp_config_1.config.folder.components;
                }
                if (child.typeIs('isomorphic-lib')) {
                    sourceFolder_1 = tnp_config_1.config.folder.src;
                }
                //#endregion
                //#region set propert folder (src or components) for angular-lib or isomorphic-lib inside user editable files
                var process_1 = function (compiled) {
                    input = source_modifier_helpers_backend_1.impReplace({
                        name: "\n      " + baselineName + "/" + libName + "/" + compiled.join('|\n') + " -> " + baselineName + "/" + libName + "/" + sourceFolder_1,
                        project: _this.project,
                        input: input,
                        modType: modType,
                        urlParts: [baselineName, libName, compiled],
                        partsReplacements: [baselineName, libName, sourceFolder_1],
                        relativePath: relativePath,
                        method: method
                    });
                };
                var folders = _this.foldersCompiledJsDtsMap;
                process_1(folders);
                folders = _this.project.isStandaloneProject ? [] : _this.project.parent.childrenThatAreClients.map(function (client) {
                    return tnp_helpers_1.Helpers.getBrowserVerPath(client.name);
                });
                process_1(folders);
                //#endregion
            }
            if (modType === 'tmp-src' && _this.project.typeIs('isomorphic-lib') && _this.project.isSiteInStrictMode) {
                //#region find propert source folder for lib
                var sourceFolder_2;
                if (child.typeIs('angular-lib')) {
                    sourceFolder_2 = tnp_config_1.config.folder.components;
                }
                if (child.typeIs('isomorphic-lib')) {
                    sourceFolder_2 = tnp_config_1.config.folder.src;
                }
                //#endregion
                //#region in strict site replace (prefixed with baseline) libname/(any folder) with libname/(proper source folders src|components)
                var process_2 = function (compiled) {
                    input = source_modifier_helpers_backend_1.impReplace({
                        name: "\n      " + baselineName + "/" + libName + "/" + compiled.join('|\n') + " -> " + libName + "/" + sourceFolder_2,
                        project: _this.project,
                        input: input,
                        modType: modType,
                        urlParts: [baselineName, libName, compiled],
                        partsReplacements: [libName, sourceFolder_2],
                        relativePath: relativePath,
                        method: method
                    });
                };
                var folders = _this.foldersSources;
                process_2(folders);
                //#endregion
            }
            if (modType === 'tmp-src' && _this.project.typeIsNot('isomorphic-lib') && _this.project.isSiteInStrictMode) {
                //#region in temp-src folder for angular app in angular-lib replace (prefixed with baseline name) components or src with 'browser-for-client-name folder' or 'components' if lib name is the same
                var process_3 = function (compiled) {
                    if (child.typeIs('angular-lib')) {
                        compiled = compiled.filter(function (f) { return f !== tnp_config_1.config.folder.src; });
                    }
                    ;
                    if (libName === _this.project.name && child.typeIs('angular-lib')) {
                        input = source_modifier_helpers_backend_1.impReplace({
                            name: baselineName + "/" + libName + "/(" + compiled.join('|\n') + ") -> " + tnp_config_1.config.folder.components,
                            project: _this.project,
                            input: input,
                            modType: modType,
                            urlParts: [baselineName, libName, compiled],
                            partsReplacements: [tnp_config_1.config.folder.components],
                            partsReplacementsOptions: {
                                replaceWhole: true
                            },
                            relativePath: relativePath,
                            method: method
                        });
                    }
                    else {
                        var browserForCurrentClient = tnp_helpers_1.Helpers.getBrowserVerPath(_this.project.name);
                        input = source_modifier_helpers_backend_1.impReplace({
                            name: baselineName + "/" + libName + "/(" + compiled.join('|\n') + ") -> " + libName + "/" + browserForCurrentClient,
                            project: _this.project,
                            input: input,
                            modType: modType,
                            urlParts: [baselineName, libName, compiled],
                            partsReplacements: [libName, browserForCurrentClient],
                            relativePath: relativePath,
                            method: method
                        });
                    }
                };
                var folders = tslib_1.__spreadArrays(_this.foldersSources, _this.foldersCompiledJsDtsMap);
                process_3(folders);
                folders = _this.project.isStandaloneProject ? [] : _this.project.parent.childrenThatAreClients
                    .map(function (client) {
                    return tnp_helpers_1.Helpers.getBrowserVerPath(client.name);
                });
                process_3(folders);
                //#endregion
            }
            if (['tmp-src', 'tmp-src-for'].includes(modType) && _this.project.isSiteInDependencyMode) {
                //#region  in temporary folders replace (prefixed with baseline name) components or src folder with 'browser-for-client-name folder'
                var process_4 = function (compiled) {
                    if (child.typeIs('angular-lib')) {
                        compiled = compiled.filter(function (f) { return f !== tnp_config_1.config.folder.src; });
                    }
                    ;
                    var browserForCurrentClient = tnp_helpers_1.Helpers.getBrowserVerPath(_this.project.name);
                    input = source_modifier_helpers_backend_1.impReplace({
                        name: baselineName + "/" + libName + "/(" + compiled.join('|\n') + ") -> " + baselineName + "/" + libName + "/" + browserForCurrentClient,
                        project: _this.project,
                        input: input,
                        modType: modType,
                        urlParts: [baselineName, libName, compiled],
                        partsReplacements: [baselineName, libName, browserForCurrentClient],
                        relativePath: relativePath,
                        method: method
                    });
                };
                var folders = tslib_1.__spreadArrays(_this.foldersSources, _this.foldersCompiledJsDtsMap);
                process_4(folders);
                folders = _this.project.isStandaloneProject ? [] : _this.project.parent.childrenThatAreClients
                    .map(function (client) {
                    return tnp_helpers_1.Helpers.getBrowserVerPath(client.name);
                });
                process_4(folders);
            }
            //#endregion
        });
        return input;
    };
    return SourceModForSite;
}(source_mod_for_worspace_childs_backend_1.SourceModForWorkspaceChilds));
exports.SourceModForSite = SourceModForSite;
//# sourceMappingURL=source-mod-for-site.backend.js.map