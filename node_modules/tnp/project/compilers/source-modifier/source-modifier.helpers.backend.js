"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
function impReplace(impReplaceOptions) {
    var input = impReplaceOptions.input, name = impReplaceOptions.name, urlParts = impReplaceOptions.urlParts, modType = impReplaceOptions.modType, notAllowedAfterSlash = impReplaceOptions.notAllowedAfterSlash, partsReplacementsOptions = impReplaceOptions.partsReplacementsOptions, debugMatch = impReplaceOptions.debugMatch, debugNotMatch = impReplaceOptions.debugNotMatch;
    var partsReplacements = impReplaceOptions.partsReplacements, project = impReplaceOptions.project, relativePath = impReplaceOptions.relativePath;
    if (!partsReplacementsOptions) {
        partsReplacementsOptions = {};
    }
    if (tnp_core_1._.isUndefined(partsReplacementsOptions.replaceWhole)) {
        partsReplacementsOptions.replaceWhole = false;
    }
    var replaceWhole = partsReplacementsOptions.replaceWhole;
    name = name.replace(/\n/g, ' ');
    var urlPartsString;
    if (urlParts instanceof RegExp) {
        urlPartsString = urlParts.source;
        // Helpers.log(`regex urlPartsString: "${urlPartsString}"`)
    }
    else {
        urlParts = urlParts.map(function (p) {
            if (tnp_core_1._.isArray(p)) {
                return "(" + p
                    .map(function (part) {
                    if (part === tnp_config_1.config.folder.browser) {
                        return tnp_helpers_1.Helpers.escapeStringForRegEx(part) + "(?!\\-)";
                    }
                    return tnp_helpers_1.Helpers.escapeStringForRegEx(part);
                }).join('|') + ")";
            }
            if (tnp_core_1._.isString(p)) {
                return tnp_helpers_1.Helpers.escapeStringForRegEx(p);
            }
        });
        urlPartsString = urlParts.join("\\/");
    }
    if (tnp_core_1._.isArray(notAllowedAfterSlash)) {
        notAllowedAfterSlash = notAllowedAfterSlash.map(function (p) {
            if (tnp_core_1._.isArray(p)) {
                return "(" + p
                    .map(function (part) {
                    return tnp_helpers_1.Helpers.escapeStringForRegEx(part);
                }).join('|') + ")";
            }
            if (tnp_core_1._.isString(p)) {
                return tnp_helpers_1.Helpers.escapeStringForRegEx(p);
            }
        });
    }
    modType = modType ? modType : 'BROWSER';
    var arr = [];
    if (replaceWhole) {
        arr = [
            {
                regexSource: "(\\\"|\\')" + urlPartsString + ".*(\\\"|\\')",
                replacement: "'" + partsReplacements.join('/') + "'",
                description: "exactly between whole imporrt"
            }
        ];
    }
    else {
        arr = [
            {
                regexSource: "(\\\"|\\')" + urlPartsString + "(\\\"|\\')",
                replacement: "'" + partsReplacements.join('/') + "'",
                description: "exactly between apostrophes"
            },
            {
                regexSource: "(\\\"|\\')" + urlPartsString + "\\/" + (notAllowedAfterSlash ? "(?!(" + notAllowedAfterSlash.join('|') + "))" : ''),
                replacement: "'" + partsReplacements.join('/') + "/",
                description: "between apostrophe and slash"
            },
        ];
    }
    for (var index = 0; index < arr.length; index++) {
        var element = arr[index];
        var regex = new RegExp(element.regexSource, 'g');
        var isMatch = regex.test(input);
        input = tnp_helpers_1.Helpers.tsCodeModifier.replace(input, regex, element.replacement);
        if (isMatch) {
            debugMatch && tnp_helpers_1.Helpers.info("(" + modType + ")(" + (project.isSite ? 'SITE - ' :
                '') + "\"" + project.genericName + "\") (" + element.description + ")" +
                ("\nMATCH: " + element.regexSource) +
                ("\nREGEX: " + element.regexSource)) +
                ("\nFILE: " + relativePath + "\n");
        }
        else {
            debugNotMatch && tnp_helpers_1.Helpers.log("(" + modType + ")(" + (project.isSite ? 'SITE - ' :
                '') + "\"" + project.genericName + "\") (" + element.description + ")" +
                ("\nDON'T MATCH: " + element.regexSource) +
                ("\nDON'T REGEX: " + element.regexSource)) +
                ("\nFILE: " + relativePath + "\n");
        }
    }
    return input;
}
exports.impReplace = impReplace;
//# sourceMappingURL=source-modifier.helpers.backend.js.map