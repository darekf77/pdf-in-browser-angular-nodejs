"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var source_mod_for_standalone_projects_backend_1 = require("./source-mod-for-standalone-projects.backend");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var source_modifier_helpers_backend_1 = require("./source-modifier.helpers.backend");
var SourceModForWorkspaceChilds = /** @class */ (function (_super) {
    tslib_1.__extends(SourceModForWorkspaceChilds, _super);
    function SourceModForWorkspaceChilds() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SourceModForWorkspaceChilds.prototype.modWorkspaceChildrenLibsBetweenItself = function (input, modType, relativePath) {
        var _this = this;
        var method = 'baseline';
        var childrenLibs = this.project.parent.childrenThatAreLibs;
        childrenLibs.forEach(function (child) {
            var libName = child.name;
            if (['lib', 'custom/lib', 'app', 'custom/app',].includes(modType)) {
                //#region  find propert source folder for lib
                var sourceFolder_1;
                if (child.typeIs('angular-lib')) {
                    sourceFolder_1 = tnp_config_1.config.folder.components;
                }
                if (child.typeIs('isomorphic-lib')) {
                    sourceFolder_1 = tnp_config_1.config.folder.src;
                }
                //#endregion
                //#region replace libname/(dist|bundle|browser|browser-for..etc..) ->  libname/(src|components) for user visible code
                var process_1 = function (compiledFolders) {
                    input = source_modifier_helpers_backend_1.impReplace({
                        name: libName + "/" + compiledFolders.join('|\n') + " -> " + libName + "/(" + sourceFolder_1 + ")",
                        project: _this.project,
                        input: input,
                        modType: modType,
                        urlParts: [libName, compiledFolders],
                        partsReplacements: [libName, sourceFolder_1],
                        relativePath: relativePath,
                        method: method
                    });
                };
                var folders = _this.foldersCompiledJsDtsMap;
                process_1(folders);
                if (!_this.project.isStandaloneProject) {
                    folders = _this.project.parent.childrenThatAreClients.map(function (client) {
                        return tnp_helpers_1.Helpers.getBrowserVerPath(client.name);
                    });
                    process_1(folders);
                }
                //#endregion
            }
            if (['tmp-src-for'].includes(modType)) {
                //#region fix for tmp-src-for when refering to browser-for-wrong-client-name
                var clientName = relativePath.split('/')[0];
                clientName = clientName.replace("tmp-src-dist-browser-for-", '');
                var browserForCurrentClient_1 = tnp_helpers_1.Helpers.getBrowserVerPath(clientName);
                var process_2 = function (compiled) {
                    // console.log(`${libName}/${compiled.join('|\n')} -> ${libName}/${browserForCurrentClient}`)
                    input = source_modifier_helpers_backend_1.impReplace({
                        name: libName + "/" + compiled.join('|\n') + " -> " + libName + "/" + browserForCurrentClient_1,
                        project: _this.project,
                        input: input,
                        modType: modType,
                        urlParts: [libName, compiled],
                        partsReplacements: [libName, browserForCurrentClient_1],
                        relativePath: relativePath,
                        method: method
                    });
                };
                process_2(_this.foldersSources);
                //#endregion
            }
            if (['tmp-src'].includes(modType) && _this.project.typeIs('angular-lib')) {
                //#region replace libname/(<anything>) => libname/browser-for-<current-client-name>
                var process_3 = function (compiled) {
                    if (libName === _this.project.name) {
                        input = source_modifier_helpers_backend_1.impReplace({
                            name: libName + "/" + compiled.join('|\n') + " -> " + tnp_config_1.config.folder.components,
                            project: _this.project,
                            input: input,
                            modType: modType,
                            urlParts: [libName, compiled],
                            partsReplacements: [tnp_config_1.config.folder.components],
                            relativePath: relativePath,
                            method: method
                        });
                    }
                    else {
                        var browserForCurrentClient = tnp_helpers_1.Helpers.getBrowserVerPath(_this.project.name);
                        input = source_modifier_helpers_backend_1.impReplace({
                            name: libName + "/" + compiled.join('|\n') + " -> " + libName + "/" + browserForCurrentClient,
                            project: _this.project,
                            input: input,
                            modType: modType,
                            urlParts: [libName, compiled],
                            partsReplacements: [libName, browserForCurrentClient],
                            relativePath: relativePath,
                            method: method
                        });
                    }
                };
                var folders = tslib_1.__spreadArrays(_this.foldersSources, _this.foldersCompiledJsDtsMap);
                process_3(folders);
                folders = _this.project.isStandaloneProject ? [] : _this.project.parent.childrenThatAreClients
                    .filter(function (f) { return f.name !== _this.project.name; })
                    .map(function (client) {
                    return tnp_helpers_1.Helpers.getBrowserVerPath(client.name);
                });
                process_3(folders);
                //#endregion
            }
        });
        return input;
    };
    /**
     * ONLY FOR BROWSER CODE CUT
     */
    SourceModForWorkspaceChilds.prototype.replaceBaslieneFromSiteBeforeBrowserCodeCut = function (input) {
        // run before browser codecut/compilation
        var _this = this;
        if (this.project.isSiteInStrictMode) {
            var baselineName = this.project.parent.baseline.name;
            var regexSource = "(\\\"|\\')" + tnp_helpers_1.Helpers.escapeStringForRegEx(baselineName) + "\\/";
            var regex = new RegExp(regexSource, 'g');
            input = tnp_helpers_1.Helpers.tsCodeModifier.replace(input, regex, "'");
        }
        if (this.project.isSiteInDependencyMode) {
            var baselineName_1 = this.project.parent.baseline.name;
            var libs = this.project.parent.childrenThatAreLibs
                .map(function (c) { return tnp_helpers_1.Helpers.escapeStringForRegEx(c.name); }).join('|');
            var sourceFolders_1 = [
                tnp_config_1.config.folder.components,
                tnp_config_1.config.folder.src,
                tnp_config_1.config.folder.dist,
                tnp_config_1.config.folder.bundle,
            ].map(function (c) { return tnp_helpers_1.Helpers.escapeStringForRegEx(c); }).join('|');
            var regexSource = "(\\\"|\\')" + tnp_helpers_1.Helpers.escapeStringForRegEx(baselineName_1) + "\\/" + libs + "\\/" + sourceFolders_1;
            var regex = new RegExp(regexSource, 'g');
            var libsDetected = input.match(regex);
            libsDetected = (libsDetected ? (libsDetected
                .map(function (part) {
                part = part.slice(1);
                var split = part.split('/');
                if (split.length !== 3) {
                    return void 0;
                }
                return part[1];
            }).filter(function (f) { return !!f; })) : []);
            libsDetected.forEach(function (libName) {
                var libNamEscaped = tnp_helpers_1.Helpers.escapeStringForRegEx(libName);
                var regexSourceForLib = "(\\\"|\\')" + tnp_helpers_1.Helpers.escapeStringForRegEx(baselineName_1) + "\\/" + libNamEscaped + "\\/" + sourceFolders_1;
                var regexForLib = new RegExp(regexSourceForLib, 'g');
                var browserForClientName = tnp_helpers_1.Helpers.getBrowserVerPath(_this.project.name);
                input = tnp_helpers_1.Helpers.tsCodeModifier.replace(input, regexForLib, "'" + baselineName_1 + "/" + libName + "/" + browserForClientName);
            });
        }
        return input;
    };
    return SourceModForWorkspaceChilds;
}(source_mod_for_standalone_projects_backend_1.SourceModForStandaloneProjects));
exports.SourceModForWorkspaceChilds = SourceModForWorkspaceChilds;
//# sourceMappingURL=source-mod-for-worspace-childs.backend.js.map