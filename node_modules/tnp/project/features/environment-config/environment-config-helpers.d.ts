import { ConfigModels } from 'tnp-config';
import { Models } from 'tnp-models';
import { Project } from '../../abstract';
export declare const tmpEnvironmentFileName: string;
export declare function err(workspaceConfig: Models.env.EnvConfig, fileContent: string, pathToConfig: string): void;
export declare function validateEnvConfig(workspaceConfig: Models.env.EnvConfig, filePath: string, isStandalone?: boolean): void;
export interface OverridePortType {
    workspaceProjectLocation: string;
    workspaceConfig: Models.env.EnvConfig;
}
export declare function handleProjectsPorts(project: Project, configProject: Models.env.EnvConfigProject, generatePorts: any): Promise<void>;
export declare function overrideWorksapceRouterPort(options: OverridePortType, generatePorts?: boolean): Promise<void>;
export declare function overrideDefaultPortsAndWorkspaceConfig(options: OverridePortType, generatePorts?: boolean): Promise<void>;
export declare function saveConfigWorkspca(project: Project, workspaceConfig: Models.env.EnvConfig): void;
export declare const existedConfigs: {
    [x: string]: Models.env.EnvConfig;
};
export declare function standaloneConfigBy(standaloneProject: Project, environment: ConfigModels.EnvironmentName): Promise<Models.env.EnvConfig>;
export declare function workspaceConfigBy(workspace: Project, environment: ConfigModels.EnvironmentName): Promise<Models.env.EnvConfig>;
