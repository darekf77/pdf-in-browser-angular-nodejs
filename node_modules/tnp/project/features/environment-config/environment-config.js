"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_core_4 = require("tnp-core");
var chalk_1 = require("chalk");
var environment_config_helpers_1 = require("./environment-config-helpers");
var abstract_1 = require("../../abstract");
//#endregion
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
//#region @backend
var environmentWithGeneratedIps = ['prod', 'stage'];
var EnvironmentConfig = /** @class */ (function (_super) {
    tslib_1.__extends(EnvironmentConfig
    //#region @backend
    , _super);
    function EnvironmentConfig() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(EnvironmentConfig.prototype, "isChildProjectWithoutConfig", {
        //#region @backend
        /**
         * Avaliable for worksapce and children
         * Use only for workspace things
         * QUICK_FIX? remove children config links
         */
        get: function () {
            var f = tnp_core_2.path.join(this.project.location, environment_config_helpers_1.tmpEnvironmentFileName);
            return !tnp_core_1.fse.existsSync(f);
        },
        enumerable: true,
        configurable: true
    });
    EnvironmentConfig.prototype.updateData = function (config) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (this.project.isStandaloneProject && this.project.isGenerated) {
                    return [2 /*return*/];
                }
                config = !!config ? config : this.project.env.config;
                if (this.project.git.isGitRepo) {
                    config.build = {
                        number: this.project.git.countComits(),
                        date: this.project.git.lastCommitDate(),
                        hash: this.project.git.lastCommitHash(),
                        options: {
                            isWatchBuild: this.project.buildOptions.watch,
                            outDir: this.project.buildOptions.outDir,
                        }
                    };
                }
                environment_config_helpers_1.saveConfigWorkspca(this.project, config);
                return [2 /*return*/];
            });
        });
    };
    EnvironmentConfig.prototype.init = function (args, overridePortsOnly) {
        if (overridePortsOnly === void 0) { overridePortsOnly = void 0; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var workspaceProjectLocation, initFromScratch, _a, generateIps, env, environmentName, configResult, configResult, envTempFileExists, workspaceBaseUrl;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.project.isStandaloneProject && this.project.isGenerated) {
                            return [2 /*return*/];
                        }
                        if (!this.project.isStandaloneProject) return [3 /*break*/, 1];
                        return [3 /*break*/, 7];
                    case 1:
                        initFromScratch = (!this.project.env.config ||
                            (this.project.isWorkspaceChildProject && !this.project.parent.env.config));
                        overridePortsOnly = !tnp_core_3._.isUndefined(overridePortsOnly) ? overridePortsOnly : !initFromScratch;
                        if (!initFromScratch) {
                            tnp_helpers_1.Helpers.log("Config alredy " + chalk_1.default.bold('init') + "ed tnp. " + 'Environment for' + " "
                                + ((this.project.isGenerated ? chalk_1.default.bold('(generated)') : '') + " ")
                                + (chalk_1.default.green(chalk_1.default.bold(this.project.genericName)) + ": " + chalk_1.default.bold(this.project.env.config.name)));
                        }
                        if (this.project.isWorkspace) {
                            workspaceProjectLocation = tnp_core_2.path.join(this.project.location);
                        }
                        else if (this.project.isWorkspaceChildProject) {
                            workspaceProjectLocation = tnp_core_2.path.join(this.project.parent.location);
                        }
                        if (!(this.project.isWorkspaceChildProject && this.isChildProjectWithoutConfig)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.project.parent.env.init(args, overridePortsOnly)];
                    case 2:
                        _b.sent();
                        this.project.parent.filesTemplatesBuilder.rebuild();
                        _b.label = 3;
                    case 3:
                        if (!this.project.isWorkspaceChildProject) return [3 /*break*/, 6];
                        return [4 /*yield*/, environment_config_helpers_1.overrideWorksapceRouterPort({ workspaceProjectLocation: workspaceProjectLocation, workspaceConfig: this.config }, false)];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, environment_config_helpers_1.overrideDefaultPortsAndWorkspaceConfig({ workspaceProjectLocation: workspaceProjectLocation, workspaceConfig: this.config }, false)];
                    case 5:
                        _b.sent();
                        _b.label = 6;
                    case 6:
                        if (!this.project.isWorkspace) {
                            return [2 /*return*/];
                        }
                        _b.label = 7;
                    case 7:
                        _a = tnp_core_3._.isString(args) ? require('minimist')(args.split(' ')) : { generateIps: false }, generateIps = _a.generateIps, env = _a.env;
                        environmentName = (tnp_core_3._.isString(env) && env.trim() !== '') ? env : 'local';
                        if (!this.project.isStandaloneProject) return [3 /*break*/, 9];
                        return [4 /*yield*/, environment_config_helpers_1.standaloneConfigBy(this.project, environmentName)];
                    case 8:
                        configResult = _b.sent();
                        return [3 /*break*/, 11];
                    case 9: return [4 /*yield*/, environment_config_helpers_1.workspaceConfigBy(this.project, environmentName)];
                    case 10:
                        configResult = _b.sent();
                        _b.label = 11;
                    case 11:
                        configResult.name = environmentName;
                        configResult.dynamicGenIps = (environmentWithGeneratedIps.includes(configResult.name)) || generateIps;
                        if (!this.project.isStandaloneProject) return [3 /*break*/, 12];
                        return [3 /*break*/, 15];
                    case 12: return [4 /*yield*/, environment_config_helpers_1.overrideWorksapceRouterPort({ workspaceProjectLocation: workspaceProjectLocation, workspaceConfig: configResult })];
                    case 13:
                        _b.sent();
                        return [4 /*yield*/, environment_config_helpers_1.overrideDefaultPortsAndWorkspaceConfig({ workspaceProjectLocation: workspaceProjectLocation, workspaceConfig: configResult })];
                    case 14:
                        _b.sent();
                        envTempFileExists = tnp_core_1.fse.existsSync(tnp_core_2.path.join(this.project.location, tnp_config_1.config.file.tnpEnvironment_json));
                        if (overridePortsOnly && envTempFileExists) {
                            tnp_helpers_1.Helpers.log('Only ports overriding.. ');
                            return [2 /*return*/];
                        }
                        _b.label = 15;
                    case 15:
                        configResult.isCoreProject = this.project.isCoreProject;
                        if (!configResult.ip) {
                            configResult.ip = 'localhost';
                        }
                        else {
                            if (tnp_core_3._.isString(configResult.ip)) {
                                configResult.ip = configResult.ip.replace(/^https?:\/\//, '');
                            }
                            if (!tnp_helpers_1.Helpers.isValidIp(configResult.ip)) {
                                tnp_helpers_1.Helpers.error("Bad ip address in your environment .json config", true);
                                environment_config_helpers_1.err(configResult, void 0, this.project.location);
                            }
                        }
                        if (tnp_core_3._.isString(configResult.domain)) {
                            configResult.domain = configResult.domain.replace(/\/$/, '');
                            configResult.domain = configResult.domain.replace(/^https?:\/\//, '');
                        }
                        configResult.packageJSON = this.project.packageJson.data;
                        // config.frameworks = this.project.frameworks;
                        // console.log(`this.project.frameworks for ${this.project.genericName}`, this.project.frameworks)
                        // process.exit(0)
                        if (this.project.isStandaloneProject) {
                        }
                        else {
                            if (!configResult.workspace || !configResult.workspace.workspace) {
                                tnp_helpers_1.Helpers.error("You shoud define 'workspace' object inside config.workspace object", true);
                                environment_config_helpers_1.err(configResult, void 0, this.project.location);
                            }
                            if (configResult.name === 'local' || !configResult.domain) {
                                configResult.workspace.workspace.host =
                                    "http://" + configResult.ip + ":" + configResult.workspace.workspace.port;
                            }
                            else {
                                workspaceBaseUrl = tnp_core_3._.isString(configResult.workspace.workspace.baseUrl) ? configResult.workspace.workspace.baseUrl : '';
                                configResult.workspace.workspace.host =
                                    "https://" + configResult.domain + workspaceBaseUrl;
                            }
                            configResult.workspace.workspace.host = configResult.workspace.workspace.host.replace(/\/$/, '');
                            configResult.workspace.projects.forEach(function (p) {
                                if (configResult.name === 'local') {
                                    p.host = "http://" + configResult.ip + ":" + p.port;
                                }
                                else {
                                    p.host = "" + configResult.workspace.workspace.host + p.baseUrl;
                                }
                            });
                        }
                        return [4 /*yield*/, this.updateData(configResult)];
                    case 16:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(EnvironmentConfig.prototype, "configsFromJs", {
        get: function () {
            //#region @backendFunc
            var p = this.project.isWorkspaceChildProject ? this.project.parent : this.project;
            var locations = tnp_core_4.glob.sync(p.location + "/*" + tnp_config_1.config.file.environment + ".*js");
            var configs = locations.map(function (l) {
                var c;
                try {
                    var jsFileName = l.replace(/\.js$/, '');
                    c = tnp_helpers_1.Helpers.require(jsFileName).config;
                    if (tnp_core_2.path.basename(jsFileName).split('.').length === 2) {
                        c.name = tnp_core_2.path.basename(jsFileName).split('.')[1];
                    }
                    else {
                        c.name = 'local';
                    }
                    // console.log('cdddd', c.domain)
                }
                catch (error) {
                }
                return tnp_core_3._.cloneDeep(c);
            }).filter(function (c) { return !!c; });
            return configs;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EnvironmentConfig.prototype, "config", {
        /**
         * Can be accesed only after env.prepare()
         */
        get: function () {
            if (tnp_helpers_1.Helpers.isBrowser) {
                return this.browser.config;
            }
            //#region @backend
            var configPath = tnp_core_2.path.resolve(tnp_core_2.path.join(this.project.location, environment_config_helpers_1.tmpEnvironmentFileName));
            if (tnp_core_1.fse.existsSync(configPath)) {
                var res = tnp_core_1.fse.readJsonSync(configPath);
                EnvironmentConfig.configs[configPath] = res;
                return res;
            }
            else {
                global.globalSystemToolMode && tnp_helpers_1.Helpers.warn("confg doesnt exist: " + configPath);
                return EnvironmentConfig.configs[configPath];
            }
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    EnvironmentConfig.configs = {};
    return EnvironmentConfig;
}(abstract_1.FeatureForProject
//#endregion
));
exports.EnvironmentConfig = EnvironmentConfig;
//# sourceMappingURL=environment-config.js.map