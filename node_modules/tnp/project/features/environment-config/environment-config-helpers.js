"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var chalk_1 = require("chalk");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var proxy_router_1 = require("../proxy-router");
var abstract_1 = require("../../abstract");
var example_environment_config_1 = require("./example-environment-config");
exports.tmpEnvironmentFileName = tnp_config_1.config.file.tnpEnvironment_json;
function err(workspaceConfig, fileContent, pathToConfig) {
    var configString = fileContent ? fileContent : "\n  ...\n" + chalk_1.default.bold(JSON.stringify(workspaceConfig, null, 4)) + "\n  ...\n  ";
    tnp_helpers_1.Helpers.error("Please follow worksapce environment config schema:\n\n" + tnp_helpers_1.Helpers.terminalLine() + "\n  let { config } = require('tnp').default;\n\n  config = " + chalk_1.default.bold(JSON.stringify(example_environment_config_1.config, null, 4)) + "\n\n  module.exports = exports = { config };\n" + tnp_helpers_1.Helpers.terminalLine() + "\n\nYour config (" + pathToConfig + ") :\n" + tnp_helpers_1.Helpers.terminalLine() + "\n" + configString + "\n" + tnp_helpers_1.Helpers.terminalLine() + "\n", false, true);
}
exports.err = err;
function validateEnvConfig(workspaceConfig, filePath, isStandalone) {
    if (isStandalone === void 0) { isStandalone = false; }
    if (!tnp_core_1._.isObject(workspaceConfig)) {
        err(undefined, tnp_helpers_1.Helpers.readFile(filePath), filePath);
    }
    if (isStandalone) {
    }
    else {
        if (!tnp_core_1._.isObject(tnp_core_1._.get(workspaceConfig, 'workspace')))
            err(workspaceConfig, void 0, filePath);
        if (!tnp_core_1._.isArray(tnp_core_1._.get(workspaceConfig, 'workspace.projects')))
            err(workspaceConfig, void 0, filePath);
        workspaceConfig.workspace.projects.forEach(function (p) {
            if (tnp_core_1._.isUndefined(p.name))
                err(workspaceConfig, void 0, filePath);
            if (tnp_core_1._.isUndefined(p.port))
                err(workspaceConfig, void 0, filePath);
            if (tnp_core_1._.isUndefined(p.baseUrl))
                err(workspaceConfig, void 0, filePath);
        });
        if (tnp_core_1._.isUndefined(tnp_core_1._.get(workspaceConfig, 'workspace.build'))) {
            workspaceConfig.workspace.build = {
                browser: {
                    aot: false,
                    minify: false,
                    production: false
                },
                server: {
                    minify: false,
                    production: false
                }
            };
        }
        if (!tnp_core_1._.isObject(tnp_core_1._.get(workspaceConfig, 'workspace.build'))) {
            err(workspaceConfig, void 0, filePath);
        }
    }
}
exports.validateEnvConfig = validateEnvConfig;
function handleProjectsPorts(project, configProject, generatePorts) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var port, port;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!generatePorts) return [3 /*break*/, 2];
                    return [4 /*yield*/, proxy_router_1.ProxyRouter.getFreePort()];
                case 1:
                    port = _a.sent();
                    // console.log(`Overrided/Generated port from ${project.getDefaultPort()} to ${port} in project: ${project.name}`)
                    project.setDefaultPort(port);
                    configProject.port = port;
                    return [3 /*break*/, 3];
                case 2:
                    port = Number(configProject.port);
                    if (!isNaN(port)) {
                        if (port != project.getDefaultPort()) {
                            // console.log(`Overrided port from ${project.getDefaultPort()} to ${port} in project: ${project.name}`)
                        }
                        project.setDefaultPort(port);
                    }
                    else {
                        project.setDefaultPortByType();
                        // console.log(`Default port ${project.getDefaultPort()} is set to project: ${project.name}`)
                    }
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    });
}
exports.handleProjectsPorts = handleProjectsPorts;
function overrideWorksapceRouterPort(options, generatePorts) {
    if (generatePorts === void 0) { generatePorts = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var workspaceProjectLocation, workspaceConfig, project, configProject;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    workspaceProjectLocation = options.workspaceProjectLocation, workspaceConfig = options.workspaceConfig;
                    if (!workspaceConfig || !workspaceConfig.workspace || !workspaceConfig.workspace.workspace) {
                        err(workspaceConfig, void 0, "overrideWorksapceRouterPort - " + options.workspaceProjectLocation);
                    }
                    project = abstract_1.Project.From(workspaceProjectLocation);
                    if (project === undefined) {
                        tnp_helpers_1.Helpers.error("Router (worksapce) port is not defined in your environment.js ");
                    }
                    configProject = workspaceConfig.workspace.workspace;
                    return [4 /*yield*/, handleProjectsPorts(project, configProject, generatePorts && workspaceConfig.dynamicGenIps)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.overrideWorksapceRouterPort = overrideWorksapceRouterPort;
function overrideDefaultPortsAndWorkspaceConfig(options, generatePorts) {
    if (generatePorts === void 0) { generatePorts = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var workspaceProjectLocation, workspaceConfig, i, configProject, project;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    workspaceProjectLocation = options.workspaceProjectLocation, workspaceConfig = options.workspaceConfig;
                    workspaceConfig.workspace.workspace.port;
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < workspaceConfig.workspace.projects.length)) return [3 /*break*/, 4];
                    configProject = workspaceConfig.workspace.projects[i];
                    project = abstract_1.Project.From(tnp_core_2.path.join(workspaceProjectLocation, configProject.name));
                    if (project === undefined) {
                        tnp_helpers_1.Helpers.error("Undefined project \"" + configProject.name + "\" inside environment.js workpace.projects", false, true);
                    }
                    return [4 /*yield*/, handleProjectsPorts(project, configProject, generatePorts && workspaceConfig.dynamicGenIps)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.overrideDefaultPortsAndWorkspaceConfig = overrideDefaultPortsAndWorkspaceConfig;
function frontendCuttedVersion(workspaceConfig) {
    var c = tnp_core_1._.cloneDeep(workspaceConfig);
    // walk.Object(c, (lodashPath, isPrefixed) => { // TODO CUT PREFIXED!!!!
    //   if (isPrefixed) {
    //     _.set(c, lodashPath, null)
    //   }
    // })
    return c;
}
function getPort(project, workspaceConfig) {
    var _a, _b, _c;
    var env;
    if (project.isWorkspace) {
        env = (_a = workspaceConfig.workspace) === null || _a === void 0 ? void 0 : _a.workspace;
    }
    else {
        env = (_c = (_b = workspaceConfig.workspace) === null || _b === void 0 ? void 0 : _b.projects) === null || _c === void 0 ? void 0 : _c.find(function (p) { return p.name === project.name; });
    }
    var envPort = env === null || env === void 0 ? void 0 : env.port;
    return tnp_core_1._.isNumber(envPort) ? envPort : project.getDefaultPort();
}
function saveConfigWorkspca(project, workspaceConfig) {
    workspaceConfig.currentProjectName = project.name;
    workspaceConfig.currentProjectPort = getPort(project, workspaceConfig);
    workspaceConfig.currentProjectLaunchConfiguration = project.temlateOfLaunchJSON(workspaceConfig);
    workspaceConfig.currentProjectTasksConfiguration = project.temlateOfTasksJSON(workspaceConfig);
    workspaceConfig.currentProjectType = project._type;
    workspaceConfig.currentFrameworkVersion = abstract_1.Project.Tnp.version;
    workspaceConfig.currentProjectLocation = project.location;
    workspaceConfig.currentProjectIsStrictSite = project.isSiteInStrictMode;
    workspaceConfig.currentProjectIsDependencySite = project.isSiteInDependencyMode;
    workspaceConfig.currentProjectIsStatic = project.isGenerated;
    workspaceConfig.isStandaloneProject = project.isStandaloneProject;
    workspaceConfig.frameworks = project.frameworks;
    if (project.typeIs('angular-lib')) {
        var componentsFolder = "browser" + (project.isStandaloneProject ? '' : "-for-" + project.name);
        workspaceConfig.currentProjectComponentsFolder = componentsFolder;
    }
    var currentLibProjectSourceFolder;
    if (project.typeIs('angular-lib')) {
        currentLibProjectSourceFolder = 'components';
    }
    if (project.typeIs('isomorphic-lib')) {
        currentLibProjectSourceFolder = 'src';
    }
    workspaceConfig.currentLibProjectSourceFolder = currentLibProjectSourceFolder;
    var tmpEnvironmentPath = tnp_core_2.path.join(project.location, exports.tmpEnvironmentFileName);
    if (project.isStandaloneProject) {
        tnp_core_3.fse.writeJSONSync(tmpEnvironmentPath, workspaceConfig, {
            encoding: 'utf8',
            spaces: 2
        });
        tnp_helpers_1.Helpers.log("config saved in standalone project " + chalk_1.default.bold(project.genericName) + " " + tmpEnvironmentPath);
    }
    else if (project.isWorkspace) {
        tnp_core_3.fse.writeJSONSync(tmpEnvironmentPath, workspaceConfig, {
            encoding: 'utf8',
            spaces: 2
        });
        tnp_helpers_1.Helpers.log("config saved in worksapce " + tmpEnvironmentPath);
        project.children.forEach(function (p) {
            saveConfigWorkspca(p, workspaceConfig);
        });
    }
    else if (project.isWorkspaceChildProject) {
        if (project.typeIs('angular-client', 'angular-lib', 'ionic-client', 'docker')) {
            tnp_core_3.fse.writeJSONSync(tmpEnvironmentPath, frontendCuttedVersion(workspaceConfig), {
                encoding: 'utf8',
                spaces: 2
            });
            tnp_helpers_1.Helpers.log("config saved for child " + tmpEnvironmentPath);
        }
        else if (project.typeIs('isomorphic-lib')) {
            tnp_core_3.fse.writeJSONSync(tmpEnvironmentPath, workspaceConfig, {
                encoding: 'utf8',
                spaces: 2
            });
            tnp_helpers_1.Helpers.log("config saved for child " + tmpEnvironmentPath);
        }
        else {
            tnp_helpers_1.Helpers.log("config not needed for child " + tmpEnvironmentPath);
        }
    }
}
exports.saveConfigWorkspca = saveConfigWorkspca;
exports.existedConfigs = {};
function standaloneConfigBy(standaloneProject, environment) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var configStandaloneEnv, envSurfix, pathToProjectEnvironment;
        return tslib_1.__generator(this, function (_a) {
            envSurfix = (environment === 'local') ? '' : "." + environment;
            pathToProjectEnvironment = tnp_core_2.path.join(standaloneProject.location, "" + tnp_config_1.config.file.environment + envSurfix);
            if (!tnp_core_3.fse.existsSync(pathToProjectEnvironment + ".js")) {
                tnp_helpers_1.Helpers.warn("Standalone project " + standaloneProject.location + "\n      ...without environment" + envSurfix + ".js config... creating new... ");
                tnp_helpers_1.Helpers.writeFile(pathToProjectEnvironment + ".js", createExampleConfigFor(standaloneProject));
                tnp_helpers_1.Helpers.tsCodeModifier.formatFile(pathToProjectEnvironment + ".js");
            }
            configStandaloneEnv = tnp_helpers_1.Helpers.require(pathToProjectEnvironment).config;
            validateEnvConfig(configStandaloneEnv, pathToProjectEnvironment + ".js", true);
            exports.existedConfigs[standaloneProject.location] = configStandaloneEnv;
            return [2 /*return*/, configStandaloneEnv];
        });
    });
}
exports.standaloneConfigBy = standaloneConfigBy;
function workspaceConfigBy(workspace, environment) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var configWorkspaceEnv, alreadyExistProject, envSurfix, pathToProjectEnvironment, e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    alreadyExistProject = (workspace && workspace.isWorkspace) ? exports.existedConfigs[workspace.location] : null;
                    // console.log('alreadyExistedWorksapceConfig', alreadyExistedWorksapceConfig)
                    if (!workspace.isWorkspace) {
                        tnp_helpers_1.Helpers.error("Funciton only accessible from workspace type project");
                    }
                    if (!(tnp_core_1._.isObject(alreadyExistProject) && alreadyExistProject !== null)) return [3 /*break*/, 1];
                    configWorkspaceEnv = alreadyExistProject;
                    return [3 /*break*/, 7];
                case 1:
                    envSurfix = (environment === 'local') ? '' : "." + environment;
                    pathToProjectEnvironment = tnp_core_2.path.join(workspace.location, "" + tnp_config_1.config.file.environment + envSurfix);
                    tnp_helpers_1.Helpers.log('pathToProjectEnvironment:' + pathToProjectEnvironment);
                    if (!workspace.isSiteInStrictMode) return [3 /*break*/, 6];
                    if (!!tnp_core_3.fse.existsSync(pathToProjectEnvironment + ".js")) return [3 /*break*/, 6];
                    tnp_helpers_1.Helpers.log("[SITE QUICKFIX] File doesnt exist: " + pathToProjectEnvironment + ".js");
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 5, , 6]);
                    if (!workspace.isSiteInStrictMode) return [3 /*break*/, 4];
                    tnp_helpers_1.Helpers.log('[SITE QUICKFIX] INIT WORKSPACE , BUT RECREATE IT FIRST');
                    return [4 /*yield*/, workspace.join.start("QuickFix basleine/site join for \"" + workspace.genericName + "\"")];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4: return [3 /*break*/, 6];
                case 5:
                    e_1 = _a.sent();
                    tnp_helpers_1.Helpers.error(e_1);
                    return [3 /*break*/, 6];
                case 6:
                    if (!tnp_core_3.fse.existsSync(pathToProjectEnvironment + ".js")) {
                        tnp_helpers_1.Helpers.warn("Workspace " + workspace.location + "\n        ...without environment" + envSurfix + ".js config... creating new... ");
                        tnp_helpers_1.Helpers.writeFile(pathToProjectEnvironment + ".js", createExampleConfigFor(workspace));
                        tnp_helpers_1.Helpers.tsCodeModifier.formatFile(pathToProjectEnvironment + ".js");
                    }
                    try {
                        configWorkspaceEnv = tnp_helpers_1.Helpers.require(pathToProjectEnvironment).config;
                    }
                    catch (err) {
                        tnp_helpers_1.Helpers.error("Error during reading workspace config file " + pathToProjectEnvironment + ".js", false, true);
                    }
                    _a.label = 7;
                case 7:
                    validateEnvConfig(configWorkspaceEnv, pathToProjectEnvironment + ".js");
                    exports.existedConfigs[workspace.location] = configWorkspaceEnv;
                    return [2 /*return*/, configWorkspaceEnv];
            }
        });
    });
}
exports.workspaceConfigBy = workspaceConfigBy;
function createExampleConfigFor(proj) {
    function templetForInfo(project, counter) {
        if (counter === void 0) { counter = 0; }
        return JSON.stringify({
            baseUrl: "/" + project.name,
            name: project.name,
            $db: (project.typeIs('isomorphic-lib')) && {
                database: 'tmp/db.sqlite3',
                type: 'sqlite',
                synchronize: true,
                dropSchema: true,
                logging: false
            },
            port: 9000 + Number(counter)
        }, null, 2)
            .split('\n')
            .map(function (l) {
            // console.log('l  : '+l)
            l = l.trim();
            var cc = l.match(/^\"[a-zA-Z0-9|\$]+\"/);
            var m = (cc ? cc : []).map(function (s) { return s.replace(/\"/g, ""); });
            // if (m.length === 2) {
            var first = tnp_core_1._.first(m);
            if (first) {
                l = l.replace("\"" + first + "\"", "" + first);
            }
            // }
            return l;
        })
            .join('\n');
    }
    var workspacePart = proj.isStandaloneProject ? '' : "\n  workspace: {\n    workspace: {\n      //  baseUrl: \"/" + proj.name + "\",\n      name: \"" + proj.name + "\",\n      port: 5000\n    },\n    projects: [\n      " + proj.children.map(function (c, i) {
        return templetForInfo(c, i);
    }).join(',\n') + "\n    ]\n  }\n  ";
    var configPathRequire = proj.isStandaloneProject ? '{ config: {} }' : "require('tnp/index.js').default";
    return "\n  const path = require('path')\nvar { config } = " + configPathRequire + ";\n\nconfig = {\n\n  domain: '" + proj.name + ".example.domain.com',\n  " + workspacePart + "\n\n}\nmodule.exports = exports = { config };\n  ";
}
//#endregion
//# sourceMappingURL=environment-config-helpers.js.map