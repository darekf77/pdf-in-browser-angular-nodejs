"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var JSON5 = require("json5");
var tnp_core_3 = require("tnp-core");
// local
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var abstract_2 = require("../../abstract");
function getVscodeSettingsFrom(project) {
    var settings;
    var pathSettingsVScode = tnp_core_2.path.join(project.location, '.vscode', 'settings.json');
    if (tnp_helpers_1.Helpers.exists(pathSettingsVScode)) {
        settings = JSON5.parse(tnp_helpers_1.Helpers.readFile(pathSettingsVScode));
    }
    return settings;
}
var FilesRecreator = /** @class */ (function (_super) {
    tslib_1.__extends(FilesRecreator, _super);
    function FilesRecreator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilesRecreator.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                if (this.project.typeIs('container')) {
                    // console.log('GIGIIGIGII')
                    this.gitignore();
                    this.handleProjectSpecyficFiles();
                    return [2 /*return*/];
                }
                this.initAssets();
                this.handleProjectSpecyficFiles();
                this.commonFiles();
                this.gitignore();
                this.npmignore();
                this.customFolder();
                return [2 /*return*/];
            });
        });
    };
    Object.defineProperty(FilesRecreator.prototype, "commonFilesForAllProjects", {
        get: function () {
            return [
                '.npmrc',
                'tslint.json',
                '.editorconfig'
            ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilesRecreator.prototype, "filesIgnoredBy", {
        get: function () {
            var self = this;
            return {
                get vscodeSidebarFilesView() {
                    // const siteFiles = ['src', 'components'];
                    return self.filesIgnoredBy.gitignore
                        .concat([
                        '.gitignore',
                        '.npmignore',
                        '.npmrc',
                        '.babelrc',
                        'package.json_devDependencies.json',
                        'package.json',
                        'docs',
                        'logo.svg',
                    ])
                        .map(function (f) { return f.startsWith('/') ? f.slice(1) : f; });
                    // .filter(f => {
                    //   // console.log('f',siteFiles)
                    //   if (self.project.isSiteInStrictMode && siteFiles.includes(f)) {
                    //     return false
                    //   }
                    //   return true;
                    // })
                },
                get gitignore() {
                    var gitignoreFiles = [
                        tnp_config_1.config.folder.node_modules,
                        'tmp*',
                        'dist*',
                        'bundle*',
                        'browser',
                        'browser*',
                        'module*',
                        'backup',
                        'module',
                        'www'
                    ].concat([
                        'Thumbs.db',
                        '.DS_Store',
                        '**/.DS_Store',
                        'npm-debug.log*'
                    ].concat([
                        '.sass-cache',
                        '.sourcemaps'
                    ])
                        .concat((self.project.isSiteInStrictMode && self.project.isGeneratingControllerEntities) ? [
                        tnp_core_2.path.join(tnp_config_1.config.folder.custom, tnp_config_1.config.folder.src, tnp_config_1.config.file.entities_ts),
                        tnp_core_2.path.join(tnp_config_1.config.folder.custom, tnp_config_1.config.folder.src, tnp_config_1.config.file.controllers_ts)
                    ] : [])
                        .concat(self.project.filesTemplates().map(function (f) { return f.replace('.filetemplate', ''); }))
                        .concat(self.project.typeIs('angular-lib') ? [
                        'components/tsconfig.json',
                        'src/tsconfig.app.json'
                    ] : [])
                        .concat(self.project.linkedFolders
                        .map(function (l) { var _a; return (_a = l.to) === null || _a === void 0 ? void 0 : _a.replace(/^\.\//, ''); })
                        .filter(function (f) { return !!f; }))
                        .concat(// for site ignore auto-generate scr
                    self.project.isSiteInStrictMode ? (self.project.customizableFilesAndFolders
                        .concat(self.project.customizableFilesAndFolders.map(function (f) {
                        return tnp_helpers_1.Helpers.path.PREFIX(f);
                    }))
                        .concat(self.project.customizableFilesAndFolders.map(function (f) {
                        return "!" + tnp_core_2.path.join(tnp_config_1.config.folder.custom, f);
                    }))) : [])).concat(// common files for all project
                    self.project.isCoreProject ? [] : self.commonFilesForAllProjects).concat(// core files of projects types
                    self.project.isCoreProject ? [] : self.project.projectSpecyficFiles().filter(function (f) {
                        return !self.project.recreateIfNotExists().includes(f);
                    })).concat(// core files of projects types
                    !self.project.isCoreProject ? [] : [
                        tnp_config_1.config.folder.src,
                        tnp_config_1.config.folder.components,
                    ].map(function (f) { return f + "-for-stanalone"; }))
                        .concat(self.project.isWorkspaceChildProject ? tslib_1.__spreadArrays(self.assetsToIgnore) : [])
                        .concat((!self.project.isStandaloneProject && !self.project.isCoreProject) ? self.project.projectSpecyficIgnoredFiles() : [])
                        .concat(self.project.isTnp ? ['projects/tmp*'] : []);
                    // .concat(self.project.isContainer ? [
                    //   ...(self.project.children.filter(c => c.git.isGitRepo).map(c => c.name))
                    // ] : []);
                    // console.log('self.project:', self.project.name);
                    // console.log(gitignoreFiles)
                    return gitignoreFiles.map(function (f) { return "/" + tnp_core_1.crossPlatformPath(f); });
                },
                get npmignore() {
                    var _a;
                    var allowedProject = ['isomorphic-lib', 'angular-lib'];
                    var canBeUseAsNpmPackage = (_a = self.project).typeIs.apply(_a, allowedProject);
                    var npmignoreFiles = [
                        '.vscode',
                        'dist/',
                        'src/',
                        '/docs',
                        '/preview',
                        '/tests',
                        'tsconfig.json',
                        'npm-debug.log*'
                    ].concat(self.commonFilesForAllProjects);
                    return npmignoreFiles.map(function (f) { return tnp_core_1.crossPlatformPath(f); });
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    FilesRecreator.prototype.modifyVscode = function (modifyFN) {
        var pathSettingsVScode = tnp_core_2.path.join(this.project.location, '.vscode', 'settings.json');
        if (this.project.isSite) {
            if (!tnp_core_1.fse.existsSync(pathSettingsVScode)) {
                tnp_helpers_1.Helpers.mkdirp(tnp_core_2.path.dirname(pathSettingsVScode));
                var settingsFromBaseline = tnp_core_2.path.join(this.project.baseline.location, '.vscode', 'settings.json');
                if (tnp_core_1.fse.existsSync(settingsFromBaseline)) {
                    tnp_core_1.fse.copyFileSync(settingsFromBaseline, pathSettingsVScode);
                }
            }
        }
        if (tnp_helpers_1.Helpers.exists(pathSettingsVScode)) {
            try {
                var settings_1 = JSON5.parse(tnp_helpers_1.Helpers.readFile(pathSettingsVScode));
                settings_1 = modifyFN(settings_1, this.project);
                tnp_helpers_1.Helpers.writeFile(pathSettingsVScode, settings_1);
            }
            catch (e) {
                tnp_helpers_1.Helpers.log(e);
            }
        }
        else {
            try {
                var settingFromCore = tnp_core_2.path.join(abstract_1.Project.by(this.project._type).location, '.vscode', 'settings.json');
                tnp_helpers_1.Helpers.mkdirp(tnp_core_2.path.dirname(pathSettingsVScode));
                if (tnp_helpers_1.Helpers.exists(settingFromCore)) {
                    var settings = JSON5.parse(tnp_helpers_1.Helpers.readFile(settingFromCore));
                    settings = modifyFN(settings, this.project);
                    tnp_helpers_1.Helpers.writeFile(pathSettingsVScode, settings);
                }
            }
            catch (e) {
                tnp_helpers_1.Helpers.log(e);
            }
        }
    };
    Object.defineProperty(FilesRecreator.prototype, "vscode", {
        get: function () {
            var self = this;
            return {
                get settings() {
                    return {
                        hideOrShowDeps: function () {
                            var action;
                            self.modifyVscode(function (settings) {
                                var exclude = settings['files.exclude'];
                                if (!exclude) {
                                    settings['files.exclude'] = {};
                                }
                                if (Object.keys(settings['files.exclude']).length === 0) {
                                    action = 'show';
                                }
                                else {
                                    action = 'hide';
                                }
                                return settings;
                            });
                            if (action === 'hide') {
                                tnp_helpers_1.Helpers.log("Auto hiding while init");
                                self.vscode.settings.excludedFiles(true);
                            }
                            if (action === 'show') {
                                tnp_helpers_1.Helpers.info("Auto showing while init");
                                self.vscode.settings.excludedFiles(false);
                            }
                        },
                        gitReset: function () {
                            try {
                                self.project.run('git checkout HEAD -- .vscode/settings.json').sync();
                            }
                            catch (e) { }
                        },
                        changeColorTheme: function (white) {
                            if (white === void 0) { white = true; }
                            self.modifyVscode(function (settings) {
                                settings['workbench.colorTheme'] = white ? 'Default Light+' : 'Kimbie Dark';
                                return settings;
                            });
                        },
                        colorsFromWorkspace: function () {
                            self.modifyVscode(function (settings, project) {
                                if (project.isWorkspaceChildProject) {
                                    if (!settings['workbench.colorCustomizations']) {
                                        settings['workbench.colorCustomizations'] = {};
                                    }
                                    // update activity bar color
                                    var parentSettings = getVscodeSettingsFrom(project.parent);
                                    var statuBarColor = parentSettings &&
                                        parentSettings['workbench.colorCustomizations'] &&
                                        parentSettings['workbench.colorCustomizations']['statusBar.background'];
                                    settings['workbench.colorCustomizations']['statusBar.background'] = statuBarColor;
                                    settings['workbench.colorCustomizations']['statusBar.debuggingBackground'] = statuBarColor;
                                    // update background color
                                    if (project.isSite) {
                                        var baselineColor = getVscodeSettingsFrom(project.baseline);
                                        var activityBarBcg = baselineColor &&
                                            baselineColor['workbench.colorCustomizations'] &&
                                            baselineColor['workbench.colorCustomizations']['activityBar.background'];
                                        settings['workbench.colorCustomizations']['activityBar.background'] = activityBarBcg;
                                        settings['workbench.colorCustomizations']['statusBar.background'] = activityBarBcg;
                                    }
                                }
                                return settings;
                            });
                        },
                        excludedFiles: function (hide) {
                            if (hide === void 0) { hide = true; }
                            self.modifyVscode(function (settings) {
                                settings['files.exclude'] = {};
                                var getSettingsFor = function (project, s) {
                                    if (s === void 0) { s = {}; }
                                    s['files.exclude'] = {};
                                    if (project.isVscodeExtension) {
                                        s['files.exclude']["out"] = true;
                                        s['files.exclude']["update-proj.js"] = true;
                                        s['files.exclude'][".vscodeignore"] = true;
                                        s['files.exclude']["*.vsix"] = true;
                                    }
                                    if (project.isTnp) {
                                        project.node_modules.fixesForNodeModulesPackages.forEach(function (p) {
                                            s['files.exclude'][p] = true;
                                        });
                                        // s['files.exclude']["*.js"] = true;
                                        // s['files.exclude']["environment.js"] = false;
                                        s['files.exclude']["*.sh"] = true;
                                        s['files.exclude']["*.xlsx"] = true;
                                        s['files.exclude']["scripts"] = true;
                                        s['files.exclude']["bin"] = true;
                                    }
                                    project.projectLinkedFiles().forEach(function (_a) {
                                        var relativePath = _a.relativePath;
                                        s['files.exclude'][relativePath] = true;
                                    });
                                    self.filesIgnoredBy.vscodeSidebarFilesView.map(function (f) {
                                        s['files.exclude'][f] = true;
                                    });
                                    if (project.isCoreProject) {
                                        s['files.exclude']["**/*.filetemplate"] = true;
                                        s['files.exclude']["**/tsconfig.*"] = true;
                                        s['files.exclude']["tslint.*"] = true;
                                        s['files.exclude']["index.*"] = true;
                                        s['files.exclude']["package-lock.json"] = true;
                                        s['files.exclude']["protractor.conf.js"] = true;
                                        s['files.exclude']["karma.conf.js"] = true;
                                        s['files.exclude'][".editorconfig"] = true;
                                        project.vscodeFileTemplates.forEach(function (f) {
                                            s['files.exclude'][f.replace('.filetemplate', '')] = false;
                                        });
                                    }
                                    return s;
                                };
                                if (hide) {
                                    settings = getSettingsFor(self.project, settings);
                                    if (self.project.isWorkspace) {
                                        self.project.children.forEach(function (c) {
                                            var childernSettings = getSettingsFor(c);
                                            Object.keys(childernSettings['files.exclude']).forEach(function (k) {
                                                settings['files.exclude'][c.name + "/" + k] = childernSettings['files.exclude'][k];
                                            });
                                            settings['files.exclude'][c.name + "/tsconfig*"] = true;
                                            settings['files.exclude'][c.name + "/webpack*"] = true;
                                            settings['files.exclude'][c.name + "/index*"] = true;
                                            settings['files.exclude'][c.name + "/run.js"] = true;
                                            settings['files.exclude'][c.name + "/.vscode"] = true;
                                            settings['files.exclude'][c.name + "/README.md"] = true;
                                            settings['files.exclude'][c.name + "/karma.conf.js*"] = true;
                                            settings['files.exclude'][c.name + "/protractor.conf.js*"] = true;
                                            c.filesTemplates().forEach(function (t) {
                                                settings['files.exclude'][c.name + "/" + t] = true;
                                                settings['files.exclude'][c.name + "/" + t.replace('.filetemplate', '')] = true;
                                            });
                                        });
                                    }
                                }
                                // settings['files.exclude'][config.folder.tmpTestsEnvironments] = false;
                                return settings;
                            });
                        }
                    };
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    FilesRecreator.prototype.customFolder = function () {
        if (this.project.isBasedOnOtherProject) {
            var customFolder = tnp_core_2.path.join(this.project.location, tnp_config_1.config.folder.custom);
            var srcFolder = tnp_core_2.path.join(this.project.location, tnp_config_1.config.folder.src);
            if (!tnp_core_1.fse.existsSync(customFolder)) {
                tnp_helpers_1.Helpers.mkdirp(customFolder);
                tnp_helpers_1.Helpers.mkdirp(srcFolder);
            }
        }
    };
    FilesRecreator.prototype.npmignore = function () {
        tnp_helpers_1.Helpers.writeFile(tnp_core_2.path.join(this.project.location, '.npmignore'), this.filesIgnoredBy.npmignore.join('\n').concat('\n'));
    };
    FilesRecreator.prototype.gitignore = function () {
        var _this = this;
        var coreFiles = !this.project.isCoreProject ? [] : this.project.projectLinkedFiles()
            .map(function (_a) {
            var relativePath = _a.relativePath;
            return "/" + relativePath;
        })
            .join('\n');
        var ignoredByGit = this.filesIgnoredBy
            .gitignore
            .filter(function (f) {
            if (_this.project.isCoreProject && f.endsWith('.filetemplate')) {
                return false;
            }
            return true;
        }).join('\n').concat('\n');
        // console.log(ignoredByGit)
        tnp_helpers_1.Helpers.writeFile(tnp_core_2.path.join(this.project.location, '.gitignore'), "# profiling files\nchrome-profiler-events*.json\nspeed-measure-plugin*.json\n\n# misc\n/.sass-cache\n/connect.lock\n/coverage\n/libpeerconnection.log\nnpm-debug.log\nyarn-error.log\ntestem.log\n/typings\n" + (this.project.isStandaloneProject ? "/" + tnp_config_1.config.folder.testsEnvironments : '') + "\n\n# System Files\n.DS_Store\nThumbs.db\n" + (this.project.isVscodeExtension ? '/*.vsix' : '') + "\n" + (this.project.isVscodeExtension ? '/out' : '') + "\n" + ignoredByGit + ("\n" + (this.project.isTnp ? '!tsconfig*' : '') + "\n" + (this.project.isTnp ? 'webpack.*' : '') + "\n" + (this.project.isContainer ? "\n# container git projects\n" + this.project.packageJson.linkedProjects.map(function (c) { return "/" + tnp_core_1.crossPlatformPath(c); }).join('\n') + "\n" : []) + "\n# =====================\n" + (this.project.isCoreProject ? '!*.filetemplate' : '*.filetemplate') + "\n" + (this.project.isDocker ? '!Dockerfile.filetemplate' : '') + "\n" + coreFiles + "\n\n").trimRight() + '\n');
    };
    FilesRecreator.prototype.handleProjectSpecyficFiles = function () {
        var _this = this;
        var linkedFolder = this.project.linkedFolders;
        linkedFolder.forEach(function (c) {
            var from = tnp_core_2.path.resolve(tnp_core_2.path.join(_this.project.location, c.from));
            var to = tnp_core_2.path.resolve(tnp_core_2.path.join(_this.project.location, c.to));
            if (tnp_helpers_1.Helpers.exists(from) && (to.search(_this.project.location) !== -1)) {
                tnp_helpers_1.Helpers.removeIfExists(to);
                tnp_helpers_1.Helpers.createSymLink(from, to);
                tnp_helpers_1.Helpers.info("Linked folder " + tnp_core_2.path.basename(from) + " to ./" + to.replace(_this.project.location, ''));
            }
            else {
                tnp_helpers_1.Helpers.warn("Not able to link folders:\n        from: " + from + "\n        to: " + to + "\n\n        ");
            }
        });
        var defaultProjectProptotype = abstract_1.Project.by(this.project._type, this.project._frameworkVersion);
        var files = [];
        if (tnp_core_1.crossPlatformPath(this.project.location) === tnp_core_1.crossPlatformPath(defaultProjectProptotype.location)) {
            tnp_helpers_1.Helpers.info("LINKING CORE PROJCET " + this.project.name + " " + this.project._type + " " + this.project._frameworkVersion);
            var toLink = defaultProjectProptotype.projectLinkedFiles();
            toLink.forEach(function (c) {
                tnp_helpers_1.Helpers.info("[LINKING] " + c.relativePath + " from " + c.sourceProject.location + "  ");
                tnp_helpers_1.Helpers.createSymLink(tnp_core_2.path.join(c.sourceProject.location, c.relativePath), tnp_core_2.path.join(_this.project.location, c.relativePath));
            });
        }
        else {
            var projectSpecyficFilesLinked_1 = this.project.projectSpecyficFilesLinked();
            var projectSpecyficFiles = this.project.projectSpecyficFiles();
            projectSpecyficFiles.forEach(function (f) {
                var from = tnp_core_2.path.join(defaultProjectProptotype.location, f);
                if (!tnp_helpers_1.Helpers.exists(from)) {
                    var linked = defaultProjectProptotype.projectLinkedFiles().find(function (a) { return a.relativePath === f; });
                    if (linked) {
                        tnp_helpers_1.Helpers.info("FIXING LINKED");
                        tnp_helpers_1.Helpers.createSymLink(tnp_core_2.path.join(linked.sourceProject.location, linked.relativePath), tnp_core_2.path.join(defaultProjectProptotype.location, f));
                    }
                    else if (defaultProjectProptotype.frameworkVersionAtLeast('v2')) {
                        var core = abstract_1.Project.by(defaultProjectProptotype._type, defaultProjectProptotype.frameworkVersionMinusOne);
                        from = tnp_core_2.path.join(core.location, f);
                    }
                }
                var where = tnp_core_2.path.join(_this.project.location, f);
                if (_this.project.recreateIfNotExists().includes(f) && tnp_helpers_1.Helpers.exists(where)) {
                    return;
                }
                files.push({
                    linked: projectSpecyficFilesLinked_1.includes(f),
                    from: from,
                    where: where,
                });
            });
            files.forEach(function (file) {
                if (file.linked) {
                    tnp_helpers_1.Helpers.info("Linking: " + file.from);
                    tnp_helpers_1.Helpers.createSymLink(file.from, file.where);
                }
                else {
                    tnp_helpers_1.Helpers.copyFile(file.from, file.where);
                }
            });
        }
    };
    FilesRecreator.prototype.commonFiles = function () {
        var _this = this;
        var wokrspace = abstract_1.Project.by('workspace');
        var files = this.commonFilesForAllProjects;
        files.map(function (file) {
            return {
                from: tnp_core_2.path.join(wokrspace.location, file),
                where: tnp_core_2.path.join(_this.project.location, file)
            };
        }).forEach(function (file) {
            tnp_helpers_1.Helpers.copyFile(file.from, file.where);
        });
    };
    FilesRecreator.prototype.quickFixForFileNotInRightFolder = function () {
        var folderAA = tnp_core_2.path.join(this.project.location, tnp_config_1.config.folder.components, tnp_config_1.config.folder.assets);
        var folderForProject = tnp_core_2.path.join(folderAA, this.project.name);
        var notInRightPlace = tnp_core_3.glob.sync(folderAA + "/**/*.*");
        console.log('notInRightPlace', notInRightPlace);
        if (notInRightPlace.length > 0) {
            notInRightPlace
                .map(function (f) {
                return f.replace(folderAA, '');
            })
                .forEach(function (rp) {
                var sour = tnp_core_2.path.join(folderAA, rp);
                var dest = tnp_core_2.path.join(folderForProject, rp);
                console.log('SOUR', sour);
                console.log('DEST', dest);
                if (!tnp_core_1.fse.lstatSync(sour).isDirectory()) {
                    tnp_helpers_1.Helpers.copyFile(sour, dest);
                }
            });
        }
    };
    Object.defineProperty(FilesRecreator.prototype, "assetsRelativePathes", {
        get: function () {
            var assetsFolders = [];
            if (this.project.typeIsNot('angular-lib')) {
                return [];
            }
            var assetsRelativeAngularLib = tnp_core_2.path.join(tnp_config_1.config.folder.components, tnp_config_1.config.folder.assets, this.project.name);
            var pathTOCheck = tnp_core_2.path.join(this.project.location, assetsRelativeAngularLib);
            if (!tnp_helpers_1.Helpers.exists(pathTOCheck)) {
                tnp_helpers_1.Helpers.mkdirp(pathTOCheck);
                tnp_helpers_1.Helpers.writeFile(tnp_core_2.path.join(pathTOCheck, 'put-your-assets-here.txt'), "\n    This file is generated..\n    Please put asset files related for this project here..\n      ");
                // this.quickFixForFileNotInRightFolder();
            }
            assetsFolders.push(assetsRelativeAngularLib);
            return assetsFolders;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FilesRecreator.prototype, "assetsToIgnore", {
        get: function () {
            if (!this.project.isWorkspaceChildProject) {
                return [];
            }
            return this.project.parent.children
                .filter(function (f) {
                return f.typeIs('angular-lib');
            })
                .map(function (a) { return a.recreate.assetsRelativePathes; })
                .reduce(function (a, b) {
                return a.concat(b);
            }, [])
                .map(function (asset) {
                return tnp_core_1.crossPlatformPath(tnp_core_2.path.join(tnp_config_1.config.folder.src, asset.replace(new RegExp("^" + tnp_config_1.config.folder.components + "/"), '')));
            });
        },
        enumerable: true,
        configurable: true
    });
    /**
     * QUICK_FIX needs to be before gitignore recreatino ! change it
     */
    FilesRecreator.prototype.initAssets = function () {
        var _this = this;
        if (!this.project.isWorkspaceChildProject) {
            return;
        }
        this.project.parent.children
            .filter(function (f) {
            return f.typeIs('angular-lib');
        })
            .forEach(function (p) {
            p.recreate.assetsRelativePathes
                .map(function (rp) { return tnp_core_1.crossPlatformPath(tnp_core_2.path.join(p.location, rp)); })
                .filter(function (ap) { return tnp_core_1.fse.existsSync(ap); })
                .forEach(function (ap) {
                var dest = tnp_core_2.path.join(_this.project.location, tnp_config_1.config.folder.src, tnp_config_1.config.folder.assets, p.name);
                // Helpers.info(`COPY ASSET FROM ${ap} to ${dest}`)
                tnp_helpers_1.Helpers.copy(ap, dest);
            });
        });
        // this.assetsToIgnore.forEach(rp => {
        // })
    };
    return FilesRecreator;
}(abstract_2.FeatureForProject));
exports.FilesRecreator = FilesRecreator;
//#endregion
//# sourceMappingURL=files-recreator.js.map