"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_core_4 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var RenameRule = /** @class */ (function () {
    function RenameRule(from, to) {
        var _this = this;
        this.org = {
            from: void 0,
            to: void 0,
        };
        this.toString = function () {
            return _this.from + " => " + _this.to;
        };
        this.org.from = from;
        this.org.to = to;
        this.from = from.trim().toLowerCase().replace(/\W/g, ' ');
        this.to = to.trim().toLowerCase().replace(/\W/g, ' ');
    }
    RenameRule.prototype.applyTo = function (s) {
        s = s.trim().toLowerCase().replace(/\W/g, '');
        return (s.search(this.from.replace(/\W/g, '')) !== -1);
    };
    RenameRule.prototype.replace = function (orgString) {
        var thisTo = this.to;
        var thisFrom = this.from;
        [
            [tnp_core_4._.kebabCase(thisFrom), tnp_core_4._.kebabCase(thisTo)],
            [tnp_core_4._.camelCase(thisFrom), tnp_core_4._.camelCase(thisTo)],
            [tnp_core_4._.upperFirst(tnp_core_4._.camelCase(thisFrom)), tnp_core_4._.upperFirst(tnp_core_4._.camelCase(thisTo))],
            [tnp_core_4._.snakeCase(thisFrom), tnp_core_4._.snakeCase(thisTo)],
            [tnp_core_4._.startCase(thisFrom), tnp_core_4._.startCase(thisTo)],
            [tnp_core_4._.upperCase(thisFrom), tnp_core_4._.upperCase(thisTo)],
            [tnp_core_4._.lowerCase(thisFrom), tnp_core_4._.lowerCase(thisTo)],
        ].forEach(function (v) {
            var from = v[0], to = v[1];
            // console.log(`${from} => ${to}`)
            orgString = orgString.replace(new RegExp(from, 'g'), to);
            from = from.replace(/\s/g, '');
            to = to.replace(/\s/g, '');
            // console.log(`${from} => ${to}`)
            orgString = orgString.replace(new RegExp(from, 'g'), to);
        });
        return orgString;
    };
    return RenameRule;
}());
exports.RenameRule = RenameRule;
var FilesRenaming = /** @class */ (function () {
    function FilesRenaming(argString) {
        var _this = this;
        this.rules = [];
        tnp_helpers_1.Helpers.info('Rebranding of files');
        var relativePath = argString.split(' ')[0];
        this.argString = argString.replace(relativePath, '');
        argString = this.argString;
        var args = this.argString.split(' ');
        tnp_helpers_1.Helpers.log('---- Rules ----');
        args.forEach(function (a) {
            tnp_helpers_1.Helpers.log(a);
        });
        tnp_helpers_1.Helpers.log('---------------');
        this.rules = args
            .filter(function (a) { return a.search('->') !== -1; })
            .map(function (a) {
            var _a = a.split('->'), from = _a[0], to = _a[1];
            if (!from || !to) {
                tnp_helpers_1.Helpers.error("Incorrect rule\n        \"" + from + "\" -> \"" + to + "\"\n        please follow pattern: 'test name -> my new name '", false, true);
            }
            return new RenameRule(from.trim(), to.trim());
        });
        // console.log(this.rules);
        // process.exit(0)
        var folder = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(tnp_core_1.crossPlatformPath(process.cwd()), relativePath));
        // Helpers.info(folder)
        var files = getAllFilesFoldersRecusively(folder);
        // Helpers.info(`files:\n ${files.map(f => f.replace(folder, '')).join('\n')}`);
        var starCallback = function (newFolder) {
            if (newFolder) {
                folder = newFolder;
            }
            files = getAllFilesFoldersRecusively(folder);
            _this.changeFiles(files, starCallback);
        };
        this.changeFiles(files, starCallback);
        files = getAllFilesFoldersRecusively(folder, true);
        this.changeContent(files);
    }
    FilesRenaming.start = function (aa) {
        new FilesRenaming(aa);
    };
    FilesRenaming.prototype.changeFiles = function (files, startProcessAgain, isFirstCall) {
        if (files === void 0) { files = []; }
        if (isFirstCall === void 0) { isFirstCall = true; }
        // if (isFirstCall) {
        //   console.log(files)
        // }
        if (files.length === 0) {
            return;
        }
        var file = files.shift();
        tnp_helpers_1.Helpers.log("Processing file: " + tnp_core_1.path.basename(file));
        var fileName = tnp_core_1.path.basename(file);
        for (var index = 0; index < this.rules.length; index++) {
            var r = this.rules[index];
            // Helpers.log(`Checking rule ${r}`)
            if (r.applyTo(fileName)) {
                // Helpers.log(`Apply to: ${fileName}`);
                var dest = tnp_core_1.path.join(tnp_core_1.path.dirname(file), r.replace(fileName));
                // Helpers.log(`des ${dest}`);
                tnp_helpers_1.Helpers.move(file, dest);
                file = dest;
                if (tnp_core_1.path.extname(dest) === '') {
                    files.length = 0;
                    tnp_helpers_1.Helpers.info("Starting process again from: " + dest);
                    startProcessAgain(isFirstCall ? dest : void 0);
                    return false;
                }
            }
            else {
                // Helpers.log(`Not apply to: ${fileName}`);
            }
        }
        return this.changeFiles(tnp_core_4._.cloneDeep(files), startProcessAgain, false);
    };
    FilesRenaming.prototype.changeContent = function (files) {
        if (files === void 0) { files = []; }
        if (files.length === 0) {
            return;
        }
        var file = files.shift();
        tnp_helpers_1.Helpers.log("Processing content of file: " + tnp_core_1.path.basename(file));
        var fileContent = tnp_helpers_1.Helpers.readFile(file);
        this.rules.forEach(function (r) {
            // Helpers.log(`Checking rule ${r}`)
            if (r.applyTo(fileContent)) {
                // Helpers.log(`Apply to: ${fileContent}`);
                tnp_helpers_1.Helpers.writeFile(file, r.replace(fileContent));
            }
            else {
                // Helpers.log(`Not apply to: ${fileContent}`);
            }
        });
        this.changeContent(files);
    };
    return FilesRenaming;
}());
exports.FilesRenaming = FilesRenaming;
function getAllFilesFoldersRecusively(folder, filesOnly) {
    if (filesOnly === void 0) { filesOnly = false; }
    var files = tnp_core_3.glob.sync(folder + "/**/*.*");
    if (!filesOnly) {
        var dirs_1 = [folder];
        files.forEach(function (filePath) {
            var p = tnp_core_1.path.dirname(filePath);
            dirs_1 = dirs_1.concat(tnp_core_2.fse.readdirSync(p).filter(function (f) { return tnp_core_2.fse.statSync(tnp_core_1.path.join(p, f)).isDirectory(); }).map(function (f) { return tnp_core_1.path.join(p, f); }));
        });
        files = files.concat(dirs_1);
        files = tnp_helpers_1.Helpers.arrays.uniqArray(files);
    }
    return files.sort();
}
//# sourceMappingURL=files-renaming.backend.js.map