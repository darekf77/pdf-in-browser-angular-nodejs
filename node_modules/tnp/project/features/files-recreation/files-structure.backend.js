"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_core_3 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var abstract_1 = require("../../abstract");
var tnp_db_1 = require("tnp-db");
var tnp_config_1 = require("tnp-config");
var NEW_PROJECT_FILES_MODULES_1 = require("../../../scripts/NEW-PROJECT_FILES_MODULES");
var tnp_models_1 = require("tnp-models");
var FilesStructure = /** @class */ (function (_super) {
    tslib_1.__extends(FilesStructure, _super);
    function FilesStructure() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilesStructure.prototype.findBaselines = function (proj, baselines) {
        if (baselines === void 0) { baselines = []; }
        if (!!proj.baseline) {
            baselines.unshift(proj.baseline);
        }
        else {
            return baselines;
        }
        return this.findBaselines(proj.baseline);
    };
    FilesStructure.prototype.fixOptionsArgs = function (options) {
        if (tnp_core_2._.isUndefined(options)) {
            options = {};
        }
        if (tnp_core_2._.isUndefined(options.alreadyInitedPorjects)) {
            options.alreadyInitedPorjects = [];
        }
        if (tnp_core_2._.isUndefined(options.watch)) {
            options.watch = false;
        }
        // if (_.isUndefined(options.initiator)) {
        //   options.initiator = this.project;
        // }
        return options;
    };
    Object.defineProperty(FilesStructure.prototype, "taskNames", {
        get: function () {
            return {
                sourceModifir: "[filestructure] (" + chalk_1.default.bold(this.project.genericName) + ") Client source modules pathes modifier ",
                frameworkFileGenerator: "[filestructure] (" + chalk_1.default.bold(this.project.genericName) + ") Files generator: entites.ts, controllers.ts",
                joinMerge: "[filestructure] Join project " + this.project.genericName
            };
        },
        enumerable: true,
        configurable: true
    });
    FilesStructure.prototype.struct = function (args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!args) {
                            args = '';
                        }
                        args += ' --struct';
                        if (!this.project.isGenerated) {
                            tnp_helpers_1.Helpers.removeIfExists(tnp_core_1.path.join(this.project.location, tnp_config_1.config.file.tnpEnvironment_json));
                        }
                        return [4 /*yield*/, this.init(args)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FilesStructure.prototype.init = function (args, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var alreadyInitedPorjects, watch, watchOnly, _a, skipNodeModules, recrusive, env, struct, db, containerChildren, index, containerChild, indexChild, workspaceChild, workspaceChildren, index, workspaceChild, isInNodeMOdules;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!args) {
                            args = '';
                        }
                        options = this.fixOptionsArgs(options);
                        if (!options.initiator) {
                            options.initiator = this.project;
                        }
                        alreadyInitedPorjects = options.alreadyInitedPorjects, watch = options.watch, watchOnly = options.watchOnly;
                        _a = require('minimist')(args.split(' ')), skipNodeModules = _a.skipNodeModules, recrusive = _a.recrusive, env = _a.env, struct = _a.struct;
                        // THIS IS SLOW... BUT I CAN AFORD IT HERE
                        if (!tnp_core_2._.isUndefined(alreadyInitedPorjects.find(function (p) { return p.location === _this.project.location; }))) {
                            this.project.quickFixes.missingSourceFolders();
                            if (this.project.isStandaloneProject && this.project.packageJson) {
                                this.project.packageJson.updateHooks();
                            }
                            this.project.notAllowedFiles().forEach(function (f) {
                                tnp_helpers_1.Helpers.removeFileIfExists(tnp_core_1.path.join(_this.project.location, f));
                            });
                        }
                        if (struct) {
                            skipNodeModules = true;
                        }
                        if (options.initiator.location === this.project.location && this.project.isWorkspace && options.watch) {
                            recrusive = true;
                        }
                        return [4 /*yield*/, this.project.__initProcedure()];
                    case 1:
                        _b.sent();
                        if (this.project.isWorkspace || this.project.isWorkspaceChildProject) {
                            if (env) {
                                tnp_helpers_1.Helpers.log("ENVIRONMENT: " + chalk_1.default.bold(env) + " inited for " + this.project.genericName);
                            }
                            else {
                                if (this.project.isGenerated) {
                                    args += args + " --env=static";
                                    tnp_helpers_1.Helpers.log("ENVIRONMENT (for local static build): \"" + chalk_1.default.bold('static') + "\""
                                        + (" initing for " + this.project.genericName));
                                }
                                else {
                                    args += args + " --env=local";
                                    tnp_helpers_1.Helpers.log("ENVIRONMENT (for local watch development): \"" + chalk_1.default.bold('local') + "\""
                                        + (" initing for " + this.project.genericName));
                                }
                            }
                        }
                        tnp_helpers_1.Helpers.log("[init] adding project is not exists...");
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 2:
                        db = _b.sent();
                        return [4 /*yield*/, db.addProjectIfNotExist(this.project)];
                    case 3:
                        _b.sent();
                        tnp_helpers_1.Helpers.log("[init] adding project is not exists...done");
                        if (!tnp_core_2._.isUndefined(alreadyInitedPorjects.find(function (p) { return p.location === _this.project.location; }))) {
                            tnp_helpers_1.Helpers.log("Already inited project: " + chalk_1.default.bold(this.project.genericName) + " - skip");
                            return [2 /*return*/];
                        }
                        else {
                            tnp_helpers_1.Helpers.log("Not inited yet... " + chalk_1.default.bold(this.project.genericName) + " in " + this.project.location);
                        }
                        this.project.quickFixes.missingSourceFolders();
                        this.project.quickFixes.linkSourceOfItselfToNodeModules();
                        this.project.quickFixes.missingAngularLibFiles();
                        if (this.project.isWorkspace || this.project.isTnp) { // TODO make it for standalone
                            this.project.quickFixes.overritenBadNpmPackages();
                        }
                        if (this.project.isWorkspace || this.project.isStandaloneProject || this.project.isContainer) {
                            this.project.quickFixes.missingLibs(tnp_config_1.config.quickFixes.missingLibs);
                        }
                        if (this.project.isWorkspace || this.project.isStandaloneProject) {
                            tnp_helpers_1.Helpers.info("Initing project: " + chalk_1.default.bold(this.project.genericName));
                        }
                        alreadyInitedPorjects.push(this.project);
                        tnp_helpers_1.Helpers.log("Push to alread inited " + this.project.genericName + " from " + this.project.location);
                        if (!this.project.isContainer) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.project.recreate.init()];
                    case 4:
                        _b.sent();
                        if (!!this.project.isContainerWithLinkedProjects) return [3 /*break*/, 11];
                        containerChildren = this.project.children.filter(function (c) {
                            if (c.git.isGitRepo) {
                                tnp_helpers_1.Helpers.log("[init] not initing recrusively, it is git repo " + c.name);
                                return false;
                            }
                            return true;
                        });
                        index = 0;
                        _b.label = 5;
                    case 5:
                        if (!(index < containerChildren.length)) return [3 /*break*/, 11];
                        containerChild = containerChildren[index];
                        return [4 /*yield*/, containerChild.filesStructure.init(args, options)];
                    case 6:
                        _b.sent();
                        indexChild = 0;
                        _b.label = 7;
                    case 7:
                        if (!(indexChild < containerChild.children.length)) return [3 /*break*/, 10];
                        workspaceChild = containerChild.children[indexChild];
                        return [4 /*yield*/, workspaceChild.filesStructure.init(args, options)];
                    case 8:
                        _b.sent();
                        _b.label = 9;
                    case 9:
                        indexChild++;
                        return [3 /*break*/, 7];
                    case 10:
                        index++;
                        return [3 /*break*/, 5];
                    case 11:
                        if (!(this.project.isWorkspace && recrusive)) return [3 /*break*/, 15];
                        workspaceChildren = this.project.children;
                        index = 0;
                        _b.label = 12;
                    case 12:
                        if (!(index < workspaceChildren.length)) return [3 /*break*/, 15];
                        workspaceChild = workspaceChildren[index];
                        return [4 /*yield*/, workspaceChild.filesStructure.init(args, options)];
                    case 13:
                        _b.sent();
                        _b.label = 14;
                    case 14:
                        index++;
                        return [3 /*break*/, 12];
                    case 15:
                        if (!this.project.isWorkspaceChildProject) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.project.parent.filesStructure.init(args, options)];
                    case 16:
                        _b.sent();
                        _b.label = 17;
                    case 17:
                        //#region report progress initing project
                        if (this.project.isWorkspaceChildProject) {
                            tnp_helpers_1.Helpers.info("Initing project (workspace child): " + chalk_1.default.bold(this.project.genericName));
                        }
                        if (global.tnpNonInteractive) {
                            tnp_models_1.PROGRESS_DATA.log({ msg: "Initing project:  \"" + this.project.genericName + "\" started" });
                        }
                        //#endregion
                        if (this.project.isWorkspaceChildProject) {
                            isInNodeMOdules = tnp_core_1.path.join(this.project.parent.location, tnp_config_1.config.folder.node_modules, this.project.name);
                            if (!tnp_core_3.fse.existsSync(isInNodeMOdules)) {
                                this.project.parent.workspaceSymlinks.add("Init of workspace child project");
                            }
                        }
                        return [4 /*yield*/, this.project.recreate.init()];
                    case 18:
                        _b.sent();
                        this.project.recreate.vscode.settings.hideOrShowDeps();
                        if (!this.project.isStandaloneProject) return [3 /*break*/, 20];
                        if (tnp_core_2._.isNil(this.project.buildOptions)) { // TODO QUICK_FIX
                            this.project.buildOptions = {};
                        }
                        return [4 /*yield*/, this.project.env.init(args)];
                    case 19:
                        _b.sent();
                        this.project.filesTemplatesBuilder.rebuild();
                        _b.label = 20;
                    case 20:
                        if (!!this.project.isDocker) return [3 /*break*/, 25];
                        if (!!this.project.node_modules.exist) return [3 /*break*/, 24];
                        if (!skipNodeModules) return [3 /*break*/, 21];
                        if (!tnp_core_3.fse.existsSync(tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.node_modules))) {
                            tnp_helpers_1.Helpers.mkdirp(tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.node_modules));
                        }
                        return [3 /*break*/, 23];
                    case 21: return [4 /*yield*/, this.project.npmPackages.installProcess("initialize procedure of " + this.project.name)];
                    case 22:
                        _b.sent();
                        _b.label = 23;
                    case 23: return [3 /*break*/, 25];
                    case 24:
                        if (this.project.isStandaloneProject && this.project.frameworkVersionAtLeast('v2')) {
                            this.project.packageJson.showDeps("Show new deps for " + this.project._frameworkVersion + " ");
                        }
                        _b.label = 25;
                    case 25:
                        if (!(this.project.isWorkspace || this.project.isWorkspaceChildProject)) return [3 /*break*/, 31];
                        if (!(this.project.isSiteInStrictMode && !this.project.isDocker)) return [3 /*break*/, 29];
                        if (!watch) return [3 /*break*/, 27];
                        return [4 /*yield*/, this.project.join.startAndWatch(this.taskNames.joinMerge, {
                                watchOnly: watchOnly, afterInitCallBack: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.project.compilerCache.setUpdatoDate.join()];
                                            case 1:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }
                            })];
                    case 26:
                        _b.sent();
                        return [3 /*break*/, 29];
                    case 27: return [4 /*yield*/, this.project.join.start(this.taskNames.joinMerge)];
                    case 28:
                        _b.sent();
                        _b.label = 29;
                    case 29: return [4 /*yield*/, this.project.env.init(args)];
                    case 30:
                        _b.sent();
                        this.project.filesTemplatesBuilder.rebuild();
                        _b.label = 31;
                    case 31:
                        if (this.project.isWorkspace) {
                            this.project.recreateCodeWorkspace();
                        }
                        this.project.quickFixes.missingSourceFolders();
                        this.project.quickFixes.badTypesInNodeModules();
                        if (!(!this.project.isDocker && !this.project.isVscodeExtension)) return [3 /*break*/, 37];
                        if (!(this.project.isWorkspaceChildProject || this.project.isStandaloneProject)) return [3 /*break*/, 37];
                        if (!watch) return [3 /*break*/, 34];
                        return [4 /*yield*/, this.project.frameworkFileGenerator.startAndWatch(this.taskNames.frameworkFileGenerator, {
                                watchOnly: watchOnly, afterInitCallBack: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.project.compilerCache.setUpdatoDate.frameworkFileGenerator()];
                                            case 1:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }
                            })];
                    case 32:
                        _b.sent();
                        // if (!this.project) {
                        //   console.trace('HERE')
                        // }
                        return [4 /*yield*/, this.project.sourceModifier.startAndWatch(this.taskNames.sourceModifir, {
                                watchOnly: watchOnly, afterInitCallBack: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0: return [4 /*yield*/, this.project.compilerCache.setUpdatoDate.sourceModifier()];
                                            case 1:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }
                            })];
                    case 33:
                        // if (!this.project) {
                        //   console.trace('HERE')
                        // }
                        _b.sent();
                        return [3 /*break*/, 37];
                    case 34: return [4 /*yield*/, this.project.frameworkFileGenerator.start(this.taskNames.frameworkFileGenerator)];
                    case 35:
                        _b.sent();
                        // if (!this.project) {
                        //   console.trace('HERE')
                        // }
                        return [4 /*yield*/, this.project.sourceModifier.start(this.taskNames.sourceModifir)];
                    case 36:
                        // if (!this.project) {
                        //   console.trace('HERE')
                        // }
                        _b.sent();
                        _b.label = 37;
                    case 37:
                        tnp_helpers_1.Helpers.log("Init DONE for project: " + chalk_1.default.bold(this.project.genericName));
                        return [2 /*return*/];
                }
            });
        });
    };
    FilesStructure.prototype.recreateSiteChildren = function () {
        var _this = this;
        var newChilds = [];
        var baseline = this.project.baseline;
        baseline.children.forEach(function (c) {
            var siteChild = tnp_core_1.path.join(_this.project.location, c.name);
            if (!tnp_core_3.fse.existsSync(siteChild)) {
                NEW_PROJECT_FILES_MODULES_1.ProjectFactory.Instance.create({
                    type: c._type,
                    name: c.name,
                    cwd: _this.project.location,
                    basedOn: void 0
                });
                var newChild = abstract_1.Project.From(siteChild);
                c.packageJson.copyTo(newChild);
                tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(newChild.location, tnp_config_1.config.folder.src));
                tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(newChild.location, tnp_config_1.config.folder.components));
                newChild.recreate.vscode.settings.colorsFromWorkspace();
                newChilds.push(newChild);
            }
        });
        return newChilds;
    };
    FilesStructure.prototype.recrusiveOperation = function (proj, recrusive, type) {
        if (recrusive === void 0) { recrusive = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index, c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(type === 'clear')) return [3 /*break*/, 2];
                        return [4 /*yield*/, proj.clear()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        if (!(type === 'reset')) return [3 /*break*/, 4];
                        return [4 /*yield*/, proj.reset()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        if (!recrusive) return [3 /*break*/, 8];
                        index = 0;
                        _a.label = 5;
                    case 5:
                        if (!(index < proj.children.length)) return [3 /*break*/, 8];
                        c = proj.children[index];
                        return [4 /*yield*/, this.recrusiveOperation(c, recrusive, type)];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        index++;
                        return [3 /*break*/, 5];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    FilesStructure.prototype.reset = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, recrusive;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = (options || {}).recrusive, recrusive = _a === void 0 ? false : _a;
                        return [4 /*yield*/, this.recrusiveOperation(this.project, recrusive, 'reset')];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FilesStructure.prototype.clear = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, recrusive;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = (options || {}).recrusive, recrusive = _a === void 0 ? false : _a;
                        return [4 /*yield*/, this.recrusiveOperation(this.project, recrusive, 'clear')];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FilesStructure.prototype.resolveArgs = function (args) {
        var _a = require('minimist')(args.split(' ')), _b = _a.recrusive, recrusive = _b === void 0 ? false : _b, _c = _a.r, r = _c === void 0 ? false : _c;
        recrusive = (recrusive || r);
        return { recrusive: recrusive };
    };
    FilesStructure.prototype.resetFromArgs = function (args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var recrusive;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        recrusive = this.resolveArgs(args).recrusive;
                        return [4 /*yield*/, this.reset({ recrusive: recrusive })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FilesStructure.prototype.clearFromArgs = function (args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var recrusive;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        recrusive = this.resolveArgs(args).recrusive;
                        return [4 /*yield*/, tnp_helpers_1.Helpers.questionYesNo("Do you wanna delete node_modules and reset " + (recrusive ? 'project recursively' : 'project') + " ?", function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.clear({ recrusive: recrusive })];
                                        case 1:
                                            _a.sent();
                                            process.exit(0);
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, function () {
                                process.exit(0);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return FilesStructure;
}(abstract_1.FeatureForProject));
exports.FilesStructure = FilesStructure;
//# sourceMappingURL=files-structure.backend.js.map