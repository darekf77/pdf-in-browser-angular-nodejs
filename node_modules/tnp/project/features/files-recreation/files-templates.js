"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var JSON5 = require("json5");
var FilesTemplatesBuilder = /** @class */ (function (_super) {
    tslib_1.__extends(FilesTemplatesBuilder, _super);
    function FilesTemplatesBuilder() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FilesTemplatesBuilder.prototype, "files", {
        get: function () {
            return this.project.filesTemplates();
        },
        enumerable: true,
        configurable: true
    });
    FilesTemplatesBuilder.prototype.rebuild = function (soft) {
        if (soft === void 0) { soft = false; }
        var files = this.files;
        // Helpers.info(`Files templates for project:
        // ${files.map(f => f).join('\n')}
        // `);
        for (var index = 0; index < files.length; index++) {
            var f = files[index];
            var filePath = tnp_core_1.path.join(this.project.location, f);
            if (tnp_helpers_1.Helpers.exists(filePath)) {
                var fileContent = tnp_helpers_1.Helpers.readFile(filePath);
            }
            if (!fileContent) {
                tnp_helpers_1.Helpers.warn("[filesTemplats][rebuild] Not able to read file: " + filePath + " - missing content");
                continue;
            }
            var env = ((this.project.env && this.project.env.config) ? this.project.env.config : {});
            // Helpers.log(`Started for ${f}`);
            this.processFile(filePath, fileContent, env, tnp_core_2._, soft);
            // Helpers.log(`Processed DONE for ${f}`);
        }
        this.project.quickFixes.updateTsconfigsInTmpSrcBrowserFolders();
    };
    FilesTemplatesBuilder.prototype.rebuildFile = function (filetemplateRelativePath, soft) {
        if (soft === void 0) { soft = false; }
        var filePath = tnp_core_1.path.join(this.project.location, filetemplateRelativePath);
        try {
            var fileContent = tnp_helpers_1.Helpers.readFile(filePath);
            if (!fileContent) {
                tnp_helpers_1.Helpers.warn("[filesTemplats][rebuildFile] Not able to read file: " + filePath + " - no content of file");
                return;
            }
        }
        catch (error) {
            tnp_helpers_1.Helpers.warn("[filesTemplats][rebuildFile] Not able to read file: " + filePath + " - problem with reading file");
            return;
        }
        var env = ((this.project.env && this.project.env.config) ? this.project.env.config : {});
        this.processFile(filePath, fileContent, env, tnp_core_2._, soft);
    };
    FilesTemplatesBuilder.prototype.processFile = function (orgFilePath, content, reservedExpSec, reservedExpOne, soft) {
        var filePath = orgFilePath.replace("." + tnp_config_1.config.filesExtensions.filetemplate, '');
        // Helpers.pressKeyAndContinue();
        var newContent = content
            .split('\n')
            .filter(function (line) { return !line.trimLeft().startsWith('#'); })
            .map(function (line) {
            var matches = line.match(/\{\{\{.*\}\}\}/);
            if (tnp_core_2._.isArray(matches)) {
                matches.forEach(function (pattern) {
                    var expression = pattern.replace(/(\{|\})/g, '');
                    // const reservedExpSec = ENV;
                    // const reservedExpOne = _;
                    // console.log('varssss: ', pattern)
                    var exp = "(function(ENV,_){\n              // console.log(typeof ENV)\n              return " + expression.trim() + "\n            })(reservedExpSec,reservedExpOne)";
                    // console.log(exp)
                    //     console.log(`Eval expre
                    // ${exp}
                    // `);
                    try {
                        var toReplace = eval(exp);
                        line = line.replace(pattern, toReplace);
                    }
                    catch (err) {
                        tnp_helpers_1.Helpers.info("\n\n              exp: " + exp + "\n\n              pattern: " + pattern + "\n\n              toReplace: " + toReplace + "\n\n              line: " + line + "\n\n              err: " + err + "\n\n\n              ");
                        tnp_helpers_1.Helpers.error("Error during filtemplate parse: " + orgFilePath, true, true);
                        tnp_helpers_1.Helpers.error(err, soft, true);
                    }
                    // console.log('toReplace', toReplace)
                });
            }
            return line;
        }).join('\n');
        tnp_helpers_1.Helpers.removeFileIfExists(filePath);
        if (filePath.endsWith('.json')) {
            try {
                var jsonparsed = JSON5.parse(newContent);
                newContent = JSON.stringify(jsonparsed, null, 2);
            }
            catch (e) {
                tnp_helpers_1.Helpers.log(e);
                tnp_helpers_1.Helpers.info(newContent);
                tnp_helpers_1.Helpers.error("[filetemplate] Not able to parse new content" +
                    (" for json in " + tnp_core_1.path.basename(filePath) + "\n\n          "), soft, true);
            }
        }
        tnp_helpers_1.Helpers.writeFile(filePath, newContent);
        // if (!this.project.isCoreProject) {
        //   fse.unlinkSync(orgFilePath);
        // }
    };
    return FilesTemplatesBuilder;
}(abstract_1.FeatureForProject));
exports.FilesTemplatesBuilder = FilesTemplatesBuilder;
//#endregion
//# sourceMappingURL=files-templates.js.map