"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var abstract_1 = require("../../abstract");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var FilesFactory = /** @class */ (function (_super) {
    tslib_1.__extends(FilesFactory, _super);
    function FilesFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilesFactory.prototype.createFile = function (pathToFile, content) {
        var destPath = tnp_core_2.path.isAbsolute(pathToFile) ? pathToFile : tnp_core_2.path.join(this.project.location, pathToFile);
        // log(`CREATE FILE: ${destPath}`)
        if (tnp_core_3._.isUndefined(content)) {
            content = '';
        }
        if (!tnp_core_1.fse.existsSync(tnp_core_2.path.dirname(destPath))) {
            tnp_helpers_1.Helpers.mkdirp(tnp_core_2.path.dirname(destPath));
        }
        if (tnp_core_3._.isObject(content)) {
            tnp_core_1.fse.writeJSONSync(destPath, content, { encoding: 'utf8', spaces: 2 });
        }
        else {
            tnp_helpers_1.Helpers.writeFile(destPath, content);
        }
    };
    FilesFactory.prototype.create = function () {
        var pathes = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            pathes[_i] = arguments[_i];
        }
        var self = this;
        return {
            file: function (content) {
                self.createFile(tnp_core_2.path.join(pathes.join('/')), content);
            }
        };
    };
    FilesFactory.prototype.createModel = function (relativePath, name) {
        this.createEntity(relativePath, name);
        this.createController(relativePath, name);
    };
    FilesFactory.prototype.createEntity = function (relativePath, name) {
        var kebebCaseName = tnp_core_3._.kebabCase(name);
        var fileNameWithoutExt = tnp_core_3._.upperCase(tnp_core_3._.kebabCase(name).replace(/\-/g, '_')).replace(/\s/g, '_');
        this.create(relativePath, kebebCaseName, fileNameWithoutExt + ".ts")
            .file("\nimport { Morphi } from 'morphi';\n\nexport interface I" + fileNameWithoutExt + " {\n  id?: number;\n  exampleProperty?: string;\n}\n\n@Morphi.Entity<" + fileNameWithoutExt + ">({\n  className: '" + fileNameWithoutExt + "',\n  mapping: {\n\n  }\n})\nexport class " + fileNameWithoutExt + " extends Morphi.Base.Entity<" + fileNameWithoutExt + ", I" + fileNameWithoutExt + "> implements I" + fileNameWithoutExt + " {\n\n  //#region @backend\n  @Morphi.Orm.Column.Generated()\n  //#endregion\n  id: number\n\n  //#region @backend\n  @Morphi.Orm.Column.Custom()\n  //#endregion\n  exampleProperty: string\n\n}\n");
    };
    FilesFactory.prototype.createController = function (relativePath, name) {
        var camelCaseUpperFirst = tnp_core_3._.upperFirst(tnp_core_3._.camelCase(name));
        var kebebCaseName = tnp_core_3._.kebabCase(name);
        var fileNameWithoutExt = tnp_core_3._.upperCase(tnp_core_3._.kebabCase(name).replace(/\-/g, '_')).replace(/\s/g, '_');
        var NameController = camelCaseUpperFirst + "Controller";
        this.create(relativePath, kebebCaseName, NameController + ".ts")
            .file("\nimport { Morphi } from 'morphi';\nimport { " + fileNameWithoutExt + " } from './" + fileNameWithoutExt + "';\n\n@Morphi.Controller({\n  className: '" + NameController + "',\n  entity: " + fileNameWithoutExt + ",\n  //#region @backend\n  // auth: () => {\n  //   return authenticate('bearer', { session: false });\n  // }\n  //#endregion\n})\nexport class " + NameController + " extends Morphi.Base.Controller<" + fileNameWithoutExt + "> {\n\n  //#region @backend\n  async initExampleDbData() {\n\n  }\n  //#endregion\n\n}\n");
    };
    return FilesFactory;
}(abstract_1.FeatureForProject));
exports.FilesFactory = FilesFactory;
//# sourceMappingURL=files-factory.backend.js.map