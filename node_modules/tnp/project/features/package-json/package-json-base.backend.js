"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var semver = require("semver");
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var tnp_core_2 = require("tnp-core");
var package_json_helpers_backend_1 = require("./package-json-helpers.backend");
var package_json_core_backend_1 = require("./package-json-core.backend");
var package_json_deps_categories_backend_1 = require("./package-json-deps-categories.backend");
var PackageJsonBase = /** @class */ (function (_super) {
    tslib_1.__extends(PackageJsonBase, _super);
    function PackageJsonBase(options) {
        var _this = _super.call(this, (options.project && !options.location) ? options.project.location : options.location) || this;
        _this.reasonToHidePackages = '';
        _this.reasonToShowPackages = '';
        _this.removeDependencyAndSave = function (p, reason) {
            _this.prepareForSave('save');
            package_json_helpers_backend_1.removeDependencyAndSave(p, reason, _this.project);
        };
        _this.setDependencyAndSave = function (p, reason) {
            _this.prepareForSave('save');
            package_json_helpers_backend_1.setDependencyAndSave(p, reason, _this.project);
        };
        if (tnp_core_2._.isObject(options)) {
            if (options.project && !options.location) {
                options.location = options.project.location;
            }
            tnp_core_2._.merge(_this, options);
            _this.data = tnp_core_2._.merge({
                tnp: {
                    resources: []
                }
            }, options.data);
        }
        _this.coreCategories = new package_json_deps_categories_backend_1.PackageJsonDepsCoreCategories(_this.project);
        return _this;
    }
    PackageJsonBase.prototype.save = function (reasonToShowPackages) {
        this.reasonToShowPackages = "\n" + reasonToShowPackages;
        this.prepareForSave('save');
        this.writeToDisc();
    };
    PackageJsonBase.prototype.showDeps = function (reasonToShowPackages) {
        this.reasonToHidePackages = "\n" + reasonToShowPackages;
        this.prepareForSave('show');
        this.writeToDisc();
    };
    PackageJsonBase.prototype.hideDeps = function (reasonToHidePackages) {
        this.reasonToHidePackages = "\n" + reasonToHidePackages;
        this.prepareForSave('hide');
        this.writeToDisc(true);
    };
    PackageJsonBase.prototype.updateHooks = function () {
        if (!(this.data.husky && this.data.husky.hooks && tnp_core_2._.isString(this.data.husky.hooks['pre-push']))) {
            this.data.husky = {
                hooks: {
                    'pre-push': 'tnp deps:show:if:standalone'
                }
            };
            this.save('Update hooks');
        }
    };
    PackageJsonBase.prototype.prepareForSave = function (action, caller) {
        if (action === void 0) { action = 'save'; }
        if (caller === this.project) {
            return;
        }
        if (this.project.isUnknowNpmProject) {
            tnp_helpers_1.Helpers.log("Prepare for save not for unknow projects");
            return;
        }
        if (this.project.isStandaloneProject || this.project.isContainer || (this.project.isWorkspace && !this.project.isContainerChild)) {
            abstract_1.Project.Tnp.packageJson.prepareForSave(action, abstract_1.Project.Tnp);
        }
        if ((this.project.isContainerChild && this.project.isWorkspace) || this.project.isWorkspaceChildProject) {
            this.project.parent.packageJson.prepareForSave(action);
        }
        package_json_helpers_backend_1.reolveAndSaveDeps(this.project, action, this.reasonToHidePackages, this.reasonToShowPackages);
    };
    PackageJsonBase.prototype.linkTo = function (destination) {
        var source = tnp_core_1.path.join(this.project.location, tnp_config_1.config.file.package_json);
        var dest = tnp_core_1.path.join(destination, tnp_config_1.config.file.package_json);
        tnp_helpers_1.Helpers.removeFileIfExists(dest);
        tnp_helpers_1.Helpers.createSymLink(source, dest);
    };
    /**
     * Look all package.json dependencies and check if version range
     * of dependency is satisfy
     * @param dependency
     */
    PackageJsonBase.prototype.checDepenciesAreSatisfyBy = function (dependency) {
        var versionRange = package_json_helpers_backend_1.findVersionRange(this.project, dependency);
        if (!versionRange) {
            tnp_helpers_1.Helpers.error("Version range not avaliable root: " + this.name + " dependency: " + dependency.name, true, true);
            return false;
        }
        var result = semver.satisfies(dependency.version, versionRange);
        var namePackage = dependency.name + "@" + dependency.version;
        tnp_helpers_1.Helpers.log("[checDepenciesAreSatisfyBy] " + result + " for " + namePackage + " in range " + versionRange + " withing " + this.name);
        return result;
    };
    PackageJsonBase.prototype.reset = function () {
        if (this.project.isTnp) {
            tnp_helpers_1.Helpers.log("Npm reset not available for Tnp project");
            return;
        }
        if (this.project.isWorkspaceChildProject || (this.project.isContainerChild && this.project.isWorkspace)) {
            this.project.parent.packageJson.reset();
        }
        this.data.tnp.overrided.dependencies = {};
        this.save("reset of npm");
    };
    PackageJsonBase.prototype.setCategoryFor = function (pkg) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.coreCategories.setWizard(pkg)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PackageJsonBase.prototype.updateFrom = function (locations) {
        for (var index = 0; index < locations.length; index++) {
            var location_1 = locations[index];
            var otherProj = abstract_1.Project.From(location_1);
            tnp_helpers_1.Helpers.log("Updating package.json from " + otherProj.name);
            updaPackage(this.project, otherProj.packageJson.data.dependencies, otherProj);
            updaPackage(this.project, otherProj.packageJson.data.devDependencies, otherProj);
        }
    };
    return PackageJsonBase;
}(package_json_core_backend_1.PackageJsonCore));
exports.PackageJsonBase = PackageJsonBase;
function updaPackage(mainProj, deps, otherProj) {
    if (!deps) {
        tnp_helpers_1.Helpers.log("Cant read deps");
        return;
    }
    Object.keys(deps).forEach(function (depName) {
        var version = deps[depName];
        if (tnp_core_2._.isString(version)) {
            mainProj.packageJson.setDependencyAndSave({
                name: depName,
                version: version
            }, "update from project: " + otherProj.name);
        }
    });
}
//# sourceMappingURL=package-json-base.backend.js.map