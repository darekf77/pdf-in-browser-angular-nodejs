import { ConfigModels } from 'tnp-config';
import { Project } from '../../abstract';
import { Models } from 'tnp-models';
export declare class PackageJsonCore {
    protected readonly cwd: string;
    data: Models.npm.IPackageJSON;
    constructor(cwd: string);
    get type(): ConfigModels.LibType;
    /**
     * Container only
     * linked git project
     */
    get linkedProjects(): string[];
    get linkedFolders(): {
        from: string;
        to: string;
    }[];
    get canBePublishToNpmRegistry(): boolean;
    get libReleaseOptions(): {
        obscure?: boolean;
        ugly?: boolean;
        nodts?: boolean;
    };
    get frameworkVersion(): ConfigModels.FrameworkVersion;
    get frameworks(): ConfigModels.UIFramework[];
    get name(): string;
    get version(): string;
    get isPrivate(): boolean;
    get resources(): string[];
    get workspaceDependencies(): string[];
    dependencies(): string[];
    get dependsOn(): string[];
    get targetProjects(): Models.npm.TargetProject[];
    setBuildHash(hash: string): void;
    getBuildHash(): string;
    hasDependency(dependencyName: string, searchOnlyDependencies?: boolean): boolean;
    get workspaceDependenciesServers(): string[];
    get additionalNpmNames(): any[] | (false & any[]) | (true & any[]);
    get path(): string;
    get pathToBaseline(): string;
    get isCoreProject(): boolean;
    get isGlobalSystemTool(): boolean;
    get isCommandLineToolOnly(): boolean;
    get isGeneratedForRelease(this: Project): boolean;
    get isGenerated(): boolean;
    get useFramework(): boolean;
    copyWithoutDependenciesTo(projectOrPath: Project | String): void;
    copyTo(projectOrPath: Project | String): void;
    setNamFromContainingFolder(): void;
    private splitAndWriteToDisc;
    writeToDisc(removeFromPj?: boolean): Promise<void>;
    writeToDiscSync(removeFromPj?: boolean): void;
    private fixUnexistedBaselineInNOdeModules;
}
