"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_config_1 = require("tnp-config");
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
//#endregion
var PackageJsonCore = /** @class */ (function () {
    function PackageJsonCore(cwd) {
        this.cwd = cwd;
    }
    Object.defineProperty(PackageJsonCore.prototype, "type", {
        get: function () {
            var res = this.data.tnp ? this.data.tnp.type : undefined;
            if (tnp_core_3._.isString(res)) {
                return res;
            }
            if (this.data && this.data.name) {
                return 'unknow-npm-project';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "linkedProjects", {
        /**
         * Container only
         * linked git project
         */
        get: function () {
            var res = this.data.tnp ? this.data.tnp.linkedProjects : undefined;
            if (tnp_core_3._.isArray(res)) {
                return res;
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "linkedFolders", {
        get: function () {
            var _a, _b, _c;
            var res = (_c = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.tnp) === null || _b === void 0 ? void 0 : _b.overrided) === null || _c === void 0 ? void 0 : _c.linkedFolders;
            if (tnp_core_3._.isArray(res)) {
                return res;
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "canBePublishToNpmRegistry", {
        get: function () {
            if (!this.data) {
                return false;
            }
            if (tnp_core_3._.isBoolean(this.data.private)) {
                return !this.data.private;
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "libReleaseOptions", {
        get: function () {
            var res = this.data.tnp ? this.data.tnp.libReleaseOptions : undefined;
            if (tnp_core_3._.isObject(res)) {
                return res;
            }
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "frameworkVersion", {
        get: function () {
            var res = this.data.tnp ? this.data.tnp.version : undefined;
            if (tnp_core_3._.isString(res)) {
                return res;
            }
            return tnp_config_1.config.defaultFrameworkVersion;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "frameworks", {
        get: function () {
            var res = this.data.tnp &&
                tnp_core_3._.isArray(this.data.tnp.frameworks) ? this.data.tnp.frameworks : tnp_config_1.config.frameworks;
            if (res.filter(function (f) { return !tnp_config_1.config.frameworks.includes(f); }).length > 0) {
                tnp_helpers_1.Helpers.error("[packagejson][frameworks] Unrecognized  frameworks"
                    + (" in package.json " + JSON.stringify(this.data.tnp.frameworks)));
            }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "name", {
        get: function () {
            if (!tnp_core_3._.isString(this.data.name)) {
                if (global.globalSystemToolMode) {
                    tnp_helpers_1.Helpers.error("Please define name for npm project in location: " + this.path, false, true);
                }
            }
            return this.data.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "version", {
        get: function () {
            return this.data.version;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "isPrivate", {
        get: function () {
            return this.data.private;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "resources", {
        get: function () {
            var p = this.data.tnp;
            return Array.isArray(p.resources) ? p.resources : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "workspaceDependencies", {
        get: function () {
            var p = this.data.tnp && this.data.tnp.required;
            // console.log(`${this.locationOfJson}`, p)
            return Array.isArray(p) ? p : [];
        },
        enumerable: true,
        configurable: true
    });
    PackageJsonCore.prototype.dependencies = function () {
        var _a;
        var p = tnp_core_3._.keys((_a = this.data) === null || _a === void 0 ? void 0 : _a.dependencies);
        // console.log(`${this.locationOfJson}`, p)
        return Array.isArray(p) ? p : [];
    };
    Object.defineProperty(PackageJsonCore.prototype, "dependsOn", {
        get: function () {
            var p = this.data.tnp && this.data.tnp.dependsOn;
            // console.log(`${this.locationOfJson}`, p)
            return Array.isArray(p) ? p : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "targetProjects", {
        get: function () {
            var p = this.data.tnp && this.data.tnp.targetProjects;
            // console.log('asdasd',this.data.tnp.targetProjects)
            return Array.isArray(p) ? p : [];
        },
        enumerable: true,
        configurable: true
    });
    ;
    PackageJsonCore.prototype.setBuildHash = function (hash) {
        this.data.lastBuildTagHash = hash;
    };
    PackageJsonCore.prototype.getBuildHash = function () {
        return this.data.lastBuildTagHash;
    };
    PackageJsonCore.prototype.hasDependency = function (dependencyName, searchOnlyDependencies) {
        if (searchOnlyDependencies === void 0) { searchOnlyDependencies = false; }
        var deps = tslib_1.__spreadArrays(Object.keys(this.data.dependencies || {}), (searchOnlyDependencies ? [] : Object.keys(this.data.devDependencies || {})));
        return deps.includes(dependencyName);
    };
    Object.defineProperty(PackageJsonCore.prototype, "workspaceDependenciesServers", {
        get: function () {
            var p = this.data.tnp && this.data.tnp.requiredServers;
            // console.log(`${this.locationOfJson}`, p)
            return Array.isArray(p) ? p : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "additionalNpmNames", {
        get: function () {
            var _a;
            var p = (_a = this.data.tnp) === null || _a === void 0 ? void 0 : _a.additionalNpmNames;
            return tnp_core_3._.isArray(p) ? p : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "path", {
        get: function () {
            return tnp_core_2.path.join(this.cwd, tnp_config_1.config.file.package_json);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "pathToBaseline", {
        get: function () {
            var _a;
            if (this.data && this.data.tnp &&
                (tnp_core_3._.isString(this.data.tnp.basedOn) || tnp_core_3._.isArray(this.data.tnp.dependsOn))) {
                var pathToBaselineDependency = tnp_core_3._.isString(tnp_core_3._.first(this.data.tnp.dependsOn)) ?
                    tnp_core_2.path.resolve(tnp_core_2.path.join(tnp_core_2.path.dirname(this.cwd), tnp_core_3._.first(this.data.tnp.dependsOn))) : '';
                var pathToBaselineStricSite = tnp_core_3._.isString(this.data.tnp.basedOn) ?
                    tnp_core_2.path.resolve(tnp_core_2.path.join(tnp_core_2.path.dirname(this.cwd), this.data.tnp.basedOn)) : '';
                if (tnp_core_1.fse.existsSync(pathToBaselineStricSite)) {
                    this.fixUnexistedBaselineInNOdeModules(pathToBaselineStricSite);
                    return pathToBaselineStricSite;
                }
                else if (((_a = this.data.tnp.dependsOn) === null || _a === void 0 ? void 0 : _a.length) > 0 && tnp_core_1.fse.existsSync(pathToBaselineDependency)) {
                    this.fixUnexistedBaselineInNOdeModules(pathToBaselineDependency);
                    return pathToBaselineDependency;
                }
                else {
                    if (tnp_core_3._.isString(this.data.tnp.basedOn)) {
                        tnp_helpers_1.Helpers.error("[pathToBaseline] Wron value for " + chalk_1.default.bold('basedOn') + " in package.json  (" + this.cwd + ")");
                    }
                    else {
                        tnp_helpers_1.Helpers.warn("[pathToBaseline] path to baselien not exists:\n          strict-site: " + pathToBaselineStricSite + "\n          dependency-site: " + pathToBaselineDependency + "\n          ");
                    }
                }
                if (!global[tnp_core_1.CoreConfig.message.globalSystemToolMode] && !global.testMode) {
                    tnp_helpers_1.Helpers.warn("[pathToBaseline] Returning undefined to not show error message: " + this.data.tnp.basedOn + " ");
                    return;
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "isCoreProject", {
        get: function () {
            if (this.data.tnp && !tnp_core_3._.isUndefined(this.data.tnp.isCoreProject)) {
                if (tnp_core_3._.isBoolean(this.data.tnp.isCoreProject)) {
                    return this.data.tnp.isCoreProject;
                }
                tnp_helpers_1.Helpers.error("Bad value in package.json, tnp.isCoreProject should be boolean.", true);
                tnp_helpers_1.Helpers.error("Location of package.json: " + this.cwd);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "isGlobalSystemTool", {
        get: function () {
            if (this.data.tnp && !tnp_core_3._.isUndefined(this.data.tnp.isGlobalSystemTool)) {
                if (tnp_core_3._.isBoolean(this.data.tnp.isGlobalSystemTool)) {
                    return this.data.tnp.isGlobalSystemTool;
                }
                tnp_helpers_1.Helpers.error("Bad value in package.json, tnp.isGlobalSystemTool should be boolean.", true);
                tnp_helpers_1.Helpers.error("Location of package.json: " + this.cwd);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "isCommandLineToolOnly", {
        get: function () {
            if (this.data.tnp && !tnp_core_3._.isUndefined(this.data.tnp.isCommandLineToolOnly)) {
                if (tnp_core_3._.isBoolean(this.data.tnp.isCommandLineToolOnly)) {
                    return this.data.tnp.isCommandLineToolOnly;
                }
                tnp_helpers_1.Helpers.error("Bad value in package.json, tnp.isCommandLineToolOnly should be boolean.", true);
                tnp_helpers_1.Helpers.error("Location of package.json: " + this.cwd);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "isGeneratedForRelease", {
        get: function () {
            var p = tnp_core_2.path.basename(tnp_core_2.path.join(this.location, '../../..'));
            if (p !== tnp_config_1.config.folder.tmpBundleRelease) {
                return false;
            }
            var orgProjPath = tnp_core_2.path.resolve(tnp_core_2.path.join(this.location, '../../../..'));
            var proj = abstract_1.Project.From(orgProjPath);
            var res = proj && (proj.name === this.name && proj.version === this.version);
            // if (res) {
            //   console.log('fond', this.location)
            // }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "isGenerated", {
        get: function () {
            if (this.data.tnp && !tnp_core_3._.isUndefined(this.data.tnp.isGenerated)) {
                if (tnp_core_3._.isBoolean(this.data.tnp.isGenerated)) {
                    return this.data.tnp.isGenerated;
                }
                tnp_helpers_1.Helpers.error("[isGenerated] Bad value in package.json, tnp.isGenerated should be boolean.", true, true);
                tnp_helpers_1.Helpers.error("[isGenerated] Location of package.json: " + this.cwd, true, true);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PackageJsonCore.prototype, "useFramework", {
        get: function () {
            if (this.data.tnp && !tnp_core_3._.isUndefined(this.data.tnp.useFramework)) {
                if (tnp_core_3._.isBoolean(this.data.tnp.useFramework)) {
                    return this.data.tnp.useFramework;
                }
                tnp_helpers_1.Helpers.error("Bad value in package.json, tnp.useFramework should be boolean.", true);
                tnp_helpers_1.Helpers.error("Location of package.json: " + this.cwd);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    PackageJsonCore.prototype.copyWithoutDependenciesTo = function (projectOrPath) {
        this.copyTo(projectOrPath);
        var dest = tnp_core_2.path.join(tnp_core_3._.isString(projectOrPath) ? projectOrPath :
            projectOrPath.location);
        abstract_1.Project.From(dest);
    };
    PackageJsonCore.prototype.copyTo = function (projectOrPath) {
        if (!(tnp_core_3._.isObject(projectOrPath) || tnp_core_3._.isString(projectOrPath))) {
            tnp_helpers_1.Helpers.error("[packagejson][copyTo] Incorrect project of path");
        }
        var dest = tnp_core_2.path.join(tnp_core_3._.isString(projectOrPath) ? projectOrPath :
            projectOrPath.location, tnp_config_1.config.file.package_json);
        tnp_core_1.fse.copyFileSync(this.path, dest);
    };
    PackageJsonCore.prototype.setNamFromContainingFolder = function () {
        var name = tnp_core_2.path.basename(this.cwd);
        this.data.name = name;
        this.writeToDisc();
    };
    PackageJsonCore.prototype.splitAndWriteToDisc = function (removeFromPj) {
        var _this = this;
        if (removeFromPj === void 0) { removeFromPj = false; }
        if (['navi', 'scenario'].includes(this.type)) {
            tnp_helpers_1.Helpers.writeFile(this.path, tnp_core_3._.isObject(this.data) ? this.data : {});
            return;
        }
        tnp_config_1.config.packageJsonSplit.forEach(function (c) {
            var property = c
                .replace(tnp_config_1.config.file.package_json + "_", '')
                .replace(".json", '');
            var obj = _this.data[property];
            var splitPath = tnp_core_2.path.join(tnp_core_2.path.dirname(_this.path), c);
            tnp_helpers_1.Helpers.log("splitPath: " + splitPath, 2);
            tnp_helpers_1.Helpers.writeFile(splitPath, tnp_core_3._.isObject(obj) ? obj : {});
        });
        tnp_helpers_1.Helpers.log("Split done..", 2);
        if (removeFromPj) {
            var dataToWrite_1 = tnp_core_3._.cloneDeep(this.data);
            tnp_config_1.config.packageJsonSplit.forEach(function (c) {
                var property = c
                    .replace(tnp_config_1.config.file.package_json + "_", '')
                    .replace(".json", '');
                delete dataToWrite_1[property];
            });
            tnp_helpers_1.Helpers.writeFile(this.path, tnp_core_3._.isObject(dataToWrite_1) ? dataToWrite_1 : {});
        }
        else {
            tnp_helpers_1.Helpers.writeFile(this.path, tnp_core_3._.isObject(this.data) ? this.data : {});
        }
    };
    PackageJsonCore.prototype.writeToDisc = function (removeFromPj) {
        if (removeFromPj === void 0) { removeFromPj = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // console.log(this.data)
                this.splitAndWriteToDisc(removeFromPj);
                return [2 /*return*/];
            });
        });
    };
    PackageJsonCore.prototype.writeToDiscSync = function (removeFromPj) {
        if (removeFromPj === void 0) { removeFromPj = false; }
        // console.log(this.data)
        this.splitAndWriteToDisc(removeFromPj);
        // Helpers.log(`Press any key`)
        // await Helpers.pressKeyAndContinue()
    };
    PackageJsonCore.prototype.fixUnexistedBaselineInNOdeModules = function (pathToBaseline) {
        var baselineInNodeModuels = tnp_core_2.path.join(this.cwd, tnp_config_1.config.folder.node_modules, tnp_core_2.path.basename(pathToBaseline));
        if (!tnp_core_1.fse.existsSync(baselineInNodeModuels)) {
            tnp_helpers_1.Helpers.createSymLink(pathToBaseline, baselineInNodeModuels);
        }
    };
    return PackageJsonCore;
}());
exports.PackageJsonCore = PackageJsonCore;
//# sourceMappingURL=package-json-core.backend.js.map