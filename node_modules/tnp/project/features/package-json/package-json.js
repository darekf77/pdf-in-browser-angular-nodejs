"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var chalk_1 = require("chalk");
var package_json_base_backend_1 = require("./package-json-base.backend");
//#endregion
var tnp_core_3 = require("tnp-core");
var morphi_1 = require("morphi");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var OVERRIDE_FROM_TNP = [
    'scripts',
    'description',
    'license',
    'private',
    'author',
    'homepage',
    'main',
    'engines',
    'categories',
    'keywords',
    'activationEvents'
];
var PackageJSON = /** @class */ (function (_super) {
    tslib_1.__extends(PackageJSON
    //#region @backend
    , _super);
    function PackageJSON() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PackageJSON_1 = PackageJSON;
    //#region @backend
    PackageJSON.fromProject = function (project) {
        return this.fromLocation(project.location, project);
    };
    PackageJSON.fromLocation = function (location, project, warings) {
        if (project === void 0) { project = null; }
        if (warings === void 0) { warings = true; }
        if (!tnp_core_1.fse.existsSync(location)) {
            return void 0;
        }
        var filePath = {
            packgeJson: tnp_core_2.crossPlatformPath(tnp_core_2.path.join(location, tnp_config_1.config.file.package_json)),
            tnpJson: tnp_core_2.crossPlatformPath(tnp_core_2.path.join(location, tnp_config_1.config.file.package_json__tnp_json)),
        };
        var saveAtLoad = false;
        if (!tnp_helpers_1.Helpers.exists(filePath.packgeJson) && tnp_helpers_1.Helpers.exists(filePath.tnpJson)) {
            var tnpData_1 = tnp_helpers_1.Helpers.readJson(filePath.tnpJson, void 0);
            if (!tnpData_1) {
                // warn(`No package.json (and bad package.json_tnp) in folder: ${path.basename(location)}`)
                return;
            }
            tnp_helpers_1.Helpers.info("Recreating " + chalk_1.default.bold(tnp_core_2.path.basename(location)) + "/package.json from " + tnp_config_1.config.file.package_json__tnp_json + " and npm registry...");
            if (tnp_helpers_1.Helpers.isLink(filePath.packgeJson)) {
                tnp_helpers_1.Helpers.error('pizda');
            }
            var nameFromFolder = tnp_core_2.path.basename(filePath.packgeJson);
            var lastVersionFromNpm = void 0;
            try {
                lastVersionFromNpm = tnp_helpers_1.Helpers.run("npm show " + nameFromFolder + " version", { output: false }).sync().toString().trim();
            }
            catch (error) {
                tnp_helpers_1.Helpers.warn("Not able to get last version of project: " + nameFromFolder + " from npm registry...");
            }
            var newPackageJson_1 = {
                version: lastVersionFromNpm,
                name: nameFromFolder
            };
            OVERRIDE_FROM_TNP.forEach(function (key) {
                newPackageJson_1[key] = tnpData_1[key];
            });
            tnp_helpers_1.Helpers.writeFile(filePath.packgeJson, newPackageJson_1);
        }
        if (!tnp_core_1.fse.existsSync(filePath.packgeJson)) {
            // warn(`No package.json in folder: ${path.basename(location)}`)
            return;
        }
        var existed = {};
        tnp_config_1.config.packageJsonSplit.forEach(function (c) {
            var filePathSplitTnp = tnp_core_2.path.join(location, c);
            // let existedTnp = void 0;
            if (tnp_core_1.fse.existsSync(filePathSplitTnp)) {
                try {
                    var additionalSplitValue = tnp_helpers_1.Helpers.readJson(filePathSplitTnp, void 0);
                    if (tnp_core_3._.isObject(additionalSplitValue) && Object.keys(additionalSplitValue).length > 0) {
                        existed[c] = additionalSplitValue;
                    }
                    else {
                        // Helpers.warn(`[package-json] wrong content of ${c} in ${filePathSplitTnp}`)
                    }
                }
                catch (error) {
                    // Helpers.warn(`[package-json] not able to read: ${c}`)
                }
            }
            else {
                saveAtLoad = true;
            }
        });
        try {
            var json = tnp_helpers_1.Helpers.readJson(filePath.packgeJson);
            if (!json.version) {
                json.version = '0.0.0';
                saveAtLoad = true;
            }
            tnp_config_1.config.packageJsonSplit.forEach(function (c) {
                if (tnp_core_3._.isObject(existed[c])) {
                    // Helpers.log(`Assign existed ${c} for ${filePath}`);
                    var property = c
                        .replace(tnp_config_1.config.file.package_json + "_", '')
                        .replace(".json", '');
                    json[property] = existed[c];
                }
            });
            if (json.tnp) {
                if (!json.tnp.overrided) {
                    json.tnp.overrided = {};
                    saveAtLoad = true;
                }
                if (tnp_core_3._.isUndefined(json.tnp.linkedProjects)) {
                    json.tnp.linkedProjects = [];
                    saveAtLoad = true;
                }
                if (tnp_core_3._.isUndefined(json.tnp.libReleaseOptions)) {
                    json.tnp.libReleaseOptions = {
                        nodts: false,
                        obscure: false,
                        ugly: false,
                    };
                    saveAtLoad = true;
                }
                if (tnp_core_3._.isUndefined(json.tnp.libReleaseOptions.nodts)) {
                    json.tnp.libReleaseOptions.nodts = false;
                    saveAtLoad = true;
                }
                if (tnp_core_3._.isUndefined(json.tnp.libReleaseOptions.obscure)) {
                    json.tnp.libReleaseOptions.obscure = false;
                    saveAtLoad = true;
                }
                if (tnp_core_3._.isUndefined(json.tnp.libReleaseOptions.ugly)) {
                    json.tnp.libReleaseOptions.ugly = false;
                    saveAtLoad = true;
                }
                if (tnp_core_3._.isUndefined(json.tnp.overrided.linkedFolders)) {
                    json.tnp.overrided.linkedFolders = [];
                    saveAtLoad = true;
                }
                if (!tnp_core_3._.isArray(json.tnp.overrided.ignoreDepsPattern)) {
                    json.tnp.overrided.ignoreDepsPattern = ["*"];
                    saveAtLoad = true;
                }
                if (tnp_core_3._.isUndefined(json.tnp.overrided.includeAsDev)) {
                    json.tnp.overrided.includeAsDev = [];
                    saveAtLoad = true;
                }
                if (!tnp_core_3._.isArray(json.tnp.overrided.includeOnly)) {
                    json.tnp.overrided.includeOnly = [];
                    saveAtLoad = true;
                }
                if (!json.tnp.overrided.dependencies) {
                    json.tnp.overrided.dependencies = {};
                    saveAtLoad = true;
                }
                if (!json.dependencies) {
                    json.dependencies = {};
                    saveAtLoad = true;
                }
                if (!json.devDependencies) {
                    json.devDependencies = {};
                    saveAtLoad = true;
                }
                if (!tnp_core_3._.isArray(json.tnp.resources)) {
                    json.tnp.resources = [];
                    saveAtLoad = true;
                }
                if (!['navi', 'scenario'].includes(json.tnp.type)) {
                    OVERRIDE_FROM_TNP.forEach(function (key) {
                        var inPckageJson = json[key];
                        var inTnp = json.tnp[key];
                        if (tnp_core_3._.isNil(inPckageJson) && !tnp_core_3._.isNil(inTnp)) {
                            json[key] = json.tnp[key];
                        }
                        else if (!tnp_core_3._.isNil(inPckageJson) && tnp_core_3._.isNil(inTnp)) {
                            json.tnp[key] = json[key];
                        }
                        if (!tnp_core_3._.isEqual(json[key], json.tnp[key])) {
                            json[key] = json.tnp[key];
                            saveAtLoad = true;
                        }
                    });
                }
            }
            if (json.tnp && !['navi'].includes(json.tnp.type)) {
                json.name = tnp_core_2.path.basename(location);
            }
            var pkgJson = new PackageJSON_1({ data: json, location: location, project: project });
        }
        catch (err) {
            tnp_helpers_1.Helpers.error("[package-json] Error while parsing files:\n      - " + filePath.packgeJson + "\n      - " + filePath.tnpJson + "\n\n       ", false, true);
            return;
        }
        if (saveAtLoad) {
            tnp_helpers_1.Helpers.log("Saving fixed package.json structure in " + location);
            pkgJson.writeToDisc();
        }
        return pkgJson;
    };
    var PackageJSON_1;
    PackageJSON = PackageJSON_1 = tslib_1.__decorate([
        morphi_1.Morphi.Entity({
            className: 'PackageJSON',
            //#region @backend
            createTable: false
            //#endregion
        })
    ], PackageJSON);
    return PackageJSON;
}(package_json_base_backend_1.PackageJsonBase
//#endregion
));
exports.PackageJSON = PackageJSON;
//# sourceMappingURL=package-json.js.map