"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var morphi_1 = require("morphi");
var abstract_1 = require("../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var PackagesRecognitionExtended = /** @class */ (function (_super) {
    tslib_1.__extends(PackagesRecognitionExtended, _super);
    function PackagesRecognitionExtended() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PackagesRecognitionExtended.fromProject = function (project) {
        return new PackagesRecognitionExtended(project.location);
    };
    // @ts-ignore
    PackagesRecognitionExtended.prototype.start = function (force, reasonToSearch) {
        var _this = this;
        tnp_helpers_1.Helpers.log("[morphi] " + reasonToSearch);
        if (typeof force !== 'boolean') {
            force = false;
        }
        if (!global.globalSystemToolMode) {
            return;
        }
        tnp_helpers_1.Helpers.info("[package-recognition] Searching isomorphic packages... force=" + force + "\n    in " + this.cwd + "\n    ");
        tnp_helpers_1.Helpers.mesureExectionInMsSync("Searching isomorphic packages...", function () {
            _super.prototype.start.call(_this, true, reasonToSearch); // TODO QUICK_FIX
        });
        tnp_helpers_1.Helpers.info("[" + tnp_config_1.config.frameworkName + "] [package-recognition] Founded " + this.count + " isomorphic packages");
    };
    PackagesRecognitionExtended.prototype.checkIsomorphic = function (node_modules, packageName) {
        var pjPath = tnp_core_1.crossPlatformPath(tnp_core_2.fse.realpathSync(tnp_core_1.path.join(node_modules, packageName)));
        var res = false;
        try {
            tnp_helpers_1.Helpers.log("[" + tnp_config_1.config.frameworkName + "][checkIsomorphic] check project from " + pjPath);
            var proj = abstract_1.Project.From(pjPath);
            if (proj) {
                tnp_helpers_1.Helpers.log("[" + tnp_config_1.config.frameworkName + "] Proj \"" + proj.genericName + "\" type " + proj._type + ", standalone " + proj.isStandaloneProject);
                if (proj.typeIs.apply(proj, tnp_config_1.config.projectTypes.forNpmLibs)) {
                    res = proj.isStandaloneProject;
                }
                else {
                    res = _super.prototype.checkIsomorphic.call(this, node_modules, packageName);
                }
            }
        }
        catch (error) {
            tnp_helpers_1.Helpers.log("[" + tnp_config_1.config.frameworkName + "][pacakge-recognition] Not able to check " + pjPath);
        }
        // console.log(`checkIsomorphic: "${packageName}"`, res)
        return res;
    };
    return PackagesRecognitionExtended;
}(morphi_1.PackagesRecognition));
exports.PackagesRecognitionExtended = PackagesRecognitionExtended;
//#endregion
//# sourceMappingURL=packages-recognition-extended.js.map