"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_core_4 = require("tnp-core");
var tnp_core_5 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
;
var tnp_db_1 = require("tnp-db");
var abstract_2 = require("../../abstract");
var copy_manager_helpers_backend_1 = require("./copy-manager-helpers.backend");
//#endregion
var CopyManager = /** @class */ (function (_super) {
    tslib_1.__extends(CopyManager, _super);
    function CopyManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CopyManager.prototype.initCopyingOnBuildFinish = function (buildOptions, modifyPackageFile, renameDestinationFolder) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var watch, db, updateFromDbLastCommand_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.modifyPackageFile = modifyPackageFile;
                        this.renameDestinationFolder = renameDestinationFolder;
                        this.buildOptions = buildOptions;
                        watch = buildOptions.watch;
                        if (!Array.isArray(this.buildOptions.copyto)) {
                            this.buildOptions.copyto = [];
                        }
                        if (this.buildOptions.copyto.length === 0) {
                            tnp_helpers_1.Helpers.info("No need to copying on build finsh... ");
                            return [2 /*return*/];
                        }
                        if (!watch) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.start(void 0, void 0, watch)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.startAndWatch()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 3:
                        db = _a.sent();
                        updateFromDbLastCommand_1 = function (channel) { return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var db, cmd, b;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        tnp_helpers_1.Helpers.log("Trigger of updateFromDbLastCommand");
                                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                                    case 1:
                                        db = _a.sent();
                                        return [4 /*yield*/, db.getCommands()];
                                    case 2:
                                        cmd = (_a.sent()).find(function (c) { return c.isBuildCommand && c.location === abstract_1.Project.Current.location; });
                                        if (!cmd) return [3 /*break*/, 5];
                                        return [4 /*yield*/, tnp_db_1.BuildOptions.from(cmd.command, abstract_1.Project.Current)];
                                    case 3:
                                        b = _a.sent();
                                        tnp_helpers_1.Helpers.info("\n\n          COPYTO UPDATED: \"" + channel + "\"\n\n          from: " + this.buildOptions.copyto.map(function (c) { return c.name; }).join(', ') + "\n\n          to: " + b.copyto.map(function (c) { return c.name; }).join(', ') + "\n\n      ");
                                        this.buildOptions.copyto = tnp_helpers_1.Helpers.arrays.uniqArray(b.copyto, 'location');
                                        return [4 /*yield*/, db.updateCommandBuildOptions(cmd.location, this.buildOptions)];
                                    case 4:
                                        _a.sent();
                                        _a.label = 5;
                                    case 5: return [2 /*return*/];
                                }
                            });
                        }); }; };
                        db.listenToChannel(this.project, 'tnp-copyto-add', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        tnp_helpers_1.Helpers.log("[copytomanager] realtime update add");
                                        return [4 /*yield*/, updateFromDbLastCommand_1('tnp-copyto-add')()];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        db.listenToChannel(this.project, 'tnp-copyto-remove', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        tnp_helpers_1.Helpers.log("[copytomanager] realtime update remove");
                                        return [4 /*yield*/, updateFromDbLastCommand_1('tnp-copyto-remove')()];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); });
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, this.start()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(CopyManager.prototype, "projectToCopyTo", {
        //#endregion
        //#region start
        get: function () {
            if (Array.isArray(this.buildOptions.copyto) && this.buildOptions.copyto.length > 0) {
                return this.buildOptions.copyto;
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    CopyManager.prototype.start = function (event, specyficFileRelativePath, dontRemoveDestFolder) {
        if (dontRemoveDestFolder === void 0) { dontRemoveDestFolder = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var outDir, projectToCopyTo, index, p;
            return tslib_1.__generator(this, function (_a) {
                outDir = this.buildOptions.outDir;
                projectToCopyTo = this.projectToCopyTo;
                for (index = 0; index < projectToCopyTo.length; index++) {
                    p = projectToCopyTo[index];
                    this.copyBuildedDistributionTo(p, {
                        specyficFileRelativePath: event && specyficFileRelativePath,
                        outDir: outDir
                    }, dontRemoveDestFolder);
                }
                return [2 /*return*/];
            });
        });
    };
    //#endregion
    //#region start and watch
    CopyManager.prototype.startAndWatch = function () {
        var _this = this;
        var monitorDir = tnp_core_3.path.join(this.project.location, this.buildOptions.outDir);
        // Helpers.log(`watching folder for as copy source!! ${ monitorDir } `)
        if (tnp_core_2.fse.existsSync(monitorDir)) {
            tnp_core_5.chokidar.watch(monitorDir, {
                followSymlinks: false
            }).on('change', function (f) {
                if (tnp_core_1._.isString(f)) {
                    f = f.replace(monitorDir, '');
                    // console.log(f)
                }
                _this.start('changed', f);
            }).on('add', function (f) {
                if (tnp_core_1._.isString(f)) {
                    f = f.replace(monitorDir, '');
                    // console.log(f)
                }
                _this.start('created', f);
            }).on('unlink', function (f) {
                if (tnp_core_1._.isString(f)) {
                    f = f.replace(monitorDir, '');
                    // console.log(f)
                }
                _this.start('removed', f);
            });
        }
        else {
            console.log("Waiting for outdir: " + this.buildOptions.outDir + ", monitor Dir: " + monitorDir + " ");
            setTimeout(function () {
                _this.startAndWatch();
            }, 1000);
        }
    };
    //#endregion
    //#region generate source copy in
    CopyManager.prototype.generateSourceCopyIn = function (destinationLocation, options) {
        // if (this.project.isWorkspace) {
        //   console.log('GENERATING WORKSPACE')
        // }
        if (tnp_core_1._.isUndefined(options)) {
            options = {};
        }
        if (tnp_core_1._.isUndefined(options.filterForBundle)) {
            options.filterForBundle = true;
        }
        if (tnp_core_1._.isUndefined(options.forceCopyPackageJSON)) {
            options.forceCopyPackageJSON = false;
        }
        if (tnp_core_1._.isUndefined(options.ommitSourceCode)) {
            options.ommitSourceCode = false;
        }
        if (tnp_core_1._.isUndefined(options.override)) {
            options.override = true;
        }
        if (tnp_core_1._.isUndefined(options.showInfo)) {
            options.showInfo = true;
        }
        if (tnp_core_1._.isUndefined(options.regenerateProjectChilds)) {
            options.regenerateProjectChilds = false;
        }
        if (tnp_core_1._.isUndefined(options.useTempLocation)) {
            options.useTempLocation = true;
        }
        if (tnp_core_1._.isUndefined(options.markAsGenerated)) {
            options.markAsGenerated = true;
        }
        if (tnp_core_1._.isUndefined(options.regenerateOnlyCoreProjects)) {
            options.regenerateOnlyCoreProjects = true;
        }
        var override = options.override, showInfo = options.showInfo, markAsGenerated = options.markAsGenerated;
        var sourceLocation = this.project.location;
        var packageJson = tnp_core_2.fse.readJsonSync(tnp_core_3.path.join(sourceLocation, tnp_config_1.config.file.package_json), {
            encoding: 'utf8'
        });
        if (markAsGenerated && packageJson && packageJson.tnp) {
            packageJson.tnp.isGenerated = true;
        }
        if (this.project.isContainerWorkspaceRelated || options.forceCopyPackageJSON) {
            if (this.project.isWorkspace && markAsGenerated) {
                packageJson.tnp.isCoreProject = false;
            }
        }
        if (tnp_core_2.fse.existsSync(destinationLocation)) {
            if (override) {
                tnp_helpers_1.Helpers.tryRemoveDir(destinationLocation);
                tnp_helpers_1.Helpers.mkdirp(destinationLocation);
            }
            else {
                if (showInfo) {
                    tnp_helpers_1.Helpers.warn("Destination for project \"" + this.project.name + "\" already exists, only: source copy");
                }
                ;
            }
        }
        copy_manager_helpers_backend_1.CopyMangerHelpers.executeCopy(sourceLocation, destinationLocation, options, this.project);
        if (this.project.isContainerWorkspaceRelated || this.project.isVscodeExtension || options.forceCopyPackageJSON) {
            var packageJsonLocation = tnp_core_3.path.join(destinationLocation, tnp_config_1.config.file.package_json);
            // console.log(`packageJsonLocation: ${ packageJsonLocation } `)
            // console.log('packageJson', packageJson)
            tnp_core_2.fse.writeJsonSync(packageJsonLocation, packageJson, {
                spaces: 2,
                encoding: 'utf8'
            });
            // console.log(`packageJsonLocation saved: ${ packageJsonLocation } `)
        }
        if (this.project.isWorkspace) {
            if (options.markAsGenerated) {
                tnp_helpers_1.Helpers.writeFile(tnp_core_3.path.resolve(tnp_core_3.path.join(destinationLocation, '../info.txt')), "\n      This workspace is generated.\n      ");
            }
            else {
                tnp_helpers_1.Helpers.writeFile(tnp_core_3.path.resolve(tnp_core_3.path.join(destinationLocation, '../info.txt')), "\n      This is container for workspaces.\n      ");
            }
        }
        if (showInfo) {
            var dir = tnp_core_3.path.basename(tnp_core_3.path.dirname(destinationLocation));
            if (tnp_core_2.fse.existsSync(tnp_core_3.path.dirname(tnp_core_3.path.dirname(destinationLocation)))) {
                dir = tnp_core_3.path.basename(tnp_core_3.path.dirname(tnp_core_3.path.dirname(destinationLocation))) + " / " + dir + " ";
            }
            tnp_helpers_1.Helpers.info("Source of project \"" + this.project.genericName + "\" generated in " + dir + " /(< here >) ");
        }
        if (options.regenerateProjectChilds && this.project.isContainerWorkspaceRelated) {
            var childs = this.project.children;
            if (options.regenerateOnlyCoreProjects) {
                if (this.project.isCoreProject) {
                    if (this.project.isContainer) {
                        childs = this.project.children.filter(function (c) { return c.name === 'workspace'; });
                    }
                    if (this.project.isWorkspace) {
                        childs = this.project.children.filter(function (c) { return tnp_config_1.config.projectTypes.forNpmLibs.includes(c.name); });
                    }
                }
                else {
                    childs = [];
                }
            }
            childs.forEach(function (c) {
                // console.log('GENERATING CHILD ' + c.genericName)
                c.copyManager.generateSourceCopyIn(tnp_core_3.path.join(destinationLocation, c.name), options);
            });
        }
        return true;
    };
    //#endregion
    //#region copy build distribution to
    CopyManager.prototype.copyBuildedDistributionTo = function (destination, options, dontRemoveDestFolder) {
        var _this = this;
        var _a;
        var _b = options || {}, _c = _b.specyficFileRelativePath, specyficFileRelativePath = _c === void 0 ? void 0 : _c, _d = _b.outDir, outDir = _d === void 0 ? 'dist' : _d;
        if (!specyficFileRelativePath && (!destination || !destination.location)) {
            tnp_helpers_1.Helpers.warn("Invalid project: " + destination.name);
            return;
        }
        var namePackageName = ((tnp_core_1._.isString(this.renameDestinationFolder) && this.renameDestinationFolder !== '') ?
            this.renameDestinationFolder
            : this.project.name);
        var folderToLink = [
            "tmp-src-" + outDir,
            this.project.sourceFolder,
        ];
        var isSourceMapsDistBuild = (outDir === 'dist' && ((_a = this.buildOptions) === null || _a === void 0 ? void 0 : _a.watch));
        var allFolderLinksExists = !isSourceMapsDistBuild ? true : tnp_core_1._.isUndefined(folderToLink.find(function (sourceFolder) {
            var projectOudDirDest = tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName, sourceFolder);
            return !tnp_helpers_1.Helpers.exists(projectOudDirDest);
        }));
        if (specyficFileRelativePath && allFolderLinksExists) {
            //#region handle single file
            var sourceFile = tnp_core_3.path.normalize(tnp_core_3.path.join(this.project.location, outDir, specyficFileRelativePath));
            var destinationFile = tnp_core_3.path.normalize(tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName, specyficFileRelativePath));
            specyficFileRelativePath = specyficFileRelativePath.replace(/^\//, '');
            if (isSourceMapsDistBuild) {
                //#region handle dist copyto with source maps
                if (destinationFile.endsWith('.js.map')) {
                    var folderToLink_1 = [
                        "tmp-src-" + outDir,
                        this.project.sourceFolder,
                    ];
                    var content_1 = tnp_helpers_1.Helpers.readFile(sourceFile);
                    folderToLink_1.forEach(function (sourceFolder) {
                        content_1 = content_1.replace("\"../" + sourceFolder, "\"./" + sourceFolder);
                        content_1 = content_1.replace("../" + sourceFolder, sourceFolder);
                    });
                    tnp_helpers_1.Helpers.writeFile(destinationFile, content_1);
                }
                else if (specyficFileRelativePath !== tnp_config_1.config.file.index_d_ts) { // don't override index.d.ts
                    tnp_helpers_1.Helpers.copyFile(sourceFile, destinationFile);
                }
                //#endregion
            }
            else {
                tnp_helpers_1.Helpers.copyFile(sourceFile, destinationFile);
            }
            //#region copy package json to browser folder
            if (specyficFileRelativePath === tnp_config_1.config.file.package_json) {
                // TODO this is VSCODE/typescirpt new fucking issue
                // Helpers.copyFile(sourceFile, path.join(path.dirname(destinationFile), config.folder.browser, path.basename(destinationFile)));
            }
            //#endregion
            //#endregion
        }
        else {
            //#region handle whole folder at begin
            var projectOudDirDest = tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName);
            if (!dontRemoveDestFolder) {
                tnp_helpers_1.Helpers.tryRemoveDir(projectOudDirDest, true);
            }
            // console.info('[copyto] NORMAL INTSTALL')
            var monitoredOutDir = tnp_core_3.path.join(this.project.location, outDir);
            tnp_helpers_1.Helpers.tryCopyFrom(monitoredOutDir, projectOudDirDest);
            if (isSourceMapsDistBuild) {
                folderToLink.forEach(function (sourceFolder) {
                    var srcOrComponents = tnp_core_3.path.join(_this.project.location, sourceFolder);
                    var projectOudDirDest = tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName, sourceFolder);
                    tnp_helpers_1.Helpers.removeIfExists(projectOudDirDest);
                    tnp_helpers_1.Helpers.createSymLink(srcOrComponents, projectOudDirDest);
                });
                tnp_helpers_1.Helpers.writeFile(tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName, tnp_config_1.config.file.index_d_ts), "export * from './" + this.project.sourceFolder + "';\n");
                tnp_core_4.glob.sync(tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName) + "/" + tnp_config_1.config.folder.browser + "/**/*.js.map")
                    .forEach(function (f) {
                    var sourceFolder = "tmp-src-" + outDir;
                    var content = tnp_helpers_1.Helpers.readFile(f);
                    content = content.replace("../" + sourceFolder, sourceFolder);
                    tnp_helpers_1.Helpers.writeFile(f, content);
                });
                if (this.project.typeIsNot('angular-lib')) {
                    tnp_core_4.glob.sync(tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName) + "/**/*.js.map", { ignore: [tnp_config_1.config.folder.browser + "/**/*.*"] })
                        .forEach(function (f) {
                        var sourceFolder = _this.project.sourceFolder;
                        var content = tnp_helpers_1.Helpers.readFile(f);
                        content = content.replace("\"../" + sourceFolder, "\"./" + sourceFolder);
                        content = content.replace("../" + sourceFolder, sourceFolder);
                        tnp_helpers_1.Helpers.writeFile(f, content);
                    });
                }
            }
            else {
                folderToLink.forEach(function (sourceFolder) {
                    var projectOudDirDest = tnp_core_3.path.join(destination.location, tnp_config_1.config.folder.node_modules, namePackageName, sourceFolder);
                    tnp_helpers_1.Helpers.removeIfExists(projectOudDirDest);
                });
            }
            // TODO not working werid tsc issue with browser/index
            // {const projectOudBorwserSrc = path.join(destination.location,
            //   config.folder.node_modules,
            //   namePackageName,
            //   config.file.package_json
            // );
            // const projectOudBorwserDest = path.join(destination.location,
            //   config.folder.node_modules,
            //   namePackageName,
            //   config.folder.browser,
            //   config.file.package_json
            // );
            // Helpers.copyFile(projectOudBorwserSrc, projectOudBorwserDest);}
            //#endregion
        }
    };
    return CopyManager;
}(abstract_2.FeatureForProject));
exports.CopyManager = CopyManager;
//# sourceMappingURL=copy-manager.backend.js.map