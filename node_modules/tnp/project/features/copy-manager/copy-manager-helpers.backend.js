"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
;
//#endregion
var CopyMangerHelpers;
(function (CopyMangerHelpers) {
    function filterDontCopy(basePathFoldersTosSkip, project) {
        return function (src, dest) {
            // console.log('src',src)
            var baseFolder = tnp_core_1._.first(src.replace(project.location, '')
                .replace(/^\//, '').split('/'));
            if (!baseFolder || baseFolder.trim() === '') {
                return true;
            }
            var isAllowed = tnp_core_1._.isUndefined(basePathFoldersTosSkip.find(function (f) { return baseFolder.startsWith(f); }));
            return isAllowed;
        };
    }
    CopyMangerHelpers.filterDontCopy = filterDontCopy;
    function filterOnlyCopy(basePathFoldersOnlyToInclude, project) {
        return function (src, dest) {
            var baseFolder = tnp_core_1._.first(src.replace(project.location, '')
                .replace(/^\//, '').split('/'));
            if (!baseFolder || baseFolder.trim() === '') {
                return true;
            }
            var isAllowed = !tnp_core_1._.isUndefined(basePathFoldersOnlyToInclude.find(function (f) { return baseFolder.startsWith(f); }));
            return isAllowed;
        };
    }
    CopyMangerHelpers.filterOnlyCopy = filterOnlyCopy;
    function executeCopy(sourceLocation, destinationLocation, options, project) {
        var useTempLocation = options.useTempLocation, filterForBundle = options.filterForBundle, ommitSourceCode = options.ommitSourceCode, override = options.override;
        var tempDestination;
        // console.log('useTempLocation',useTempLocation)
        if (useTempLocation) {
            tempDestination = tnp_helpers_1.Helpers.getTempFolder() + "/" + tnp_core_1._.camelCase(destinationLocation);
            if (tnp_core_2.fse.existsSync(tempDestination)) {
                tnp_helpers_1.Helpers.remove(tempDestination);
            }
            tnp_helpers_1.Helpers.mkdirp(tempDestination);
            // console.log(`tempDestination: "${tempDestination}"`);
            // process.exit(0)
        }
        else {
            tempDestination = destinationLocation;
        }
        sourceLocation = tnp_core_1.crossPlatformPath(sourceLocation);
        tempDestination = tnp_core_1.crossPlatformPath(tempDestination);
        destinationLocation = tnp_core_1.crossPlatformPath(destinationLocation);
        var sourceFolders = [
            tnp_config_1.config.folder.src,
            tnp_config_1.config.folder.components,
            tnp_config_1.config.folder.custom,
        ];
        var foldersToSkip = tslib_1.__spreadArrays((filterForBundle ? tslib_1.__spreadArrays([
            '.vscode'
        ], tnp_core_1._.values(tnp_config_1.config.tempFolders)) : []), (project.projectLinkedFiles().map(function (c) { return c.relativePath; })), ((filterForBundle && ommitSourceCode) ? sourceFolders : []), (project.isWorkspace ? project.children.map(function (c) { return c.name; }) : []));
        // console.log(foldersToSkip)
        var filter = override ? CopyMangerHelpers.filterOnlyCopy(sourceFolders, project)
            : CopyMangerHelpers.filterDontCopy(foldersToSkip, project);
        tnp_helpers_1.Helpers.copy(sourceLocation + "/", tempDestination, { filter: filter });
        if (useTempLocation) {
            tnp_helpers_1.Helpers.copy(tempDestination + "/", destinationLocation);
            tnp_helpers_1.Helpers.remove(tempDestination);
        }
        if (project.isContainerWorkspaceRelated) {
            // console.log(`For project: ${this.project.genericName} files:
            // ${this.project.projectSourceFiles()}
            // `)
            project.projectSourceFiles().forEach(function (f) {
                var source = tnp_core_1.crossPlatformPath(tnp_core_3.path.join(project.location, f));
                if (tnp_core_2.fse.existsSync(source)) {
                    tnp_helpers_1.Helpers.log("Copying file/folder to static build: " + f + " ");
                    if (tnp_core_2.fse.lstatSync(source).isDirectory()) {
                        tnp_helpers_1.Helpers.tryCopyFrom(source, tnp_core_3.path.join(destinationLocation, f));
                    }
                    else {
                        tnp_helpers_1.Helpers.copyFile(source, tnp_core_3.path.join(destinationLocation, f));
                    }
                }
                else {
                    tnp_helpers_1.Helpers.log("[executeCopy] Doesn not exist source: " + source);
                }
            });
        }
    }
    CopyMangerHelpers.executeCopy = executeCopy;
})(CopyMangerHelpers = exports.CopyMangerHelpers || (exports.CopyMangerHelpers = {}));
//# sourceMappingURL=copy-manager-helpers.backend.js.map