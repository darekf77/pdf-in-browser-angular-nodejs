"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var abstract_1 = require("../../abstract");
var node_modules_helpers_backend_1 = require("./node-modules-helpers.backend");
//#endregion
var NodeModulesCore = /** @class */ (function (_super) {
    tslib_1.__extends(NodeModulesCore, _super);
    function NodeModulesCore() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dedupe = function (packages) {
            node_modules_helpers_backend_1.dedupePackages(_this.project.location, packages, false, !_this.project.npmPackages.useSmartInstall);
        };
        // public stuberizeFrontendPackages = (packages?: string[]) => stuberizeFrontendPackages(this.project, packages);
        _this.dedupeCount = function (packages) {
            node_modules_helpers_backend_1.dedupePackages(_this.project.location, packages, true, !_this.project.npmPackages.useSmartInstall);
        };
        _this.remove = function (packageInside) {
            if (packageInside) {
                tnp_helpers_1.Helpers.removeIfExists(tnp_core_1.path.join(_this.path, packageInside));
                return;
            }
            tnp_helpers_1.Helpers.tryRemoveDir(_this.path);
        };
        _this.linkToProject = function (target) {
            if (!_this.project.node_modules.exist) {
                _this.project.run(tnp_config_1.config.frameworkName + " install").sync();
            }
            tnp_helpers_1.Helpers.createSymLink(_this.path, target.node_modules.path);
        };
        /**
         * Just create folder... without npm instalation
         */
        _this.recreateFolder = function () { return !tnp_core_2.fse.existsSync(_this.path) && tnp_helpers_1.Helpers.mkdirp(_this.path); };
        return _this;
        // public contains(pkg: Package) {
        //   if (_.isObject(pkg) && pkg.name) {
        //     if (fse.existsSync(path.join(this.path, pkg.name))) {
        //     }
        //   }
        //   return false;
        // }
    }
    Object.defineProperty(NodeModulesCore.prototype, "path", {
        get: function () { return tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.node_modules); },
        enumerable: true,
        configurable: true
    });
    NodeModulesCore.prototype.pathFor = function (packageName) {
        return tnp_core_1.path.join(this.path, packageName);
    };
    Object.defineProperty(NodeModulesCore.prototype, "exist", {
        get: function () { return node_modules_helpers_backend_1.nodeModulesExists(this.project); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeModulesCore.prototype, "isLink", {
        get: function () { return tnp_helpers_1.Helpers.isLink(this.path); },
        enumerable: true,
        configurable: true
    });
    return NodeModulesCore;
}(abstract_1.FeatureForProject));
exports.NodeModulesCore = NodeModulesCore;
//# sourceMappingURL=node-modules-core.backend.js.map