"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_cli_1 = require("tnp-cli");
var tnp_core_4 = require("tnp-core");
var abstract_1 = require("../../abstract");
var tnp_models_1 = require("tnp-models");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
//#region dedupe packages
function dedupePackages(projectLocation, packages, countOnly, warnings) {
    if (countOnly === void 0) { countOnly = false; }
    if (warnings === void 0) { warnings = true; }
    var packagesNames = (tnp_core_3._.isArray(packages) && packages.length > 0) ? packages :
        abstract_1.Project.Tnp.packageJson.data.tnp.core.dependencies.dedupe;
    // console.log('(Project.Tnp as Project).packageJson.data.tnp.core.dependencies.dedupe;',(Project.Tnp as Project).packageJson.data.tnp.core.dependencies.dedupe)
    // console.log('packages to dedupe', packagesNames)
    // process.exit(0)
    var rules = {};
    packagesNames = packagesNames.reduce(function (a, current, i, arr) {
        return a.concat(tslib_1.__spreadArrays((Array.isArray(current) ? (function (depsArr) {
            var first = tnp_core_3._.first(depsArr);
            depsArr = depsArr.slice(1);
            rules[first] = {
                ommitParents: depsArr
                    .filter(function (f) { return f.startsWith('\!'); })
                    .map(function (f) { return f.replace(/^\!/, ''); }),
                onlyFor: depsArr
                    .filter(function (f) { return !f.startsWith('\!'); })
            };
            if (rules[first].onlyFor.length === 0) {
                delete rules[first].onlyFor;
            }
            if (rules[first].ommitParents.length === 0) {
                delete rules[first].ommitParents;
            }
            return [first];
        })(current) : [current])));
    }, []);
    packagesNames.forEach(function (f) {
        var organizationProjectSeondPart = '';
        if (f.search('/') !== -1) {
            organizationProjectSeondPart = f.split('/')[1];
            f = tnp_core_3._.first(f.split('/'));
        }
        var pathToCurrent = tnp_core_1.path.join(projectLocation, tnp_config_1.config.folder.node_modules, f, organizationProjectSeondPart);
        var current = abstract_1.Project.From(pathToCurrent);
        if (!current) {
            warnings && tnp_helpers_1.Helpers.warn("Project with name " + f + " not founded");
            return;
        }
        tnp_helpers_1.Helpers.log("Scanning for duplicates of current " + current.name + "@" + current.version + " ....\n");
        var nodeMod = tnp_core_1.path.join(projectLocation, tnp_config_1.config.folder.node_modules);
        if (!tnp_core_2.fse.existsSync(nodeMod)) {
            tnp_helpers_1.Helpers.mkdirp(nodeMod);
        }
        var removeCommand = "find " + tnp_config_1.config.folder.node_modules + "/ -name " + f.replace('@', '\\@') + " ";
        // console.log(`removeCommand: ${removeCommand}`)
        var res = tnp_helpers_1.Helpers.run(removeCommand, { output: false, cwd: projectLocation }).sync().toString();
        var duplicates = res
            .split('\n')
            .map(function (l) { return l.replace(/\/\//g, '/'); })
            .filter(function (l) { return !!l; })
            .filter(function (l) { return !l.startsWith(tnp_config_1.config.folder.node_modules + "/" + f); })
            .filter(function (l) { return !l.startsWith(tnp_config_1.config.folder.node_modules + "/" + tnp_config_1.config.folder._bin); })
            .filter(function (l) { return tnp_core_1.path.basename(tnp_core_1.path.dirname(l)) === tnp_config_1.config.folder.node_modules; });
        // console.log(duplicates);
        // process.exit(0)
        if (countOnly) {
            duplicates.forEach(function (duplicateRelativePath, i) {
                var p = tnp_core_1.path.join(projectLocation, duplicateRelativePath, organizationProjectSeondPart);
                var nproj = abstract_1.Project.From(p);
                if (!nproj) {
                    // Helpers.warn(`Not able to identyfy project in ${p}`)
                }
                else {
                    p = p.replace(tnp_core_1.path.join(projectLocation, tnp_config_1.config.folder.node_modules), '');
                    tnp_helpers_1.Helpers.log(i + 1 + ". Duplicate \"" + nproj.name + "@" + nproj.version + "\" in:\n\t " + tnp_cli_1.CLI.chalk.bold(p) + "\n");
                }
            });
            if (duplicates.length === 0) {
                tnp_helpers_1.Helpers.log("No dupicate of " + current.name + " fouded.");
            }
        }
        else {
            duplicates.forEach(function (duplicateRelativePath) {
                var p = tnp_core_1.path.join(projectLocation, duplicateRelativePath);
                var projRem = abstract_1.Project.From(p);
                var versionRem = projRem && projRem.version;
                var parentName = tnp_core_1.path.basename(tnp_core_1.path.dirname(p)
                    .replace(new RegExp(tnp_helpers_1.Helpers.escapeStringForRegEx(tnp_config_1.config.folder.node_modules) + "/?$"), '')
                    .replace(/\/$/, ''));
                var org = tnp_core_1.path.basename(tnp_core_1.path.dirname(tnp_core_1.path.dirname(tnp_core_1.path.dirname(p))));
                if (org.startsWith('\@')) {
                    parentName = org + "/" + parentName;
                }
                if (rules[current.name]) {
                    var r = rules[current.name];
                    if (tnp_core_3._.isArray(r.ommitParents) && (r.ommitParents.includes(parentName) || tnp_core_3._.isObject(r.ommitParents.find(function (o) { return o.startsWith(parentName.replace('*', '')); })))) {
                        tnp_helpers_1.Helpers.warn("[excluded] Ommiting duplicate of " + current.name + "@" + versionRem + " inside " + tnp_cli_1.CLI.chalk.bold(parentName));
                        return;
                    }
                    if (tnp_core_3._.isArray(r.onlyFor) && !r.onlyFor.includes(parentName)) {
                        tnp_helpers_1.Helpers.warn("[not included] Ommiting duplicate of " + current.name + "@" + versionRem + " inside " + tnp_cli_1.CLI.chalk.bold(parentName));
                        return;
                    }
                }
                tnp_helpers_1.Helpers.remove(p, true);
                tnp_helpers_1.Helpers.info("Duplicate of " + current.name + "@" + versionRem + " removed from " + tnp_cli_1.CLI.chalk.bold(parentName));
            });
        }
    });
}
exports.dedupePackages = dedupePackages;
//#endregion
//#region node module exists
function nodeMOdulesOK(pathToFolder, moreThan) {
    if (moreThan === void 0) { moreThan = 1; }
    if (tnp_core_3._.isArray(pathToFolder)) {
        pathToFolder = tnp_core_1.path.join.apply(tnp_core_1.path, pathToFolder);
    }
    var res = false;
    tnp_helpers_1.Helpers.log("[node-modules] checking if exists in: " + pathToFolder);
    if (tnp_helpers_1.Helpers.exists(pathToFolder)) {
        var count_1 = {
            files: 0,
            folders: 0,
            links: 0
        };
        res = !tnp_core_3._.isUndefined(tnp_core_2.fse.readdirSync(pathToFolder)
            .map(function (f) { return tnp_core_1.path.join(pathToFolder, f); })
            .find(function (f) {
            if (count_1.files > moreThan) {
                return true;
            }
            if (count_1.folders > moreThan) {
                return true;
            }
            if (count_1.links > moreThan) {
                return true;
            }
            if (tnp_helpers_1.Helpers.isLink(f)) {
                count_1.links++;
            }
            else if (tnp_helpers_1.Helpers.isFolder(f)) {
                count_1.folders++;
            }
            else if (tnp_helpers_1.Helpers.isFile(f)) {
                count_1.files++;
            }
            return false;
        }));
    }
    tnp_helpers_1.Helpers.log("[node-modules] checking done: " + res);
    return res;
}
function nodeModulesExists(project) {
    if (project.isWorkspace || project.isStandaloneProject) {
        var nodeModulesPath = tnp_core_1.path.join(project.location, tnp_config_1.config.folder.node_modules);
        var pathBin = tnp_core_1.path.join(nodeModulesPath, tnp_config_1.config.folder._bin);
        var dummyPackages = tnp_config_1.config.quickFixes.missingLibs.length + 1;
        var fullOfPackages = nodeMOdulesOK(nodeModulesPath, dummyPackages);
        var res = tnp_helpers_1.Helpers.exists(pathBin) && fullOfPackages;
        return res;
    }
    if (project.isWorkspaceChildProject) {
        if (project.parent.node_modules.exist) {
            project.parent.node_modules.linkToProject(project);
            return true;
        }
        else {
            return false;
        }
    }
    var p = tnp_core_1.path.join(project.location, tnp_config_1.config.folder.node_modules);
    return tnp_core_2.fse.existsSync(p);
}
exports.nodeModulesExists = nodeModulesExists;
//#endregion
//#region add dependencies
function addDependenceis(project, context, allNamesBefore) {
    if (allNamesBefore === void 0) { allNamesBefore = []; }
    var newNames = [];
    if (!allNamesBefore.includes(project.name)) {
        newNames.push(project.name);
    }
    tnp_models_1.Models.npm.ArrNpmDependencyType.forEach(function (depName) {
        newNames = newNames.concat(project.getDepsAsProject(depName, context)
            .filter(function (d) { return !allNamesBefore.includes(d.name); })
            .map(function (d) { return d.name; }));
    });
    var uniq = {};
    newNames.forEach(function (name) { return uniq[name] = name; });
    newNames = Object.keys(uniq);
    var projects = newNames
        .map(function (name) {
        return abstract_1.Project.From(tnp_core_1.path.join(context, tnp_config_1.config.folder.node_modules, name));
    })
        .filter(function (f) { return !!f; });
    // console.log('projects', projects.length)
    allNamesBefore = allNamesBefore.concat(newNames);
    projects.forEach(function (dep) {
        allNamesBefore = addDependenceis(dep, context, allNamesBefore);
    });
    return allNamesBefore;
}
exports.addDependenceis = addDependenceis;
//#endregion
//#region stuberize frontend package for backedn
var regexForClassFunctinoInLine = new RegExp("[a-zA-Z]+\\(");
var regexForClassStaticFunctinoInLine = new RegExp("static +[a-zA-Z]+\\(");
var regexForFunctinoInLine = new RegExp("function [a-zA-Z]+\\(");
var regexForGenericFunctinoInLine = new RegExp("function [a-zA-Z]+\\<");
var regexIsExportedConst = new RegExp("export\\ +const ");
var specialFunctionEnd = "//<replace>";
var notAllowedFolderToCopy = [
    'browser',
    'bundles',
    'esm5',
    'esm2015',
    'fesm5',
    'fesm2015',
    'dist',
    'bundle'
];
function fixPackageJson(pathToPacakgeJson) {
    var file = tnp_helpers_1.Helpers.readJson(pathToPacakgeJson);
    var newFile = tnp_core_3._.pick(file, [
        'name',
        'version',
        'tnp',
        'dependencies',
        'devDependencies',
        'license',
        'bin',
    ]);
    newFile.tnp = {
        version: 'v2',
        type: 'angular-lib',
    };
    tnp_helpers_1.Helpers.writeFile(pathToPacakgeJson, newFile);
}
function generatedFileWrap(content) {
    return (content + "\n// [" + tnp_config_1.config.frameworkName + "] GENERATED CONTENT FOR BACKEND VERSION\n// [" + tnp_config_1.config.frameworkName + "] GENERATED CONTENT FOR BACKEND VERSION\n        ").trim();
}
function createSubVersion(proj, symlinkFolderFromSrcToRcreate) {
    var projLocation = (proj.location);
    var newStuberizedName = "" + tnp_core_1.path.basename(projLocation) + tnp_config_1.config.SUBERIZED_PREFIX;
    var newProjStubLocaiton = tnp_core_1.path.join(tnp_core_1.path.dirname(projLocation), newStuberizedName);
    var filesAndFolderToCopy = tnp_core_2.fse
        .readdirSync(projLocation)
        .filter(function (f) { return ![
        tnp_config_1.config.folder.browser,
        tnp_config_1.config.folder._browser,
    ].includes(f); });
    tnp_helpers_1.Helpers.removeFolderIfExists(newProjStubLocaiton);
    filesAndFolderToCopy.forEach(function (fileOrFolderName) {
        var source = tnp_core_1.path.join(projLocation, fileOrFolderName);
        var dest = tnp_core_1.path.join(newProjStubLocaiton, fileOrFolderName);
        if (tnp_helpers_1.Helpers.isFolder(source)) {
            tnp_helpers_1.Helpers.copy(source, dest);
        }
        else {
            tnp_helpers_1.Helpers.copyFile(source, dest);
        }
    });
    symlinkFolderFromSrcToRcreate.forEach(function (folderLinkName) {
        var source = tnp_core_1.path.join(newProjStubLocaiton, tnp_config_1.config.folder.dist, folderLinkName);
        var dest = tnp_core_1.path.join(newProjStubLocaiton, folderLinkName);
        tnp_helpers_1.Helpers.createSymLink(source, dest);
    });
    tnp_helpers_1.Helpers.removeExcept(projLocation, [
        tnp_config_1.config.folder._browser,
        tnp_config_1.config.folder.browser,
    ]);
    tnp_core_2.fse.readdirSync(tnp_core_1.path.join(projLocation, tnp_config_1.config.folder.browser))
        .forEach(function (fileOrFolderName) {
        var source = tnp_core_1.path.join(tnp_core_1.path.join(projLocation, tnp_config_1.config.folder.browser, fileOrFolderName));
        var dest = tnp_core_1.path.join(tnp_core_1.path.join(projLocation, fileOrFolderName));
        tnp_helpers_1.Helpers.removeIfExists(dest);
        if (tnp_helpers_1.Helpers.isFolder(source)) {
            tnp_helpers_1.Helpers.copy(source, dest);
        }
        else {
            tnp_helpers_1.Helpers.copyFile(source, dest);
        }
    });
    tnp_helpers_1.Helpers.removeFolderIfExists(tnp_core_1.path.join(projLocation, tnp_config_1.config.folder.browser));
}
function stuberizeFrontendPackages(project, packages) {
    var tnp = abstract_1.Project.Tnp;
    var packagesNames = (tnp_core_3._.isArray(packages) && packages.length > 0) ? packages :
        tnp.packageJson.data.tnp.core.dependencies.stubForBackend;
    project.quickFixes.badTypesInNodeModules();
    tnp_helpers_1.Helpers.info("Suberization of packages: \n" + packagesNames.map(function (p) { return "- " + p; }).join(',\n') + "\n\n");
    var _loop_1 = function (index) {
        var packageName = packagesNames[index];
        tnp_helpers_1.Helpers.info("[tnp][node_modueles] Stuberization of package " + tnp_cli_1.CLI.chalk.bold(packageName));
        var packageJsonPath = tnp_core_1.path.join(project.node_modules.path, packageName, tnp_config_1.config.file.package_json);
        var packageJsonInBrowser = tnp_core_1.path.join(project.node_modules.path, packageName, tnp_config_1.config.folder._browser, tnp_config_1.config.file.package_json);
        if (!tnp_helpers_1.Helpers.exists(packageJsonPath) && tnp_helpers_1.Helpers.exists(packageJsonInBrowser)) {
            tnp_helpers_1.Helpers.copyFile(packageJsonInBrowser, packageJsonPath);
        }
        fixPackageJson(packageJsonPath);
        var proj = abstract_1.Project.From(tnp_core_1.path.join(project.node_modules.path, packageName));
        // Helpers.run(`cp -r ${proj.location}`)
        var orginalBrowserPackage = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder._browser);
        var browserDataLocation = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.browser);
        if (tnp_helpers_1.Helpers.exists(orginalBrowserPackage)) {
            tnp_helpers_1.Helpers.removeExcept(proj.location, [
                tnp_config_1.config.folder._browser,
                tnp_config_1.config.file.package_json,
            ]);
        }
        if (!tnp_helpers_1.Helpers.exists(orginalBrowserPackage) && tnp_helpers_1.Helpers.exists(browserDataLocation)) {
            tnp_helpers_1.Helpers.copy(browserDataLocation, orginalBrowserPackage);
        }
        if (!tnp_helpers_1.Helpers.exists(orginalBrowserPackage)) {
            tnp_helpers_1.Helpers.copy(proj.location, orginalBrowserPackage, { useTempFolder: true });
        }
        tnp_helpers_1.Helpers.removeFolderIfExists(browserDataLocation);
        tnp_helpers_1.Helpers.copy(orginalBrowserPackage, browserDataLocation);
        tnp_helpers_1.Helpers.removeExcept(proj.location, [
            tnp_config_1.config.folder.browser,
            tnp_config_1.config.folder._browser,
            tnp_config_1.config.file.package_json,
        ]);
        var browserFolders = tnp_core_2.fse
            .readdirSync(tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.browser))
            .filter(function (f) {
            var fileOrFoler = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.browser, f);
            return tnp_core_2.fse.lstatSync(fileOrFoler).isDirectory();
        })
            .filter(function (folderName) { return !notAllowedFolderToCopy.includes(folderName); });
        browserFolders.forEach(function (folderName) {
            var source = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.browser, folderName);
            var dest = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.src, folderName);
            tnp_helpers_1.Helpers.removeFolderIfExists(dest);
            tnp_helpers_1.Helpers.copy(source, dest);
        });
        var mainPublicApi = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.browser, tnp_config_1.config.file.publicApi_d_ts);
        if (tnp_helpers_1.Helpers.exists(mainPublicApi)) {
            tnp_helpers_1.Helpers.copyFile(mainPublicApi, tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.src, tnp_config_1.config.file.index_d_ts));
        }
        var files = tnp_core_4.glob.sync(proj.location + "/src/**/*.d.ts");
        var _loop_2 = function (index_1) {
            var f = files[index_1];
            // console.log(`processing: ${f}`)
            var newFile = f.replace(".d.ts", '.ts');
            var mode;
            var rawContent = tnp_helpers_1.Helpers.readFile(f);
            var splitLength = rawContent.split("\n");
            var newContent = splitLength
                .map(function (l, i) {
                if (l.search(' class ') !== -1) {
                    mode = 'class';
                }
                if (l.search(' interface ') !== -1) {
                    mode = 'interface';
                }
                l = l.replace(new RegExp(tnp_helpers_1.Helpers.escapeStringForRegEx('declare '), 'g'), ' ');
                if (mode !== 'interface') {
                    l = l.replace(new RegExp(tnp_helpers_1.Helpers.escapeStringForRegEx('): void;'), 'g'), '):any { }');
                }
                var org = l;
                l = l.trim();
                if (regexIsExportedConst.test(l)) {
                    var res = "// @ts-ignore\n" + l;
                    if (mode === 'function') {
                        mode = void 0;
                        return specialFunctionEnd + "\n" + res;
                    }
                    return res;
                }
                if (regexForGenericFunctinoInLine.test(l)) {
                    if (l.endsWith('{')) {
                        mode = 'function';
                        return org;
                    }
                    else {
                        var begin = l.match(regexForGenericFunctinoInLine)[0];
                        var after = "<(any?):any {};";
                        if (mode === 'function') {
                            mode = void 0;
                            return specialFunctionEnd + "\nexport " + begin + after;
                        }
                        return "export " + begin + after;
                    }
                }
                if (regexForFunctinoInLine.test(l)) {
                    if (l.endsWith('{')) {
                        mode = 'function';
                        return org;
                    }
                    else {
                        var begin = l.match(regexForFunctinoInLine)[0];
                        var after = "any?):any {};";
                        if (mode === 'function') {
                            mode = void 0;
                            return specialFunctionEnd + "\nexport " + begin + after;
                        }
                        return "export " + begin + after;
                    }
                }
                if (regexForClassStaticFunctinoInLine.test(l)) {
                    if (l.endsWith('{')) {
                        return "// @ts-ignore\n" + org;
                    }
                    else if (l.endsWith(');')) { // constructor
                        return "// @ts-ignore\n" + ("" + l.replace(/\)\;$/, ') { };'));
                    }
                    else if (l.endsWith('>;')) { // generic end
                        return "// @ts-ignore\n" + ("" + l.replace(/\>\;$/, '> { };'));
                    }
                    else {
                        return "// @ts-ignore\n" + org;
                    }
                }
                if (regexForClassFunctinoInLine.test(l)) {
                    if (l.endsWith('{')) {
                        return "// @ts-ignore\n" + org;
                    }
                    else if (l.endsWith(');')) { // constructor
                        return "// @ts-ignore\n" + ("" + l.replace(/\)\;$/, ') { };'));
                    }
                    else if (l.endsWith('>;')) { // generic end
                        return "// @ts-ignore\n" + ("" + l.replace(/\>\;$/, '> { };'));
                    }
                    else {
                        return "// @ts-ignore\n" + org;
                    }
                }
                // if(mode === 'function' && l.endsWith(';')) {
                //   mode = void 0;
                //   return l.replace(/\;$/,' { return void 0; }');
                // }
                return org;
            })
                .join('\n');
            // post processing
            newContent = newContent.replace(new RegExp(";\\n" + tnp_helpers_1.Helpers.escapeStringForRegEx(specialFunctionEnd), 'g'), ' { return void 0; }\n');
            tnp_helpers_1.Helpers.writeFile(newFile, generatedFileWrap(newContent));
            tnp_helpers_1.Helpers.removeFileIfExists(f);
        };
        // console.log(files);
        // process.exit(0)
        for (var index_1 = 0; index_1 < files.length; index_1++) {
            _loop_2(index_1);
        }
        //#region handle absolute referenes
        var tsFoldersInSrc = tnp_core_2.fse
            .readdirSync(tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.src))
            .filter(function (f) {
            var fileOrFoler = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.src, f);
            return tnp_core_2.fse.lstatSync(fileOrFoler).isDirectory();
        });
        tnp_helpers_1.Helpers.mkdirp(tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.node_modules));
        tsFoldersInSrc.concat([tnp_config_1.config.file.index_ts]).forEach(function (folderName) {
            var source = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.src, folderName);
            var dest = tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.node_modules, proj.name, folderName);
            tnp_helpers_1.Helpers.createSymLink(source, dest);
        });
        //#endregion
        var allPublicApis = tnp_core_4.glob.sync(proj.location + "/src/**/public_api.ts");
        allPublicApis.forEach(function (source) {
            var dest = tnp_core_1.path.join(tnp_core_1.path.dirname(source), tnp_config_1.config.file.index_ts);
            tnp_helpers_1.Helpers.copyFile(source, dest);
            // Helpers.createSymLink(source,dest);
        });
        tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(proj.location, tnp_config_1.config.file.tsconfig_json), {
            "compilerOptions": {
                "module": "commonjs",
                "declaration": true,
                "removeComments": false,
                "preserveConstEnums": true,
                "sourceMap": true,
                "outDir": "dist"
            },
            "include": [
                "./src"
            ]
        });
        tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(proj.location, tnp_config_1.config.file.index_d_ts), generatedFileWrap("export * from './dist';"));
        tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(proj.location, tnp_config_1.config.file.index_js), generatedFileWrap("\n    \"use strict\";\n    Object.defineProperty(exports, '__esModule', { value: true });\n    var tslib_1 = require('tslib');\n    tslib_1.__exportStar(require('./dist'), exports);\n            ".trim()));
        tnp_helpers_1.Helpers.removeFolderIfExists(tnp_core_1.path.join(proj.location, tnp_config_1.config.folder.dist));
        try {
            proj.run('npm-run tsc').sync(); // TODO bette algorith for stubs + npm pacakge firedev-tsc + release of all packages
            // Helpers.removeFolderIfExists(path.join(proj.location, config.folder.src));
            // tsFoldersInSrc.forEach(folderLinkName => {
            //   Helpers.removeFileIfExists(path.join(proj.location, folderLinkName));
            // })
            // Helpers.removeFileIfExists(path.join(proj.location, config.file.tsconfig_json));
            // Helpers.removeFolderIfExists(path.join(proj.location, config.folder.node_modules));
            // createSubVersion(proj, tsFoldersInSrc);
        }
        catch (er) {
            tnp_helpers_1.Helpers.error("Not able to suberize pacakge \"" + packageName + "\"", false, true);
        }
    };
    for (var index = 0; index < packagesNames.length; index++) {
        _loop_1(index);
    }
}
exports.stuberizeFrontendPackages = stuberizeFrontendPackages;
//#endregion
//# sourceMappingURL=node-modules-helpers.backend.js.map