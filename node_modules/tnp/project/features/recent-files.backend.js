"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports / exports
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var feature_for_project_1 = require("../abstract/feature-for-project");
var project_1 = require("../abstract/project");
var tnp_db_1 = require("tnp-db");
//#endregion
var RecentFilesForContainer = /** @class */ (function (_super) {
    tslib_1.__extends(RecentFilesForContainer, _super);
    function RecentFilesForContainer(project) {
        var _this = _super.call(this, project) || this;
        _this.readConfig();
        return _this;
    }
    Object.defineProperty(RecentFilesForContainer.prototype, "defaultValue", {
        //#region template for recent.json file
        get: function () {
            return {
                recentOpenProjects: []
            };
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    RecentFilesForContainer.prototype.saveActiveProjects = function (override) {
        if (override === void 0) { override = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, builds, container, onlyChildren;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.project.isContainer) {
                            tnp_helpers_1.Helpers.error("[tnp-recent-files] Project is not container... ", false, true);
                        }
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.getBuildsBy({
                                watch: true,
                            })];
                    case 2:
                        builds = _a.sent();
                        container = this.project;
                        onlyChildren = builds.map(function (c) { return c.project; }).filter(function (p) { return p.location.startsWith(container.location); });
                        this.setFrom(onlyChildren.map(function (c) {
                            return c.location.replace(container.location + "/", '');
                        }).join(' '), override);
                        return [2 /*return*/];
                }
            });
        });
    };
    //#region read config
    RecentFilesForContainer.prototype.readConfig = function () {
        if (!this.project.isContainer) {
            return;
        }
        var recentConfigPath = tnp_core_2.path.join(this.project.location, tnp_config_1.config.file.tmp_recent_json);
        if (!tnp_helpers_1.Helpers.exists(recentConfigPath)) {
            tnp_helpers_1.Helpers.writeFile(recentConfigPath, this.defaultValue);
        }
        var configJson;
        try {
            configJson = tnp_helpers_1.Helpers.readJson(recentConfigPath, {});
        }
        catch (error) {
            configJson = this.defaultValue;
        }
        if (!tnp_core_1._.isArray(configJson.recentOpenProjects)) {
            configJson.recentOpenProjects = [];
        }
        return configJson;
    };
    Object.defineProperty(RecentFilesForContainer.prototype, "localRecentProjects", {
        //#endregion
        //#region get local recent project
        get: function () {
            var _this = this;
            return this.readConfig()
                .recentOpenProjects
                .map(function (c) {
                var p = tnp_core_2.path.join(_this.project.location, c);
                var proj = project_1.Project.From(p);
                if (!proj) {
                    tnp_helpers_1.Helpers.warn("[recent-projects] no project by path: " + p);
                }
                return proj;
            })
                .filter(function (f) {
                return !!f;
            });
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region open local recent projects
    RecentFilesForContainer.prototype.openRecent = function () {
        if (!this.project.isContainer) {
            tnp_helpers_1.Helpers.error("[tnp-recent-files] Project is not container... ", false, true);
        }
        this.localRecentProjects.forEach(function (p) { return p.openInVscode(); });
        tnp_helpers_1.Helpers.info('Done');
    };
    //#endregion
    //#region set local recent projects
    RecentFilesForContainer.prototype.setFrom = function (args, override) {
        var _this = this;
        if (override === void 0) { override = true; }
        if (!this.project.isContainer) {
            tnp_helpers_1.Helpers.error("[tnp-recent-files] Project is not container... ", false, true);
        }
        var recentOpenProjects = [];
        if (override) {
            recentOpenProjects = tnp_helpers_1.Helpers.cliTool
                .resolveProjectsFromArgs(args, this.project, project_1.Project)
                .map(function (c) { return c.location.replace(_this.project.location + "/", ''); });
        }
        else {
            recentOpenProjects = tnp_helpers_1.Helpers.arrays.uniqArray(tslib_1.__spreadArrays(this.localRecentProjects
                .map(function (c) { return c.location.replace(_this.project.location + "/", ''); }), tnp_helpers_1.Helpers.cliTool
                .resolveProjectsFromArgs(args, this.project, project_1.Project)
                .map(function (c) { return c.location.replace(_this.project.location + "/", ''); })));
        }
        var recentConfigPath = tnp_core_2.path.join(this.project.location, tnp_config_1.config.file.tmp_recent_json);
        tnp_helpers_1.Helpers.writeFile(recentConfigPath, {
            recentOpenProjects: recentOpenProjects
        });
        tnp_helpers_1.Helpers.info('Done');
    };
    return RecentFilesForContainer;
}(feature_for_project_1.FeatureForProject));
exports.RecentFilesForContainer = RecentFilesForContainer;
//# sourceMappingURL=recent-files.backend.js.map