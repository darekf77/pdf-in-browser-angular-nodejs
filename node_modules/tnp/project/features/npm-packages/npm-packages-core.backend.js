"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var abstract_2 = require("../../abstract");
var tnp_config_1 = require("tnp-config");
var semver = require("semver");
var packages_recognition_extended_1 = require("../packages-recognition-extended");
var npm_packages_helpers_backend_1 = require("./npm-packages-helpers.backend");
//#endregion
var NpmPackagesCore = /** @class */ (function (_super) {
    tslib_1.__extends(NpmPackagesCore, _super);
    function NpmPackagesCore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NpmPackagesCore.prototype, "emptyNodeModuls", {
        get: function () {
            return !this.project.node_modules.exist;
        },
        enumerable: true,
        configurable: true
    });
    NpmPackagesCore.prototype.package = function (pacakgeName) {
        var p = abstract_1.Project.From(this.project.node_modules.pathFor(pacakgeName));
        var ver = p === null || p === void 0 ? void 0 : p.version;
        var that = this;
        return {
            isSatisfyBy: function (versionOrRange) {
                return !ver ? false : semver.satisfies(ver, versionOrRange);
            },
            isNotSatisfyBy: function (versionOrRange) {
                return !ver ? false : !that.package(pacakgeName).isSatisfyBy(versionOrRange);
            },
            get version() {
                return ver;
            },
            get location() {
                return that.project.node_modules.pathFor(pacakgeName);
            },
            get exists() {
                return !!p;
            }
        };
    };
    NpmPackagesCore.prototype.actualNpmProcess = function (options) {
        if (this.project.isDocker) {
            return;
        }
        var _a = npm_packages_helpers_backend_1.fixOptions(options), generatLockFiles = _a.generatLockFiles, useYarn = _a.useYarn, pkg = _a.pkg, reason = _a.reason, remove = _a.remove, smoothInstall = _a.smoothInstall;
        var yarnLockPath = tnp_core_1.path.join(this.project.location, tnp_config_1.config.file.yarn_lock);
        var yarnLockExisits = tnp_core_2.fse.existsSync(yarnLockPath);
        var command = npm_packages_helpers_backend_1.prepareCommand(pkg, remove, useYarn, this.project);
        tnp_helpers_1.Helpers.info("\n\n    [actualNpmProcess][" + (smoothInstall ? 'smooth' : 'normal') + "] npm instalation...\n\n    ");
        if (remove) {
            npm_packages_helpers_backend_1.executeCommand(command, this.project);
        }
        else {
            if (global.testMode) {
                tnp_helpers_1.Helpers.log("Test mode: normal instalation");
                if (pkg) {
                    abstract_1.Project.Tnp.node_modules.copy(pkg).to(this.project);
                }
                else {
                    this.project.node_modules.copyFrom(abstract_1.Project.Tnp, "Test mode instalaltion");
                }
            }
            else {
                if (smoothInstall) {
                    if (pkg) {
                        this.smoothInstallPrepare(pkg);
                    }
                    else if (this.project.isStandaloneProject && !this.project.isTnp) {
                        if (this.project.node_modules.exist && !this.project.node_modules.isLink && !global.tnpNonInteractive) {
                            tnp_helpers_1.Helpers.pressKeyAndContinue("\n              [smooth-npm-installation]\n              You are going to remove node_modules folder from " + this.project.node_modules.path + "\n\n              Press any key to continue.. ");
                        }
                        tnp_helpers_1.Helpers.removeFolderIfExists(this.project.node_modules.path);
                        var workspaceForVersion = abstract_1.Project.by(this.project._type, this.project._frameworkVersion).parent;
                        if (!workspaceForVersion.node_modules.exist) {
                            workspaceForVersion.run(tnp_config_1.config.frameworkName + " init").sync();
                        }
                        workspaceForVersion.node_modules.linkToProject(this.project);
                    }
                    else {
                        tnp_helpers_1.Helpers.error("Smooth install not supported here: " + this.project.location, false, true);
                    }
                }
                else {
                    try {
                        npm_packages_helpers_backend_1.executeCommand(command, this.project);
                    }
                    catch (err) {
                        tnp_helpers_1.Helpers.error(err, true, true);
                        tnp_helpers_1.Helpers.error("Error during npm instalation", false, true);
                    }
                }
            }
        }
        this.project.quickFixes.nodeModulesPackagesZipReplacement();
        packages_recognition_extended_1.PackagesRecognitionExtended.fromProject(this.project).start(true, '[actualNpmProcess] after npm i');
        if (!generatLockFiles) {
            if (useYarn) {
                if (yarnLockExisits) {
                    if (this.project.git.isGitRepo) {
                        this.project.git.resetFiles(tnp_config_1.config.file.yarn_lock);
                    }
                }
                else {
                    tnp_core_2.fse.existsSync(yarnLockPath) && tnp_helpers_1.Helpers.removeFileIfExists(yarnLockPath);
                }
            }
            else {
                var packageLockPath = tnp_core_1.path.join(this.project.location, tnp_config_1.config.file.package_lock_json);
                tnp_core_2.fse.existsSync(packageLockPath) && tnp_helpers_1.Helpers.removeFileIfExists(packageLockPath);
            }
        }
    };
    NpmPackagesCore.prototype.smoothInstallPrepare = function (pkg) {
        console.log(pkg);
        var tmpProject = npm_packages_helpers_backend_1.prepareTempProject(this.project, pkg);
        var _a = npm_packages_helpers_backend_1.copyMainProject(tmpProject, this.project, pkg), mainProjectExisted = _a.mainProjectExisted, mainProjectInTemp = _a.mainProjectInTemp;
        if (!mainProjectExisted) {
            tnp_helpers_1.Helpers.error("Something went wrong...mainProjectExisted ");
        }
        if (!mainProjectInTemp) {
            tnp_helpers_1.Helpers.error("Something went wrong... mainProjectInTemp");
        }
        npm_packages_helpers_backend_1.copyMainProjectDependencies({
            mainProjectExisted: mainProjectExisted, mainProjectInTemp: mainProjectInTemp
        }, tmpProject, this.project, pkg);
        tmpProject.removeItself();
    };
    return NpmPackagesCore;
}(abstract_2.FeatureForProject));
exports.NpmPackagesCore = NpmPackagesCore;
//# sourceMappingURL=npm-packages-core.backend.js.map