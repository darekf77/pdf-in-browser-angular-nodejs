"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var chalk_1 = require("chalk");
var tnp_helpers_1 = require("tnp-helpers");
var npm_packages_core_backend_1 = require("./npm-packages-core.backend");
var npm_packages_helpers_backend_1 = require("./npm-packages-helpers.backend");
var tnp_models_1 = require("tnp-models");
//#endregion
var NpmPackagesBase = /** @class */ (function (_super) {
    tslib_1.__extends(NpmPackagesBase, _super);
    function NpmPackagesBase() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NpmPackagesBase.prototype, "useSmartInstall", {
        get: function () {
            if (this.project.isTnp || this.project.isNaviCli) {
                return false;
            }
            return (this.project.isStandaloneProject
                || this.project.isWorkspace
                || this.project.isWorkspaceChildProject);
        },
        enumerable: true,
        configurable: true
    });
    NpmPackagesBase.prototype.installProcess = function (triggeredMsg, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var fullInstall, remove, npmPackages, smoothInstall, installAllowed;
            var _a;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!global.globalSystemToolMode) {
                            return [2 /*return*/];
                        }
                        if (global.tnpNonInteractive) {
                            tnp_models_1.PROGRESS_DATA.log({ msg: (this.useSmartInstall ? 'SMART ' : '') + "npm instalation for \"" + this.project.genericName + "\" started.." });
                        }
                        options = npm_packages_helpers_backend_1.fixOptionsNpmInstall(options, this.project);
                        fullInstall = (options.npmPackages.length === 0);
                        if (fullInstall && this.project.isVscodeExtension && !this.project.isCoreProject) {
                            options.smoothInstall = true;
                        }
                        remove = options.remove, npmPackages = options.npmPackages, smoothInstall = options.smoothInstall;
                        // console.log(npmPackages)
                        // process.exit(0)
                        if (remove && fullInstall) {
                            tnp_helpers_1.Helpers.error("[install process] Please specify packages to remove", false, true);
                        }
                        if (remove) {
                            tnp_helpers_1.Helpers.log("Package [" + npmPackages.map(function (p) { return p.name + (p.version ? "@" + p.version : ''); })
                                .join(',') + "] remove for " + chalk_1.default.bold(this.project.genericName) + " " + triggeredMsg + " ");
                            npmPackages.forEach(function (p) {
                                _this.project.packageJson.removeDependencyAndSave(p, "package " + (p && p.name) + " instalation");
                            });
                        }
                        else {
                            if (fullInstall) {
                                tnp_helpers_1.Helpers.log("Packages full installation for " + this.project.genericName);
                            }
                            else {
                                tnp_helpers_1.Helpers.log("Package [" + npmPackages.map(function (p) { return p.name + (p.version ? "@" + p.version : ''); })
                                    .join(',') + "] instalation for " + chalk_1.default.bold(this.project.genericName) + " " + triggeredMsg + " ");
                                npmPackages.forEach(function (p) {
                                    _this.project.packageJson.setDependencyAndSave(p, "package " + (p && p.name) + " instalation");
                                });
                            }
                        }
                        if (!this.emptyNodeModuls) {
                            if (this.project.isContainer && !this.project.isContainerCoreProject) {
                                this.project.node_modules.remove();
                            }
                            else {
                                this.project.node_modules.recreateFolder();
                            }
                        }
                        if (!this.project.isWorkspaceChildProject) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.project.parent.npmPackages.installProcess("workspace child: " + this.project.name + " " + triggeredMsg + " ", options)];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2:
                        if (this.project.isStandaloneProject || this.project.isWorkspace || this.project.isUnknowNpmProject || this.project.isContainer) {
                            this.project.packageJson.showDeps(this.project._type + " instalation before full insall [" + triggeredMsg + "]");
                            if (this.project.isWorkspace && smoothInstall === false) {
                                this.project.workspaceSymlinks.remove(triggeredMsg);
                            }
                            installAllowed = (!this.project.isContainer
                                || this.project.isContainerWithLinkedProjects
                                || this.project.isContainerCoreProject);
                            if (installAllowed) {
                                if (this.useSmartInstall
                                    || (this.project.isContainerCoreProject && this.project.frameworkVersionAtLeast('v2')) && !options.smartInstallPreparing) {
                                    (_a = this.project.smartNodeModules).install.apply(_a, tslib_1.__spreadArrays([remove ? 'uninstall' : 'install'], npmPackages));
                                }
                                else {
                                    if (fullInstall) {
                                        this.actualNpmProcess({ reason: triggeredMsg, smoothInstall: smoothInstall });
                                    }
                                    else {
                                        npmPackages.forEach(function (pkg) {
                                            _this.actualNpmProcess({ pkg: pkg, reason: triggeredMsg, remove: remove, smoothInstall: smoothInstall });
                                        });
                                    }
                                }
                            }
                            else {
                                tnp_helpers_1.Helpers.log("Dont install node_modules - project is container");
                            }
                            if (this.project.isWorkspace && smoothInstall === false) {
                                this.project.workspaceSymlinks.add(triggeredMsg);
                            }
                            if (this.project.isContainerChild && this.project.isWorkspace) {
                                this.project.packageJson.hideDeps(this.project._type + " hide deps for container child [" + triggeredMsg + "]");
                            }
                            if ((this.project.isWorkspace || this.project.isStandaloneProject) && smoothInstall === false) {
                                if (!this.project.node_modules.isLink) {
                                    this.project.node_modules.dedupe(); // TODO this does not apply for smartInstalation..
                                    // but how to check if smart installation is smart not normal ?
                                }
                                // this.project.node_modules.stuberizeFrontendPackages();
                            }
                            this.project.packageJson.save(this.project._type + " instalation after  [" + triggeredMsg + "]");
                        }
                        if (global.tnpNonInteractive) {
                            tnp_models_1.PROGRESS_DATA.log({ msg: "npm instalation finish ok" });
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return NpmPackagesBase;
}(npm_packages_core_backend_1.NpmPackagesCore));
exports.NpmPackagesBase = NpmPackagesBase;
//# sourceMappingURL=npm-packages-base.backend.js.map