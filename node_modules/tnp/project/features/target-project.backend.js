"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_config_1 = require("tnp-config");
var feature_for_project_1 = require("../abstract/feature-for-project");
var tnp_helpers_1 = require("tnp-helpers");
// import type { Project } from '../abstract/project/project';
var DEFAULT_PATH_GENERATED = 'tmp-target-projects/generated';
var DEFAULT_PATH_ORIGINS = 'tmp-target-projects/origins';
var TargetProject = /** @class */ (function (_super) {
    tslib_1.__extends(TargetProject, _super);
    function TargetProject() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(TargetProject.prototype, "exists", {
        //#region @backend
        get: function () {
            return this.all.length > 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetProject.prototype, "all", {
        get: function () {
            var _this = this;
            return this.project.packageJson.targetProjects.map(function (p) {
                if (!tnp_core_1._.isString(p.path)) {
                    p.path = tnp_core_2.path.join(_this.project.location, DEFAULT_PATH_GENERATED, _this.project.name);
                }
                if (!tnp_core_2.path.isAbsolute(p.path)) {
                    p.path = tnp_core_2.path.resolve(tnp_core_2.path.join(_this.project.location, p.path));
                }
                return p;
            });
        },
        enumerable: true,
        configurable: true
    });
    TargetProject.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                console.log('update target project', this.all);
                this.all.forEach(function (a) { return generate(_this.project, a); });
                return [2 /*return*/];
            });
        });
    };
    return TargetProject;
}(feature_for_project_1.FeatureForProject));
exports.TargetProject = TargetProject;
function generate(project, t) {
    if (!tnp_helpers_1.Helpers.exists(tnp_core_2.path.dirname(t.path))) {
        tnp_helpers_1.Helpers.mkdirp(tnp_core_2.path.dirname(t.path));
    }
    var originDefaultPath = tnp_core_2.path.join(project.location, DEFAULT_PATH_ORIGINS, tnp_core_1._.kebabCase(t.origin));
    if (!tnp_helpers_1.Helpers.exists(tnp_core_2.path.dirname(originDefaultPath))) {
        tnp_helpers_1.Helpers.mkdirp(tnp_core_2.path.dirname(originDefaultPath));
    }
    if (!tnp_helpers_1.Helpers.exists(originDefaultPath)) {
        tnp_helpers_1.Helpers.git.clone({
            cwd: tnp_core_2.path.dirname(originDefaultPath),
            url: t.origin,
            destinationFolderName: tnp_core_1._.kebabCase(t.origin)
        });
    }
    while (true) {
        try {
            tnp_helpers_1.Helpers.git.checkoutDefaultBranch(originDefaultPath);
            tnp_helpers_1.Helpers.git.pullCurrentBranch(originDefaultPath);
            break;
        }
        catch (error) {
            tnp_helpers_1.Helpers.run("code " + originDefaultPath).sync();
            tnp_helpers_1.Helpers.pressKeyAndContinue("Fix project for origin: " + t.origin + " and press any key....");
        }
    }
    if (!tnp_helpers_1.Helpers.exists(t.path)) {
        tnp_helpers_1.Helpers.copy(originDefaultPath, t.path);
    }
    try {
        tnp_helpers_1.Helpers.run("git checkout " + t.branch + " && git pull origin " + t.branch, { cwd: t.path }).sync();
    }
    catch (e) {
        tnp_helpers_1.Helpers.error("[target-project] Not able create target project "
            + (chalk_1.default.bold(project.name) + " from origin " + t.origin + "..."));
    }
    tslib_1.__spreadArrays((tnp_core_1._.isArray(t.links) ? t.links : []), [
        tnp_config_1.config.folder.components,
        tnp_config_1.config.folder.src
    ], project.resources, [
        tnp_config_1.config.file.index_js,
        tnp_config_1.config.file.index_js_map,
        tnp_config_1.config.file.index_d_ts,
        tnp_config_1.config.folder.bin,
    ]).forEach(function (l) {
        var source = tnp_core_2.path.join(project.location, l);
        var dest = tnp_core_2.path.join(t.path, l);
        if (tnp_helpers_1.Helpers.exists(source)) {
            if (tnp_helpers_1.Helpers.isFolder(source)) {
                tnp_helpers_1.Helpers.copy(source, dest);
            }
            else {
                tnp_helpers_1.Helpers.copyFile(source, dest);
            }
        }
    });
    [
        tnp_config_1.config.folder.node_modules,
    ].forEach(function (l) {
        var source = tnp_core_2.path.join(project.location, l);
        var dest = tnp_core_2.path.join(t.path, l);
        tnp_helpers_1.Helpers.removeIfExists(dest);
        tnp_helpers_1.Helpers.createSymLink(source, dest, { continueWhenExistedFolderDoesntExists: true });
    });
    tnp_helpers_1.Helpers.run("code " + t.path).sync();
}
//# sourceMappingURL=target-project.backend.js.map