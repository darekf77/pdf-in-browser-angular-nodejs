"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_db_1 = require("tnp-db");
var abstract_1 = require("../abstract");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var compierEntityKey = 'compilers';
var CompilerCache = /** @class */ (function (_super) {
    tslib_1.__extends(CompilerCache, _super);
    function CompilerCache() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(CompilerCache.prototype, "isWatchModeAllowed", {
        get: function () {
            return Promise.resolve(false); // TODO
            // return CompilerCache.checkIfPojectHasUpToDateCompiledData(this.project);
        },
        enumerable: true,
        configurable: true
    });
    CompilerCache.prototype.unsetData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, CompilerCache.unsetProjectHasUpToDateCompiledData(this.project)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(CompilerCache.prototype, "setUpdatoDate", {
        get: function () {
            var _this = this;
            return {
                frameworkFileGenerator: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, CompilerCache.setProjectHasUpToDateCompiledData(this.project, this.project.frameworkFileGenerator)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                sourceModifier: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, CompilerCache.setProjectHasUpToDateCompiledData(this.project, this.project.sourceModifier)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                join: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, CompilerCache.setProjectHasUpToDateCompiledData(this.project, this.project.join)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
                incrementalBuildProcess: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, CompilerCache.setProjectHasUpToDateCompiledData(this.project, this.project.incrementalBuildProcess)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); },
            };
        },
        enumerable: true,
        configurable: true
    });
    CompilerCache.checkIfPojectHasUpToDateCompiledData = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var projectLocation, db, data, existed;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        projectLocation = project.location;
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.rawGet(compierEntityKey)];
                    case 2:
                        data = _a.sent();
                        if (!tnp_core_1._.isArray(data)) {
                            return [2 /*return*/, false];
                        }
                        existed = data.find(function (d) { return d.project === projectLocation; });
                        if (!existed || !existed.compilersUpToDate) {
                            return [2 /*return*/, false];
                        }
                        /*
                        - source modifier (angular-lib,isomorphi-lib)
                        - incremental build process (angular-lib,isomorphi-lib)
                        - framwerork files generator (isomorphi-lib)
                        - baseline site join (angular-lib,isomorphi-lib)
                    
                        */
                        if (project.typeIs('angular-lib')) {
                            return [2 /*return*/, Object
                                    .keys(existed.compilersUpToDate)
                                    .filter(function (f) { return !!existed.compilersUpToDate[f]; })
                                    .length === (project.isSite ? 3 : 2)];
                        }
                        if (project.typeIs('isomorphic-lib')) {
                            return [2 /*return*/, Object
                                    .keys(existed.compilersUpToDate)
                                    .filter(function (f) { return !!existed.compilersUpToDate[f]; })
                                    .length === (project.isSite ? 4 : 3)];
                        }
                        return [2 /*return*/, false];
                }
            });
        });
    };
    CompilerCache.setProjectHasUpToDateCompiledData = function (project, compilerObject) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var compilerName, projectLocation, db, data, existed, obj;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        compilerName = typescript_class_helpers_1.CLASS.getNameFromObject(compilerObject);
                        projectLocation = project.location;
                        tnp_helpers_1.Helpers.info("\n\n\n\n    SET VALID " + compilerName + " FOR " + chalk_1.default.bold(project.name) + "\n\n\n\n    ");
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.rawGet(compierEntityKey)];
                    case 2:
                        data = _a.sent();
                        tnp_helpers_1.Helpers.log("\n\n    RAW: " + (data && JSON.stringify(data)) + "\n\n    ", 1);
                        if (!tnp_core_1._.isArray(data)) {
                            data = [];
                        }
                        existed = data.find(function (d) { return d.project === projectLocation; });
                        if (existed) {
                            existed.compilersUpToDate[compilerName] = true;
                        }
                        else {
                            obj = {
                                project: projectLocation,
                                compilersUpToDate: {},
                            };
                            obj.compilersUpToDate[compilerName] = true;
                            data.push(obj);
                        }
                        return [4 /*yield*/, db.rawSet(compierEntityKey, data)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CompilerCache.unsetAllProjectsCompiledData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.rawSet(compierEntityKey, [])];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    CompilerCache.unsetProjectHasUpToDateCompiledData = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var projectLocation, db, data, existed, obj;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        projectLocation = project.location;
                        tnp_helpers_1.Helpers.info("\n\n\n\n    UNSET VALID ALL COMPILERS FOR " + chalk_1.default.bold(project.name) + "\n\n\n\n    ");
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.rawGet(compierEntityKey)];
                    case 2:
                        data = _a.sent();
                        tnp_helpers_1.Helpers.log("\n\n    RAW: " + (data && JSON.stringify(data)) + "\n\n    ", 1);
                        if (!tnp_core_1._.isArray(data)) {
                            data = [];
                        }
                        existed = data.find(function (d) { return d.project === projectLocation; });
                        if (existed) {
                            existed.compilersUpToDate = {};
                        }
                        else {
                            obj = {
                                project: projectLocation,
                                compilersUpToDate: {},
                            };
                            data.push(obj);
                        }
                        return [4 /*yield*/, db.rawSet(compierEntityKey, data)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return CompilerCache;
}(abstract_1.FeatureForProject));
exports.CompilerCache = CompilerCache;
//# sourceMappingURL=compiler-cache.backend.js.map