"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var chalk_1 = require("chalk");
var tnp_core_1 = require("tnp-core");
var portfinder = require("portfinder");
var httpProxy = require("http-proxy");
var http = require("http");
var tnp_helpers_1 = require("tnp-helpers");
var abstract_1 = require("../abstract");
var ProxyRouter = /** @class */ (function (_super) {
    tslib_1.__extends(ProxyRouter, _super);
    function ProxyRouter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProxyRouter.getFreePort = function (from) {
        if (from === void 0) { from = 4000; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var port, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        // console.log(ProjectRouter.takenPorts)
                        while (this.takenPorts.includes(from)) {
                            from += 1;
                        }
                        // console.log('from ', from)
                        this.takenPorts.push(from);
                        return [4 /*yield*/, portfinder.getPortPromise({ port: from })];
                    case 1:
                        port = _a.sent();
                        this.takenPorts.push(port);
                        return [2 /*return*/, port];
                    case 2:
                        err_1 = _a.sent();
                        tnp_helpers_1.Helpers.error(err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    ProxyRouter.prototype.getProjectFrom = function (req) {
        // console.log('req', req)
        // console.log('getProject.From routes', this.routes.map(r => r.baseUrl))
        // console.log(`Request url "${req.url}"`)
        var r = this.project.env.config.workspace.projects.find(function (r) {
            return new RegExp(r.baseUrl + ".*", 'g').test(req.url);
        });
        if (r) {
            // req.url = req.url.replace(r.baseUrl, '');
            // console.log('Founded route ', r.name)
            var project = this.project.children.find(function (p) { return p.name === r.name; });
            return project;
        }
    };
    ProxyRouter.prototype.activateServer = function (onServerReady) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // console.log('activate server this.routes', this.routes.map(r => r.name))
                if (this.project.typeIs('workspace')) {
                    this.server(onServerReady);
                }
                else {
                    tnp_helpers_1.Helpers.error("Bad project type \"" + this.project._type + "\" for server activation.", true);
                    tnp_helpers_1.Helpers.error("Project \"" + this.project.name + "\" is not a " + chalk_1.default.bold('workspace') + " type project.");
                }
                return [2 /*return*/];
            });
        });
    };
    ProxyRouter.prototype.getTarget = function (req) {
        var p = this.getProjectFrom(req);
        return p ? p.routerTargetHttp() : void 0;
    };
    ProxyRouter.prototype.server = function (onServerReady) {
        var _this = this;
        var proxy = httpProxy.createProxyServer({});
        var server = http.createServer(function (req, res) {
            var target = _this.getTarget(req);
            if (target) {
                proxy.web(req, res, { target: target });
            }
            else {
                res.write('not found');
                res.end();
            }
        });
        server.on('upgrade', function (req, socket, head) {
            var target = _this.getTarget(req);
            proxy.ws(req, socket, head, target ? { target: target } : void 0);
        });
        var serverPort = this.project.getDefaultPort();
        server.listen(serverPort, function () {
            console.log("Proxy Router activate on " + _this.project.env.config.workspace.workspace.host);
            if (tnp_core_1._.isFunction(onServerReady)) {
                onServerReady(serverPort);
            }
        }).on('error', function (e) {
            console.log('proxy server error', e);
        });
    };
    ProxyRouter.takenPorts = [];
    return ProxyRouter;
}(abstract_1.FeatureForProject));
exports.ProxyRouter = ProxyRouter;
//#endregion
//# sourceMappingURL=proxy-router.js.map