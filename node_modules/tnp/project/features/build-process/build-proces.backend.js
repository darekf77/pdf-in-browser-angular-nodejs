"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_core_2 = require("tnp-core");
var tnp_core_3 = require("tnp-core");
var tnp_core_4 = require("tnp-core");
var abstract_1 = require("../../abstract");
var tnp_db_1 = require("tnp-db");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_db_2 = require("tnp-db");
var tnp_models_1 = require("tnp-models");
var environment_config_helpers_1 = require("../environment-config/environment-config-helpers");
var select_clients_backend_1 = require("../../project-specyfic/select-clients.backend");
//#endregion
var BuildProcess = /** @class */ (function (_super) {
    tslib_1.__extends(BuildProcess, _super);
    function BuildProcess() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#region prepare build options
    BuildProcess.prepareOptionsBuildProcess = function (options, project) {
        if (tnp_core_1._.isUndefined(options)) {
            options = {};
        }
        if (tnp_core_1._.isUndefined(options.outDir)) {
            options.outDir = 'dist';
        }
        if (tnp_core_1._.isUndefined(options.prod)) {
            options.prod = false;
        }
        if (tnp_core_1._.isUndefined(options.watch)) {
            options.watch = false;
        }
        if (tnp_core_1._.isUndefined(options.watch)) {
            options.watch = false;
        }
        if (tnp_core_1._.isUndefined(options.staticBuildAllowed)) {
            options.staticBuildAllowed = false;
        }
        if (project.isGenerated && !options.staticBuildAllowed) {
            tnp_helpers_1.Helpers.error("Please use command:\n$ " + tnp_config_1.config.frameworkName + " static:build\ninside generated projects...\n", false, true);
        }
        if (!tnp_core_1._.isString(options.args)) {
            options.args = '';
        }
        return options;
    };
    //#endregion
    //#region start for ...
    BuildProcess.prototype.startForLibFromArgs = function (prod, watch, outDir, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.startForLib({ prod: prod, watch: watch, outDir: outDir, args: args })];
            });
        });
    };
    /**
     * prod, watch, outDir, args, overrideOptions
     */
    BuildProcess.prototype.startForLib = function (options, exit) {
        if (exit === void 0) { exit = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var buildOptions;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = BuildProcess.prepareOptionsBuildProcess(options, this.project);
                        options.appBuild = false;
                        return [4 /*yield*/, tnp_db_1.BuildOptions.from(options.args, this.project, options, 'startForLib')];
                    case 1:
                        buildOptions = _a.sent();
                        return [4 /*yield*/, this.build(buildOptions, tnp_config_1.config.allowedTypes.libs, exit)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BuildProcess.prototype.startForAppFromArgs = function (prod, watch, outDir, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, this.startForApp({ prod: prod, watch: watch, outDir: outDir, args: args })];
            });
        });
    };
    BuildProcess.prototype.startForApp = function (options, exit) {
        if (exit === void 0) { exit = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var buildOptions;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = BuildProcess.prepareOptionsBuildProcess(options, this.project);
                        options.appBuild = true;
                        return [4 /*yield*/, tnp_db_1.BuildOptions.from(options.args, this.project, options, 'startForApp')];
                    case 1:
                        buildOptions = _a.sent();
                        return [4 /*yield*/, this.build(buildOptions, tnp_config_1.config.allowedTypes.app, exit)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region mereg npm project
    BuildProcess.prototype.mergeNpmPorject = function () {
        var _this = this;
        // console.log(this.project.parent.getAllChildren({ unknowIncluded: true }))
        tnp_helpers_1.Helpers.log("[mergeNpmPorject] started.. for " + this.project.genericName);
        if (this.project.isWorkspaceChildProject) {
            this.project.parent.getFolders()
                .filter(function (p) { return !_this.project.parent.children.map(function (c) { return c.name; }).includes(tnp_core_3.path.basename(p)); })
                .forEach(function (p) {
                var moduleInNodeModules = tnp_core_3.path.join(_this.project.parent.location, tnp_config_1.config.folder.node_modules, tnp_core_3.path.basename(p));
                var moduleAsChild = tnp_core_3.path.join(_this.project.parent.location, tnp_core_3.path.basename(p));
                if (tnp_core_2.fse.existsSync(moduleInNodeModules)) {
                    var files = tnp_core_4.glob.sync(moduleAsChild + "/**/*.*");
                    files = files.map(function (f) { return f.replace(moduleAsChild, ''); });
                    files.forEach(function (f) {
                        var inNodeM = tnp_core_3.path.join(moduleInNodeModules, f);
                        var newToReplace = tnp_core_3.path.join(moduleAsChild, f);
                        if (tnp_core_2.fse.existsSync(inNodeM)) {
                            if (!tnp_core_2.fse.existsSync(inNodeM + ".orginalFile")) {
                                tnp_core_2.fse.copyFileSync(inNodeM, inNodeM + ".orginalFile");
                            }
                            tnp_core_2.fse.copyFileSync(newToReplace, inNodeM);
                        }
                    });
                }
            });
        }
        tnp_helpers_1.Helpers.log("[mergeNpmPorject] finish..");
    };
    //#endregion
    BuildProcess.prototype.build = function (buildOptions, allowedLibs, exit) {
        if (exit === void 0) { exit = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, config_1, msg;
            var _a;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[build] in build of " + this.project.genericName + ", type: " + this.project._type);
                        this.project.buildOptions = buildOptions;
                        if (this.project.isGenerated && buildOptions.watch && !this.project.isStandaloneProject) {
                            buildOptions.watch = false;
                            tnp_helpers_1.Helpers.warn("You cannot build static project in watch mode. Change to build mode: watch=false");
                        }
                        this.mergeNpmPorject();
                        //#region make sure project allowed for build
                        if (tnp_core_1._.isArray(allowedLibs) && (_a = this.project).typeIsNot.apply(_a, allowedLibs)) {
                            if (buildOptions.appBuild) {
                                tnp_helpers_1.Helpers.error("App build only for " + tnp_config_1.config.frameworkName + " " + chalk_1.default.bold(allowedLibs.join(',')) + " project types", false, true);
                            }
                            else {
                                tnp_helpers_1.Helpers.error("Library build only for " + tnp_config_1.config.frameworkName + " " + chalk_1.default.bold(allowedLibs.join(',')) + " project types", false, true);
                            }
                        }
                        //#endregion
                        tnp_helpers_1.Helpers.log("[db][checkBuildIfAllowed] started... ");
                        return [4 /*yield*/, tnp_db_2.TnpDB.Instance()];
                    case 1:
                        db = _b.sent();
                        if (!buildOptions.appBuild) return [3 /*break*/, 3];
                        return [4 /*yield*/, db.checkBuildIfAllowed(this.project, buildOptions, process.pid, process.ppid, true)];
                    case 2:
                        _b.sent();
                        tnp_helpers_1.Helpers.log("[db][checkBuildIfAllowed] finish ");
                        return [3 /*break*/, 4];
                    case 3:
                        tnp_helpers_1.Helpers.log("[db][checkBuildIfAllowed] no needed for dist");
                        _b.label = 4;
                    case 4:
                        if (!buildOptions.appBuild) return [3 /*break*/, 15];
                        if (!this.project.node_modules.exist) return [3 /*break*/, 5];
                        tnp_helpers_1.Helpers.log("NODE MODULE EXISTS");
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, this.project.filesStructure.init(buildOptions.args)];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7:
                        if (!buildOptions.watch) return [3 /*break*/, 14];
                        _b.label = 8;
                    case 8:
                        if (!true) return [3 /*break*/, 12];
                        if (this.project.isWorkspace) {
                            if (this.project.env.config) {
                                config_1 = this.project.env.config.workspace.workspace;
                            }
                        }
                        else if (this.project.isWorkspaceChildProject) {
                            if (this.project.env.config) {
                                config_1 = this.project.env.config.workspace.projects.find(function (_a) {
                                    var name = _a.name;
                                    return name === _this.project.name;
                                });
                                if (!config_1) {
                                    tnp_helpers_1.Helpers.error("Please include this project (" + this.project.genericName + ") in your environment*.js.", false, true);
                                }
                            }
                        }
                        else {
                            return [3 /*break*/, 12];
                        }
                        if (!config_1) return [3 /*break*/, 9];
                        return [3 /*break*/, 12];
                    case 9: return [4 /*yield*/, this.project.filesStructure.init(buildOptions.args)];
                    case 10:
                        _b.sent();
                        _b.label = 11;
                    case 11: return [3 /*break*/, 8];
                    case 12:
                        if (!(this.project.isWorkspace || this.project.isWorkspaceChildProject)) return [3 /*break*/, 14];
                        return [4 /*yield*/, environment_config_helpers_1.handleProjectsPorts(this.project, config_1, false)];
                    case 13:
                        _b.sent();
                        _b.label = 14;
                    case 14: return [3 /*break*/, 19];
                    case 15:
                        if (!buildOptions.watch) return [3 /*break*/, 17];
                        if (this.project.isWorkspace) {
                            tnp_helpers_1.Helpers.log("Removing on purpose tmp-environment.json from wokspace, before init");
                            tnp_helpers_1.Helpers.remove(tnp_core_3.path.join(this.project.location, tnp_config_1.config.file.tnpEnvironment_json));
                        }
                        return [4 /*yield*/, this.project.filesStructure.init(buildOptions.args, { watch: true, watchOnly: buildOptions.watchOnly })];
                    case 16:
                        _b.sent();
                        return [3 /*break*/, 19];
                    case 17: return [4 /*yield*/, this.project.filesStructure.init(buildOptions.args)];
                    case 18:
                        _b.sent();
                        _b.label = 19;
                    case 19:
                        if (!(this.project.isStandaloneProject || this.project.isWorkspaceChildProject)) return [3 /*break*/, 21];
                        return [4 /*yield*/, this.project.env.updateData()];
                    case 20:
                        _b.sent();
                        if (this.project.typeIs('angular-lib')) {
                            this.project.filesTemplatesBuilder.rebuildFile('src/index.html.filetemplate');
                        }
                        _b.label = 21;
                    case 21:
                        //#endregion
                        //#region report initial progres
                        if (!buildOptions.watch && this.project.isGenerated && this.project.isWorkspace) {
                            tnp_models_1.PROGRESS_DATA.log({ value: 0, msg: "Static build initing" });
                        }
                        if (!buildOptions.appBuild) return [3 /*break*/, 23];
                        return [4 /*yield*/, db.checkBuildIfAllowed(this.project, buildOptions, process.pid, process.ppid, false)];
                    case 22:
                        _b.sent();
                        _b.label = 23;
                    case 23:
                        //#region handle build clients projects
                        tnp_helpers_1.Helpers.log("\n\n    projec: " + this.project.genericName + "\n    type: " + this.project._type + "\n    generated: " + this.project.isGenerated + "\n    ");
                        if (!buildOptions.appBuild) return [3 /*break*/, 24];
                        return [3 /*break*/, 26];
                    case 24: return [4 /*yield*/, select_clients_backend_1.selectClients(buildOptions, this.project, db)];
                    case 25:
                        _b.sent();
                        _b.label = 26;
                    case 26:
                        //#endregion
                        //#region report start building message
                        tnp_helpers_1.Helpers.info("\n\n\t" + chalk_1.default.bold('Start of Building') + " " + this.project.genericName + " "
                            + ("(" + (buildOptions.appBuild ? 'app' : 'lib') + ")\n\n"));
                        if (global.tnpNonInteractive) {
                            tnp_models_1.PROGRESS_DATA.log({ msg: "Start of building " + this.project.genericName });
                        }
                        //#endregion
                        return [4 /*yield*/, this.project.build(buildOptions)];
                    case 27:
                        //#endregion
                        _b.sent();
                        msg = (buildOptions.watch ? "\n      Waching files.. started.. please wait...\n    " : "\n      End of Building " + this.project.genericName + "\n\n    ");
                        if (global.tnpNonInteractive) {
                            tnp_models_1.PROGRESS_DATA.log({ msg: msg });
                        }
                        else {
                            tnp_helpers_1.Helpers.info(msg);
                        }
                        if (!(!buildOptions.watch && this.project.isVscodeExtension)) return [3 /*break*/, 29];
                        return [4 /*yield*/, this.project.createVscePackage()];
                    case 28:
                        _b.sent();
                        _b.label = 29;
                    case 29:
                        if (exit && !buildOptions.watch) {
                            tnp_helpers_1.Helpers.log('Build process exit');
                            process.exit(0);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return BuildProcess;
}(abstract_1.FeatureForProject));
exports.BuildProcess = BuildProcess;
//# sourceMappingURL=build-proces.backend.js.map