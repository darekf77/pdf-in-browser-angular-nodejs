"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var abstract_1 = require("../../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var StaticBuild = /** @class */ (function (_super) {
    tslib_1.__extends(StaticBuild, _super);
    function StaticBuild() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StaticBuild.prototype.regenerate = function (regenerateWorkspaceChildren) {
        if (regenerateWorkspaceChildren === void 0) { regenerateWorkspaceChildren = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index, c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // console.log(StaticBuild.alerdyRegenerated)
                        if (StaticBuild.alerdyRegenerated.includes(this.project.location)) {
                            tnp_helpers_1.Helpers.log("Already regenrated workspace " + this.project.genericName);
                            return [2 /*return*/];
                        }
                        else {
                            // console.log(`NOT YET GENERATED ${this.project.genericName}`)
                        }
                        if (!this.project.isWorkspaceChildProject) return [3 /*break*/, 4];
                        if (!!this.project.parent.bundledWorkspace) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.project.parent.staticBuild.regenerate()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2: return [4 /*yield*/, this.project.parent.staticBuild.regenerate(false)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [4 /*yield*/, regenerateBundledWorkspace(this.project)];
                    case 5:
                        _a.sent();
                        if (!(this.project.isWorkspace && regenerateWorkspaceChildren)) return [3 /*break*/, 9];
                        index = 0;
                        _a.label = 6;
                    case 6:
                        if (!(index < this.project.children.length)) return [3 /*break*/, 9];
                        c = this.project.children[index];
                        return [4 /*yield*/, regenerateBundledWorkspace(c)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        index++;
                        return [3 /*break*/, 6];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    StaticBuild.alerdyRegenerated = [];
    return StaticBuild;
}(abstract_1.FeatureForProject));
exports.StaticBuild = StaticBuild;
function regenerateBundledWorkspace(project) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var outDir, locationOfGeneratedProject, genLocationBaseline;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tnp_helpers_1.Helpers.info("Actual Regenerating project: " + project.genericName);
                    StaticBuild.alerdyRegenerated.push(project.location);
                    outDir = 'bundle';
                    locationOfGeneratedProject = getLocationOfGeneratedProject(project, outDir);
                    if (!(project.isWorkspace && project.isSite)) return [3 /*break*/, 3];
                    genLocationBaseline = tnp_core_1.path.join(project.location, outDir, project.baseline.name);
                    return [4 /*yield*/, initBaseline(project)];
                case 1:
                    _a.sent();
                    generateBaselineSourceInDist(project, genLocationBaseline);
                    return [4 /*yield*/, initGeneratedBaselienInDist(genLocationBaseline)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    if (project.isWorkspace) {
                        if (project.bundledWorkspace) {
                            project.copyManager.generateSourceCopyIn(project.bundledWorkspace.location, { override: false, });
                        }
                        else {
                            project.copyManager.generateSourceCopyIn(locationOfGeneratedProject);
                        }
                    }
                    else if (project.isWorkspaceChildProject) {
                        project.copyManager.generateSourceCopyIn(locationOfGeneratedProject, { override: false });
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function initBaseline(project) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var initAll, baselineWorkspace, binInBasleine, index, child;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    initAll = project.isWorkspace;
                    baselineWorkspace = project.isWorkspaceChildProject ? project.parent.baseline : project.baseline;
                    binInBasleine = tnp_core_1.path.join(baselineWorkspace.location, tnp_config_1.config.folder.node_modules, tnp_config_1.config.folder._bin);
                    if (!tnp_core_2.fse.existsSync(binInBasleine)) {
                        tnp_helpers_1.Helpers.mkdirp(binInBasleine);
                    }
                    return [4 /*yield*/, baselineWorkspace.filesStructure.init('')];
                case 1:
                    _a.sent();
                    if (!initAll) return [3 /*break*/, 5];
                    index = 0;
                    _a.label = 2;
                case 2:
                    if (!(index < baselineWorkspace.children.length)) return [3 /*break*/, 5];
                    child = baselineWorkspace.children[index];
                    return [4 /*yield*/, child.filesStructure.init('')];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    index++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/];
            }
        });
    });
}
function getLocationOfGeneratedProject(project, outDir) {
    return project.isWorkspace ?
        tnp_core_1.path.join(project.location, outDir, project.name) :
        tnp_core_1.path.join(project.parent.location, outDir, project.parent.name, project.name);
}
function initGeneratedBaselienInDist(generatedInDistBaselineWorkspaceLocation) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var generateBaselineWorkspaceInDist, binInBasleine, index, child;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    generateBaselineWorkspaceInDist = abstract_1.Project.From(generatedInDistBaselineWorkspaceLocation);
                    binInBasleine = tnp_core_1.path.join(generateBaselineWorkspaceInDist.location, tnp_config_1.config.folder.node_modules, tnp_config_1.config.folder._bin);
                    if (!tnp_core_2.fse.existsSync(binInBasleine)) {
                        tnp_helpers_1.Helpers.mkdirp(binInBasleine);
                    }
                    return [4 /*yield*/, generateBaselineWorkspaceInDist.filesStructure.init('')];
                case 1:
                    _a.sent();
                    index = 0;
                    _a.label = 2;
                case 2:
                    if (!(index < generateBaselineWorkspaceInDist.children.length)) return [3 /*break*/, 5];
                    child = generateBaselineWorkspaceInDist.children[index];
                    return [4 /*yield*/, child.filesStructure.init('')];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    index++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/];
            }
        });
    });
}
function generateBaselineSourceInDist(project, genLocationBaseline) {
    project.baseline.copyManager.generateSourceCopyIn(genLocationBaseline);
    for (var index = 0; index < project.baseline.children.length; index++) {
        var baselineChild = project.baseline.children[index];
        baselineChild.copyManager.generateSourceCopyIn(tnp_core_1.path.join(genLocationBaseline, baselineChild.name));
    }
}
//#endregion
//# sourceMappingURL=static-build.js.map