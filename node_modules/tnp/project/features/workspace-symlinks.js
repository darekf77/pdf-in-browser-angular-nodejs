"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var abstract_1 = require("../abstract");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_config_1 = require("tnp-config");
var WorkspaceSymlinks = /** @class */ (function (_super) {
    tslib_1.__extends(WorkspaceSymlinks, _super);
    function WorkspaceSymlinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(WorkspaceSymlinks.prototype, "linkInside", {
        get: function () {
            var projectsToLink = []
                .concat(this.project.children)
                .concat(this.project.baseline ? [this.project.baseline] : []);
            projectsToLink.forEach(function (c) {
                if (tnp_core_1.path.basename(c.location) !== c.name) {
                    tnp_helpers_1.Helpers.error("Project \"" + c.location + "\" has different packaage.json name"
                        + (" property than his own folder name \"" + tnp_core_1.path.basename(c.location) + "\""), false, true);
                }
            });
            return projectsToLink;
        },
        enumerable: true,
        configurable: true
    });
    WorkspaceSymlinks.prototype.remove = function (triggeredMsg) {
        var _this = this;
        this.linkInside.forEach(function (c) {
            var symPkgPath = tnp_core_1.path.join(_this.project.location, tnp_config_1.config.folder.node_modules, c.name);
            if (tnp_core_2.fse.existsSync(symPkgPath)) {
                tnp_helpers_1.Helpers.log("Removing symlinks: " + c.genericName + " from node_module " + triggeredMsg);
                tnp_helpers_1.Helpers.removeFileIfExists(symPkgPath);
            }
        });
        this.project.children.forEach(function (c) {
            tnp_helpers_1.Helpers.log("Remove child node_modules " + c.genericName + " " + triggeredMsg);
            c.node_modules.remove();
        });
        // if (this.project.isSiteInStrictMode) {
        //   Helpers.removeFolderIfExists(path.join(this.project.location, config.folder.node_modules, config.names.baseline));
        // }
        if (this.project.isSiteInDependencyMode) {
            this.project.workspaceDependencies.forEach(function (d) {
                // const source = d.location;
                var dest = tnp_core_1.path.join(_this.project.location, tnp_config_1.config.folder.node_modules, d.name);
                tnp_helpers_1.Helpers.removeFileIfExists(dest);
            });
        }
    };
    WorkspaceSymlinks.prototype.add = function (triggeredMsg) {
        var _this = this;
        this.linkInside.forEach(function (c) {
            var destination = tnp_core_1.path.join(_this.project.location, tnp_config_1.config.folder.node_modules);
            tnp_helpers_1.Helpers.log("Adding symlinks: " + c.genericName + " to node_module " + triggeredMsg);
            tnp_helpers_1.Helpers.createSymLink(c.location, destination + "/");
        });
        this.project.children.forEach(function (c) {
            tnp_helpers_1.Helpers.log("Add parent '" + _this.project.genericName + "' node_modules to child: " + c.name + " " + triggeredMsg);
            _this.project.node_modules.linkToProject(c);
        });
        this.project.children.forEach(function (c) {
            tnp_helpers_1.Helpers.log("Add parent '" + _this.project.genericName + "' node_modules to child: " + c.name + " " + triggeredMsg);
            _this.project.node_modules.linkToProject(c);
        });
        // if (this.project.isSiteInStrictMode) {
        //   const baselineInNodeModules = path.join(this.project.location, config.folder.node_modules, this.project.baseline.name);
        //   if (path.basename(baselineInNodeModules) !== config.names.baseline) {
        //     const baselineInNodeModulesProperName = path.join(this.project.location, config.folder.node_modules, config.names.baseline);
        //     Helpers.createSymLink(baselineInNodeModules, baselineInNodeModulesProperName);
        //   }
        // }
        if (this.project.isSiteInDependencyMode) {
            this.project.workspaceDependencies.forEach(function (d) {
                var source = d.location;
                var dest = tnp_core_1.path.join(_this.project.location, tnp_config_1.config.folder.node_modules, d.name);
                tnp_helpers_1.Helpers.createSymLink(source, dest);
            });
        }
    };
    return WorkspaceSymlinks;
}(abstract_1.FeatureForProject));
exports.WorkspaceSymlinks = WorkspaceSymlinks;
//#endregion
//# sourceMappingURL=workspace-symlinks.js.map