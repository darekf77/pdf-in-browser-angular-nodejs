"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var abstract_1 = require("../abstract");
var project_factory_backend_1 = require("../../scripts/NEW-PROJECT_FILES_MODULES/project-factory.backend");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
/**
 * DEPRAECATED
 */
var SingularBuild = /** @class */ (function (_super) {
    tslib_1.__extends(SingularBuild, _super);
    function SingularBuild() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SingularBuild.prototype.init = function (watch, prod) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var children, newFactory, tmpWorkspaceName, tmpWorkspaceDirpath, projjjj, _a, singularDistSrc, targets, projectsToUpdate;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[singular build]\n    FOP: " + this.project.genericName + ",\n    TYPE: " + this.project._type + ",\n    LOCATION: " + this.project.location + "\n    ");
                        children = this.project.children
                            .filter(function (c) { return c.location !== _this.project.location; })
                            .filter(function (c) { return !c.name.startsWith('tnp'); })
                            .filter(function (c) { return (c.typeIs('isomorphic-lib', 'angular-lib')) && c.frameworkVersionAtLeast('v2'); });
                        tnp_helpers_1.Helpers.log("[singularbuild] children for build: \n\n" + children.map(function (c) { return c.name; }) + "\n\n");
                        newFactory = project_factory_backend_1.ProjectFactory.Instance;
                        tmpWorkspaceName = this.project.name;
                        tmpWorkspaceDirpath = tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.dist);
                        projjjj = tnp_core_1.path.join(tmpWorkspaceDirpath, tmpWorkspaceName);
                        tnp_helpers_1.Helpers.log("dist project: " + projjjj);
                        this.singularWatchProj = abstract_1.Project.From(projjjj);
                        if (!!this.singularWatchProj) return [3 /*break*/, 2];
                        tnp_helpers_1.Helpers.removeFolderIfExists(projjjj);
                        _a = this;
                        return [4 /*yield*/, newFactory.create({
                                type: 'isomorphic-lib',
                                name: tmpWorkspaceName,
                                cwd: tmpWorkspaceDirpath,
                                basedOn: void 0,
                                version: this.project._frameworkVersion,
                                skipInit: true
                            })];
                    case 1:
                        _a.singularWatchProj = _b.sent();
                        tnp_helpers_1.Helpers.log("[singular build] singularWatchProj: " + (this.singularWatchProj && this.singularWatchProj.genericName));
                        // console.log('this.this.project.node_modules.path', this.project.node_modules.path)
                        this.project.node_modules.linkToProject(this.singularWatchProj);
                        _b.label = 2;
                    case 2:
                        singularDistSrc = tnp_core_1.path.join(this.singularWatchProj.location, tnp_config_1.config.folder.src);
                        tnp_helpers_1.Helpers.removeFolderIfExists(singularDistSrc);
                        tnp_helpers_1.Helpers.mkdirp(singularDistSrc);
                        tnp_helpers_1.Helpers.log("[singular build] init structure");
                        return [4 /*yield*/, this.singularWatchProj.filesStructure.init('')];
                    case 3:
                        _b.sent();
                        tnp_helpers_1.Helpers.copyFile(tnp_core_1.path.join(this.project.location, tnp_config_1.config.file.tnpEnvironment_json), tnp_core_1.path.join(this.singularWatchProj.location, tnp_config_1.config.file.tnpEnvironment_json));
                        this.singularWatchProj.packageJson.data.tnp.isGenerated = true;
                        return [4 /*yield*/, this.singularWatchProj.packageJson.writeToDisc()];
                    case 4:
                        _b.sent();
                        children.forEach(function (c) {
                            var source = (c.typeIs('angular-lib') ? tnp_config_1.config.folder.components : tnp_config_1.config.folder.src);
                            tnp_helpers_1.Helpers.createSymLink(tnp_core_1.path.join(c.location, source), tnp_core_1.path.join(singularDistSrc, c.name));
                        });
                        tnp_helpers_1.Helpers.info("[singular build] symlink creation done");
                        tnp_helpers_1.Helpers.log("[singular build] singularWatchProjsingularWatchProj" +
                            (this.singularWatchProj.genericName + ", type: $this.{singularWatchProj.type}"));
                        return [4 /*yield*/, this.singularWatchProj.buildProcess.startForLib({
                                watch: watch,
                                prod: prod,
                                outDir: 'dist',
                                staticBuildAllowed: true,
                            }, false)];
                    case 5:
                        _b.sent();
                        targets = children
                            .map(function (c) { return c.name; });
                        projectsToUpdate = [];
                        children.forEach(function (c) {
                            if (_this.project.typeIs('container')) {
                                // console.log(`Do something for ${c.genericName}`)
                                var source_1 = tnp_core_1.path.join(_this.singularWatchProj.location, tnp_config_1.config.folder.dist, c.name);
                                var sourceBrowser = tnp_core_1.path.join(_this.singularWatchProj.location, tnp_config_1.config.folder.dist, tnp_config_1.config.folder.browser, c.name);
                                var destBrowser = tnp_core_1.path.join(_this.singularWatchProj.location, tnp_config_1.config.folder.dist, c.name, tnp_config_1.config.folder.browser);
                                tnp_helpers_1.Helpers.remove(destBrowser, true);
                                tnp_helpers_1.Helpers.createSymLink(sourceBrowser, destBrowser, { continueWhenExistedFolderDoesntExists: true });
                                projectsToUpdate.forEach(function (projForUp) {
                                    var dest = tnp_core_1.path.join(projForUp.location, tnp_config_1.config.folder.node_modules, c.name);
                                    tnp_helpers_1.Helpers.remove(dest, true);
                                    tnp_helpers_1.Helpers.createSymLink(source_1, dest, { continueWhenExistedFolderDoesntExists: true });
                                    console.log("LINK: " + source_1 + " -> " + dest, 1);
                                });
                            }
                            else if (_this.project.typeIs('workspace')) {
                                var source = tnp_core_1.path.join(_this.singularWatchProj.location, tnp_config_1.config.folder.dist, c.name);
                                var dest = tnp_core_1.path.join(c.location, tnp_config_1.config.folder.dist);
                                tnp_helpers_1.Helpers.remove(dest, true);
                                tnp_helpers_1.Helpers.createSymLink(source, dest, { continueWhenExistedFolderDoesntExists: true });
                                targets.forEach(function (targetName) {
                                    var sourceBrowser = tnp_core_1.path.join(_this.singularWatchProj.location, tnp_config_1.config.folder.dist, tnp_config_1.config.folder.browser + "-for-" + targetName, c.name);
                                    var destBrowser = tnp_core_1.path.join(c.location, tnp_config_1.config.folder.browser + "-for-" + targetName);
                                    tnp_helpers_1.Helpers.remove(destBrowser, true);
                                    tnp_helpers_1.Helpers.createSymLink(sourceBrowser, destBrowser, { continueWhenExistedFolderDoesntExists: true });
                                });
                            }
                        });
                        if (this.project.isContainer) {
                            console.info("All Projects are linked OK... watching...");
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return SingularBuild;
}(abstract_1.FeatureForProject));
exports.SingularBuild = SingularBuild;
//# sourceMappingURL=singular-build.backend.js.map