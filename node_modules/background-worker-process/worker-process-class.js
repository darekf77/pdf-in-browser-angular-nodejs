"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var morphi_1 = require("morphi");
var tnp_helpers_1 = require("tnp-helpers");
var WorkerProcessClass = /** @class */ (function (_super) {
    tslib_1.__extends(WorkerProcessClass, _super);
    function WorkerProcessClass() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#endregion
    WorkerProcessClass.prototype.__worker_is_healty__ = function () {
        //#region @backendFunc
        return {
            send: true
        };
        //#endregion
    };
    Object.defineProperty(WorkerProcessClass.prototype, "$$healty", {
        /**
         * <<< Internal function >>> to check if worker is healty
         * You can change behavior of this method by
         * overrding function <strong> __worker_is_healty__</strong>
         */
        get: function () {
            var _this = this;
            return new Promise(function (resolve) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var isResolve, workerIsOk, error_1;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            isResolve = false;
                            setTimeout(function () {
                                if (!isResolve) {
                                    isResolve = true;
                                    tnp_helpers_1.Helpers.log("[worker-process-class] Worker healty check timeout");
                                    resolve(false);
                                }
                            }, 10000);
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.__worker_is_healty__().received];
                        case 2:
                            workerIsOk = (_a.sent()).body.booleanValue;
                            if (!isResolve) {
                                isResolve = true;
                                resolve(workerIsOk);
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            error_1 = _a.sent();
                            if (!isResolve) {
                                isResolve = true;
                                tnp_helpers_1.Helpers.log("[worker-process-class] Not able to acces worker with http: " + error_1.message);
                                resolve(false);
                            }
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            }); });
        },
        enumerable: true,
        configurable: true
    });
    tslib_1.__decorate([
        morphi_1.Morphi.Http.GET('/workerishealty'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", Object)
    ], WorkerProcessClass.prototype, "__worker_is_healty__", null);
    return WorkerProcessClass;
}(morphi_1.Morphi.Base.Controller));
exports.WorkerProcessClass = WorkerProcessClass;
//# sourceMappingURL=worker-process-class.js.map