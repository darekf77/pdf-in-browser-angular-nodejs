"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @notForNpm
var workers_factory_backend_1 = require("./workers-factory.backend");
var base_worker_controller_backend_1 = require("./base-worker-controller.backend");
var base_worker_child_controller_backend_1 = require("./base-worker-child-controller.backend");
var project_1 = require("./project");
var tnp_db_1 = require("tnp-db");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var test_entity_backend_1 = require("./test-entity.backend");
var tnp_helpers_1 = require("tnp-helpers");
//#endregion
function mainProcess(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, killAlreadyRegisterd, db, portsManager, w1port, w2port, w1, w2, c, c2;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = tnp_helpers_1.Helpers.cliTool.argsFrom(args).killAlreadyRegisterd, killAlreadyRegisterd = _a === void 0 ? false : _a;
                    return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _b.sent();
                    return [4 /*yield*/, db.portsManaber];
                case 2:
                    portsManager = _b.sent();
                    global['hideLog'] = false;
                    return [4 /*yield*/, portsManager.registerOnFreePort({
                            name: typescript_class_helpers_1.CLASS.getName(base_worker_controller_backend_1.BaseWorkerController)
                        }, { killAlreadyRegisterd: killAlreadyRegisterd })];
                case 3:
                    w1port = _b.sent();
                    return [4 /*yield*/, portsManager.registerOnFreePort({
                            name: typescript_class_helpers_1.CLASS.getName(base_worker_child_controller_backend_1.BaseWorkerChildController)
                        }, { killAlreadyRegisterd: killAlreadyRegisterd })];
                case 4:
                    w2port = _b.sent();
                    return [4 /*yield*/, workers_factory_backend_1.WorkersFactor.create(base_worker_controller_backend_1.BaseWorkerController, [project_1.Project, test_entity_backend_1.TestEntity], w1port, {
                            killAlreadRegisteredProcess: false,
                            startWorkerServiceAsChildProcess: killAlreadyRegisterd
                        })];
                case 5:
                    w1 = _b.sent();
                    return [4 /*yield*/, workers_factory_backend_1.WorkersFactor.create(base_worker_child_controller_backend_1.BaseWorkerChildController, [project_1.SubProject, test_entity_backend_1.TestEntity2], w2port, {
                            killAlreadRegisteredProcess: false,
                            startWorkerServiceAsChildProcess: killAlreadyRegisterd
                        })];
                case 6:
                    w2 = _b.sent();
                    console.log("w1 is working on host " + w1.host);
                    console.log("w2 is working on host " + w2.host);
                    c = new test_entity_backend_1.TestEntity(1);
                    c.subscribeRealtimeUpdates({
                        callback: function (a) {
                            console.log("[main-process] external update for entity 1");
                        }
                    });
                    c2 = new test_entity_backend_1.TestEntity2(2);
                    c2.subscribeRealtimeUpdates({
                        callback: function (a) {
                            console.log("[main-process] external update for entity 2");
                        }
                    });
                    return [2 /*return*/];
            }
        });
    });
}
exports.mainProcess = mainProcess;
//# sourceMappingURL=main-process.backend.js.map