"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var morphi_1 = require("morphi");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_core_1 = require("tnp-core");
var bootsrap_worker_backend_1 = require("./bootsrap-worker.backend");
var tnp_cli_1 = require("tnp-cli");
var WorkersFactor = /** @class */ (function () {
    function WorkersFactor() {
    }
    WorkersFactor.create = function (classFN, entities, servicePort, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var startWorkerServiceAsChildProcess, killAlreadRegisteredProcess, disabledRealtime, preventSameContexts, nameOfWorker, host, context, controllers, singleton, nearestProj, realtivePathToFile, cwdForWorker, command, proc;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!options) {
                            options = {};
                        }
                        if (tnp_core_1._.isUndefined(options.startWorkerServiceAsChildProcess)) {
                            options.startWorkerServiceAsChildProcess = true;
                        }
                        if (tnp_core_1._.isUndefined(options.preventSameContexts)) {
                            options.preventSameContexts = false;
                        }
                        if (tnp_core_1._.isUndefined(options.killAlreadRegisteredProcess)) {
                            options.killAlreadRegisteredProcess = true;
                        }
                        if (tnp_core_1._.isUndefined(options.disabledRealtime)) {
                            options.disabledRealtime = false;
                        }
                        startWorkerServiceAsChildProcess = options.startWorkerServiceAsChildProcess, killAlreadRegisteredProcess = options.killAlreadRegisteredProcess, disabledRealtime = options.disabledRealtime, preventSameContexts = options.preventSameContexts;
                        if (!killAlreadRegisteredProcess) return [3 /*break*/, 2];
                        return [4 /*yield*/, tnp_helpers_1.Helpers.killProcessByPort(servicePort)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        nameOfWorker = typescript_class_helpers_1.CLASS.getName(classFN);
                        if (!nameOfWorker || nameOfWorker === '') {
                            tnp_helpers_1.Helpers.error("[b-w-p] Wrong name for class.. not able to create work");
                        }
                        host = "http://localhost:" + servicePort;
                        if (preventSameContexts) {
                            morphi_1.Morphi.destroyContext(host);
                        }
                        return [4 /*yield*/, morphi_1.Morphi.init({
                                host: host,
                                mode: 'remote-backend',
                                controllers: [classFN],
                                entities: entities,
                                disabledRealtime: disabledRealtime
                            })];
                    case 3:
                        context = _a.sent();
                        controllers = context.controllers;
                        singleton = tnp_core_1._.first(controllers);
                        if (!startWorkerServiceAsChildProcess) return [3 /*break*/, 6];
                        nearestProj = tnp_helpers_1.Project.nearestTo(singleton.filename, { onlyOutSideNodeModules: true });
                        console.log("nearestProj.location: " + (!nearestProj ? 'NOTHING!' : nearestProj.location));
                        realtivePathToFile = singleton.filename.replace(nearestProj.location, '');
                        console.log("realtivePathToFile: " + realtivePathToFile);
                        console.log("singleton.filename: " + singleton.filename);
                        cwdForWorker = singleton.filename.replace(realtivePathToFile, '');
                        console.log("cwdForWorker: " + cwdForWorker);
                        // const logFileName = `tmp-worker-log-${path.basename(singleton.filename.replace(/\.js$/, ''))}.txt`;
                        if (process.platform === 'win32') {
                            realtivePathToFile = realtivePathToFile.replace(/^\//, '');
                        }
                        command = "npx ts-node run.js --RELATIVEPATHoverride=" + realtivePathToFile + " "
                            + ("--port " + servicePort + " ");
                        proc = tnp_helpers_1.Helpers.run(command, { cwd: cwdForWorker }).async(true);
                        // proc.stdout.on(`data`, (a) => {
                        //   console.log(`[${logFileName}] \n
                        //   `+ a);
                        // })
                        tnp_helpers_1.Helpers.log("[worker-factor] process " + proc.pid + " for \"" + nameOfWorker + "\"");
                        if (!(process.platform === 'win32')) return [3 /*break*/, 4];
                        tnp_helpers_1.Helpers.info('[background-worker-process] look at external console for errors');
                        return [3 /*break*/, 6];
                    case 4: return [4 /*yield*/, tnp_helpers_1.Helpers.waitForMessegeInStdout(proc, bootsrap_worker_backend_1.BootstrapWorker.READY_MESSAGE)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        tnp_helpers_1.Helpers.log("Worker " + tnp_cli_1.CLI.chalk.bold(nameOfWorker) + " can be accessed:\n\n    " + morphi_1.Morphi.getHttpPathBy(classFN, servicePort, 'info') + "\n\n    ");
                        return [2 /*return*/, {
                                host: host,
                                port: servicePort,
                                instance: singleton,
                                context: context
                            }];
                }
            });
        });
    };
    return WorkersFactor;
}());
exports.WorkersFactor = WorkersFactor;
//# sourceMappingURL=workers-factory.backend.js.map