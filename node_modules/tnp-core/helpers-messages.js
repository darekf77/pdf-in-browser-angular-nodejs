"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_imports_1 = require("./core-imports");
//#endregion
// import { config } from 'tnp-config';
// import { PROGRESS_DATA } from 'tnp-models';
var index_1 = require("./index");
var helpers_isomorphic_1 = require("./helpers-isomorphic");
var progress_data_1 = require("./progress-data");
var core_config_1 = require("./core-config");
var KEY = {
    LAST_ERROR: Symbol(),
    LAST_INFO: Symbol(),
    LAST_WARN: Symbol(),
    LAST_LOG: Symbol(),
};
// export class Log {
//   private static _instance: Log;
//   public Instance() {
//     if (!Log._instance) {
//       Log._instance = new Log();
//     }
//     return Log._instance;
//   }
//   create(name: string, level?: Level) {
//     if (level === void 0) {
//       level = Level.DATA;
//     }
//     return {
//       d(details: string, debugLevel?: number) {
//         return Helpers.log(`[${name}] ${details}`, debugLevel)
//       },
//       i(details: string) {
//         return Helpers.info(`[${name}] ${details}`)
//       },
//       w(details: string, noExit = false, noTrace = false) {
//         return Helpers.error(`[${name}] ${details}`, noExit, noTrace);
//       },
//       er(details: string, ) {
//         return Helpers.info(`[${name}] ${details}`)
//       },
//     }
//   }
// }
var HelpersMessages = /** @class */ (function (_super) {
    tslib_1.__extends(HelpersMessages, _super);
    function HelpersMessages() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HelpersMessages.prototype.msgCacheClear = function () {
        global[KEY.LAST_LOG] = void 0;
        global[KEY.LAST_WARN] = void 0;
        global[KEY.LAST_ERROR] = void 0;
        global[KEY.LAST_INFO] = void 0;
    };
    HelpersMessages.prototype.error = function (details, noExit, noTrace) {
        if (noExit === void 0) { noExit = false; }
        if (noTrace === void 0) { noTrace = false; }
        if (index_1.Helpers.isBrowser) {
            console.error(details);
            return;
        }
        //#region @backend
        // Error.stackTraceLimit = Infinity;
        if (!global.globalSystemToolMode) {
            noTrace = true;
        }
        if (typeof details === 'object') {
            try {
                var json = JSON.stringify(details);
                if (global.globalSystemToolMode) {
                    if (global[KEY.LAST_ERROR] === json) {
                        process.stdout.write('.');
                        return;
                    }
                    else {
                        global[KEY.LAST_ERROR] = json;
                    }
                    if (noTrace) {
                        !global.muteMessages && console.log(core_imports_1.chalk.red(json));
                    }
                    else {
                        !global.muteMessages && console.trace(core_imports_1.chalk.red(json));
                    }
                }
                else {
                    if (global[KEY.LAST_ERROR] === json) {
                        process.stdout.write('.');
                        return;
                    }
                    else {
                        global[KEY.LAST_ERROR] = json;
                    }
                    console.log(json);
                    return;
                }
            }
            catch (error) {
                if (global.globalSystemToolMode) {
                    if (global[KEY.LAST_ERROR] === details) {
                        process.stdout.write('.');
                        return;
                    }
                    else {
                        global[KEY.LAST_ERROR] = details;
                    }
                    if (noTrace) {
                        !global.muteMessages && console.log(details);
                    }
                    else {
                        !global.muteMessages && console.trace(details);
                    }
                }
                else {
                    if (global[KEY.LAST_ERROR] === details) {
                        process.stdout.write('.');
                        return;
                    }
                    else {
                        global[KEY.LAST_ERROR] = details;
                    }
                    console.log(details);
                    return;
                }
            }
        }
        else {
            if (global.globalSystemToolMode) {
                if (global[KEY.LAST_ERROR] === details) {
                    process.stdout.write('.');
                    return;
                }
                else {
                    global[KEY.LAST_ERROR] = details;
                }
                if (noTrace) {
                    !global.muteMessages && console.log(core_imports_1.chalk.red(details));
                }
                else {
                    !global.muteMessages && console.trace(core_imports_1.chalk.red(details));
                }
            }
            else {
                if (global[KEY.LAST_ERROR] === details) {
                    process.stdout.write('.');
                    return;
                }
                else {
                    global[KEY.LAST_ERROR] = details;
                }
                console.log(details);
                return;
            }
        }
        if (global[core_config_1.CoreConfig.message.globalSystemToolMode]) {
            if (!noExit) {
                process.exit(1);
            }
        }
        //#endregion
    };
    HelpersMessages.prototype.info = function (details) {
        if (index_1.Helpers.isBrowser) {
            console.info(details);
            return;
        }
        //#region @backend
        if (!global.muteMessages && !global.hideInfos) {
            if (global[KEY.LAST_INFO] === details) {
                process.stdout.write('.');
                return;
            }
            else {
                global[KEY.LAST_INFO] = details;
            }
            console.log(core_imports_1.chalk.green(details));
            if (global.tnpNonInteractive) {
                progress_data_1.PROGRESS_DATA.log({ msg: details });
            }
        }
        //#endregion
    };
    HelpersMessages.prototype.log = function (details, debugLevel) {
        if (debugLevel === void 0) { debugLevel = 0; }
        if (index_1.Helpers.isBrowser) {
            console.log(details);
            return;
        }
        //#region @backend
        if (debugLevel > global.verboseLevel) {
            return;
        }
        // console.log('global.muteMessages', global.muteMessages);
        // console.log('global.hideLog', global.hideLog);
        if ((!global.muteMessages && !global.hideLog)) {
            if (global[KEY.LAST_LOG] === details) {
                process.stdout.write('.');
                return;
            }
            else {
                global[KEY.LAST_LOG] = details;
            }
            if (global.globalSystemToolMode) {
                console.log(core_imports_1.chalk.gray(details));
            }
            if (global.tnpNonInteractive) {
                progress_data_1.PROGRESS_DATA.log({ msg: details });
            }
        }
        //#endregion
    };
    HelpersMessages.prototype.warn = function (details, trace) {
        if (trace === void 0) { trace = false; }
        if (index_1.Helpers.isBrowser) {
            console.warn(details);
            return;
        }
        //#region @backend
        if (!global.globalSystemToolMode) {
            trace = false;
        }
        if (global[KEY.LAST_WARN] === details) {
            process.stdout.write('.');
            return;
        }
        else {
            global[KEY.LAST_WARN] = details;
        }
        if (trace) {
            (!global.muteMessages && !global.hideWarnings) && console.trace(core_imports_1.chalk.yellow(details));
        }
        else {
            (!global.muteMessages && !global.hideWarnings) && console.log(core_imports_1.chalk.yellow(details));
        }
        //#endregion
    };
    return HelpersMessages;
}(helpers_isomorphic_1.HelpersIsomorphic));
exports.HelpersMessages = HelpersMessages;
//# sourceMappingURL=helpers-messages.js.map