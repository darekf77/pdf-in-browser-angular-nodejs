"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_imports_1 = require("./core-imports");
var PROGRESS_DATA = /** @class */ (function () {
    function PROGRESS_DATA() {
        this.type = 'event';
    }
    PROGRESS_DATA.log = function (log) {
        //#region @backend
        if (global.tnpShowProgress) {
            console.log("[[[" + JSON.stringify({ value: log.value, msg: log.msg, date: new Date() }) + "]]]");
        }
        //#endregion
    };
    PROGRESS_DATA.resolveFrom = function (chunk, callbackOnFounded, checkSplit) {
        var _this = this;
        if (checkSplit === void 0) { checkSplit = true; }
        var progress;
        var res = [];
        if (!core_imports_1._.isString(chunk)) {
            return [];
        }
        chunk = chunk.trim();
        if (checkSplit) {
            var split = chunk.split(/\r\n|\n|\r/);
            if (split.length > 1) {
                // console.log('split founded', split)
                split.forEach(function (s) {
                    res = res.concat(_this.resolveFrom(s, callbackOnFounded, false));
                });
                return res;
            }
        }
        if (/\[\[\[.*\]\]\]/g.test(chunk)) {
            chunk = chunk.replace(/^\[\[\[/g, '').replace(/\]\]\]$/g, '');
            progress = chunk;
        }
        if (!core_imports_1._.isUndefined(progress)) {
            try {
                var p = JSON.parse(progress);
                var single = core_imports_1._.merge(new PROGRESS_DATA(), p);
                res = res.concat([single]);
                if (core_imports_1._.isFunction(callbackOnFounded)) {
                    callbackOnFounded(single);
                }
            }
            catch (err) {
                console.log(err);
                console.error("ProgresssBarData: fail to parse \"" + progress + "\"");
            }
        }
        return res;
    };
    return PROGRESS_DATA;
}());
exports.PROGRESS_DATA = PROGRESS_DATA;
//# sourceMappingURL=progress-data.js.map