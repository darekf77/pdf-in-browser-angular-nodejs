"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var index_1 = require("../index");
var typescript_class_helpers_1 = require("typescript-class-helpers");
// import { Log, Level } from 'ng2-logger';
// const log = Log.create('walk object spec')
// const instance = BrowserDB.instance;
var Proj = /** @class */ (function () {
    function Proj() {
        this.isProjectInstance = true;
        this.browser = {
            children: []
        };
        this.location = "location_" + Proj_1.locationsID++;
    }
    Proj_1 = Proj;
    var Proj_1;
    Proj.locationsID = 0;
    Proj = Proj_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('Proj', {
            uniqueKey: 'location'
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], Proj);
    return Proj;
}());
var Test = /** @class */ (function () {
    function Test() {
        this.id = Test_1.id++;
    }
    Test_1 = Test;
    var Test_1;
    Test.id = 0;
    Test = Test_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('Test'),
        tslib_1.__metadata("design:paramtypes", [])
    ], Test);
    return Test;
}());
exports.Test = Test;
var User = /** @class */ (function () {
    function User(id, realId) {
        if (realId === void 0) { realId = void 0; }
        this.realId = realId;
        this.browser = {};
        if (tnp_core_1._.isNumber(id)) {
            this.id = id;
        }
        else {
            this.id = User_1.id++;
        }
    }
    User_1 = User;
    User.prototype.dupa = function () {
        console.log('jest em!');
        return true;
    };
    Object.defineProperty(User.prototype, "authorsGetter", {
        get: function () {
            return this.browser.authors;
        },
        enumerable: true,
        configurable: true
    });
    var User_1;
    User.id = 0;
    User.users = [new User_1(), new User_1()];
    User = User_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('User'),
        tslib_1.__metadata("design:paramtypes", [Number, String])
    ], User);
    return User;
}());
exports.User = User;
mocha_1.describe('DFS Walk.Object', function () {
    mocha_1.it('DFS Should go through all properties depp in normal object', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var d, expectedPathes, actualPathes;
        return tslib_1.__generator(this, function (_a) {
            d = {
                a: {
                    c: 23
                },
                super: 'amazing',
                names: [
                    {
                        name: 'Dariusz'
                    }
                ]
            };
            expectedPathes = [
                'a',
                'a.c',
                'super',
                'names',
                'names[0]',
                'names[0].name'
            ];
            actualPathes = [];
            index_1.Helpers.Walk.Object(d, function (v, lodashPath) {
                actualPathes.push(lodashPath);
                // console.log(`Path: "${lodashPath}" `, v)
            });
            chai_1.expect(expectedPathes).to.deep.eq(actualPathes);
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('DFS Should go through all properties depp in array', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var d, c, arr, expectedPathes, actualPathes;
        return tslib_1.__generator(this, function (_a) {
            d = {
                a: {
                    c: 23
                },
                super: 'amazing',
                names: [
                    {
                        name: 'Dariusz'
                    }
                ]
            };
            c = {
                a2: {
                    c2: 25
                },
                super2: 'amazing2',
                names2: [
                    {
                        name: 'Dariusz2'
                    }
                ]
            };
            arr = [
                d,
                c
            ];
            expectedPathes = [
                '[0]',
                '[0].a',
                '[0].a.c',
                '[0].super',
                '[0].names',
                '[0].names[0]',
                '[0].names[0].name',
                '[1]',
                '[1].a2',
                '[1].a2.c2',
                '[1].super2',
                '[1].names2',
                '[1].names2[0]',
                '[1].names2[0].name'
            ];
            actualPathes = [];
            index_1.Helpers.Walk.Object(arr, function (v, lodashPath) {
                actualPathes.push(lodashPath);
            });
            chai_1.expect(expectedPathes).to.deep.eq(actualPathes);
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('DFS Should detect circural object', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var a, b, circuralFounded, latestPath;
        return tslib_1.__generator(this, function (_a) {
            a = {};
            b = { a: a };
            b.b = b;
            circuralFounded = false;
            index_1.Helpers.Walk.Object(b, function (v, lodashPath, changeValue, _a) {
                var isCircural = _a.isCircural, skipObject = _a.skipObject;
                // console.log('lodashPath path in loop', lodashPath)
                latestPath = lodashPath;
                if (isCircural) {
                    circuralFounded = true;
                    skipObject();
                }
            }, { checkCircural: true });
            chai_1.expect(latestPath).to.be.eq('b');
            chai_1.expect(circuralFounded).to.be.true;
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('DFS Should detect circural object when breath', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var a, b, circuralFounded, latestPath;
        return tslib_1.__generator(this, function (_a) {
            a = {};
            b = { a: a };
            b.b = b;
            circuralFounded = false;
            index_1.Helpers.Walk.Object(b, function (v, lodashPath, changeValue, _a) {
                var isCircural = _a.isCircural, skipObject = _a.skipObject;
                // console.log('lodashPath path in loop', lodashPath)
                latestPath = lodashPath;
                if (isCircural) {
                    circuralFounded = true;
                    skipObject();
                }
            }, { checkCircural: true, breadthWalk: true });
            chai_1.expect(latestPath).to.be.eq('b');
            chai_1.expect(circuralFounded).to.be.true;
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('DFS Circural refences should works ', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var a, b, circuralFounded, latestPath;
        return tslib_1.__generator(this, function (_a) {
            a = {};
            b = { a: a };
            b.b = b;
            circuralFounded = false;
            index_1.Helpers.Walk.Object(b, function (v, lodashPath, changeValue, _a) {
                var isCircural = _a.isCircural, skipObject = _a.skipObject;
                // console.log('lodashPath path in loop', lodashPath)
                latestPath = lodashPath;
                if (isCircural) {
                    circuralFounded = true;
                    skipObject();
                }
            }, { checkCircural: true, breadthWalk: false });
            chai_1.expect(latestPath).to.be.eq('b');
            chai_1.expect(circuralFounded).to.be.true;
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('DFS Should handle include', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var d, c, arr, expectedPathes, actualPathes;
        return tslib_1.__generator(this, function (_a) {
            d = {
                a: {
                    c: 23
                },
                super: 'amazing',
                names: [
                    {
                        name: 'Dariusz'
                    }
                ]
            };
            c = {
                a2: {
                    c2: 25
                },
                super2: 'amazing2',
                names2: [
                    {
                        name: 'Dariusz2'
                    }
                ]
            };
            arr = [
                d,
                c
            ];
            expectedPathes = [
                '[0]',
                '[0].super',
                '[1]',
                '[1].super2',
            ];
            actualPathes = [];
            index_1.Helpers.Walk.Object(arr, function (v, lodashPath) {
                actualPathes.push(lodashPath);
            }, { include: ['super', 'super2'] });
            chai_1.expect(expectedPathes).to.deep.eq(actualPathes);
            return [2 /*return*/];
        });
    }); });
    mocha_1.it('DFS Should handle exclude', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var d, c, arr, expectedPathes, actualPathes;
        return tslib_1.__generator(this, function (_a) {
            d = {
                a: {
                    c: 23
                },
                super: 'amazing',
                names: [
                    {
                        name: 'Dariusz'
                    }
                ]
            };
            c = {
                a2: {
                    c2: 25
                },
                super2: 'amazing2',
                names2: [
                    {
                        name: 'Dariusz2'
                    }
                ]
            };
            arr = [
                d,
                c
            ];
            expectedPathes = [
                '[0]',
                '[0].super',
                '[1]',
                '[1].super2',
            ];
            actualPathes = [];
            index_1.Helpers.Walk.Object(arr, function (v, lodashPath) {
                actualPathes.push(lodashPath);
            }, { exclude: ['names2', 'name', 'a'] });
            chai_1.expect(expectedPathes).to.deep.eq(actualPathes);
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=dfs-walk-object.spec.js.map