"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var icon_service_1 = require("./icon.service");
var core_1 = require("@angular/core");
var platform_browser_1 = require("@angular/platform-browser");
var svg_1 = require("./svg");
var IconDirective = /** @class */ (function () {
    function IconDirective(domSanitizer, iconService) {
        this.domSanitizer = domSanitizer;
        this.iconService = iconService;
        this.width = '1em';
        this.height = '1em';
        this.rotate = 0;
    }
    IconDirective.prototype.ngOnInit = function () { };
    IconDirective.prototype.ngOnChanges = function (changes) {
        if (changes) {
            this.updateIcon();
        }
    };
    IconDirective.prototype.updateIcon = function () {
        var icon = this.getIcon();
        var svg = new svg_1.SVG(svg_1.normalize(icon));
        this.iconHTML = this.generateSvgHtml(svg);
    };
    IconDirective.prototype.getIcon = function () {
        var iconInput = this.icon || this.icIcon;
        if (typeof iconInput !== 'object' && typeof iconInput !== 'string') {
            throw new Error('[Iconify]: No icon provided');
        }
        return typeof iconInput === 'object' ? iconInput : this.iconService.get(iconInput);
    };
    IconDirective.prototype.generateSvgHtml = function (svg) {
        return this.domSanitizer.bypassSecurityTrustHtml(svg.getSVG({
            width: this.size || this.width,
            height: this.size || this.height,
            color: this.color,
            inline: this.inline,
            box: this.box,
            align: this.align,
            hFlip: this.hFlip,
            vFlip: this.vFlip,
            flip: this.flip,
            rotate: this.rotate
        }));
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], IconDirective.prototype, "icIcon", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], IconDirective.prototype, "icon", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], IconDirective.prototype, "color", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        core_1.HostBinding('class.ic-inline'),
        tslib_1.__metadata("design:type", Boolean)
    ], IconDirective.prototype, "inline", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], IconDirective.prototype, "box", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], IconDirective.prototype, "size", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], IconDirective.prototype, "width", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], IconDirective.prototype, "height", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], IconDirective.prototype, "align", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], IconDirective.prototype, "hFlip", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], IconDirective.prototype, "vFlip", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], IconDirective.prototype, "flip", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], IconDirective.prototype, "rotate", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('innerHTML'),
        tslib_1.__metadata("design:type", Object)
    ], IconDirective.prototype, "iconHTML", void 0);
    IconDirective = tslib_1.__decorate([
        core_1.Directive({
            selector: 'ic-icon,[icIcon]'
        }),
        tslib_1.__metadata("design:paramtypes", [platform_browser_1.DomSanitizer, icon_service_1.IconService])
    ], IconDirective);
    return IconDirective;
}());
exports.IconDirective = IconDirective;
//# sourceMappingURL=icon.directive.js.map