"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenTsApiService = void 0;
var tslib_1 = require("tslib");
var gen_ts_service_backend_1 = require("./gen-ts-service.backend");
var GenTsApiService = /** @class */ (function (_super) {
    tslib_1.__extends(GenTsApiService, _super);
    function GenTsApiService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    GenTsApiService.prototype.init = function () {
        _super.prototype.init.call(this);
        this.interfaceName = this.className.replace('Service', 'Interface');
    };
    Object.defineProperty(GenTsApiService.prototype, "template", {
        get: function () {
            return "\nimport { Injectable, $Inject } from 'es-common/src/decorators';\nimport { EsDbApiProvider } from 'es-common/src/components/es-db/es-db-api-provider-interface';\nimport { EsDbConfig } from 'es-common/src/components/es-db/es-db-config-interface';\nimport { EsDbReader } from 'es-common/src/components/es-db/es-db-reader-class';\nimport { DbResource } from 'es-common/src/components/es-db/es-db-resource-interface';\n\ninterface " + this.interfaceName + " extends DbResource {\n  id: number;\n  oid: number;\n}\n\n@Injectable(" + (this.isDecorator ? 'Base' : this.className) + ".name)\n@$Inject(['esDbService','globalAsyncTypecodeService'] " + this.injectAppend + ")\nexport class " + this.className + (this.isDecorator ? 'Decorator' : '') + " extends EsDbReader<" + this.interfaceName + "> {\n\n  private dbConfig: EsDbConfig<" + this.interfaceName + "> = {\n    source: '', // api path\n    id: '', // unique id for entity\n    strategy: 'esHttp'\n  };\n\n  typeCodes: any;\n\n  constructor(\n    public esDbService: EsDbApiProvider<" + this.interfaceName + ">,\n    public globalAsyncTypecodes\n  ) {\n    super(esDbService);\n    super.initDbRepository(this.dbConfig);\n    this.typeCodes = globalAsyncTypecodes.init({\n      // typecode here\n      itemsForSelectMenu: 'typecode.path.to.menu.items',\n    });\n  }\n\n  async getAll() {\n    const data: " + this.interfaceName + " = await (this.repository as any).get();\n    return data;\n  }\n\n  async save(model: " + this.interfaceName + ") {\n    const data: " + this.interfaceName + " = await (this.repository as any).post(model);\n    return data;\n  }\n\n  async update(model: " + this.interfaceName + ") {\n    const data: " + this.interfaceName + " = await (this.repository as any).put(model);\n    return data;\n  }\n\n}\n\n    ";
        },
        enumerable: false,
        configurable: true
    });
    return GenTsApiService;
}(gen_ts_service_backend_1.GenTsService));
exports.GenTsApiService = GenTsApiService;
//# sourceMappingURL=gen-ts-api-service.backend.js.map