"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilesGenerator = void 0;
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tools_backend_1 = require("../tools.backend");
var tnp_helpers_1 = require("tnp-helpers");
var FilesGenerator = /** @class */ (function () {
    function FilesGenerator(
    /**
     * Example: src/rs-application/rs-application-form
     */
    absoluteFolderLocation, isDecorator, 
    /**
     * Only for decorator generation
     */
    originalFileName) {
        if (isDecorator === void 0) { isDecorator = false; }
        this.absoluteFolderLocation = absoluteFolderLocation;
        this.isDecorator = isDecorator;
        this.originalFileName = originalFileName;
        this.outputFileExt = '.ts';
        this.init();
    }
    FilesGenerator.From = function (location, type, decorator, originalFileName) {
        if (decorator === void 0) { decorator = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, GenTsComponnet, GenTsModule, GenTsRoutingModule, GenTsDirective, GenTsService, GenTsApiService, GenTsPipe;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = type;
                        switch (_a) {
                            case 'component': return [3 /*break*/, 1];
                            case 'module': return [3 /*break*/, 3];
                            case 'routing:module': return [3 /*break*/, 5];
                            case 'directive': return [3 /*break*/, 7];
                            case 'service': return [3 /*break*/, 9];
                            case 'api:service': return [3 /*break*/, 11];
                            case 'pipe': return [3 /*break*/, 13];
                        }
                        return [3 /*break*/, 15];
                    case 1: return [4 /*yield*/, Promise.resolve().then(function () { return require('./gen-ts-component.backend'); })];
                    case 2:
                        GenTsComponnet = (_b.sent()).GenTsComponnet;
                        return [2 /*return*/, new GenTsComponnet(location, decorator, originalFileName)];
                    case 3: return [4 /*yield*/, Promise.resolve().then(function () { return require('./gen-ts-module.backend'); })];
                    case 4:
                        GenTsModule = (_b.sent()).GenTsModule;
                        return [2 /*return*/, new GenTsModule(location, decorator, originalFileName)];
                    case 5: return [4 /*yield*/, Promise.resolve().then(function () { return require('./gen-ts-routing-module.backend'); })];
                    case 6:
                        GenTsRoutingModule = (_b.sent()).GenTsRoutingModule;
                        return [2 /*return*/, new GenTsRoutingModule(location, decorator, originalFileName)];
                    case 7: return [4 /*yield*/, Promise.resolve().then(function () { return require('./gen-ts-directive.backend'); })];
                    case 8:
                        GenTsDirective = (_b.sent()).GenTsDirective;
                        return [2 /*return*/, new GenTsDirective(location, decorator, originalFileName)];
                    case 9: return [4 /*yield*/, Promise.resolve().then(function () { return require('./gen-ts-service.backend'); })];
                    case 10:
                        GenTsService = (_b.sent()).GenTsService;
                        return [2 /*return*/, new GenTsService(location, decorator, originalFileName)];
                    case 11: return [4 /*yield*/, Promise.resolve().then(function () { return require('./gen-ts-api-service.backend'); })];
                    case 12:
                        GenTsApiService = (_b.sent()).GenTsApiService;
                        return [2 /*return*/, new GenTsApiService(location, decorator, originalFileName)];
                    case 13: return [4 /*yield*/, Promise.resolve().then(function () { return require('./gen-ts-pipe.backend'); })];
                    case 14:
                        GenTsPipe = (_b.sent()).GenTsPipe;
                        return [2 /*return*/, new GenTsPipe(location, decorator, originalFileName)];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(FilesGenerator.prototype, "contextFolderName", {
        get: function () {
            return tnp_core_1.path.basename(this.absoluteFolderLocation);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FilesGenerator.prototype, "surfixesComponent", {
        get: function () {
            return ['.component.ts', '-component.ts', '-component-decorator.ts', '.component.decorator.ts', '.component-decorator.ts'];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FilesGenerator.prototype, "surfixesServices", {
        get: function () {
            return ['.service.ts', '-service.ts', , '-service-decorator.ts', '.service.decorator.ts', '.service-decorator.ts'];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FilesGenerator.prototype, "template", {
        get: function () {
            return "File without template";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FilesGenerator.prototype, "decoratorImportPath", {
        get: function () {
            return tnp_core_1.path.join(tnp_core_1.path.dirname(this.decoratorModuleFilePath), this.originalFileName.replace('.ts', ''))
                .replace(/^\\/, '').replace(/\\/g, '/');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FilesGenerator.prototype, "decoratorImport", {
        get: function () {
            return this.isDecorator ? "import { " + this.getClassName(this.originalFileName.replace('.ts', '')) + " as Base } "
                + ("from '" + this.decoratorImportPath + "'") : '';
        },
        enumerable: false,
        configurable: true
    });
    FilesGenerator.prototype.getClassName = function (contextOrFile) {
        return "" + tnp_core_1._.upperFirst(tnp_core_1._.camelCase(contextOrFile ? contextOrFile : this.contextFolderName));
    };
    FilesGenerator.prototype.init = function () {
        if (this.absoluteFolderLocation.endsWith('.ts')) {
            this.outputFileName = tnp_core_1.path.basename(this.absoluteFolderLocation).replace('.ts', '');
            this.absoluteFolderLocation = this.absoluteFolderLocation.replace(tnp_core_1.path.basename(this.absoluteFolderLocation), '');
        }
        else {
            if (tnp_core_1.fse.existsSync(this.absoluteFolderLocation) && !tnp_core_1.fse.lstatSync(this.absoluteFolderLocation).isDirectory()) {
                this.absoluteFolderLocation = tnp_core_1.path.dirname(this.absoluteFolderLocation);
            }
            this.outputFileName = this.contextFolderName;
        }
        this.className = this.getClassName();
        if (this.isDecorator) {
            this.decoratorModuleFilePath = tnp_core_1.path.join(this.absoluteFolderLocation.replace(this.findModuleParent(this.absoluteFolderLocation), ''), this.outputFileName);
            if (this.decoratorModuleFilePath.startsWith('/')) {
                this.decoratorModuleFilePath = this.decoratorModuleFilePath.slice(1);
            }
        }
    };
    FilesGenerator.prototype.findModuleParent = function (absoluteLocaiton) {
        absoluteLocaiton = tnp_core_1.path.dirname(absoluteLocaiton);
        var previous = void 0;
        while (true) {
            absoluteLocaiton = tnp_core_1.path.resolve(tnp_core_1.path.join(absoluteLocaiton, '..'));
            if (previous === absoluteLocaiton) {
                return void 0;
            }
            if (!tnp_core_1.fse.existsSync(absoluteLocaiton)) {
                return void 0;
            }
            if (tools_backend_1.Tools.ModulesForDecorationArr.includes(tnp_core_1.path.basename(absoluteLocaiton))) {
                return tnp_core_1.path.dirname(absoluteLocaiton);
            }
            previous = absoluteLocaiton;
        }
    };
    Object.defineProperty(FilesGenerator.prototype, "outputFileLocation", {
        /**
         * Output file destination, absoulute location
         */
        get: function () {
            return tnp_core_1.path.join(this.absoluteFolderLocation, "" + this.outputFileName + this.outputFileExt);
        },
        enumerable: false,
        configurable: true
    });
    FilesGenerator.prototype.save = function (outLocation, data) {
        var outputFile = tnp_core_1._.isString(outLocation) ? outLocation : this.outputFileLocation;
        if (!tnp_core_1.fse.existsSync(tnp_core_1.path.dirname(outputFile))) {
            tnp_core_1.fse.mkdirpSync(tnp_core_1.path.dirname(outputFile));
        }
        tnp_core_1.fse.writeFileSync(outputFile, tnp_core_1._.isString(data) ? data : this.template, 'utf8');
        tnp_helpers_1.Helpers.info("File generated ASD.");
    };
    FilesGenerator.prototype.filesWithExtension = function (extension) {
        var services = tnp_core_1.fse
            .readdirSync(this.absoluteFolderLocation)
            .filter(function (f) { return f.endsWith(extension); });
        return services;
    };
    FilesGenerator.prototype.getFiles = function (filesWithExtension) {
        var _this = this;
        var files = [];
        if (tnp_core_1._.isArray(filesWithExtension)) {
            filesWithExtension.forEach(function (f) {
                files = files.concat(_this.filesWithExtension(f));
            });
        }
        else {
            files = this.filesWithExtension(filesWithExtension);
        }
        return files;
    };
    FilesGenerator.prototype.templateImport = function (filesWithExtension) {
        var files = this.getFiles(filesWithExtension);
        return files.length === 0 ? '' :
            ('\n' +
                files
                    .map(function (s) {
                    return {
                        className: tnp_core_1._.upperFirst(tnp_core_1._.camelCase(s.replace('.ts', ''))),
                        fileName: s.replace('.ts', '')
                    };
                })
                    .map(function (s) { return "import { " + s.className + " } from './" + s.fileName + "';"; })
                    .join('\n'));
    };
    FilesGenerator.prototype.templateDetectedModuleParts = function (filesWithExtension) {
        var files = this.getFiles(filesWithExtension);
        return files.length === 0 ? '' :
            ('\n\t\t...[' +
                files
                    .map(function (s) { return "" + tnp_core_1._.upperFirst(tnp_core_1._.camelCase(s.replace('.ts', ''))); })
                    .join(',\n') +
                ']');
    };
    Object.defineProperty(FilesGenerator.prototype, "injectAppend", {
        get: function () {
            return "" + (this.isDecorator ? ',{ append: true }' : '');
        },
        enumerable: false,
        configurable: true
    });
    FilesGenerator.BasicImportLodash = "\nimport * as isUndefined from 'lodash/isUndefined';\nimport * as isFunction from 'lodash/isFunction';\nimport * as isArray from 'lodash/isArray';\nimport * as isObject from 'lodash/isObject';\nimport * as merge from 'lodash/merge';\nimport * as cloneDeep from 'lodash/cloneDeep';\nimport * as set from 'lodash/set';\nimport * as get from 'lodash/get';\n".trimLeft()
        .split('\n')
        .join('\n').trimLeft();
    return FilesGenerator;
}());
exports.FilesGenerator = FilesGenerator;
//# sourceMappingURL=base-generators.backend.js.map