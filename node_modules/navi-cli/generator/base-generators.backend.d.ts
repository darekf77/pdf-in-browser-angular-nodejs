import { Tools } from '../tools.backend';
export declare class FilesGenerator {
    /**
     * Example: src/rs-application/rs-application-form
     */
    absoluteFolderLocation: string;
    isDecorator: boolean;
    /**
     * Only for decorator generation
     */
    originalFileName?: string;
    static From(location: string, type: Tools.GeneratedFileType, decorator?: boolean, originalFileName?: string): Promise<FilesGenerator>;
    get contextFolderName(): string;
    className: string;
    outputFileName: string;
    outputFileExt: string;
    decoratorModuleFilePath: string;
    modulePrefix: Tools.ModulesPrefixes;
    constructor(
    /**
     * Example: src/rs-application/rs-application-form
     */
    absoluteFolderLocation: string, isDecorator?: boolean, 
    /**
     * Only for decorator generation
     */
    originalFileName?: string);
    get surfixesComponent(): string[];
    get surfixesServices(): string[];
    get template(): string;
    get decoratorImportPath(): string;
    get decoratorImport(): string;
    getClassName(contextOrFile?: string): string;
    protected init(): void;
    private findModuleParent;
    /**
     * Output file destination, absoulute location
     */
    protected get outputFileLocation(): string;
    save(outLocation?: string, data?: string): void;
    private filesWithExtension;
    protected getFiles(filesWithExtension: string | string[]): string[];
    protected templateImport(filesWithExtension: string | string[]): string;
    protected templateDetectedModuleParts(filesWithExtension: string | string[]): string;
    protected get injectAppend(): string;
    static BasicImportLodash: string;
}
