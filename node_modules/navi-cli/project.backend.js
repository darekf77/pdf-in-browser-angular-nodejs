"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tools_backend_1 = require("./tools.backend");
var baseline_decoration_process_backend_1 = require("./decorate/baseline-decoration-process.backend");
var LINK_backend_1 = require("./scripts/LINK.backend");
var current_projects_and_servers_backend_1 = require("./current-projects-and-servers.backend");
var tnp_db_1 = require("tnp-db");
var console_ui_for_start_backend_1 = require("./console-ui-for-start.backend");
var local_config_backend_1 = require("./local-config.backend");
var quick_fixes_backend_1 = require("./quick-fixes.backend");
var project_helpers_backend_1 = require("./project-helpers.backend");
var submodules_backend_1 = require("./submodules.backend");
var vscode_backend_1 = require("./vscode.backend");
//#endregion
var Project = /** @class */ (function (_super) {
    tslib_1.__extends(Project, _super);
    //#endregion
    //#region constructor
    function Project(location) {
        var _this = _super.call(this) || this;
        _this.location = location;
        _this.helpers = new project_helpers_backend_1.ProjectHelpers(_this);
        _this.packageJSON = new tools_backend_1.Tools.PackageJSON(location);
        _this.bowerJSON = new tools_backend_1.Tools.BowerJSON(location);
        _this.type = Project_1.resolveType(location);
        _this.fileOperations = new tools_backend_1.Tools.FileOperations(_this);
        _this.localConfig = new local_config_backend_1.LocalConfig(_this);
        _this.quickFixes = new quick_fixes_backend_1.QuickFixes(_this);
        _this.quickFixes.updateGitIgnore();
        _this.submodules = new submodules_backend_1.Submodules(_this);
        _this.vscode = new vscode_backend_1.VSCode(_this);
        return _this;
    }
    Project_1 = Project;
    Object.defineProperty(Project, "db", {
        get: function () {
            var _this = this;
            return {
                getAll: function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    var db, projects;
                    return tslib_1.__generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                            case 1:
                                db = _a.sent();
                                return [4 /*yield*/, db.getProjects()];
                            case 2:
                                projects = _a.sent();
                                return [2 /*return*/, projects
                                        .map(function (p) { return Project_1.From(p.locationOfProject); })
                                        .filter(function (proj) {
                                        return !!proj && proj.type !== 'unknow-npm-project';
                                    })];
                        }
                    });
                }); }
            };
        },
        enumerable: false,
        configurable: true
    });
    Project.From = function (location, options) {
        if (options === void 0) { options = { warnings: false, resolveLocation: true }; }
        var warnings = options.warnings, resolveLocation = options.resolveLocation;
        if (!tnp_core_1._.isString(location)) {
            warnings && tnp_helpers_1.Helpers.error("ProjectFrom: Value is not a string: " + location);
        }
        // console.log('locaiton',location)
        if (resolveLocation) {
            location = tnp_core_1.path.resolve(location);
        }
        var alreadyExist = Project_1.projects.find(function (l) { return l.location.trim() === location.trim(); });
        if (alreadyExist) {
            return alreadyExist;
        }
        if (!tnp_core_1.fse.existsSync(location)) {
            warnings && tnp_helpers_1.Helpers.warn("Cannot find project in location: " + location);
            return;
        }
        if (!tnp_core_1.fse.existsSync(tnp_core_1.path.join(location, tnp_config_1.config.file.package_json))) {
            warnings && tnp_helpers_1.Helpers.warn("No package json in project: " + location);
            return;
        }
        var res = new Project_1(location);
        if (res.isNavigatorProject && res.projectType === 'baseline-fork') {
            var external_1 = tnp_core_1.path.join(res.location, tnp_config_1.config.folder.external);
            if (!tnp_core_1.fse.existsSync(external_1)) {
                tnp_core_1.fse.mkdirpSync(external_1);
            }
            var node_modules = tnp_core_1.path.join(res.location, tnp_config_1.config.folder.node_modules);
            if (!tnp_core_1.fse.existsSync(node_modules)) {
                tnp_core_1.fse.mkdirpSync(node_modules);
            }
        }
        return res;
    };
    Project.nearestTo = function (absoluteLocation, options) {
        options = options || {};
        var type = options.type, projectType = options.projectType, findGitRoot = options.findGitRoot;
        if (!tnp_core_1._.isString(type) && !tnp_core_1._.isArray(type) && !tnp_core_1._.isUndefined(type)) {
            tnp_helpers_1.Helpers.error("[nearestTo] wrong type: " + type, false, true);
        }
        if (!tnp_core_1._.isString(projectType) && !tnp_core_1._.isArray(projectType) && !tnp_core_1._.isUndefined(projectType)) {
            tnp_helpers_1.Helpers.error("[nearestTo] wrong navigator project type: " + projectType, false, true);
        }
        if (tnp_core_1.fse.existsSync(absoluteLocation)) {
            absoluteLocation = tnp_core_1.fse.realpathSync(absoluteLocation);
        }
        if (tnp_core_1.fse.existsSync(absoluteLocation) && !tnp_core_1.fse.lstatSync(absoluteLocation).isDirectory()) {
            absoluteLocation = tnp_core_1.path.dirname(absoluteLocation);
        }
        var project;
        var previousLocation;
        while (true) {
            project = Project_1.From(absoluteLocation);
            if (tnp_core_1._.isString(type) || tnp_core_1._.isArray(type)) {
                if (project &&
                    (((tnp_core_1._.isString(type) && (project.type === type)) ||
                        (tnp_core_1._.isArray(type) && (type.includes(project.type))))
                        ||
                            ((tnp_core_1._.isString(projectType) && (project.projectType === projectType)) ||
                                (tnp_core_1._.isArray(projectType) && (projectType.includes(project.projectType)))))) {
                    if (findGitRoot) {
                        if (project.git.isGitRoot) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
            else {
                if (project) {
                    if (findGitRoot) {
                        if (project.git.isGitRoot) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
            previousLocation = absoluteLocation;
            absoluteLocation = tnp_core_1.path.resolve(tnp_core_1.path.join(absoluteLocation, '..'));
            if (!tnp_core_1.fse.existsSync(absoluteLocation)) {
                return;
            }
            if (previousLocation === absoluteLocation) {
                return;
            }
        }
        return project;
    };
    Project.resolveType = function (location) {
        var packageJson;
        try {
            packageJson = tnp_core_1.fse.readJSONSync(tnp_core_1.path.join(location, tnp_config_1.config.file.package_json));
        }
        catch (err) {
            tnp_helpers_1.Helpers.error("Not able to resolve pacakge json from " + location, false, true);
        }
        var name = packageJson.name;
        if (!tnp_core_1._.isUndefined(tools_backend_1.Tools.ModulesForDecorationArr.find(function (moduleForDecName) { return name.endsWith(moduleForDecName); }))) {
            if (tnp_core_1.fse.existsSync(tnp_core_1.path.join(location, tnp_config_1.config.file.bower_json))) {
                return 'child-module-v1.5';
            }
            else {
                return 'child-module-v1.6';
            }
        }
        if (tnp_core_1._.isString(name) && name.endsWith('-ui') && tnp_core_1.fse.existsSync(tnp_core_1.path.join(location, '.bowerrc'))) {
            return 'baseline-fork-v1.5';
        }
        if (tnp_core_1._.isString(name) && name.endsWith('-ui') && tnp_core_1.fse.existsSync(tnp_core_1.path.join(location, 'build-config.js'))) {
            return 'baseline-fork-v1.6';
        }
        return 'unknow-npm-project';
    };
    Project.nameIsForkOfBaseline = function (location) {
        var json = tnp_core_1.fse.readJsonSync(tnp_core_1.path.join(location, tnp_config_1.config.file.package_json));
        return tnp_core_1._.isString(json.name) && json.name.endsWith('-ui') && json.name.length === 6;
    };
    Object.defineProperty(Project, "Current", {
        get: function () {
            return Project_1.From(process.cwd());
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project, "Navi", {
        get: function () {
            var navi = Project_1.From(tnp_core_1.path.join(__dirname, '..', '..'));
            return navi;
        },
        enumerable: false,
        configurable: true
    });
    Project.projectsFrom = function (location) {
        return tnp_helpers_1.Helpers.findChildren(location, function (childLocation) {
            var childProject = Project_1.From(childLocation);
            return childProject;
        });
    };
    Project.getNearesTO = function (absoluteLocation) {
        if (tnp_core_1.fse.existsSync(absoluteLocation)) {
            absoluteLocation = tnp_core_1.fse.realpathSync(absoluteLocation);
        }
        if (tnp_core_1.fse.existsSync(absoluteLocation) && !tnp_core_1.fse.lstatSync(absoluteLocation).isDirectory()) {
            absoluteLocation = tnp_core_1.path.dirname(absoluteLocation);
        }
        var project;
        var previousLocation;
        while (true) {
            project = Project_1.From(absoluteLocation);
            if (project) {
                break;
            }
            previousLocation = absoluteLocation;
            absoluteLocation = tnp_core_1.path.resolve(tnp_core_1.path.join(absoluteLocation, '..'));
            if (!tnp_core_1.fse.existsSync(absoluteLocation)) {
                return;
            }
            if (previousLocation === absoluteLocation) {
                return;
            }
        }
        return project;
    };
    Object.defineProperty(Project.prototype, "metadata", {
        //#region metadata
        get: function () {
            return tnp_core_1._.pick(current_projects_and_servers_backend_1.NavigatorBaselineForksObj[this.name], tools_backend_1.Tools.ServerOptionsLocalConfig16);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "pathes", {
        //#endregion
        //#region pathes
        get: function () {
            var that = this;
            return {
                local_config_js: tnp_core_1.path.join(this.location, tnp_config_1.config.file.local_config_js),
                _gitignore: tnp_core_1.path.join(this.location, tnp_config_1.config.file._gitignore)
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "prefix", {
        //#endregion
        //#region prefix
        /**
         * prefix
         * "nes" -> for "nes-ui"
         * "cas" -> for "cas-ui"
         * etc
         */
        get: function () {
            if (this.projectType === 'child-module') {
                return this.parent.prefix;
            }
            return tnp_core_1.path.basename(this.location).replace(/\-ui$/g, '').toLowerCase();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "prefixUI", {
        get: function () {
            return this.prefix + "-ui";
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "metadata_description", {
        get: function () {
            return current_projects_and_servers_backend_1.NavigatorBaselineForksObj[this.name] ?
                current_projects_and_servers_backend_1.NavigatorBaselineForksObj[this.name].description : '-';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "port", {
        //#endregion
        //#region port
        get: function () {
            return 9000;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "projectType", {
        //#endregion
        //#region project type
        get: function () {
            if (this.type === 'unknow-npm-project') {
                return 'other';
            }
            var _a = this.type.split('-v'), nameOfType = _a[0], versionString = _a[1];
            return "" + nameOfType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "baselineVersion", {
        //#endregion
        //#region baseline version
        get: function () {
            if (this.type === 'unknow-npm-project') {
                return 'none';
            }
            var _a = this.type.split('-v'), nameOfType = _a[0], versionString = _a[1];
            return "v" + versionString;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "name", {
        //#endregion
        //#region name
        // @ts-ignore
        get: function () {
            return this.packageJSON.data.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "genericName", {
        //#endregion
        //#region generic name
        // @ts-ignore
        get: function () {
            if (this.parent) {
                return tnp_core_1.path.basename(tnp_core_1.path.dirname(this.parent.location)) + "/" + this.parent.name + "/" + this.name;
            }
            return tnp_core_1.path.basename(tnp_core_1.path.dirname(this.location)) + "/" + this.name;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "vscodeSettings", {
        //#endregion
        //#region vscode setttings
        get: function () {
            var vscodeDir = tnp_core_1.path.join(this.location, '.vscode');
            var p = tnp_core_1.path.join(vscodeDir, 'settings.json');
            return tnp_core_1.fse.existsSync(p) && tnp_core_1.fse.readJSONSync(p, { encoding: 'utf8' });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "folderName", {
        //#endregion
        //#region folder name
        get: function () {
            return tnp_core_1.path.basename(this.location);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "version", {
        //#endregion
        //#region version
        // @ts-ignore
        get: function () {
            return this.packageJSON.data.version;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "modulePrefix", {
        //#endregion
        //#region module prefix
        get: function () {
            return tnp_core_1._.snakeCase(tnp_core_1._.first(this.name.replace('es-', '').split('-')));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "isNavigatorProject", {
        //#endregion
        //#region is navigator project
        get: function () {
            return this.type !== 'unknow-npm-project';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "isChildModuleInsideExternalFolderInBaselineFork", {
        //#endregion
        //#region is child module inside external
        get: function () {
            var parent = this.parent;
            if (!parent || parent.projectType !== 'baseline-fork') {
                return false;
            }
            var external = tnp_core_1.path.resolve(tnp_core_1.path.join(this.location, '..'));
            if (!tnp_core_1.fse.existsSync(external) || tnp_core_1.path.basename(external) !== tnp_config_1.config.folder.external) {
                return false;
            }
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "emptyNodeModules", {
        //#endregion
        //#region empty node_modules
        get: function () {
            var node_modules = tnp_core_1.path.join(this.location, tnp_config_1.config.folder.node_modules);
            if (!tnp_core_1.fse.existsSync(node_modules)) {
                return true;
            }
            return (tnp_helpers_1.Helpers.findChildren(node_modules, function (c) { return c; }).length === 0);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "isWithoutGitRepository", {
        //#endregion
        //#region is without git repository
        get: function () {
            return !tnp_core_1.fse.existsSync(tnp_core_1.path.join(this.location, '.git'));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "children", {
        //#endregion
        //#region children
        // @ts-ignore
        get: function () {
            if (this.projectType === 'baseline-fork') {
                var externalPath = tnp_core_1.path.join(this.location, tnp_config_1.config.folder.external);
                return tnp_helpers_1.Helpers.findChildren(externalPath, function (childLocation) {
                    var childProject = Project_1.From(childLocation);
                    return childProject;
                });
            }
            return [];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Project.prototype, "parent", {
        //#endregion
        //#region parent
        // @ts-ignore
        get: function () {
            if (this.projectType === 'child-module' &&
                tnp_core_1.path.basename(tnp_core_1.path.resolve(tnp_core_1.path.join(this.location, '..'))) === tnp_config_1.config.folder.external) {
                return Project_1.From(tnp_core_1.path.join(this.location, '..', '..'));
            }
            return Project_1.From(tnp_core_1.path.join(this.location, '..'));
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#endregion
    //#region public api
    //#region start process
    Project.prototype.startProcess = function (pACtion, act, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = (tnp_core_1._.isString(args) ? args : (tnp_core_1._.isArray(args) ? args.join(' ') : ''));
                        return [4 /*yield*/, console_ui_for_start_backend_1.ConsoleUIForStart.Instance.init(this, pACtion, act, args)];
                    case 1:
                        _a.sent();
                        this.quickFixes.removeCacheLoaderFromWebpack();
                        if (this.emptyNodeModules) {
                            this.quickFixes.installNpmPackagesWithQuickFixes();
                        }
                        return [4 /*yield*/, this.quickFixes.overrideEsBuildUi()];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.quickFixes.fixLongBuild()];
                    case 3:
                        _a.sent();
                        this.quickFixes.removeAnnyoinGitHooks();
                        if (!(this.children.length > 0)) return [3 /*break*/, 5];
                        return [4 /*yield*/, LINK_backend_1.RELINK(this.children.map(function (c) { return c.name; }), false)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this.quickFixes.fixTsConfigInBaselineFork();
                        return [4 /*yield*/, this.quickFixes.startNavigator()];
                    case 6:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region record / start process
    Project.prototype.record = function (act, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.startProcess('record', act, args)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region replay / start process
    Project.prototype.replay = function (act, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.startProcess('replay', act, args)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region clean start
    Project.prototype.cleanStart = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.info("Removing node_modules...");
                        tnp_core_1.rimraf.sync(tnp_core_1.path.join(this.location, tnp_config_1.config.folder.node_modules));
                        this.helpers.run("yarn cache clean").sync();
                        return [4 /*yield*/, this.resetProcess()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.startProcess()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region init
    Project.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Project_1.Current.localConfig.update()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, Project_1.Current.vscode.update()];
                    case 2:
                        _a.sent();
                        Project_1.Current.quickFixes.fixTsConfigInBaselineFork();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region reset process
    Project.prototype.resetProcess = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var branchToReset, p, paretBowerData, parentPackageJSON, keyInPJ, remoteUrl, defaultBranch, e_1, index, child;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        branchToReset = '';
                        if (this.projectType === 'baseline-fork') {
                            this.quickFixes.removeCacheLoaderFromWebpack();
                            p = current_projects_and_servers_backend_1.NavigatorBaselineForks.find(function (f) { return f.name === _this.name; });
                            branchToReset = p.branch;
                        }
                        else if (this.projectType === 'child-module') {
                            if (!!this.parent && this.projectType === 'child-module') {
                                if (this.navigatorVersionLessOrEqual('v1.5')) {
                                    paretBowerData = this.parent.bowerJSON.data.dependencies;
                                    branchToReset = (paretBowerData[Object.keys(paretBowerData).find(function (key) { return key === _this.name; })]
                                        .replace(/^.*\#/, ''));
                                }
                                if (this.navigatorVersionBiggerOrEqual('v1.6')) {
                                    parentPackageJSON = this.parent.packageJSON.data.dependencies;
                                    keyInPJ = tnp_core_1._.keys(parentPackageJSON).find(function (key) { return key === _this.name; });
                                    remoteUrl = parentPackageJSON[keyInPJ];
                                    if (!remoteUrl) {
                                        defaultBranch = tnp_helpers_1.Helpers.git.defaultRepoBranch(this.location);
                                        tnp_helpers_1.Helpers.warn("\"" + this.parent.name + "\" does not have \"" + this.name + "\" as dependency.\n\n            reseting using default repo branch: " + defaultBranch + "\n\n            ");
                                        branchToReset = defaultBranch;
                                    }
                                    else {
                                        branchToReset = (remoteUrl.replace(/^.*\#/, ''));
                                    }
                                }
                            }
                        }
                        if (this.isWithoutGitRepository && (this.projectType === 'child-module')) {
                            tnp_helpers_1.Helpers.info("Project '" + this.name + "' is just a link to folder '<root path of " + (this.parent && this.parent.name) + ">/node_moduels/" + this.name + "'.\nPlease use command 'navi link " + this.name + "' make it a external folder module\nand be able to use command 'navi reset' after that. ");
                            return [2 /*return*/];
                        }
                        if (!branchToReset) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        this.helpers.run("git reset --hard HEAD~10").sync();
                        this.helpers.run("git checkout " + branchToReset).sync();
                        return [4 /*yield*/, tnp_helpers_1.Helpers.git.pullBranch(branchToReset, this.location)];
                    case 2:
                        _a.sent();
                        tnp_helpers_1.Helpers.info("Success reset of project: " + this.name);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        console.log(e_1);
                        tnp_helpers_1.Helpers.error("Cannot reset project: " + this.name + " inside: " + this.location, true, true);
                        return [3 /*break*/, 4];
                    case 4:
                        if (!(this.projectType === 'baseline-fork' && tnp_core_1._.isArray(this.children) && this.children.length > 0)) return [3 /*break*/, 8];
                        index = 0;
                        _a.label = 5;
                    case 5:
                        if (!(index < this.children.length)) return [3 /*break*/, 8];
                        child = this.children[index];
                        return [4 /*yield*/, child.resetProcess()];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        index++;
                        return [3 /*break*/, 5];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region decorate
    Project.prototype.decorate = function (files) {
        (new baseline_decoration_process_backend_1.BaselineDecorationProcess(this.parent, this, files)).run();
        console.log('Decoration of project done');
    };
    //#endregion
    //#region override
    Project.prototype.override = function (files) {
        if (this.projectType === 'child-module') {
            for (var index = 0; index < files.length; index++) {
                var relativePath = files[index];
                var absolutePath = tnp_core_1.path.join(this.location, relativePath);
                var destination = tnp_core_1.path.join(this.parent.location, 'custom', this.name, relativePath);
                if (this.navigatorVersionBiggerOrEqual('v1.6')) {
                    tnp_helpers_1.Helpers.writeFile(destination + ".js", "\n          module.exports = (input) => {\n            return [\n              [\n                '', // replace from\n                ''  // replace to\n              ],\n            ].reduce((prev, curr) => prev.replace(curr[0], curr[1]), input);\n          };\n          ".trim());
                }
                else {
                    tnp_helpers_1.Helpers.copyFile(absolutePath, destination);
                }
            }
        }
        else {
            tnp_helpers_1.Helpers.error("Override only in child module", false, true);
        }
    };
    //#endregion
    //#region navigator version comparsion
    Project.prototype.navigatorVersionLessOrEqual = function (version) {
        return tools_backend_1.Tools.compareVer(version, 'less-or-equal', this.baselineVersion);
    };
    Project.prototype.navigatorVersionLessThan = function (version) {
        return tools_backend_1.Tools.compareVer(version, 'less', this.baselineVersion);
    };
    Project.prototype.navigatorVersionBiggerOrEqual = function (version) {
        return tools_backend_1.Tools.compareVer(version, 'more-or-equal', this.baselineVersion);
    };
    Project.prototype.navigatorVersionBiggerThan = function (version) {
        return tools_backend_1.Tools.compareVer(version, 'more', this.baselineVersion);
    };
    //#endregion
    Project.prototype.forEmptyStructure = function () {
        var _this = this;
        var folders = _super.prototype.forEmptyStructure.call(this);
        return tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], folders), [
            { relativePath: tnp_config_1.config.file._gitignore, includeContent: true }
        ]), ((this.projectType === 'baseline-fork') ? tslib_1.__spreadArray([
            { relativePath: tnp_config_1.config.folder.custom }
        ], tools_backend_1.Tools.ModulesForDecorationArr.map(function (m) {
            var relativeLinkFrom = tnp_config_1.config.folder.external + "/" + _this.prefix.toUpperCase() + "-" + m;
            return {
                relativeLinkFrom: relativeLinkFrom,
                relativePath: tnp_config_1.config.folder.node_modules + "/" + m
            };
        })) : [])), ((this.projectType === 'baseline-fork' && this.navigatorVersionBiggerOrEqual('v1.6')) ? [
            {
                relativePath: tnp_config_1.config.file.build_config_js, includeContent: true
            },
            {
                relativePath: tnp_config_1.config.file.tsconfig_json, includeContent: true
            },
        ] : [])), ((this.projectType === 'child-module') ? [
            {
                relativePath: tnp_config_1.config.file._bowerrc, includeContent: true
            }
        ] : []));
    };
    var Project_1;
    //#region static methods
    Project.projects = [];
    Project = Project_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('Project'),
        tslib_1.__metadata("design:paramtypes", [String])
    ], Project);
    return Project;
}(tnp_helpers_1.Project));
exports.Project = Project;
//# sourceMappingURL=project.backend.js.map