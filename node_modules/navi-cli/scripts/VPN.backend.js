"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var vpn_split_1 = require("vpn-split");
var current_projects_and_servers_backend_1 = require("../current-projects-and-servers.backend");
var tools_backend_1 = require("../tools.backend");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_core_1 = require("tnp-core");
function VPN(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var igtHosts, hostsFromProjects, ins;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    igtHosts = {
                        'JIRA igt': tools_backend_1.Tools.HostForServer.From({
                            ipOrDomain: '10.253.160.66',
                            aliases: 'jira.gtech.com',
                        }),
                        'GITLAB igt': tools_backend_1.Tools.HostForServer.From({
                            ipOrDomain: '10.253.164.121',
                            aliases: 'xxgit1.gtech.com',
                        }),
                        'NPM server igt': tools_backend_1.Tools.HostForServer.From({
                            ipOrDomain: '10.253.164.39',
                            aliases: 'xxnpm',
                        }),
                        'product baseline server from navigator FE': tools_backend_1.Tools.HostForServer.From({
                            ipOrDomain: '10.17.21.209',
                            aliases: 'xxa311314',
                        }),
                        'WIKI IGT': tools_backend_1.Tools.HostForServer.From({
                            ipOrDomain: '10.246.4.85',
                            aliases: 'wiki.gtech.com',
                        })
                    };
                    hostsFromProjects = current_projects_and_servers_backend_1.NavigatorBaselineForks.reduce(function (prev, _a) {
                        var etcHostsAliases = _a.etcHostsAliases;
                        return _.merge(prev, etcHostsAliases);
                    }, {});
                    return [4 /*yield*/, vpn_split_1.VpnSplit.Instance({
                            additionalDefaultHosts: tslib_1.__assign(tslib_1.__assign({}, igtHosts), hostsFromProjects)
                        })];
                case 1:
                    ins = _a.sent();
                    if (!(args.join(' ').trim() === '')) return [3 /*break*/, 3];
                    return [4 /*yield*/, ins.server()];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, ins.client(tnp_helpers_1.Helpers.urlParse(args.shift()))];
                case 4:
                    _a.sent();
                    _a.label = 5;
                case 5:
                    process.stdin.resume();
                    return [2 /*return*/];
            }
        });
    });
}
function OPEN_HOSTS() {
    tnp_helpers_1.Helpers.openFolderInFileExploer(tnp_core_1.path.dirname(vpn_split_1.VpnSplit.HOST_FILE_PATH));
    process.exit(0);
}
exports.default = {
    VPN: VPN,
    OPEN_ETC_HOSTS: function () {
        OPEN_HOSTS();
    },
    OPEN_HOSTS: OPEN_HOSTS,
};
//# sourceMappingURL=VPN.backend.js.map