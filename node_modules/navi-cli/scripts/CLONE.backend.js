"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CLONE = void 0;
var tslib_1 = require("tslib");
var _ = require("lodash");
var path = require("path");
var chalk_1 = require("chalk");
var project_backend_1 = require("../project.backend");
var tnp_helpers_1 = require("tnp-helpers");
var current_projects_and_servers_backend_1 = require("../current-projects-and-servers.backend");
function CLONE(projects, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var whereClone, index, p, clonedProjectLocation, clonedProject, index, proj, clonedProjectLocation, clonedProj;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    whereClone = process.cwd();
                    if (!(_.isArray(projects) && projects.length > 0)) return [3 /*break*/, 6];
                    projects = projects.map(function (c) {
                        if (_.isString(c)) {
                            var proj = current_projects_and_servers_backend_1.NavigatorBaselineForks.find(function (p) { return p.name === c; });
                            if (!proj) {
                                tnp_helpers_1.Helpers.clearConsole();
                                tnp_helpers_1.Helpers.error("This is not a navigator baseline-fork project name: " + c + "\nTry one from list below: " + current_projects_and_servers_backend_1.NavigatorBaselineForks.map(function (f) { return chalk_1.default.bold(f.name); }).join(', ') + "\n          ", false, true);
                            }
                            return proj;
                        }
                        return c;
                    });
                    index = 0;
                    _a.label = 1;
                case 1:
                    if (!(index < projects.length)) return [3 /*break*/, 5];
                    p = projects[index];
                    return [4 /*yield*/, p.cloneTo(whereClone)];
                case 2:
                    _a.sent();
                    clonedProjectLocation = path.join(process.cwd(), p.name);
                    if (!exit && projects.length === 1) {
                        tnp_helpers_1.Helpers.goToDir(clonedProjectLocation);
                    }
                    clonedProject = project_backend_1.Project.From(clonedProjectLocation);
                    if (!clonedProject) return [3 /*break*/, 4];
                    return [4 /*yield*/, clonedProject.vscode.update()];
                case 3:
                    _a.sent();
                    _a.label = 4;
                case 4:
                    index++;
                    return [3 /*break*/, 1];
                case 5: return [3 /*break*/, 14];
                case 6: return [4 /*yield*/, tnp_helpers_1.Helpers.questionYesNo("Do you want to clone here all projects ?")];
                case 7:
                    if (!_a.sent()) return [3 /*break*/, 14];
                    index = 0;
                    _a.label = 8;
                case 8:
                    if (!(index < current_projects_and_servers_backend_1.NavigatorBaselineForks.length)) return [3 /*break*/, 14];
                    proj = current_projects_and_servers_backend_1.NavigatorBaselineForks[index];
                    clonedProjectLocation = path.join(process.cwd(), proj.name);
                    if (!tnp_helpers_1.Helpers.exists(clonedProjectLocation)) return [3 /*break*/, 9];
                    tnp_helpers_1.Helpers.warn("Project " + chalk_1.default.bold(proj.name) + " alread exists in this location");
                    return [3 /*break*/, 11];
                case 9: return [4 /*yield*/, proj.cloneTo(path.dirname(clonedProjectLocation))];
                case 10:
                    _a.sent();
                    _a.label = 11;
                case 11:
                    clonedProj = project_backend_1.Project.From(clonedProjectLocation);
                    return [4 /*yield*/, clonedProj.submodules.cloneAll()];
                case 12:
                    _a.sent();
                    _a.label = 13;
                case 13:
                    index++;
                    return [3 /*break*/, 8];
                case 14:
                    if (exit) {
                        process.exit(0);
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.CLONE = CLONE;
exports.default = {
    CLONE: CLONE
};
//# sourceMappingURL=CLONE.backend.js.map