"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.COPY_AS_IMPORT = void 0;
var tslib_1 = require("tslib");
var _ = require("lodash");
var path = require("path");
var project_backend_1 = require("../project.backend");
var tnp_helpers_1 = require("tnp-helpers");
function COPY_AS_IMPORT(args, exit) {
    if (exit === void 0) { exit = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var absoluteLocation, proj, moduleName_1, child, baseline, importString, relativePath, relativePath;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    absoluteLocation = _.first(args);
                    if (!path.isAbsolute(absoluteLocation)) {
                        tnp_helpers_1.Helpers.error("[copy as import] path is not absolute: " + absoluteLocation);
                    }
                    proj = project_backend_1.Project.nearestTo(absoluteLocation.trim());
                    if (!proj) {
                        tnp_helpers_1.Helpers.error("File is not a part of navigator project", false, true);
                    }
                    if (proj.projectType === 'baseline-fork') {
                        moduleName_1 = absoluteLocation.replace(proj.location, '').split('/')[2];
                        child = proj.children.find(function (c) { return c.name === moduleName_1; });
                        if (child) {
                            baseline = proj;
                            proj = child;
                        }
                    }
                    if (proj.projectType === 'child-module') {
                        if (!!baseline) {
                            relativePath = tnp_helpers_1.Helpers.path.removeExt(absoluteLocation.replace(baseline.location, '').split('/').slice(2).join('/'));
                            importString = "import " + _.camelCase(tnp_helpers_1.Helpers.path.removeExt(path.basename(absoluteLocation))) + " from '" + relativePath + "';";
                        }
                        else {
                            relativePath = tnp_helpers_1.Helpers.path.removeExt(absoluteLocation.replace(proj.location, proj.name));
                            importString = "import " + _.camelCase(tnp_helpers_1.Helpers.path.removeExt(path.basename(absoluteLocation))) + " from '" + relativePath + "';";
                        }
                    }
                    return [4 /*yield*/, tnp_helpers_1.Helpers.terminal.copyText(importString)];
                case 1:
                    _a.sent();
                    exit && process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
exports.COPY_AS_IMPORT = COPY_AS_IMPORT;
exports.default = {
    COPY_AS_IMPORT: COPY_AS_IMPORT,
};
//# sourceMappingURL=COPY.backend.js.map