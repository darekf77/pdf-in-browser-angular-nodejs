"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SHOW_CHILDREN = exports.OPEN_BASELINE_FORK = exports.OPEN = exports.OPEN_MODULE = exports.GOTO = void 0;
var _ = require("lodash");
var project_backend_1 = require("../project.backend");
var tnp_helpers_1 = require("tnp-helpers");
var tools_backend_1 = require("../tools.backend");
function GOTO(args, exit) {
    if (exit === void 0) { exit = true; }
    var absolutePath = _.first(args);
    var nearestProject = project_backend_1.Project.nearestTo(absolutePath);
    if (nearestProject) {
        if (nearestProject.projectType === 'child-module') {
            nearestProject.parent.helpers.run("navi open:module " + nearestProject.name).sync();
        }
        if (nearestProject.projectType === 'baseline-fork') {
            nearestProject.helpers.run("code " + nearestProject.location).sync();
        }
    }
    tnp_helpers_1.Helpers.run("code " + absolutePath).sync();
    if (exit) {
        process.exit(0);
    }
}
exports.GOTO = GOTO;
function OPEN_MODULE(args, exit) {
    if (exit === void 0) { exit = true; }
    if (args) {
        var moduleName_1 = _.first(args);
        if (!tools_backend_1.Tools.ModulesForDecorationArr.includes(moduleName_1)) {
            tnp_helpers_1.Helpers.error("Incorrect module name: " + moduleName_1, false, true);
        }
        var project = project_backend_1.Project.From(process.cwd());
        if (project.projectType === 'child-module') {
            project = project.parent;
        }
        var child = project.children.find(function (c) { return c.name === moduleName_1; });
        if (child) {
            tnp_helpers_1.Helpers.run("code " + child.location).sync();
        }
        else {
            project.helpers.run("navi init " + moduleName_1).sync();
            child = project.children.find(function (c) { return c.name === moduleName_1; });
            tnp_helpers_1.Helpers.run("code " + child.location).sync();
        }
    }
    if (exit) {
        process.exit(0);
    }
}
exports.OPEN_MODULE = OPEN_MODULE;
function OPEN(args, exit) {
    if (exit === void 0) { exit = true; }
    args = args.map(function (a) {
        if (!a.startsWith('es-')) {
            return "es-" + a + (a === 'common' ? '' : '-ui');
        }
        return a;
    });
    return OPEN_MODULE(args, exit);
}
exports.OPEN = OPEN;
function OPEN_BASELINE_FORK(args, exit) {
    if (exit === void 0) { exit = true; }
    var project = project_backend_1.Project.From(process.cwd());
    if (project.projectType === 'child-module') {
        GOTO([project.parent.location]);
    }
    if (project.projectType === 'baseline-fork') {
        GOTO([project.location]);
    }
    if (exit) {
        process.exit(0);
    }
}
exports.OPEN_BASELINE_FORK = OPEN_BASELINE_FORK;
function SHOW_CHILDREN() {
    var project = project_backend_1.Project.From(process.cwd());
    if (project) {
        console.log(JSON.stringify(project.children.map(function (c) {
            return { name: c.name, location: c.location };
        })));
    }
    else {
        console.log(JSON.stringify([]));
    }
    process.exit(0);
}
exports.SHOW_CHILDREN = SHOW_CHILDREN;
exports.default = {
    GOTO: GOTO,
    OPEN: OPEN,
    OPEN_BASELINE_FORK: OPEN_BASELINE_FORK,
    OPEN_MODULE: OPEN_MODULE,
    SHOW_CHILDREN: SHOW_CHILDREN,
};
//# sourceMappingURL=OPEN.backend.js.map