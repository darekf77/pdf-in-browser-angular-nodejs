"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FIND_AND_DELETE = exports.FIND_AND_SHOW_SOURCE = exports.FIND_AND_SHOW_DECORATED_FILES = void 0;
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var project_backend_1 = require("../project.backend");
var OPEN_backend_1 = require("./OPEN.backend");
var tnp_helpers_1 = require("tnp-helpers");
function FIND_AND_SHOW_DECORATED_FILES(args) {
    var relativeFilePath = tnp_core_1._.first(args);
    var startSearchFrom = tnp_core_1.path.join(process.cwd(), relativeFilePath);
    var project = project_backend_1.Project.nearestTo(startSearchFrom);
    if (!project) {
        tnp_helpers_1.Helpers.error("This folder doesn't contain navigator project: " + relativeFilePath, false, true);
    }
    if (relativeFilePath.startsWith('external')) {
        relativeFilePath = relativeFilePath.split('/').slice(2).join('/');
    }
    var output = project.fileOperations.findDecoratedFilesInBaselineFor(relativeFilePath);
    tnp_helpers_1.Helpers.outputToVScode(output);
    process.exit(0);
}
exports.FIND_AND_SHOW_DECORATED_FILES = FIND_AND_SHOW_DECORATED_FILES;
function FIND_AND_SHOW_SOURCE(args) {
    var relativeFilePath = tnp_core_1._.first(args);
    if (relativeFilePath.endsWith('.html.js')) {
        relativeFilePath = relativeFilePath.replace('.html.js', '.html');
    }
    var project = project_backend_1.Project.From(process.cwd());
    if (relativeFilePath.startsWith('external')) {
        var nearestBaseline = project_backend_1.Project.nearestTo(process.cwd(), { projectType: 'baseline-fork' });
        if (nearestBaseline) {
            var nearestTo = tnp_core_1.path.join(nearestBaseline.location, relativeFilePath);
            project = project_backend_1.Project.nearestTo(nearestTo);
            if ((project === null || project === void 0 ? void 0 : project.projectType) === 'child-module') {
                relativeFilePath = relativeFilePath.split('/').slice(2).join('/');
                var gotoPath = tnp_core_1.path.join(project.location, relativeFilePath);
                OPEN_backend_1.GOTO([gotoPath], true);
            }
        }
    }
    project.fileOperations.findSourceOfDecoratedFile(relativeFilePath);
    process.exit(0);
}
exports.FIND_AND_SHOW_SOURCE = FIND_AND_SHOW_SOURCE;
function FIND_AND_DELETE(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var regex, files;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    regex = tnp_core_1._.first(args);
                    console.log("Regex: '" + regex + "'");
                    files = tnp_core_1.glob.sync(regex, { cwd: process.cwd() });
                    console.log(files);
                    return [4 /*yield*/, tnp_helpers_1.Helpers.questionYesNo("Are you sure that you wanna delete these files?", function () {
                            files.map(function (f) {
                                var absPath = tnp_core_1.path.join(process.cwd(), f);
                                if (tnp_core_1.fse.existsSync(absPath)) {
                                    if (tnp_core_1.fse.lstatSync(absPath).isDirectory()) {
                                        tnp_core_1.rimraf.sync(absPath);
                                    }
                                    else {
                                        tnp_core_1.fse.unlinkSync(absPath);
                                    }
                                }
                            });
                        })];
                case 1:
                    _a.sent();
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
exports.FIND_AND_DELETE = FIND_AND_DELETE;
exports.default = {
    FIND_AND_SHOW_DECORATED_FILES: FIND_AND_SHOW_DECORATED_FILES,
    FIND_AND_SHOW_SOURCE: FIND_AND_SHOW_SOURCE,
    FIND_AND_DELETE: FIND_AND_DELETE,
};
//# sourceMappingURL=FILES.backend.js.map