import { EmptyProjectStructure, Project as BaseProject } from 'tnp-helpers';
import { Tools } from './tools.backend';
import { LocalConfig } from './local-config.backend';
import { QuickFixes } from './quick-fixes.backend';
import { ProjectHelpers } from './project-helpers.backend';
import { Submodules } from './submodules.backend';
import { VSCode } from './vscode.backend';
export declare class Project extends BaseProject {
    location: string;
    static projects: Project[];
    static get db(): {
        getAll: () => Promise<Project[]>;
    };
    static From(location: string, options?: {
        warnings: boolean;
        resolveLocation: boolean;
    }): Project;
    static nearestTo(absoluteLocation: string, options?: {
        type?: (Tools.ProjecType | Tools.ProjecType[]);
        projectType?: (Tools.NavigatorProjectType | Tools.NavigatorProjectType[]);
        findGitRoot?: boolean;
    }): Project;
    private static resolveType;
    private static nameIsForkOfBaseline;
    static get Current(): Project;
    static get Navi(): Project;
    static projectsFrom(location: string): Project[];
    static getNearesTO(absoluteLocation: string): Project;
    constructor(location: string);
    readonly type: Tools.ProjecType;
    readonly localConfig: LocalConfig;
    readonly fileOperations: Tools.FileOperations;
    private readonly packageJSON;
    private readonly bowerJSON;
    readonly quickFixes: QuickFixes;
    readonly helpers: ProjectHelpers;
    readonly submodules: Submodules;
    readonly vscode: VSCode;
    get metadata(): Pick<Tools.MetadataType, "apiProxyTarget" | "addressValidationProxyTarget" | "schedulerProxyTarget">;
    get pathes(): {
        local_config_js: string;
        _gitignore: string;
    };
    /**
     * prefix
     * "nes" -> for "nes-ui"
     * "cas" -> for "cas-ui"
     * etc
     */
    get prefix(): string;
    get prefixUI(): string;
    get metadata_description(): string;
    get port(): number;
    get projectType(): Tools.NavigatorProjectType;
    private get baselineVersion();
    get name(): string;
    get genericName(): string;
    get vscodeSettings(): Tools.ISettingsVscode;
    get folderName(): string;
    get version(): string;
    private get modulePrefix();
    get isNavigatorProject(): boolean;
    get isChildModuleInsideExternalFolderInBaselineFork(): boolean;
    get emptyNodeModules(): boolean;
    get isWithoutGitRepository(): boolean;
    get children(): Project[];
    get parent(): Project;
    startProcess(pACtion?: Tools.MainMenuAction, act?: keyof Tools.CurrentServers, args?: string | string[]): Promise<void>;
    record(act?: keyof Tools.CurrentServers, args?: string): Promise<void>;
    replay(act?: keyof Tools.CurrentServers, args?: string): Promise<void>;
    cleanStart(): Promise<void>;
    init(): Promise<void>;
    resetProcess(): Promise<void>;
    decorate(files: string[]): void;
    override(files: string[]): void;
    navigatorVersionLessOrEqual(version: Tools.BaselineVersion): boolean;
    navigatorVersionLessThan(version: Tools.BaselineVersion): boolean;
    navigatorVersionBiggerOrEqual(version: Tools.BaselineVersion): boolean;
    navigatorVersionBiggerThan(version: Tools.BaselineVersion): boolean;
    forEmptyStructure(): EmptyProjectStructure[];
}
