import type { Project } from './project.backend';
import * as vpnSplit from 'vpn-split';
import type { NavigatorBaselineForksObj } from './current-projects-and-servers.backend';
export declare namespace Tools {
    export import HostForServer = vpnSplit.HostForServer;
    export import OptHostForServer = vpnSplit.OptHostForServer;
    export import EtcHosts = vpnSplit.EtcHosts;
    export import IEtcHosts = vpnSplit.IEtcHosts;
    export type NavigatorProjectType = 'other' | 'baseline-fork' | 'child-module';
    export type BaselineVersion = 'none' | 'v1.2' | 'v1.4' | 'v1.5' | 'v1.6' | 'v1.7' | 'v2.0';
    export type ProjecType = 'unknow-npm-project' | `${NavigatorProjectType}-${BaselineVersion}`;
    export const ServerOptionsLocalConfig15: ("apiProxyTarget" | "addressValidationProxyTarget" | "schedulerProxyTarget")[];
    export const ServerOptionsLocalConfig16: ("apiProxyTarget" | "addressValidationProxyTarget" | "schedulerProxyTarget")[];
    export type ModulesPrefixes = 'rs' | 'ips' | 'olpm' | 'ps' | 'pm' | 'ms' | 'global' | 'dashboard' | 'connect' | 'common' | 'auth' | 'build' | 'abstract';
    export type ModulesForDecoration = `es-common` | `es-${ModulesPrefixes}-ui`;
    export type NavigatorMainBranch = 'develop' | 'master' | 'release' | 'main' | 'release' | 'batch';
    export type NavigatorMainBranchCustom = 'positive' | 'cy1801' | 'cy1802' | 'cy2003';
    export type NavigatorMainBranchExtended = `${NavigatorMainBranch}/${NavigatorMainBranchCustom}`;
    export function compareVer(version: Tools.BaselineVersion, operator: 'less-or-equal' | 'more-or-equal' | 'less' | 'more', baselineVersion: Tools.BaselineVersion): boolean;
    export const ModulesForDecorationArr: ModulesForDecoration[];
    export const ModulesPrefixesList: ModulesPrefixes[];
    export interface IPackageJSON {
        name: string;
        tnp: {
            type: 'navi';
        };
        version: string;
        dependencies: {
            [depName in string]: string;
        };
    }
    export class PackageJSON {
        readonly data: IPackageJSON;
        constructor(location: string);
    }
    export interface IBowerJSON {
        name: string;
        version: string;
        dependencies: {
            [depName in string]: string;
        };
    }
    export class BowerJSON {
        readonly data: IBowerJSON;
        constructor(location: string);
    }
    const __AllColors: {
        aliceblue: string;
        antiquewhite: string;
        aqua: string;
        aquamarine: string;
        azure: string;
        beige: string;
        bisque: string;
        black: string;
        blanchedalmond: string;
        blue: string;
        blueviolet: string;
        brown: string;
        burlywood: string;
        cadetblue: string;
        chartreuse: string;
        chocolate: string;
        coral: string;
        cornflowerblue: string;
        cornsilk: string;
        crimson: string;
        cyan: string;
        darkblue: string;
        darkcyan: string;
        darkgoldenrod: string;
        darkgray: string;
        darkgreen: string;
        darkkhaki: string;
        darkmagenta: string;
        darkolivegreen: string;
        darkorange: string;
        darkorchid: string;
        darkred: string;
        darksalmon: string;
        darkseagreen: string;
        darkslateblue: string;
        darkslategray: string;
        darkturquoise: string;
        darkviolet: string;
        deeppink: string;
        deepskyblue: string;
        dimgray: string;
        dodgerblue: string;
        feldspar: string;
        firebrick: string;
        floralwhite: string;
        forestgreen: string;
        fuchsia: string;
        gainsboro: string;
        ghostwhite: string;
        gold: string;
        goldenrod: string;
        gray: string;
        green: string;
        greenyellow: string;
        honeydew: string;
        hotpink: string;
        indianred: string;
        indigo: string;
        ivory: string;
        khaki: string;
        lavender: string;
        lavenderblush: string;
        lawngreen: string;
        lemonchiffon: string;
        lightblue: string;
        lightcoral: string;
        lightcyan: string;
        lightgoldenrodyellow: string;
        lightgrey: string;
        lightgreen: string;
        lightpink: string;
        lightsalmon: string;
        lightseagreen: string;
        lightskyblue: string;
        lightslateblue: string;
        lightslategray: string;
        lightsteelblue: string;
        lightyellow: string;
        lime: string;
        limegreen: string;
        linen: string;
        magenta: string;
        maroon: string;
        mediumaquamarine: string;
        mediumblue: string;
        mediumorchid: string;
        mediumpurple: string;
        mediumseagreen: string;
        mediumslateblue: string;
        mediumspringgreen: string;
        mediumturquoise: string;
        mediumvioletred: string;
        midnightblue: string;
        mintcream: string;
        mistyrose: string;
        moccasin: string;
        navajowhite: string;
        navy: string;
        oldlace: string;
        olive: string;
        olivedrab: string;
        orange: string;
        orangered: string;
        orchid: string;
        palegoldenrod: string;
        palegreen: string;
        paleturquoise: string;
        palevioletred: string;
        papayawhip: string;
        peachpuff: string;
        peru: string;
        pink: string;
        plum: string;
        powderblue: string;
        purple: string;
        red: string;
        rosybrown: string;
        royalblue: string;
        saddlebrown: string;
        salmon: string;
        sandybrown: string;
        seagreen: string;
        seashell: string;
        sienna: string;
        silver: string;
        skyblue: string;
        slateblue: string;
        slategray: string;
        snow: string;
        springgreen: string;
        steelblue: string;
        tan: string;
        teal: string;
        thistle: string;
        tomato: string;
        turquoise: string;
        violet: string;
        violetred: string;
        wheat: string;
        white: string;
        whitesmoke: string;
        yellow: string;
        yellowgreen: string;
    };
    export type ProjectColor = keyof typeof __AllColors;
    export function Colors(): {
        aliceblue: string;
        antiquewhite: string;
        aqua: string;
        aquamarine: string;
        azure: string;
        beige: string;
        bisque: string;
        black: string;
        blanchedalmond: string;
        blue: string;
        blueviolet: string;
        brown: string;
        burlywood: string;
        cadetblue: string;
        chartreuse: string;
        chocolate: string;
        coral: string;
        cornflowerblue: string;
        cornsilk: string;
        crimson: string;
        cyan: string;
        darkblue: string;
        darkcyan: string;
        darkgoldenrod: string;
        darkgray: string;
        darkgreen: string;
        darkkhaki: string;
        darkmagenta: string;
        darkolivegreen: string;
        darkorange: string;
        darkorchid: string;
        darkred: string;
        darksalmon: string;
        darkseagreen: string;
        darkslateblue: string;
        darkslategray: string;
        darkturquoise: string;
        darkviolet: string;
        deeppink: string;
        deepskyblue: string;
        dimgray: string;
        dodgerblue: string;
        feldspar: string;
        firebrick: string;
        floralwhite: string;
        forestgreen: string;
        fuchsia: string;
        gainsboro: string;
        ghostwhite: string;
        gold: string;
        goldenrod: string;
        gray: string;
        green: string;
        greenyellow: string;
        honeydew: string;
        hotpink: string;
        indianred: string;
        indigo: string;
        ivory: string;
        khaki: string;
        lavender: string;
        lavenderblush: string;
        lawngreen: string;
        lemonchiffon: string;
        lightblue: string;
        lightcoral: string;
        lightcyan: string;
        lightgoldenrodyellow: string;
        lightgrey: string;
        lightgreen: string;
        lightpink: string;
        lightsalmon: string;
        lightseagreen: string;
        lightskyblue: string;
        lightslateblue: string;
        lightslategray: string;
        lightsteelblue: string;
        lightyellow: string;
        lime: string;
        limegreen: string;
        linen: string;
        magenta: string;
        maroon: string;
        mediumaquamarine: string;
        mediumblue: string;
        mediumorchid: string;
        mediumpurple: string;
        mediumseagreen: string;
        mediumslateblue: string;
        mediumspringgreen: string;
        mediumturquoise: string;
        mediumvioletred: string;
        midnightblue: string;
        mintcream: string;
        mistyrose: string;
        moccasin: string;
        navajowhite: string;
        navy: string;
        oldlace: string;
        olive: string;
        olivedrab: string;
        orange: string;
        orangered: string;
        orchid: string;
        palegoldenrod: string;
        palegreen: string;
        paleturquoise: string;
        palevioletred: string;
        papayawhip: string;
        peachpuff: string;
        peru: string;
        pink: string;
        plum: string;
        powderblue: string;
        purple: string;
        red: string;
        rosybrown: string;
        royalblue: string;
        saddlebrown: string;
        salmon: string;
        sandybrown: string;
        seagreen: string;
        seashell: string;
        sienna: string;
        silver: string;
        skyblue: string;
        slateblue: string;
        slategray: string;
        snow: string;
        springgreen: string;
        steelblue: string;
        tan: string;
        teal: string;
        thistle: string;
        tomato: string;
        turquoise: string;
        violet: string;
        violetred: string;
        wheat: string;
        white: string;
        whitesmoke: string;
        yellow: string;
        yellowgreen: string;
    };
    export namespace VSCODE {
        const vscode: {
            extensions: {
                recommendations: any;
            };
            settings: {
                'files.exclude': {
                    '**/.git': boolean;
                    '**/.svn': boolean;
                    '**/.hg': boolean;
                    '**/CVS': boolean;
                    '**/.DS_Store': boolean;
                    '.build': boolean;
                    '.idea': boolean;
                    external: boolean;
                    vendor: boolean;
                    node_modules: boolean;
                    '.test': boolean;
                    '.cache-loader': boolean;
                };
                'workbench.colorTheme': (project: Project) => string;
                'workbench.colorCustomizations': {
                    'activityBar.background': ({ name }: {
                        name: any;
                    }) => Promise<any>;
                    'activityBar.foreground': (project: Project) => string;
                    'statusBar.background': (project: Project) => Promise<any>;
                };
                'editor.rulers': number[];
                'search.exclude': {
                    '**/.git': boolean;
                    '**/bower_components': boolean;
                    '**/vendor': boolean;
                    '**/external': boolean;
                    '**/node_modules': boolean;
                };
                'eslint.enable': boolean;
                'eslint.options': {
                    configFile: string;
                };
                'tslint.configFile': string;
                'files.autoSave': string;
                'eslint.autoFixOnSave': boolean;
            };
            tasks: {
                version: string;
                command: string;
                isShellCommand: boolean;
                showOutput: string;
                suppressTaskName: boolean;
                tasks: {
                    taskName: string;
                    args: string[];
                    isBuildCommand: boolean;
                }[];
            };
        };
    }
    export interface ISettingsVscode {
        'workbench.colorTheme': string;
    }
    export function globalArgumentsParser(argsv: string[]): string[];
    export class FileOperations {
        private project;
        constructor(project: Project);
        findDecoratedFilesInBaselineFor(relativePathToFile: string): {
            label: string;
            option: any;
        }[];
        findSourceOfDecoratedFile(decoratedFileRelativePath: string): void;
    }
    export interface FileOutputType {
        fileName: string;
        realtivePathToFile: string;
        absoluteLocation: string;
    }
    export interface HostWithDefault {
        default: Partial<HostForServer>;
        other?: {
            [name: string]: Partial<HostForServer>;
        };
    }
    export class NavigatorBusinessModule {
        constructor(moduleConfig: Partial<NavigatorBusinessModule>);
        color: ProjectColor;
        description?: string;
    }
    export class NavigatorProjectInfoConfig extends NavigatorBusinessModule {
        /**
         * url for git repo
         */
        url: string;
        baseline: BaselineVersion;
        branch: NavigatorMainBranch | NavigatorMainBranchExtended;
        codeStyle?: 'angular-2+' | 'navigator-angular-js' | 'mixed';
        etcHostsAliases?: EtcHosts;
        apiProxyTarget?: HostWithDefault;
        addressValidationProxyTarget?: HostWithDefault;
        schedulerProxyTarget?: HostWithDefault;
        notes?: string;
        stage?: 'preparations' | 'development' | 'production';
    }
    export type ConstructorNavigatorProjectInfoConfig = Omit<NavigatorProjectInfoConfig, 'etcHostsAliases'> & {
        etcHostsAliases?: IEtcHosts;
    };
    export class NavigatorProjectInfo extends NavigatorProjectInfoConfig {
        private readonly projectConfig;
        constructor(projectConfig: ConstructorNavigatorProjectInfoConfig);
        get name(): string;
        cloneTo(folderUrl: string): Promise<boolean>;
    }
    export const GlobalDepsConfig: {
        npm: ({
            name: string;
            version: string;
            installName?: undefined;
        } | {
            name: string;
            version?: undefined;
            installName?: undefined;
        } | {
            name: string;
            installName: string;
            version?: undefined;
        })[];
        programs: any[];
    };
    export function moduleFix(moduleNAme: Tools.ModulesForDecoration): ModulesForDecoration;
    export type ServeCur = keyof Pick<Tools.NavigatorProjectInfo, 'apiProxyTarget' | 'addressValidationProxyTarget' | 'schedulerProxyTarget'>;
    export type ServerWitHostName = {
        [typeServer in ServeCur]: (Tools.HostForServer | Partial<Tools.HostForServer>);
    };
    export interface CurrentServers {
        selected: ServerWitHostName;
        last: ServerWitHostName;
        default: ServerWitHostName;
    }
    export type MetadataType = {
        [name in ServeCur]: HostWithDefault;
    };
    export type MainMenuAction = 'start' | 'record' | 'replay';
    export type MainMenu = `${MainMenuAction}-${keyof Tools.CurrentServers} `;
    export type ProductModulesPrefixes = keyof (typeof NavigatorBaselineForksObj);
    export type NavigatorFileType = 'unknown' | 'controller' | 'service' | 'directive' | 'component' | 'module' | 'routing-module' | 'html-template' | 'less-style' | 'ts-component' | 'ts-module' | 'ts-routing-module' | 'ts-service' | 'ts-directive' | 'ts-pipe';
    export type GeneratedFileType = 'component' | 'module' | 'routing:module' | 'service' | 'api:service' | 'directive' | 'pipe';
    export {};
}
