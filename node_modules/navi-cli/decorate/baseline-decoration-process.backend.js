"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaselineDecorationProcess = void 0;
var tnp_core_1 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var regexOldModule1_5 = new RegExp("export\\s+default\\s+angular\\.(\\s|\\n|\\r)*module\\(", 'gm');
var BaselineDecorationProcess = /** @class */ (function () {
    function BaselineDecorationProcess(baselineProject, moduleProject, filesRelativePathes) {
        this.baselineProject = baselineProject;
        this.moduleProject = moduleProject;
        this.filesRelativePathes = filesRelativePathes;
    }
    Object.defineProperty(BaselineDecorationProcess, "quickFix", {
        get: function () {
            return {
                importAngular: function (pathToFile) {
                    if (!tnp_core_1.fse.existsSync(pathToFile)) {
                        pathToFile = pathToFile.replace(/js$/, 'ts');
                    }
                    if (!tnp_core_1.fse.existsSync(pathToFile)) {
                        return;
                    }
                    var content = tnp_core_1.fse.readFileSync(pathToFile, { encoding: 'utf8' });
                    content = content.replace("import angular from 'angular'", "import * as angular from 'angular'");
                    tnp_core_1.fse.writeFileSync(pathToFile, content, { encoding: 'utf8' });
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    BaselineDecorationProcess.getYeomanCommand = function (relativeFile, baselineProject, moduleProject) {
        // TODO
    };
    BaselineDecorationProcess.getDecorateCommand = function (relativeFile, baselineProject, moduleProject) {
        var orgRelativeFileName = relativeFile;
        if (relativeFile.endsWith('container.ts')) {
            relativeFile = relativeFile.replace('container.ts', 'component.ts');
        }
        var type = BaselineDecorationProcess.recognizeFileType(relativeFile, moduleProject);
        var newRelative = BaselineDecorationProcess.getNewRelativePath(relativeFile, moduleProject);
        var newAbsolute = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(baselineProject.location, tnp_config_1.config.folder.custom, moduleProject.name.toLowerCase(), newRelative));
        var newAbsoluteDirname = tnp_core_1.path.dirname(newAbsolute);
        var newFilename = tnp_core_1.path.basename(relativeFile);
        var command;
        var action;
        if (type.startsWith('ts-')) {
            command = "navi gen:decorator --type=" + type.replace('ts-', '').replace('-', ':') + "  "
                + (" --oldfilename=" + tnp_core_1.path.basename(orgRelativeFileName) + "  " + tnp_core_1.path.basename(newRelative));
        }
        else if (type === 'controller') {
            var clearName = newFilename.replace(/\-controller\.(js|ts)$/, '');
            command = "yo esangular:controller-decorator " + clearName;
        }
        else if (type === 'service') {
            var clearName = newFilename.replace(/\-service\.(js|ts)$/, '');
            command = "yo esangular:service-decorator " + clearName;
        }
        else if (type === 'directive') {
            var clearName = newFilename.replace(/\-directive\.(js|ts)$/, '');
            command = "yo esangular:directive-decorator " + clearName;
        }
        else if (type === 'module') {
            var ext = tnp_core_1.path.extname(newFilename);
            var newName_1 = newFilename.replace(/\-module\.(js|ts)$/, "-decorators-module" + ext);
            action = function () {
                var source = tnp_core_1.path.join(newAbsoluteDirname, newFilename);
                var dest = tnp_core_1.path.join(newAbsoluteDirname, newName_1);
                if (tnp_core_1.path.basename(tnp_core_1.path.dirname(source)) === 'src') {
                    var ext_1 = tnp_core_1.path.extname(source);
                    source = tnp_core_1.path.join(newAbsoluteDirname, "src-module" + ext_1);
                    dest = tnp_core_1.path.join(newAbsoluteDirname, newName_1.replace('.js', '.ts'));
                }
                if (tnp_core_1.fse.existsSync(source)) {
                    tnp_core_1.fse.moveSync(source, dest, {
                        overwrite: true
                    });
                }
                return dest;
            };
            command = "yo esangular:decorators-module .";
        }
        else {
            action = function () {
                var odlPath = tnp_core_1.path.join(moduleProject.location, relativeFile);
                if (!tnp_core_1.fse.existsSync(tnp_core_1.path.dirname(newAbsolute))) {
                    tnp_core_1.fse.mkdirpSync(tnp_core_1.path.dirname(newAbsolute));
                }
                tnp_core_1.fse.copyFileSync(odlPath, newAbsolute);
                return newAbsolute;
            };
        }
        return { command: command, newAbsolute: newAbsolute, action: action, baselineProject: baselineProject };
    };
    BaselineDecorationProcess.getNewRelativePath = function (relativePathFromModule, moduleProject) {
        var type = this.recognizeFileType(relativePathFromModule, moduleProject);
        var ext = tnp_core_1.path.extname(relativePathFromModule);
        if (type === 'ts-component') {
            console.log("KURWA: " + relativePathFromModule);
            if (relativePathFromModule.search('controller.ts') !== -1) {
                return relativePathFromModule.replace(new RegExp("(.|-)controller.ts$"), "-component-decorator" + ext);
            }
            return relativePathFromModule.replace(new RegExp("(.|-)component" + ext + "$"), "-component-decorator" + ext);
        }
        if (type === 'ts-service') {
            return relativePathFromModule.replace(new RegExp("(.|-)service" + ext + "$"), "-service-decorator" + ext);
        }
        if (type === 'ts-directive') {
            return relativePathFromModule.replace(new RegExp("(.|-)directive" + ext + "$"), "-directive-decorator" + ext);
        }
        if (type === 'ts-pipe') {
            return relativePathFromModule.replace(new RegExp("(.|-)pipe" + ext + "$"), "-pipe-decorator" + ext);
        }
        if (type === 'ts-routing-module') {
            return relativePathFromModule.replace(new RegExp("(.|-)routing(.|-)module" + ext + "$"), "-routing-decorators-module" + ext);
        }
        if (type === 'ts-module') {
            return relativePathFromModule.replace(new RegExp("(.|-)module" + ext + "$"), "-decorators-module" + ext);
        }
        if (type === 'controller') {
            return relativePathFromModule.replace(new RegExp("(.|-)controller" + ext), "-controller-decorator" + ext);
        }
        if (type === 'service') {
            return relativePathFromModule.replace(new RegExp("(.|-)service" + ext), "-service-decorator" + ext);
        }
        if (type === 'directive') {
            return relativePathFromModule.replace(new RegExp("(.|-)directive" + ext), "-directive-decorator" + ext);
        }
        if (type === 'module') {
            return relativePathFromModule.replace(new RegExp("(.|-)module" + ext), "-decorators-module" + ext);
        }
        return relativePathFromModule;
    };
    BaselineDecorationProcess.recognizeFileType = function (relativePath, moduleProject) {
        if (/(\.|\-)component\.ts$/.test(relativePath)) {
            return 'ts-component';
        }
        if (/(\.|\-)service\.ts$/.test(relativePath)) {
            return 'ts-service';
        }
        if (/(\.|\-)pipe\.ts$/.test(relativePath)) {
            return 'ts-service';
        }
        if (/(\.|\-)directive\.ts$/.test(relativePath)) {
            return 'ts-directive';
        }
        if (/(\.|\-)routing(\.|\-)module\.ts$/.test(relativePath)) {
            var content = tnp_helpers_1.Helpers.readFile(tnp_core_1.path.join(moduleProject.location, relativePath));
            if (content && regexOldModule1_5.test(content)) {
                return 'routing-module';
            }
            return 'ts-routing-module';
        }
        if (/(\.|\-)module\.ts$/.test(relativePath)) {
            var content = tnp_helpers_1.Helpers.readFile(tnp_core_1.path.join(moduleProject.location, relativePath));
            if (content && regexOldModule1_5.test(content)) {
                return 'module';
            }
            return 'ts-module';
        }
        if (/(\.|\-)controller\.js$/.test(relativePath)) {
            return 'controller';
        }
        if (/(\.|\-)controller\.ts$/.test(relativePath)) {
            return 'ts-component';
        }
        if (/(\.|\-)service\.(js|ts)$/.test(relativePath)) {
            return 'service';
        }
        if (/(\.|\-)directive\.(js|ts)$/.test(relativePath)) {
            return 'directive';
        }
        if (/(\.|\-)module\.(js|ts)$/.test(relativePath)) {
            return 'module';
        }
        if (/(\.|\-)routing-module\.(js|ts)$/.test(relativePath)) {
            return 'routing-module';
        }
        if (/\.html$/.test(relativePath)) {
            return 'html-template';
        }
        if (/\.less$/.test(relativePath)) {
            return 'less-style';
        }
        return 'unknown';
    };
    BaselineDecorationProcess.prototype.run = function () {
        var _this = this;
        this.filesRelativePathes.forEach(function (f) {
            var _a = BaselineDecorationProcess
                .getDecorateCommand(f, _this.baselineProject, _this.moduleProject), command = _a.command, newAbsolute = _a.newAbsolute, action = _a.action, baselineProject = _a.baselineProject;
            console.log({ command: command, newAbsolute: newAbsolute, baselineProject: baselineProject });
            if (!tnp_core_1.fse.existsSync(newAbsolute)) {
                var parentFolder = tnp_core_1.path.dirname(newAbsolute);
                if (!tnp_core_1.fse.existsSync(parentFolder)) {
                    tnp_core_1.fse.mkdirpSync(parentFolder);
                }
                if (tnp_core_1._.isString(command)) {
                    console.log("Run command: \"" + command + "\" in " + parentFolder);
                    tnp_helpers_1.Helpers.run(command, { cwd: parentFolder }).sync();
                }
                if (_this.moduleProject.navigatorVersionBiggerOrEqual('v1.6')
                    && baselineProject.projectType === 'child-module') {
                    var jsfile = newAbsolute.replace('.ts', '.js');
                    if (tnp_core_1.fse.existsSync(jsfile)) {
                        tnp_helpers_1.Helpers.writeFile(newAbsolute, tnp_helpers_1.Helpers.readFile(jsfile));
                        tnp_core_1.fse.unlinkSync(jsfile);
                    }
                }
                if (tnp_core_1._.isFunction(action)) {
                    var modifiedNewAbsolutePath = action();
                    if (tnp_core_1._.isString(modifiedNewAbsolutePath)) {
                        newAbsolute = modifiedNewAbsolutePath;
                    }
                }
                if (baselineProject.navigatorVersionBiggerOrEqual('v1.6')
                    && baselineProject.projectType === 'baseline-fork') {
                    BaselineDecorationProcess.quickFix.importAngular(newAbsolute);
                }
            }
            else {
                tnp_helpers_1.Helpers.info("File already decorated: " + newAbsolute);
            }
        });
    };
    return BaselineDecorationProcess;
}());
exports.BaselineDecorationProcess = BaselineDecorationProcess;
//# sourceMappingURL=baseline-decoration-process.backend.js.map