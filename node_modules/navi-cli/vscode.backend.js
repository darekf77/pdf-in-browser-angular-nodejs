"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VSCode = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var tools_backend_1 = require("./tools.backend");
var project_feature_backend_1 = require("./abstract/project-feature.backend");
//#endregion
var VSCode = /** @class */ (function (_super) {
    tslib_1.__extends(VSCode, _super);
    function VSCode() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#region update vscode configs
    VSCode.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var vscodeDir, vsc, keys, index, key, vscConfigFile, index, child;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        vscodeDir = tnp_core_1.path.join(this.project.location, '.vscode');
                        tnp_helpers_1.Helpers.tryRemoveDir(vscodeDir);
                        tnp_helpers_1.Helpers.tryRecreateDir(vscodeDir);
                        vsc = tnp_core_1._.cloneDeep(tools_backend_1.Tools.VSCODE.vscode);
                        keys = Object.keys(vsc);
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < keys.length)) return [3 /*break*/, 4];
                        key = keys[index];
                        vscConfigFile = tnp_core_1.path.join(vscodeDir, key + ".json");
                        return [4 /*yield*/, resolveParamsVscode(vsc[key], this.project)];
                    case 2:
                        _a.sent();
                        tnp_core_1.fse.writeJsonSync(vscConfigFile, vsc[key], {
                            encoding: 'utf8',
                            spaces: 2
                        });
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4:
                        if (!this.project.children) return [3 /*break*/, 8];
                        index = 0;
                        _a.label = 5;
                    case 5:
                        if (!(index < this.project.children.length)) return [3 /*break*/, 8];
                        child = this.project.children[index];
                        return [4 /*yield*/, child.vscode.update()];
                    case 6:
                        _a.sent();
                        _a.label = 7;
                    case 7:
                        index++;
                        return [3 /*break*/, 5];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return VSCode;
}(project_feature_backend_1.ProjectFeature));
exports.VSCode = VSCode;
//#region resolve vscode params
function resolveParamsVscode(obj, project) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var keys, index, key, _a, _b, index2, o;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!tnp_core_1._.isObject(obj)) return [3 /*break*/, 11];
                    keys = Object.keys(obj);
                    index = 0;
                    _c.label = 1;
                case 1:
                    if (!(index < keys.length)) return [3 /*break*/, 11];
                    key = keys[index];
                    if (!tnp_core_1._.isFunction(obj[key])) return [3 /*break*/, 3];
                    _a = obj;
                    _b = key;
                    return [4 /*yield*/, tnp_helpers_1.Helpers.runSyncOrAsync(obj[key], project)];
                case 2:
                    _a[_b] = _c.sent();
                    return [3 /*break*/, 10];
                case 3:
                    if (!tnp_core_1._.isArray(obj[key])) return [3 /*break*/, 8];
                    index2 = 0;
                    _c.label = 4;
                case 4:
                    if (!(index2 < obj[key].length)) return [3 /*break*/, 7];
                    o = obj[key][index2];
                    return [4 /*yield*/, resolveParamsVscode(o, project)];
                case 5:
                    _c.sent();
                    _c.label = 6;
                case 6:
                    index2++;
                    return [3 /*break*/, 4];
                case 7: return [3 /*break*/, 10];
                case 8:
                    if (!tnp_core_1._.isObject(obj[key])) return [3 /*break*/, 10];
                    return [4 /*yield*/, resolveParamsVscode(obj[key], project)];
                case 9:
                    _c.sent();
                    _c.label = 10;
                case 10:
                    index++;
                    return [3 /*break*/, 1];
                case 11: return [2 /*return*/];
            }
        });
    });
}
//#endregion
//# sourceMappingURL=vscode.backend.js.map