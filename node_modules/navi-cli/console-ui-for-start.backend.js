"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleUIForStart = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_helpers_1 = require("tnp-helpers");
var base_console_ui_backend_1 = require("./abstract/base-console-ui.backend");
var project_backend_1 = require("./project.backend");
var tools_backend_1 = require("./tools.backend");
var tnp_db_1 = require("tnp-db");
var record_replay_req_res_scenario_1 = require("record-replay-req-res-scenario");
//#endregion
var ConsoleUIForStart = /** @class */ (function (_super) {
    tslib_1.__extends(ConsoleUIForStart, _super);
    function ConsoleUIForStart() {
        var _this = _super.call(this) || this;
        _this.orgCwd = process.cwd();
        return _this;
    }
    Object.defineProperty(ConsoleUIForStart, "Instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region menu (start|replay|record)
    ConsoleUIForStart.prototype.menuSelectAction = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var choices, res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        choices = [
                            {
                                name: "(" + chalk_1.default.bold('START') + ") navigator UI with real server => ",
                                value: 'start',
                            },
                            {
                                name: "(" + chalk_1.default.bold('REPLAY') + ") => start navigator UI but replay all request from scenario => ",
                                value: 'replay',
                            },
                            {
                                name: "(" + chalk_1.default.bold('RECORD') + ") => start navigator UI with real server with recording scenarios mode => ",
                                value: 'record',
                            }
                        ];
                        return [4 /*yield*/, tnp_helpers_1.Helpers.autocompleteAsk("Select how you wanna start navigator UI: ", choices)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    //#endregion
    //#region menu (choose | last | default)
    ConsoleUIForStart.prototype.menuChooseLastDefault = function (project, servers, action) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var templateFor, tempalteChoice, customChoices, ins, lastScenario, choices, v;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        templateFor = function (typeServer) {
                            if (!servers[typeServer]) {
                                return '-';
                            }
                            var tmpServerConfig = tools_backend_1.Tools.ServerOptionsLocalConfig16.map(function (s) {
                                return s + " " + (servers[typeServer][s] ? servers[typeServer][s].nameWithIpOrDomain : '-');
                            }).join('\n');
                            return tmpServerConfig;
                        };
                        tempalteChoice = function (typeServer) {
                            if (!servers[typeServer]) {
                                return;
                            }
                            var name = (typeServer === 'selected') ?
                                "(" + chalk_1.default.bold('CHOOSE SERVER') + ") navigator UI with selected server =>" :
                                ("(" + chalk_1.default.bold('USE ' + typeServer.toUpperCase()) + ") navigator UI (" + project.prefix + ") "
                                    + ("with " + chalk_1.default.yellow(typeServer) + " servers configuration:\n" + templateFor(typeServer)));
                            var choice = {
                                name: name,
                                value: typeServer
                            };
                            return choice;
                        };
                        customChoices = [];
                        if (action === 'replay') {
                            ins = record_replay_req_res_scenario_1.RecordReplayReqResScenario.Instance(project.location);
                            lastScenario = record_replay_req_res_scenario_1.Scenario.lastFromFolder(project.location);
                            customChoices = tslib_1.__spreadArray(tslib_1.__spreadArray([], (!lastScenario ? [] : [{ name: "Use last scenario: \"" + lastScenario.description + "\"", value: 'last' }])), [
                                { name: 'Select from list => ', value: 'selected' },
                            ]);
                        }
                        else {
                            customChoices = tslib_1.__spreadArray(tslib_1.__spreadArray([
                                tempalteChoice('selected')
                            ], ((servers['last'] && servers['last'].apiProxyTarget) ? [tempalteChoice('last')] : [])), [
                                tempalteChoice('default'),
                            ]);
                        }
                        choices = tslib_1.__spreadArray(tslib_1.__spreadArray([], customChoices), [
                            { name: 'BACK <=' },
                        ]);
                        tnp_helpers_1.Helpers.clearConsole();
                        return [4 /*yield*/, tnp_helpers_1.Helpers.list("Choose action/server for " + action.toUpperCase() + " navigator", choices)];
                    case 1:
                        v = _a.sent();
                        return [2 /*return*/, action + "-" + v];
                }
            });
        });
    };
    //#endregion
    //#region menu replay
    ConsoleUIForStart.prototype.menuReplay = function (project, servers) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var action;
            return tslib_1.__generator(this, function (_a) {
                action = 'replay';
                return [2 /*return*/, void 0];
            });
        });
    };
    //#endregion
    //#region menu record
    ConsoleUIForStart.prototype.menuRecord = function (project, servers) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var action;
            return tslib_1.__generator(this, function (_a) {
                action = 'record';
                return [2 /*return*/, void 0];
            });
        });
    };
    //#endregion
    //#region choose server
    ConsoleUIForStart.prototype.chooseServers = function (pProject, pCurrentServers, action) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var optionsTemplate, allProjects, choicesTemplate, index, serverType, host;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        optionsTemplate = function (project, typeOfServer) {
                            if (!project.metadata[typeOfServer]) {
                                return [];
                            }
                            var servers = tslib_1.__spreadArray(tslib_1.__spreadArray([], (!project.metadata[typeOfServer].default ? [] : [project.metadata[typeOfServer].default]
                                .map(function (value) {
                                return {
                                    value: value, name: chalk_1.default.bold('DEFAULT FOR') + " (" + project.prefixUI + ") " + project.metadata_description
                                        + (" " + value.ipOrDomain)
                                };
                            }))), tnp_core_1._.keys(project.metadata[typeOfServer].other).map(function (serverName) {
                                var value = project.metadata[typeOfServer].other[serverName];
                                return { value: value, name: "(" + project.prefixUI + ") - " + serverName + " \"" + value.ipOrDomain + "\"" };
                            }));
                            return servers;
                        };
                        return [4 /*yield*/, project_backend_1.Project.db.getAll()];
                    case 1:
                        allProjects = (_a.sent());
                        allProjects = allProjects.filter(function (p) { return (p.location !== pProject.location)
                            && (p.projectType === 'baseline-fork'); });
                        choicesTemplate = function (currentProj, typeOfServer) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var choices, v;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        choices = tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], optionsTemplate(currentProj, typeOfServer)), (allProjects.map(function (p) { return optionsTemplate(p, typeOfServer); }).reduce(function (a, b) { return a.concat(b); }, []))), [
                                            { name: '< empty choice >', value: void 0 },
                                        ]);
                                        return [4 /*yield*/, tnp_helpers_1.Helpers.autocompleteAsk("(" + action + ") Choose server for " + chalk_1.default.red(typeOfServer) + " ", choices)];
                                    case 1:
                                        v = _a.sent();
                                        return [2 /*return*/, v];
                                }
                            });
                        }); };
                        index = 0;
                        _a.label = 2;
                    case 2:
                        if (!(index < tools_backend_1.Tools.ServerOptionsLocalConfig16.length)) return [3 /*break*/, 5];
                        serverType = tools_backend_1.Tools.ServerOptionsLocalConfig16[index];
                        return [4 /*yield*/, choicesTemplate(pProject, serverType)];
                    case 3:
                        host = _a.sent();
                        pCurrentServers.selected[serverType] = host;
                        _a.label = 4;
                    case 4:
                        index++;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, pCurrentServers.selected];
                }
            });
        });
    };
    //#endregion
    //#region choose/start scenario and get proxy port
    ConsoleUIForStart.prototype.resolveScenarioData = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    //#endregion
    //#region get current servers
    ConsoleUIForStart.prototype.getServers = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var servers, last;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        servers = {};
                        servers.default = {};
                        servers.selected = {};
                        servers.last = {};
                        tools_backend_1.Tools.ServerOptionsLocalConfig16.forEach(function (key) {
                            servers.default[key] = project.metadata[key] ? project.metadata[key].default : void 0;
                        });
                        return [4 /*yield*/, project.localConfig.getLastServers()];
                    case 1:
                        last = _a.sent();
                        tools_backend_1.Tools.ServerOptionsLocalConfig16.forEach(function (key) {
                            servers.last[key] = last[key] ? last[key].default : void 0;
                        });
                        return [2 /*return*/, servers];
                }
            });
        });
    };
    //#endregion
    //#region recorder config from servers
    ConsoleUIForStart.prototype.getRecordConfig = function (serversFroRecording) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var toResolve, db, portsManaber, index, _a, hostName, recordUrl, freeProxyPort;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        toResolve = Object
                            .keys(serversFroRecording)
                            .filter(function (f) { return !!serversFroRecording[f]; })
                            .map(function (key) {
                            var v = serversFroRecording[key];
                            return { hostName: key, recordUrl: v.ipOrDomain, talkbackPort: void 0 };
                        });
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _b.sent();
                        return [4 /*yield*/, db.portsManaber];
                    case 2:
                        portsManaber = _b.sent();
                        index = 0;
                        _b.label = 3;
                    case 3:
                        if (!(index < toResolve.length)) return [3 /*break*/, 6];
                        _a = toResolve[index], hostName = _a.hostName, recordUrl = _a.recordUrl;
                        return [4 /*yield*/, portsManaber.registerOnFreePort({
                                name: hostName + " for " + recordUrl
                            })];
                    case 4:
                        freeProxyPort = _b.sent();
                        toResolve[index].talkbackPort = freeProxyPort;
                        _b.label = 5;
                    case 5:
                        index++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/, toResolve.reduce(function (prev, curr) {
                            var _a;
                            return tnp_core_1._.merge(prev, (_a = {},
                                _a[curr.hostName] = {
                                    host: tnp_helpers_1.Helpers.urlParse(curr.recordUrl),
                                    talkbackProxyPort: curr.talkbackPort
                                },
                                _a));
                        }, {})];
                }
            });
        });
    };
    //#endregion
    //#region replay scenario
    ConsoleUIForStart.prototype.replayScenario = function (scenario, project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, portsManaber, scenarioParams, folderHostFromScenario, index, hostName, talkbackProxyPort, localConfigProxyReplay;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.portsManaber];
                    case 2:
                        portsManaber = _a.sent();
                        scenarioParams = {};
                        folderHostFromScenario = scenario.folderHostNames;
                        index = 0;
                        _a.label = 3;
                    case 3:
                        if (!(index < folderHostFromScenario.length)) return [3 /*break*/, 6];
                        hostName = folderHostFromScenario[index];
                        return [4 /*yield*/, portsManaber.registerOnFreePort({
                                name: "replay of " + hostName + " for scenario: " + scenario.path
                            })];
                    case 4:
                        talkbackProxyPort = _a.sent();
                        scenarioParams[hostName] = tnp_helpers_1.Helpers.urlParse(talkbackProxyPort);
                        _a.label = 5;
                    case 5:
                        index++;
                        return [3 /*break*/, 3];
                    case 6:
                        localConfigProxyReplay = Object
                            .keys(scenarioParams)
                            .reduce(function (prev, serverType, i) {
                            var _a;
                            var replauProxy = scenarioParams[serverType];
                            return tnp_core_1._.merge(prev, (_a = {},
                                _a[serverType] = tools_backend_1.Tools.HostForServer.From(replauProxy),
                                _a));
                        }, {});
                        return [4 /*yield*/, project.localConfig.save(localConfigProxyReplay)];
                    case 7:
                        _a.sent();
                        scenario.scenarioAsWorker(scenarioParams, project.location);
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region init
    ConsoleUIForStart.prototype.init = function (project, pAction, act, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _loop_1, this_1, state_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.init.call(this)];
                    case 1:
                        _a.sent();
                        _loop_1 = function () {
                            var currentServers, action, _b, startAction, _c, replayAction, _d, ins, scData, scenario, lastScenario, recordAction, _e, serversFroRecording, ins, recordConfig_1, portsToKill, localConfigProxyRecord;
                            return tslib_1.__generator(this, function (_f) {
                                switch (_f.label) {
                                    case 0: return [4 /*yield*/, project.localConfig.update()];
                                    case 1:
                                        _f.sent();
                                        tnp_helpers_1.Helpers.clearConsole();
                                        return [4 /*yield*/, this_1.getServers(project)];
                                    case 2:
                                        currentServers = _f.sent();
                                        if (!pAction) return [3 /*break*/, 3];
                                        _b = pAction;
                                        return [3 /*break*/, 5];
                                    case 3: return [4 /*yield*/, this_1.menuSelectAction()];
                                    case 4:
                                        _b = _f.sent();
                                        _f.label = 5;
                                    case 5:
                                        action = _b;
                                        if (!(action === 'start')) return [3 /*break*/, 17];
                                        if (!act) return [3 /*break*/, 6];
                                        _c = action + "-" + act;
                                        return [3 /*break*/, 8];
                                    case 6: return [4 /*yield*/, this_1.menuChooseLastDefault(project, currentServers, action)];
                                    case 7:
                                        _c = _f.sent();
                                        _f.label = 8;
                                    case 8:
                                        startAction = _c;
                                        if (!['start-selected', 'start-last', 'start-default'].includes(startAction)) return [3 /*break*/, 16];
                                        if (!(startAction === 'start-selected')) return [3 /*break*/, 11];
                                        return [4 /*yield*/, this_1.chooseServers(project, currentServers, action)];
                                    case 9:
                                        _f.sent();
                                        return [4 /*yield*/, project.localConfig.save(currentServers.selected, true)];
                                    case 10:
                                        _f.sent();
                                        _f.label = 11;
                                    case 11:
                                        if (!(startAction === 'start-last')) return [3 /*break*/, 13];
                                        return [4 /*yield*/, project.localConfig.save(currentServers.last, true)];
                                    case 12:
                                        _f.sent();
                                        _f.label = 13;
                                    case 13:
                                        if (!(startAction === 'start-default')) return [3 /*break*/, 15];
                                        return [4 /*yield*/, project.localConfig.save(currentServers.default, true)];
                                    case 14:
                                        _f.sent();
                                        _f.label = 15;
                                    case 15: return [2 /*return*/, "break"];
                                    case 16:
                                        action = void 0;
                                        _f.label = 17;
                                    case 17:
                                        if (!(action === 'replay')) return [3 /*break*/, 26];
                                        if (!act) return [3 /*break*/, 18];
                                        _d = action + "-" + act;
                                        return [3 /*break*/, 20];
                                    case 18: return [4 /*yield*/, this_1.menuChooseLastDefault(project, currentServers, action)];
                                    case 19:
                                        _d = _f.sent();
                                        _f.label = 20;
                                    case 20:
                                        replayAction = _d;
                                        if (!(replayAction === 'replay-selected')) return [3 /*break*/, 23];
                                        ins = record_replay_req_res_scenario_1.RecordReplayReqResScenario.Instance(project.location);
                                        return [4 /*yield*/, ins.resolveScenariosData(args, true, true)];
                                    case 21:
                                        scData = _f.sent();
                                        scenario = scData.scenario;
                                        if (!scenario) return [3 /*break*/, 23];
                                        return [4 /*yield*/, this_1.replayScenario(scenario, project)];
                                    case 22:
                                        _f.sent();
                                        return [2 /*return*/, "break"];
                                    case 23:
                                        if (!(replayAction === 'replay-last')) return [3 /*break*/, 25];
                                        lastScenario = record_replay_req_res_scenario_1.Scenario.lastFromFolder(project.location);
                                        return [4 /*yield*/, this_1.replayScenario(lastScenario, project)];
                                    case 24:
                                        _f.sent();
                                        return [2 /*return*/, "break"];
                                    case 25:
                                        action = void 0;
                                        _f.label = 26;
                                    case 26:
                                        if (!(action === 'record')) return [3 /*break*/, 36];
                                        if (!act) return [3 /*break*/, 27];
                                        _e = action + "-" + act;
                                        return [3 /*break*/, 29];
                                    case 27: return [4 /*yield*/, this_1.menuChooseLastDefault(project, currentServers, action)];
                                    case 28:
                                        _e = _f.sent();
                                        _f.label = 29;
                                    case 29:
                                        recordAction = _e;
                                        serversFroRecording = void 0;
                                        if (!['record-selected', 'record-last', 'record-default'].includes(recordAction)) return [3 /*break*/, 32];
                                        if (!(recordAction === 'record-selected')) return [3 /*break*/, 31];
                                        return [4 /*yield*/, this_1.chooseServers(project, currentServers, action)];
                                    case 30:
                                        serversFroRecording = _f.sent();
                                        _f.label = 31;
                                    case 31:
                                        if (recordAction === 'record-last') {
                                            serversFroRecording = currentServers.last;
                                        }
                                        if (recordAction === 'record-default') {
                                            serversFroRecording = currentServers.default;
                                        }
                                        _f.label = 32;
                                    case 32:
                                        ins = record_replay_req_res_scenario_1.RecordReplayReqResScenario.Instance(project.location);
                                        return [4 /*yield*/, this_1.getRecordConfig(serversFroRecording)];
                                    case 33:
                                        recordConfig_1 = _f.sent();
                                        recordConfig_1.scenarioName = args;
                                        portsToKill = Object
                                            .keys(recordConfig_1)
                                            .filter(function (f) { return tnp_core_1._.isObject(recordConfig_1[f]); })
                                            .map(function (f) { return recordConfig_1[f].talkbackProxyPort; });
                                        localConfigProxyRecord = Object
                                            .keys(recordConfig_1)
                                            .filter(function (key) { return tnp_core_1._.isObject(recordConfig_1[key]); })
                                            .reduce(function (prev, hostName) {
                                            var _a;
                                            var v = recordConfig_1[hostName];
                                            return tnp_core_1._.merge(prev, (_a = {},
                                                _a[hostName] = new tools_backend_1.Tools.HostForServer({
                                                    ip: "http://localhost:" + v.talkbackProxyPort
                                                }),
                                                _a));
                                        }, {});
                                        return [4 /*yield*/, tnp_helpers_1.Helpers.killProcessByPort(portsToKill)];
                                    case 34:
                                        _f.sent();
                                        return [4 /*yield*/, project.localConfig.save(localConfigProxyRecord)];
                                    case 35:
                                        _f.sent();
                                        ins.recordAsWorker(recordConfig_1);
                                        return [2 /*return*/, "break"];
                                    case 36: return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 2;
                    case 2:
                        if (!true) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1()];
                    case 3:
                        state_1 = _a.sent();
                        if (state_1 === "break")
                            return [3 /*break*/, 4];
                        return [3 /*break*/, 2];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //#region singleton
    ConsoleUIForStart._instance = new ConsoleUIForStart();
    return ConsoleUIForStart;
}(base_console_ui_backend_1.BaseConsoleUi));
exports.ConsoleUIForStart = ConsoleUIForStart;
//# sourceMappingURL=console-ui-for-start.backend.js.map