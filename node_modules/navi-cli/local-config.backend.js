"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocalConfigBy = exports.LocalConfig = void 0;
var tslib_1 = require("tslib");
//#region imports
var _ = require("lodash");
var glob = require("glob");
var path = require("path");
var tsfmt = require("typescript-formatter");
var tnp_config_1 = require("tnp-config");
var tnp_db_1 = require("tnp-db");
var tnp_helpers_1 = require("tnp-helpers");
var tools_backend_1 = require("./tools.backend");
//#endregion
var TMP_FILE_RREFIX = "tmp-" + tnp_config_1.config.file.local_config_js + "-old-file";
var LocalConfig = /** @class */ (function () {
    //#region constructor
    function LocalConfig(project) {
        this.project = project;
    }
    Object.defineProperty(LocalConfig.prototype, "keyInDb", {
        //#endregion
        //#region getters
        get: function () {
            var that = this.project;
            return {
                get localConfigJsHash() {
                    return "" + _.camelCase(tnp_config_1.config.file.local_config.replace('.js', ''))
                        + (".hash['" + that.pathes.local_config_js + "']");
                },
                possibleServersToUpdate: function (date) {
                    return "" + _.camelCase(tnp_config_1.config.file.local_config.replace('.js', ''))
                        + (".serversToUpdate['" + that.pathes.local_config_js.replace('.js', '') + "-" + date.getTime() + "']");
                },
                get lastServersForProject() {
                    return "" + _.camelCase(tnp_config_1.config.file.local_config.replace('.js', ''))
                        + (".lastServersForPorject['" + that.pathes.local_config_js + "']");
                }
            };
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LocalConfig.prototype, "allTempLocalConfigs", {
        get: function () {
            return glob
                .sync(path.join(this.project.location, TMP_FILE_RREFIX) + "*")
                .map(function (f) { return tnp_helpers_1.Helpers.readFile(f); });
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region public api
    //#region save
    LocalConfig.prototype.save = function (servesConfigOrReplayProxyPort, isLast) {
        if (isLast === void 0) { isLast = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tmplLocalHost_1, hostWithDefault, tmplLocalConfig, db, checksum;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (_.isNumber(servesConfigOrReplayProxyPort)) {
                            tmplLocalHost_1 = "http://localhost:" + servesConfigOrReplayProxyPort;
                            servesConfigOrReplayProxyPort = {};
                            tools_backend_1.Tools.ServerOptionsLocalConfig16.forEach(function (serverType) {
                                servesConfigOrReplayProxyPort[serverType] = new tools_backend_1.Tools.HostForServer({ ip: tmplLocalHost_1 });
                            });
                        }
                        _.keys(servesConfigOrReplayProxyPort).forEach(function (serverType) {
                            var v = servesConfigOrReplayProxyPort[serverType];
                            if (_.isNumber(v)) {
                                var tmplLocalHost = "http://localhost:" + v;
                                servesConfigOrReplayProxyPort[serverType] = new tools_backend_1.Tools.HostForServer({ ip: tmplLocalHost });
                            }
                        });
                        hostWithDefault = _.cloneDeep(this.project.metadata);
                        if (servesConfigOrReplayProxyPort) {
                            tools_backend_1.Tools.ServerOptionsLocalConfig16
                                .forEach(function (serverTypeLocalConfig) {
                                hostWithDefault[serverTypeLocalConfig] = hostWithDefault[serverTypeLocalConfig]
                                    ? hostWithDefault[serverTypeLocalConfig] : {};
                                hostWithDefault[serverTypeLocalConfig].default = servesConfigOrReplayProxyPort[serverTypeLocalConfig];
                            });
                        }
                        tmplLocalConfig = getLocalConfigBy(this.project, hostWithDefault);
                        tnp_helpers_1.Helpers.writeFile(this.project.pathes.local_config_js, tmplLocalConfig);
                        return [4 /*yield*/, tsfmt.processFiles([this.project.pathes.local_config_js], {
                                // dryRun?: boolean;
                                // verbose: true,
                                // baseDir: ['bundle', 'dist'].includes(path.basename(crossPlatformPath(__dirname)))
                                // ? path.join(crossPlatformPath(crossPlatformPath(__dirname)), '..') 
                                // : crossPlatformPath(__dirname),
                                replace: true,
                                verify: false,
                                tsconfig: true,
                                tslint: true,
                                editorconfig: true,
                                tsfmt: true
                            })];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 2:
                        db = _a.sent();
                        checksum = tnp_helpers_1.Helpers.checksum(this.project.pathes.local_config_js);
                        return [4 /*yield*/, db.rawSet(this.keyInDb.localConfigJsHash, checksum)];
                    case 3:
                        _a.sent();
                        if (!isLast) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.setLastServers(hostWithDefault)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region update
    LocalConfig.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentDate, currentLocalConfigJSON;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.project.projectType !== 'baseline-fork') {
                            return [2 /*return*/];
                        }
                        if (tnp_helpers_1.Helpers.exists(this.project.pathes.local_config_js)) {
                            currentDate = new Date();
                            currentLocalConfigJSON = tnp_helpers_1.Helpers.readFile(this.project.pathes.local_config_js);
                            if (this.allTempLocalConfigs.includes(currentLocalConfigJSON)) {
                                tnp_helpers_1.Helpers.log("Templ local config already exists... no need to save it.");
                            }
                            else {
                                // const time = currentDate.getTime();
                                // const nameForNew = `${TMP_FILE_RREFIX}${time ? ('-' + time) : ''}.js`;
                                // Helpers.copyFile(
                                //   this.project.pathes.local_config_js,
                                //   path.join(this.project.location, nameForNew)
                                // );
                                // const servers = localConfigJsFileExtractSerwers(path.join(this.project.location, nameForNew), this.project);
                                // const db = await TnpDB.Instance();
                                // await db.rawSet(this.keyInDb.possibleServersToUpdate(currentDate), servers);
                            }
                        }
                        // Helpers.pressKeyAndContinue();
                        return [4 /*yield*/, this.save()];
                    case 1:
                        // Helpers.pressKeyAndContinue();
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#endregion
    LocalConfig.prototype.getLastServers = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, servers;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.rawGet(this.keyInDb.lastServersForProject)];
                    case 2:
                        servers = _a.sent();
                        tools_backend_1.Tools.ServerOptionsLocalConfig16.forEach(function (serverKey) {
                            if (servers[serverKey]) {
                                servers[serverKey].default = new tools_backend_1.Tools.HostForServer(servers[serverKey].default);
                                delete servers[serverKey].other;
                            }
                        });
                        return [2 /*return*/, servers];
                }
            });
        });
    };
    LocalConfig.prototype.setLastServers = function (servers) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, lastServersJSON;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        lastServersJSON = tnp_helpers_1.Helpers.parse(tnp_helpers_1.Helpers.stringify(servers));
                        tools_backend_1.Tools.ServerOptionsLocalConfig16.forEach(function (serverKey) {
                            delete lastServersJSON[serverKey].other;
                        });
                        return [4 /*yield*/, db.rawSet(this.keyInDb.lastServersForProject, lastServersJSON)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    LocalConfig.prototype.generatedLocalConfigWasModified = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db, checksumOfFile, checksumFromDb;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                    case 1:
                        db = _a.sent();
                        checksumOfFile = tnp_helpers_1.Helpers.checksum(this.project.pathes.local_config_js);
                        return [4 /*yield*/, db.rawGet(this.keyInDb.localConfigJsHash)];
                    case 2:
                        checksumFromDb = _a.sent();
                        return [2 /*return*/, checksumFromDb !== checksumOfFile];
                }
            });
        });
    };
    return LocalConfig;
}());
exports.LocalConfig = LocalConfig;
//#region extract servers from local-config.js
function extractFor(line, counter, resultObject, comment, lineWasNormalComment) {
    var ip = tnp_helpers_1.Helpers.matchExactOnce(line, tnp_helpers_1.Helpers.regex.forStringWithIpHost);
    var domain = tnp_helpers_1.Helpers.matchExactOnce(line, tnp_helpers_1.Helpers.regex.forStringWithDomainHost);
    var notAllowed = [
        'http://',
        'https://',
    ];
    if (notAllowed.includes(ip)) {
        ip = void 0;
    }
    if (_.isString(ip)) {
        line = line.replace(tnp_helpers_1.Helpers.escapeStringForRegEx(ip), '');
    }
    if (notAllowed.includes(domain)) {
        domain = void 0;
    }
    if (_.isString(ip) && _.isString(domain) && ip.search(domain) !== -1) {
        domain = void 0;
    }
    var description = '';
    if (line.search('//') !== -1) {
        var _a = line.split('// '), firstPart = _a[0], descPart = _a[1];
        description = descPart;
    }
    // else if (line.search('/*') !== -1) {
    //   const [firstPart, descPart] = line.split('/*');
    //   description = descPart?.replace('*\\', '');
    // }
    var key = counter;
    if (_.isString(description) && description.length > 0) {
        key = description;
    }
    if ((key === counter) && comment.isReady && comment.body.length > 0) {
        key = comment.body;
    }
    if (key === counter) {
        if (_.isString(domain) && domain.length > 0) {
            key = domain.replace(/(http(s)?\:\/\/)/, '');
        }
        else if (_.isString(ip) && ip.length > 0) {
            key = ip.replace(/(http(s)?\:\/\/)/, '');
        }
    }
    if (!_.isString(domain)) {
        domain = '';
    }
    if (!_.isString(ip)) {
        ip = '';
    }
    key = key.trim();
    resultObject = resultObject;
    if (!resultObject.other) {
        resultObject.other = {};
    }
    resultObject.other[key] = {
        ip: ip, domain: domain
    };
    if (!lineWasNormalComment) {
        resultObject.default = {
            ip: ip, domain: domain
        };
    }
}
function localConfigJsFileExtractSerwers(pathToLocalConfig, project) {
    var content = tnp_helpers_1.Helpers.readFile(pathToLocalConfig);
    var apiProxyTarget = {};
    var addressValidationProxyTarget = {};
    var schedulerProxyTarget = {};
    var lines = content.split('\n');
    var comment = {
        body: void 0,
        isReady: false,
    };
    var counter = -1;
    while (lines.length > 0) {
        counter++;
        var line = lines.shift();
        var lineWasNormalComment = false;
        // let isComment = false;
        if (line.trim().startsWith('//')) {
            lineWasNormalComment = true;
            line = line.trim().slice(2);
        }
        // let multilineComment = false;
        // if (line.trim().startsWith('/*')) {
        //   multilineComment = true;
        //   isComment = true;
        // }
        // if (line.trim().search('/*') === -1 && line.trim().endsWith('*\\')) {
        //   comment.body = comment.body + line;
        //   comment.isReady = true;
        //   continue;
        // }
        // if (line.trim().startsWith('/*') && line.trim().search('*\\') !== -1) {
        //   line = line.slice(2).replace('*\\', '');
        // }
        // if (multilineComment) {
        //   line = line.slice(2).replace('/*', '');
        // }
        // console.log(`PROCESSINGLINE: ${line}`)
        var extracted = false;
        if (project.navigatorVersionLessOrEqual('v1.5')) {
            if (line.search('localhost:9000') !== -1) {
                extracted = true;
                extractFor(line, counter.toString(), apiProxyTarget, comment, lineWasNormalComment);
            }
        }
        if (project.navigatorVersionBiggerOrEqual('v1.6')) {
            if (line.search('apiProxyTarget') !== -1) {
                extracted = true;
                extractFor(line, counter.toString(), apiProxyTarget, comment, lineWasNormalComment);
            }
            if (line.search('addressValidationProxyTarget') !== -1) {
                extracted = true;
                extractFor(line, counter.toString(), addressValidationProxyTarget, comment, lineWasNormalComment);
            }
            if (line.search('schedulerProxyTarget') !== -1) {
                extracted = true;
                extractFor(line, counter.toString(), schedulerProxyTarget, comment, lineWasNormalComment);
            }
        }
        if (extracted) {
            if (comment.isReady) {
                comment.isReady = false;
                comment.body = void 0;
            }
        }
        else {
            if (lineWasNormalComment) {
                comment.isReady = true;
                comment.body = line;
            }
            // if (isComment && comment.body.length > 0) {
            //   comment.body = comment.body + line;
            // }
        }
    }
    return {
        apiProxyTarget: apiProxyTarget,
        addressValidationProxyTarget: addressValidationProxyTarget,
        schedulerProxyTarget: schedulerProxyTarget,
    };
}
//#endregion
//#region localConfig recreate temlate
function templateHostMoreOrEqual1_6(__keyLocalConfig, hostWithDefault) {
    if (!hostWithDefault) {
        return '';
    }
    var defaultHost = hostWithDefault.default;
    var otherHosts = hostWithDefault.other;
    if (!defaultHost) {
        defaultHost = _.first(_.values(otherHosts));
    }
    if (!defaultHost) {
        return '';
    }
    var defaultHostName = _.keys(otherHosts).find(function (key) {
        var v = otherHosts[key];
        if (defaultHost.domain && defaultHost.domain.trim() !== '') {
            if (v.domain && (v.domain.trim() !== '') && (v.domain.trim() === defaultHost.domain)) {
                return true;
            }
        }
        if (defaultHost.ip && defaultHost.ip.trim() !== '') {
            if (v.ip && (v.ip.trim() !== '') && (v.ip.trim() === defaultHost.ip)) {
                return true;
            }
        }
    }) || tnp_config_1.config.names.defaultServer;
    return (__keyLocalConfig + ": '" + defaultHost.ipOrDomain + "', // " + (defaultHostName ? defaultHostName : 'default server') + "\n  " + _.keys(otherHosts)
        .filter(function (key) { return key !== defaultHostName; })
        .map(function (key) {
        return "// " + __keyLocalConfig + ": '" + otherHosts[key].ipOrDomain + "', // " + key;
    }).join('\n') + "\n  ").split('\n').map(function (l) { return l.trim(); }).join('\n') + '\n';
}
function templateRouterForLessOrEqual1_5(__keyLocalConfig, project) {
    var otherHosts = project.metadata[__keyLocalConfig].other;
    return _.keys(otherHosts).map(function (nameOfHost) {
        var v = otherHosts[nameOfHost];
        return "'" + _.snakeCase(nameOfHost) + "-" + project.prefix + ".localhost:9000': '" + v.ipOrDomain + "'";
    }).join(',\n');
}
function templateProxyHostsForLessOrEqual1_5(__keyLocalConfig, hostWithDefault) {
    if (!hostWithDefault) {
        return '';
    }
    var defaultHost = hostWithDefault.default;
    var otherHosts = hostWithDefault.other;
    if (!defaultHost) {
        defaultHost = _.first(_.values(otherHosts));
    }
    if (!defaultHost) {
        return '';
    }
    var defaultHostName = _.keys(otherHosts).find(function (key) {
        var v = otherHosts[key];
        if (defaultHost.domain && defaultHost.domain.trim() !== '') {
            if (v.domain && (v.domain.trim() !== '') && (v.domain.trim() === defaultHost.domain)) {
                return true;
            }
        }
        if (defaultHost.ip && defaultHost.ip.trim() !== '') {
            if (v.ip && (v.ip.trim() !== '') && (v.ip.trim() === defaultHost.ip)) {
                return true;
            }
        }
    }) || tnp_config_1.config.names.defaultServer;
    var templateProxy = function (host, comment, name) {
        var hostUrl = new URL(host.ipOrDomain);
        return (comment ? '//' : '') + " proxy: { "
            + ("host: '" + hostUrl.origin.replace(/https?\:\/\//, '') + "', ")
            + ("protocol: '" + hostUrl.protocol + "', ")
            + "// contextPath: '/api',"
            + ("port: '" + (hostUrl.port ? hostUrl.port : '') + "'  } ")
            + (", // " + name);
    };
    return (templateProxy(defaultHost, false, defaultHostName) + "\n  " + _.keys(otherHosts)
        .filter(function (key) { return key !== defaultHostName; })
        .map(function (key) {
        return templateProxy(otherHosts[key], true, key);
    }).join('\n') + "\n  ").split('\n').map(function (l) { return l.trim(); }).join('\n') + '\n';
}
function getLocalConfigBy(project, hostWithDefault) {
    var result = '';
    var genMsg = "/*\n  DO NOT MODIFY - THIS FILE IS GENERATED BY COMMAND: navi start\n  if you wanna add server please check file: 'src/current-projects-and-servers.ts'\n  in navi-cli repository (git@xxgit1.gtech.com:gtech-common-repository/navi-cli.git)\n\n  For any servers changes use command: navi start\n  and follow instructions.\n\n*/\n";
    if (project.navigatorVersionLessOrEqual('v1.5')) {
        result = genMsg + ("\n    module.exports = {\n     " + tools_backend_1.Tools.ServerOptionsLocalConfig15.map(function (localConfigKey) {
            return templateProxyHostsForLessOrEqual1_5(localConfigKey, hostWithDefault[localConfigKey]);
        }).join('') + "\n     router: {\n       " + templateRouterForLessOrEqual1_5('apiProxyTarget', project) + "\n     },\n     browserSync: {\n        ghostMode: false // disables browserSync synchronization between browsers/devices\n      }\n    }\n    ").split('\n').map(function (l) { return l.trim(); }).join('\n') + genMsg;
    }
    if (project.navigatorVersionBiggerOrEqual('v1.6')) {
        result = genMsg + ("\n    module.exports = {\n     " + tools_backend_1.Tools.ServerOptionsLocalConfig16.map(function (localConfigKey) {
            return templateHostMoreOrEqual1_6(localConfigKey, hostWithDefault[localConfigKey]);
        }).join('\n') + "\n    }\n    ").split('\n').map(function (l) { return l.trim(); }).join('\n') + genMsg;
    }
    return result.split('\n').filter(function (l) { return l.trim() !== ''; }).join('\n');
}
exports.getLocalConfigBy = getLocalConfigBy;
//#endregion
//# sourceMappingURL=local-config.backend.js.map