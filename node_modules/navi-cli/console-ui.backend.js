"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleUi = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var inquirer = require("inquirer");
var inquirerAutocomplete = require("inquirer-autocomplete-prompt");
var chalk_1 = require("chalk");
var project_backend_1 = require("./project.backend");
var DECORATE_backend_1 = require("./scripts/DECORATE.backend");
var START_backend_1 = require("./scripts/START.backend");
var tnp_helpers_1 = require("tnp-helpers");
var LINK_backend_1 = require("./scripts/LINK.backend");
var CLONE_backend_1 = require("./scripts/CLONE.backend");
var RESET_backend_1 = require("./scripts/RESET.backend");
var tools_backend_1 = require("./tools.backend");
var current_projects_and_servers_backend_1 = require("./current-projects-and-servers.backend");
var base_console_ui_backend_1 = require("./abstract/base-console-ui.backend");
//#endregion
inquirer.registerPrompt('autocomplete', inquirerAutocomplete);
var CHOICE = {
    CLONE: chalk_1.default.bold.green('CLONE') + " navigator baseline-fork repository (xxx-ui)",
    LINK: chalk_1.default.bold.green('LINK') + "  into baseline-fork external folder module (es-xxx-ui) ",
    RESET: chalk_1.default.bold.green('RESET') + " git branch + update origin for this repository and " + chalk_1.default.bold('external'),
    RELINK: chalk_1.default.bold.green('RELINK') + " existed module (es-xxx-ui) from external to vendor or node_module ",
    DECORATE: chalk_1.default.bold.green('DECORATE') + " module (es-xxx-ui) file in baseline fork",
    START: chalk_1.default.bold.green('START') + " baseline fork on port 9xxx"
};
var ConsoleUi = /** @class */ (function (_super) {
    tslib_1.__extends(ConsoleUi, _super);
    function ConsoleUi() {
        var _this = _super.call(this) || this;
        _this.orgCwd = process.cwd();
        return _this;
    }
    Object.defineProperty(ConsoleUi, "Instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    //#region public api
    //#region init
    ConsoleUi.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var choices, mainMessage, command;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.init.call(this)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        if (!true) return [3 /*break*/, 5];
                        tnp_helpers_1.Helpers.clearConsole();
                        choices = Object.keys(CHOICE)
                            .map(function (key) {
                            return { name: CHOICE[key], value: key };
                        });
                        choices = choices
                            .concat(this.filesMenu);
                        choices = choices
                            .filter(function (f) {
                            if (f.value === 'DECORATE') {
                                if (!(!!project_backend_1.Project.Current && project_backend_1.Project.Current.projectType === 'child-module')) {
                                    return false;
                                }
                            }
                            if ((f.value === 'START' || f.value === 'LINK' || f.value === 'RELINK')) {
                                if (!(!!project_backend_1.Project.Current && project_backend_1.Project.Current.projectType === 'baseline-fork')) {
                                    return false;
                                }
                            }
                            if (f.value === 'CLONE') {
                                if (!!project_backend_1.Project.Current) {
                                    if (!project_backend_1.Project.Current.isNavigatorProject) {
                                        return true;
                                    }
                                    return false;
                                }
                                else {
                                    return true;
                                }
                            }
                            return true;
                        })
                            .filter(function (f) {
                            return !tnp_core_1._.isUndefined(f) && !tnp_core_1._.isUndefined(f.name) && !tnp_core_1._.isUndefined(f.value);
                        });
                        mainMessage = "What you wanna do ? ";
                        if (!!project_backend_1.Project.Current && project_backend_1.Project.Current.isNavigatorProject) {
                            if (project_backend_1.Project.Current.parent && project_backend_1.Project.Current.parent.projectType === 'baseline-fork') {
                                mainMessage += "(Current project: " + chalk_1.default.bold.yellow(project_backend_1.Project.Current.parent.name) + "/" + chalk_1.default.bold.yellow(project_backend_1.Project.Current.name) + ") ";
                            }
                            else {
                                mainMessage += "(Current project: " + chalk_1.default.bold.yellow(project_backend_1.Project.Current.name) + ") ";
                            }
                        }
                        else {
                            mainMessage += "(Current folder: " + chalk_1.default.gray(tnp_core_1.path.basename(process.cwd())) + ") ";
                        }
                        return [4 /*yield*/, tnp_helpers_1.Helpers.autocompleteAsk(mainMessage, choices)];
                    case 3:
                        command = _a.sent();
                        return [4 /*yield*/, this.execute(command)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region execute
    ConsoleUi.prototype.execute = function (command) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, file, childModuleToLink, childModuleToRelink, auroraProject;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (command.startsWith('cd ') && command !== 'cd ..') {
                            this.changeCWD("./" + command.replace(/^cd/, '').trim());
                            return [2 /*return*/];
                        }
                        _a = command;
                        switch (_a) {
                            case 'cd ..': return [3 /*break*/, 1];
                            case 'START': return [3 /*break*/, 2];
                            case 'RESET': return [3 /*break*/, 6];
                            case 'DECORATE': return [3 /*break*/, 8];
                            case 'LINK': return [3 /*break*/, 13];
                            case 'RELINK': return [3 /*break*/, 18];
                            case 'CLONE': return [3 /*break*/, 23];
                        }
                        return [3 /*break*/, 26];
                    case 1:
                        this.changeCWD();
                        return [3 /*break*/, 26];
                    case 2:
                        if (!(project_backend_1.Project.Current.projectType !== 'baseline-fork')) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.msgForNotABaselineFork()];
                    case 3:
                        _b.sent();
                        return [2 /*return*/];
                    case 4: return [4 /*yield*/, START_backend_1.START(false)];
                    case 5:
                        _b.sent();
                        this.pressAnyKey();
                        return [3 /*break*/, 26];
                    case 6:
                        if (!project_backend_1.Project.Current.isNavigatorProject) {
                            tnp_helpers_1.Helpers.error("Current folder is not a Navigator project.");
                        }
                        return [4 /*yield*/, RESET_backend_1.RESET(process.cwd(), false)];
                    case 7:
                        _b.sent();
                        this.pressAnyKey();
                        return [3 /*break*/, 26];
                    case 8:
                        if (!(project_backend_1.Project.Current.projectType !== 'child-module')) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.msgForNotAChildModule()];
                    case 9:
                        _b.sent();
                        return [2 /*return*/];
                    case 10: return [4 /*yield*/, this.getModuleProjectsToLink()];
                    case 11:
                        file = _b.sent();
                        if (tnp_core_1._.isUndefined(file)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, DECORATE_backend_1.DECORATE([file], false)];
                    case 12:
                        _b.sent();
                        this.pressAnyKey();
                        return [3 /*break*/, 26];
                    case 13:
                        if (!(project_backend_1.Project.Current.projectType !== 'baseline-fork')) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.msgForNotABaselineFork()];
                    case 14:
                        _b.sent();
                        return [2 /*return*/];
                    case 15: return [4 /*yield*/, this.getFileFromModuleChild()];
                    case 16:
                        childModuleToLink = _b.sent();
                        if (!childModuleToLink) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, LINK_backend_1.LINK([childModuleToLink], false)];
                    case 17:
                        _b.sent();
                        this.pressAnyKey();
                        return [3 /*break*/, 26];
                    case 18:
                        if (!(project_backend_1.Project.Current.projectType !== 'baseline-fork')) return [3 /*break*/, 20];
                        return [4 /*yield*/, this.msgForNotABaselineFork()];
                    case 19:
                        _b.sent();
                        return [2 /*return*/];
                    case 20: return [4 /*yield*/, this.getFileFromModuleChild(true)];
                    case 21:
                        childModuleToRelink = _b.sent();
                        if (!childModuleToRelink) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, LINK_backend_1.RELINK([childModuleToRelink], false)];
                    case 22:
                        _b.sent();
                        this.pressAnyKey();
                        return [3 /*break*/, 26];
                    case 23: return [4 /*yield*/, this.getBaselieForkToClone()];
                    case 24:
                        auroraProject = _b.sent();
                        if (!auroraProject) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, CLONE_backend_1.CLONE([auroraProject], false)];
                    case 25:
                        _b.sent();
                        this.pressAnyKey();
                        return [3 /*break*/, 26];
                    case 26: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#endregion
    //#region private methods
    ConsoleUi.prototype.getFileFromModuleChild = function (relink) {
        if (relink === void 0) { relink = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentChildren, filesFromProject, choices, file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.clearConsole();
                        currentChildren = project_backend_1.Project.Current.children;
                        filesFromProject = tools_backend_1.Tools.ModulesForDecorationArr
                            .map(function (f) {
                            var name = chalk_1.default.bold.yellow(f);
                            if (currentChildren.find(function (c) { return c.name === f; })) {
                                name = name + chalk_1.default.gray.bold(' (already installed)');
                            }
                            else {
                                if (relink) {
                                    return void 0;
                                }
                            }
                            return { name: name, value: f };
                        })
                            .filter(function (f) { return !!f; });
                        choices = [{ name: this.goBackLabel(), value: void 0 }]
                            .concat(filesFromProject);
                        return [4 /*yield*/, tnp_helpers_1.Helpers.autocompleteAsk('Type or select module name: ', choices, undefined)];
                    case 1:
                        file = _a.sent();
                        return [2 /*return*/, file];
                }
            });
        });
    };
    ConsoleUi.prototype.getBaselieForkToClone = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filesFromProject, choices, file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.clearConsole();
                        filesFromProject = current_projects_and_servers_backend_1.NavigatorBaselineForks
                            .map(function (f) {
                            return { name: "(" + f.name + ") - " + f.description, value: f };
                        });
                        choices = [{ name: this.goBackLabel(), value: void 0 }]
                            .concat(filesFromProject);
                        return [4 /*yield*/, tnp_helpers_1.Helpers.autocompleteAsk('Type or select baseline-fork name: ', choices, undefined)];
                    case 1:
                        file = _a.sent();
                        return [2 /*return*/, file];
                }
            });
        });
    };
    ConsoleUi.prototype.getModuleProjectsToLink = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var filesFromProject, choices, file;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.clearConsole();
                        filesFromProject = tnp_core_1.glob.sync("src/**/*.*", {
                            cwd: project_backend_1.Project.Current.location
                        })
                            .map(function (f) {
                            return { name: tnp_core_1.path.basename(f), value: f };
                        });
                        choices = [{ name: this.goBackLabel(), value: void 0 }]
                            .concat(filesFromProject);
                        return [4 /*yield*/, tnp_helpers_1.Helpers.autocompleteAsk('Type or select file name: ', choices, undefined)];
                    case 1:
                        file = _a.sent();
                        return [2 /*return*/, file];
                }
            });
        });
    };
    //#region singleton
    ConsoleUi._instance = new ConsoleUi();
    return ConsoleUi;
}(base_console_ui_backend_1.BaseConsoleUi));
exports.ConsoleUi = ConsoleUi;
//# sourceMappingURL=console-ui.backend.js.map