"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectHelpers = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var project_feature_backend_1 = require("./abstract/project-feature.backend");
//#endregion
var ProjectHelpers = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectHelpers, _super);
    function ProjectHelpers() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        //#region get free port
        _this.takenPorts = [];
        return _this;
        //#endregion
    }
    ProjectHelpers.prototype.getFreePort = function (from) {
        if (from === void 0) { from = 9000; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var port, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        while (this.takenPorts.includes(from)) {
                            from += 1;
                        }
                        this.takenPorts.push(from);
                        return [4 /*yield*/, tnp_core_1.portfinder.getPortPromise({ port: from })];
                    case 1:
                        port = _a.sent();
                        this.takenPorts.push(port);
                        return [2 /*return*/, port];
                    case 2:
                        err_1 = _a.sent();
                        tnp_helpers_1.Helpers.error("Not able to get a free port from " + from, false, true);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region run custom commandn inside project
    ProjectHelpers.prototype.run = function (command, options) {
        if (!options) {
            options = {};
        }
        if (!options.cwd) {
            options.cwd = this.project.location;
        }
        return tnp_helpers_1.Helpers.run(command, options);
    };
    return ProjectHelpers;
}(project_feature_backend_1.ProjectFeature));
exports.ProjectHelpers = ProjectHelpers;
//# sourceMappingURL=project-helpers.backend.js.map