"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.main = exports.AppModule = exports.AppComponent = void 0;
var tslib_1 = require("tslib");
require("core-js/proposals/reflect-metadata");
require("core-js/es");
var morphi_1 = require("morphi");
//#region @backend
/**
 * This quick fix if somhow I am using on backend document and localstorage
 */
morphi_1.Morphi.setIsBackend();
if (typeof localStorage === 'undefined' || localStorage === null) {
    var LocalStorage = require('node-localstorage').LocalStorage;
    global['localStorage'] = new LocalStorage('./tmp-local-storage');
    global['sessionStorage'] = new LocalStorage('./tmp-session-storage');
}
if (typeof document === 'undefined' || document === null) {
    var jsdom = require('jsdom');
    var JSDOM = jsdom.JSDOM;
    var window_1 = (new JSDOM("")).window;
    global['window'] = window_1;
    var document_1 = window_1.document;
    global['document'] = document_1;
}
if (typeof global['Zone'] === 'undefined' || global['Zone'] === null) {
    global['Zone'] = {
        __load_patch: function () { },
        __symbol__: function () { }
    };
}
//#endregion
//#region isomorphic imports
var tnp_ui_1 = require("tnp-ui");
var ng2_logger_1 = require("ng2-logger");
var log = ng2_logger_1.Log.create("app", ng2_logger_1.Level.__NOTHING);
//#endregion
log.d("Morphi.isBrowser: " + morphi_1.Morphi.isBrowser + ", Morphi.isNode: " + morphi_1.Morphi.isNode);
if (morphi_1.Morphi.isBrowser) {
    require('zone.js/dist/zone');
    require('@angular/material/prebuilt-themes/indigo-pink.css');
}
//#region angular
var core_1 = require("@angular/core");
var platform_browser_1 = require("@angular/platform-browser");
var http_1 = require("@angular/http");
var forms_1 = require("@angular/forms");
var platform_browser_dynamic_1 = require("@angular/platform-browser-dynamic");
var card_1 = require("@angular/material/card");
var ngx_store_1 = require("ngx-store");
// import { NoopAnimationsModule } from '@angular/platform-browser/animations';
var animations_1 = require("@angular/platform-browser/animations");
//#endregion
var controllers = [
// ProjectController,
// ProcessController
];
var host = 'http://localhost:3333';
var AppComponent = /** @class */ (function () {
    function AppComponent() {
    }
    // processes: PROCESS[];
    AppComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                console.log('Hello FE');
                return [2 /*return*/];
            });
        });
    };
    AppComponent = tslib_1.__decorate([
        core_1.Component({
            selector: 'my-app',
            template: "\n  <h1> Hello from component! </h1>\n  <mat-card>\n  Simple card\n  <span class=\"iconify\" data-icon=\"ic-baseline-pin\" data-inline=\"false\"></span>\n  </mat-card>\n  <mat-card>\n  <mat-card-title>\n  Processes\n  </mat-card-title>\n  <mat-card-content>\n\n  <ng-template #popupContent>\n  Hello content\n  </ng-template>\n\n  <app-draggable-popup\n  [title]=\"'awesome'\" >\n\n  </app-draggable-popup>\n\n\n  </mat-card-content>\n\n  </mat-card>\n  ",
        })
    ], AppComponent);
    return AppComponent;
}());
exports.AppComponent = AppComponent;
//#region angular module
var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = tslib_1.__decorate([
        core_1.NgModule({
            imports: tslib_1.__spreadArray(tslib_1.__spreadArray([
                platform_browser_1.BrowserModule,
                http_1.HttpModule,
                animations_1.BrowserAnimationsModule,
                forms_1.FormsModule
            ], [
                card_1.MatCardModule,
            ]), [
                // ProjectModule,
                // ProcessModule,
                tnp_ui_1.DraggablePopupModule,
                ngx_store_1.WebStorageModule,
            ]),
            declarations: [
                AppComponent,
            ],
            providers: tslib_1.__spreadArray([], controllers),
            bootstrap: [AppComponent]
        })
    ], AppModule);
    return AppModule;
}());
exports.AppModule = AppModule;
// depending on the env mode, enable prod mode or add debugging modules
// if (ENV.isBUild === 'build') {
//   enableProdMode();
// }
function main() {
    return platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(AppModule);
}
exports.main = main;
//#endregion
function start() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var config, context, head, body;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    config = {
                        type: 'sqlite',
                        database: 'tmp-db.sqlite',
                        synchronize: true,
                        dropSchema: true,
                        logging: false
                    };
                    return [4 /*yield*/, morphi_1.Morphi.init({
                            host: host,
                            controllers: controllers,
                            entities: [
                            // PROJECT, PROCESS
                            ],
                            //#region @backend
                            config: config
                            //#endregion
                        })];
                case 1:
                    context = _a.sent();
                    log.d("context", context);
                    if (morphi_1.Morphi.isBrowser) {
                        head = document.getElementsByTagName('head')[0];
                        head.innerHTML = head.innerHTML +
                            "<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons&display=block\" rel=\"stylesheet\">";
                        body = document.getElementsByTagName('body')[0];
                        body.innerHTML = "\n    <style>\n\n    [mat-dialog-title] {\n      margin: -24px -24px 0px -24px !important;\n      padding: 10px 24px;\n      background: gray;\n      color: #fff;\n      cursor: move;\n    }\n\n\n    .resizable-modal {\n      mat-dialog-container {\n        resize: both;\n      }\n    }\n\n    </style>\n    <my-app>Loading...</my-app>";
                        if (document.readyState === 'complete') {
                            main();
                        }
                        else {
                            document.addEventListener('DOMContentLoaded', main);
                        }
                    }
                    return [2 /*return*/];
            }
        });
    });
}
if (morphi_1.Morphi.isBrowser) {
    start();
}
exports.default = start;
//# sourceMappingURL=app.js.map