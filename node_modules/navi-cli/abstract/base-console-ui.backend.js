"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseConsoleUi = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var chalk_1 = require("chalk");
var tnp_helpers_1 = require("tnp-helpers");
var project_backend_1 = require("../project.backend");
var tnp_config_1 = require("tnp-config");
var current_projects_and_servers_backend_1 = require("../current-projects-and-servers.backend");
var tools_backend_1 = require("../tools.backend");
//#endregion
//#region helpers
function goBackLabel() {
    return chalk_1.default.gray('.. GO BACK');
}
function changeCWD(dir) {
    if (dir === void 0) { dir = '..'; }
    return tnp_helpers_1.Helpers.goToDir(dir);
}
function msgForNotABaselineFork() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            tnp_helpers_1.Helpers.clearConsole();
            tnp_helpers_1.Helpers.error("Current folder IS NOT a baseline-fork :" + current_projects_and_servers_backend_1.NavigatorBaselineForks.map(function (f) { return f.name; }).join(', '), true, true);
            pressAnyKey();
            return [2 /*return*/];
        });
    });
}
function msgForNotAChildModule() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            tnp_helpers_1.Helpers.clearConsole();
            tnp_helpers_1.Helpers.error("Current folder IS NOT a child-module:" + tools_backend_1.Tools.ModulesForDecorationArr.join(', '), true, true);
            pressAnyKey();
            return [2 /*return*/];
        });
    });
}
function pressAnyKey() {
    tnp_helpers_1.Helpers.pressKeyAndContinue('Press any key to go back');
}
//#endregion
var BaseConsoleUi = /** @class */ (function () {
    function BaseConsoleUi() {
        this.goBackLabel = goBackLabel;
        this.pressAnyKey = pressAnyKey;
        this.changeCWD = changeCWD;
        this.msgForNotAChildModule = msgForNotAChildModule;
        this.msgForNotABaselineFork = msgForNotABaselineFork;
    }
    BaseConsoleUi.prototype.init = function (any) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.tryToFindNearestProject();
                return [2 /*return*/];
            });
        });
    };
    BaseConsoleUi.prototype.tryToFindNearestProject = function () {
        var orgCwd = this.orgCwd;
        while (!project_backend_1.Project.From(process.cwd())) {
            var oldCwd = process.cwd();
            changeCWD();
            if (oldCwd === process.cwd()) {
                changeCWD(orgCwd);
                break;
            }
        }
    };
    Object.defineProperty(BaseConsoleUi.prototype, "filesMenu", {
        get: function () {
            var menu = [];
            var pathAbove = tnp_core_1.path.join(process.cwd(), '');
            var pathAboveExist = tnp_core_1.fse.existsSync(pathAbove);
            if (pathAboveExist) {
                var name_1 = "cd " + chalk_1.default.bold.gray('..');
                var projectFromAbove = project_backend_1.Project.From(pathAbove);
                if (!!projectFromAbove && projectFromAbove.isNavigatorProject) {
                    name_1 = "cd " + chalk_1.default.bold.yellow('..');
                }
                menu.push({ name: name_1, value: 'cd ..', priority: 1 });
            }
            var projects = tnp_helpers_1.Helpers.findChildrenNavi(process.cwd(), function (childLocation) {
                var priority = 1;
                var childProject = project_backend_1.Project.From(childLocation);
                var folderName = tnp_core_1.path.basename(childLocation);
                var value = "cd " + folderName;
                var name = "cd " + chalk_1.default.gray(folderName);
                if (childProject && childProject.isNavigatorProject) {
                    priority = 0;
                    name = "cd " + chalk_1.default.gray(folderName) + " (" + chalk_1.default.bold.yellow(childProject.name) + ")";
                }
                return {
                    priority: priority,
                    name: name,
                    value: value
                };
            });
            menu = menu.concat(projects);
            var external = tnp_core_1.path.join(process.cwd(), tnp_config_1.config.folder.external);
            if (tnp_core_1.fse.existsSync(external)) {
                var externalProjects = tnp_helpers_1.Helpers.findChildrenNavi(external, function (childLocation) {
                    var priority = 1;
                    var childProject = project_backend_1.Project.From(childLocation);
                    var folderName = tnp_core_1.path.basename(childLocation);
                    var value = "cd external/" + folderName;
                    var name = "cd " + ('external/' + chalk_1.default.gray(folderName));
                    if (childProject && childProject.isNavigatorProject) {
                        priority = 0;
                        name = "cd " + chalk_1.default.gray('external/' + folderName) + " (" + chalk_1.default.bold.yellow(childProject.name) + ")";
                    }
                    return {
                        priority: priority,
                        name: name,
                        value: value
                    };
                });
                menu = menu.concat(externalProjects);
            }
            menu = tnp_core_1._.sortBy(menu, ['priority']);
            return menu.filter(function (f) { return !!f; });
        },
        enumerable: false,
        configurable: true
    });
    return BaseConsoleUi;
}());
exports.BaseConsoleUi = BaseConsoleUi;
//# sourceMappingURL=base-console-ui.backend.js.map