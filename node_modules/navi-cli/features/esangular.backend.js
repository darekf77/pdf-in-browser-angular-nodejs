"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ESAngularYoGenerators = void 0;
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var repoLink = 'https://xxgit1.gtech.com/gtech-common-repository/generator-esangular.git';
var repoLInkSSH = 'git@xxgit1.gtech.com:gtech-common-repository/generator-esangular.git';
var ESAngularYoGenerators = /** @class */ (function () {
    //#region singleton
    function ESAngularYoGenerators() {
    }
    ;
    Object.defineProperty(ESAngularYoGenerators, "Instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    //#endregion
    ESAngularYoGenerators.prototype.init = function (force) {
        if (force === void 0) { force = false; }
        if (!force && this.checkExists()) {
            tnp_helpers_1.Helpers.info("Repo generator-esangular already installed and linked.");
        }
        else {
            this.clone();
            this.link();
            tnp_helpers_1.Helpers.info("Repo generator-esangular ready to use.");
        }
    };
    ESAngularYoGenerators.prototype.checkIfThereAreUncommitedChanges = function (cwd) {
        return tnp_helpers_1.Helpers.run("git diff --name-only", { output: false, cwd: cwd }).sync().toString().trim() !== '';
    };
    ESAngularYoGenerators.prototype.autoupdate = function () {
        tnp_helpers_1.Helpers.log("Please wait... autoupdating esangular.");
        var cwd = tnp_core_1.path.resolve(tnp_core_1.path.join(__dirname, '..', '..', 'generator-esangular'));
        try {
            if (!tnp_core_1.fse.existsSync(cwd)) {
                this.init(true);
                return;
            }
            if (this.checkIfThereAreUncommitedChanges(cwd)) {
                tnp_helpers_1.Helpers.log('Stashing changes from esangular repo...');
                tnp_helpers_1.Helpers.run("git add --all . && git stash", { cwd: cwd, output: false, silence: true }).sync();
            }
            tnp_helpers_1.Helpers.run("git checkout master", { cwd: cwd, output: false, silence: true }).sync();
            tnp_helpers_1.Helpers.git.pullCurrentBranch(cwd);
            this.link();
        }
        catch (err) {
            tnp_helpers_1.Helpers.log(err);
            tnp_helpers_1.Helpers.error("[autoupdate] Not able to install or link generator-esangular in  " + cwd, false, true);
        }
    };
    ESAngularYoGenerators.prototype.link = function () {
        tnp_helpers_1.Helpers.log("Please wait... linking generator-esangular.");
        var cwd = tnp_core_1.path.resolve(tnp_core_1.path.join(__dirname, '..', '..', 'generator-esangular'));
        try {
            tnp_helpers_1.Helpers.run("npm install && npm link", { cwd: cwd, output: false, silence: true }).sync();
        }
        catch (err) {
            tnp_helpers_1.Helpers.log(err);
            tnp_helpers_1.Helpers.error("Not able to install and link generator-esangular in  " + cwd, false, true);
        }
    };
    ESAngularYoGenerators.prototype.clone = function () {
        tnp_helpers_1.Helpers.log("Please wait... cloning generator-esangular.");
        var cwd = tnp_core_1.path.resolve(tnp_core_1.path.join(__dirname, '..', '..'));
        var success = 0;
        try {
            tnp_helpers_1.Helpers.git.clone({ cwd: cwd, url: repoLink, throwErrors: true });
            success++;
        }
        catch (err) {
            tnp_helpers_1.Helpers.log("Not able to clone " + repoLink + "... trying now ssh clone...");
        }
        if (success === 0) {
            try {
                tnp_helpers_1.Helpers.git.clone({ cwd: cwd, url: repoLInkSSH, throwErrors: true });
                success++;
            }
            catch (err) { }
        }
        if (success === 0) {
            tnp_helpers_1.Helpers.error("Not able to clone repository  " + repoLink, false, true);
        }
    };
    ESAngularYoGenerators.prototype.tryLinkEsAngular = function () {
        var cwd = tnp_core_1.path.resolve(tnp_core_1.path.join(__dirname, '..', '..', 'generator-esangular'));
        if (tnp_core_1.fse.existsSync(cwd)) {
            try {
                tnp_helpers_1.Helpers.run("npm i && npm link", { cwd: cwd }).sync();
            }
            catch (error) {
            }
        }
    };
    ESAngularYoGenerators.prototype.checkExists = function (checkLinkInstall) {
        if (checkLinkInstall === void 0) { checkLinkInstall = true; }
        try {
            var res = tnp_helpers_1.Helpers.run('yo --generators | grep esangular', { output: false }).sync().toString().trim();
            return res === 'esangular';
        }
        catch (error) {
            if (checkLinkInstall) {
                this.tryLinkEsAngular();
            }
            return this.checkExists(false);
        }
    };
    ESAngularYoGenerators._instance = new ESAngularYoGenerators();
    return ESAngularYoGenerators;
}());
exports.ESAngularYoGenerators = ESAngularYoGenerators;
//# sourceMappingURL=esangular.backend.js.map