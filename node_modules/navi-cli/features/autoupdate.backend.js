"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Autoupdate = void 0;
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_cli_1 = require("tnp-cli");
var tnp_config_1 = require("tnp-config");
var esangular_backend_1 = require("./esangular.backend");
var tnp_helpers_1 = require("tnp-helpers");
var commandExistsSync = require('command-exists').sync;
var Autoupdate = /** @class */ (function () {
    //#region singleton
    function Autoupdate() {
    }
    ;
    Object.defineProperty(Autoupdate, "Instance", {
        get: function () {
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Autoupdate.prototype, "isAlreadyRestarting", {
        //#endregion
        get: function () {
            var args = require('minimist')(process.argv);
            return !!args.restarting;
        },
        enumerable: false,
        configurable: true
    });
    Autoupdate.prototype.checkIfThereAreUncommitedChanges = function (naviLocation) {
        return tnp_helpers_1.Helpers.run("git diff --name-only", { output: false, cwd: naviLocation }).sync().toString().trim() !== '';
    };
    Autoupdate.prototype.pullChanges = function (naviLocation) {
        try {
            tnp_helpers_1.Helpers.git.pullCurrentBranch(naviLocation);
            return true;
        }
        catch (error) {
            return false;
        }
    };
    Autoupdate.prototype.backupDist = function (naviLocation) {
        var distLocation = tnp_core_1.path.join(naviLocation, tnp_config_1.config.folder.dist);
        var tmpDistLocation = tnp_core_1.path.join(naviLocation, tnp_config_1.config.folder.tmpDist);
        if (tnp_core_1.fse.existsSync(distLocation)) {
            if (tnp_core_1.fse.existsSync(tmpDistLocation)) {
                tnp_helpers_1.Helpers.tryRemoveDir(tmpDistLocation);
            }
            tnp_core_1.fse.mkdirpSync(tmpDistLocation);
            tnp_core_1.fse.copySync(distLocation, tmpDistLocation, { recursive: true, overwrite: true });
        }
    };
    Autoupdate.prototype.restoreDist = function (naviLocation) {
        var distLocation = tnp_core_1.path.join(naviLocation, tnp_config_1.config.folder.dist);
        var tmpDistLocation = tnp_core_1.path.join(naviLocation, tnp_config_1.config.folder.tmpDist);
        tnp_helpers_1.Helpers.tryRemoveDir(distLocation);
        tnp_core_1.fse.mkdirpSync(distLocation);
        tnp_core_1.fse.copySync(tmpDistLocation, distLocation, { recursive: true, overwrite: true });
        tnp_helpers_1.Helpers.tryRemoveDir(tmpDistLocation);
    };
    Autoupdate.prototype.compile = function (naviLocation) {
        tnp_helpers_1.Helpers.log('Starting compilation of navi-cli...');
        try {
            tnp_helpers_1.Helpers.run('npm-run tsc', { cwd: naviLocation }).sync();
            return true;
        }
        catch (error) {
            return false;
        }
    };
    Autoupdate.prototype.installVscodeExt = function (naviLocation) {
        try {
            tnp_helpers_1.Helpers.run('navi vscode:ext', { cwd: naviLocation }).sync();
            return true;
        }
        catch (error) {
            return false;
        }
    };
    Autoupdate.prototype.start = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var naviLocation, oldHash;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.isAlreadyRestarting) {
                            return [2 /*return*/];
                        }
                        esangular_backend_1.ESAngularYoGenerators.Instance.autoupdate();
                        naviLocation = tnp_helpers_1.Helpers.run("navi get:location", { output: false }).sync().toString().trim();
                        oldHash = tnp_helpers_1.Helpers.git.lastCommitHash(naviLocation);
                        if (this.checkIfThereAreUncommitedChanges(naviLocation)) {
                            tnp_helpers_1.Helpers.run("git add --all . && git stash", { cwd: naviLocation }).sync();
                        }
                        if (!this.pullChanges(naviLocation)) {
                            tnp_helpers_1.Helpers.warn("Autoupdate can't be done - not able to pull latest changes from repository: " + naviLocation + ".");
                            return [2 /*return*/];
                        }
                        this.backupDist(naviLocation);
                        if (this.compile(naviLocation)) {
                            tnp_helpers_1.Helpers.info("NAVI-CLI autoupdate done.");
                        }
                        else {
                            tnp_helpers_1.Helpers.warn("Autoupdate can't be done - not able compile project repository: " + naviLocation + ".");
                            this.restoreDist(naviLocation);
                            tnp_helpers_1.Helpers.run("git reset --hard " + oldHash, { cwd: naviLocation }).sync();
                            return [2 /*return*/];
                        }
                        if (!commandExistsSync('code')) {
                            return [2 /*return*/];
                        }
                        tnp_helpers_1.Helpers.log("...installing new vscode extension.");
                        if (this.installVscodeExt(naviLocation)) {
                            tnp_helpers_1.Helpers.info("Vscode navi-cli extension autoupdate done.\n" + tnp_cli_1.CLI.chalk.bold('Please restart your vscode') + ".");
                        }
                        else {
                            tnp_helpers_1.Helpers.warn("Vscode navi-cli extension can't be installed");
                        }
                        return [4 /*yield*/, tnp_helpers_1.Helpers.restartApplicationItself("navi-cli")];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Autoupdate._instance = new Autoupdate();
    return Autoupdate;
}());
exports.Autoupdate = Autoupdate;
//# sourceMappingURL=autoupdate.backend.js.map