"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.run = void 0;
var tslib_1 = require("tslib");
var path = require("path");
var _ = require("lodash");
var glob = require("glob");
var chalk_1 = require("chalk");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_db_1 = require("tnp-db");
var tools_backend_1 = require("./tools.backend");
var console_ui_backend_1 = require("./console-ui.backend");
var project_backend_1 = require("./project.backend");
/**
 * Recognize argument and run script
 * @param argsv
 */
function run(argsv) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var index, a, db, cwdProj, childrens, index, child, files, functions, recognized, orgProcessCWD, ui, e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (_.isArray(argsv)) {
                        for (index = 0; index < argsv.length; index++) {
                            a = argsv[index];
                            if (a.trim() === 'i') {
                                argsv[index] = 'install';
                                break;
                            }
                        }
                    }
                    return [4 /*yield*/, tnp_db_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    cwdProj = project_backend_1.Project.From(process.cwd());
                    // await db.addProjectIfNotExist(cwdProj as any);
                    if (cwdProj && cwdProj.children.length > 0) {
                        childrens = cwdProj.children;
                        for (index = 0; index < childrens.length; index++) {
                            child = childrens[index];
                            // await db.addProjectIfNotExist(child as any);
                        }
                    }
                    files = glob.sync(path.join(__dirname, '/scripts/**/*.js'));
                    functions = [];
                    recognized = false;
                    files.forEach(function (file) {
                        var defaultObjectFunctionsOrHelpString = require(path.resolve(file)).default;
                        if (_.isObject(defaultObjectFunctionsOrHelpString)) {
                            _.forIn(defaultObjectFunctionsOrHelpString, function (v, k) {
                                if (recognized) {
                                    return;
                                }
                                if (!_.isString(v)) {
                                    var vFn = (Array.isArray(v) && v.length >= 1 ? v[0] : v);
                                    functions.push(vFn);
                                    if (_.isFunction(vFn)) {
                                        var check = tnp_helpers_1.Helpers.cliTool.match(k, argsv);
                                        if (check.isMatch) {
                                            recognized = true;
                                            vFn.apply(null, [tools_backend_1.Tools.globalArgumentsParser(check.restOfArgs)]);
                                            return;
                                        }
                                    }
                                }
                            });
                        }
                    });
                    if (!recognized) return [3 /*break*/, 2];
                    process.stdin.resume();
                    return [3 /*break*/, 11];
                case 2:
                    if (!(argsv.length === 2)) return [3 /*break*/, 10];
                    orgProcessCWD = process.cwd();
                    _a.label = 3;
                case 3:
                    if (!true) return [3 /*break*/, 9];
                    _a.label = 4;
                case 4:
                    _a.trys.push([4, 6, , 8]);
                    ui = console_ui_backend_1.ConsoleUi.Instance;
                    return [4 /*yield*/, ui.init()];
                case 5:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 6:
                    e_1 = _a.sent();
                    tnp_helpers_1.Helpers.error(e_1, true, true);
                    return [4 /*yield*/, tnp_helpers_1.Helpers.pressKeyAndContinue('Press any key to continue')];
                case 7:
                    _a.sent();
                    process.chdir(orgProcessCWD);
                    return [3 /*break*/, 8];
                case 8: return [3 /*break*/, 3];
                case 9: return [3 /*break*/, 11];
                case 10:
                    console.log("\n" + chalk_1.default.cyan('Use command') + " " + chalk_1.default.bold.red('navi') + " " + chalk_1.default.cyan('to get help.'));
                    process.exit(0);
                    _a.label = 11;
                case 11: return [2 /*return*/];
            }
        });
    });
}
exports.run = run;
//# sourceMappingURL=run.backend.js.map