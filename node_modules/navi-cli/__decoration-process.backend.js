/*
import { Project } from './project.backend';
import { Tools } from './tools.backend';

type BeforeAfter = 'before' | 'after';
type ProjectInitStages = 'recognize-type' | 'structure-fix' | 'code-refactor';
type ProjectHooks = 'init' | 'install-npm' | 'start-record-replay' | 'decorate' | 'override';

type DecorationFeatureOptInArgs = {
  hook: ProjectHooks;
  baselineFork: Project;
  filePath: string;
  module: Tools.ModulesForDecoration;
}
export type DecorationFeatureOptIn = {
  name?: string;
  condition?: (data: DecorationFeatureOptInArgs) => boolean;
  action?: (data: DecorationFeatureOptInArgs) => void
}

type FeatureObj = { [hook in ProjectHooks]: DecorationFeatureOptIn; };

const Feature = {
  "init": {
    name: ''
  },
  "decorate": {
    condition: ({ baselineFork }) => (baselineFork.projectType === 'baseline-fork') &&
      baselineFork.navigatorVersionBiggerOrEqual('v1.5'),
    action: a => {

    }
  }
} as FeatureObj;


export class DecorationProcess {




}





export interface DecorationFeatureIn {
  name: string;
  description?: string;
  conditions: DecorationFeatureCondition[];

}




export class DecorationFeatureConditionRequireModuleOptIn {
  module: Tools.ModulesForDecoration | Tools.ProductModulesPrefixes;
  gitHash?: string;
};

export class DecorationFeatureConditionRequireModule extends DecorationFeatureConditionRequireModuleOptIn {
  static from(data: DecorationFeatureConditionRequireModuleOptIn) {
    return new DecorationFeatureConditionRequireModule(data);
  }
  constructor(
    data: DecorationFeatureConditionRequireModuleOptIn) {
    super();
    Object.assign(this, Object.assign(new DecorationFeatureConditionRequireModuleOptIn(), data));
  }
  checkIn(project: Project) {
    // TODO
  }
}

export class DecorationFeatureCondition {
  checkIn(project: Project) {
    // TODO
  }
  constructor(
    baseline?: Tools.BaselineVersion,
    businessModule?: DecorationFeatureConditionRequireModule,
    productOrProductFork?: DecorationFeatureConditionRequireModule,
  ) {
    Object.assign(businessModule, Object.assign(new DecorationFeatureConditionRequireModuleOptIn(), businessModule));
    Object.assign(productOrProductFork, Object.assign(new DecorationFeatureConditionRequireModuleOptIn(), productOrProductFork));
  }
}
 */
//# sourceMappingURL=__decoration-process.backend.js.map