"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuickFixes = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var tools_backend_1 = require("./tools.backend");
var project_feature_backend_1 = require("./abstract/project-feature.backend");
//#endregion
var QuickFixes = /** @class */ (function (_super) {
    tslib_1.__extends(QuickFixes, _super);
    function QuickFixes() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QuickFixes.prototype.removeAnnyoinGitHooks = function () {
        tnp_core_1.rimraf.sync(tnp_core_1.path.join(this.project.location, '.git/hooks'));
    };
    //#region QUICK_FIX update git ignore
    QuickFixes.prototype.updateGitIgnore = function () {
        if (this.project.type === 'unknow-npm-project') {
            return;
        }
        var gitIgn = tnp_helpers_1.Helpers.readFile(this.project.pathes._gitignore) || '';
        if (gitIgn.search('/tmp-*') === -1) {
            tnp_helpers_1.Helpers.writeFile(this.project.pathes._gitignore, gitIgn + '\n/tmp-*\n');
        }
    };
    //#endregion
    //#region QUICK_FIX npm install
    QuickFixes.prototype.installNpmPackagesWithQuickFixes = function () {
        this.project.helpers.run('rimraf node_modules/es-*', { cwd: this.project.location }).sync();
        try {
            tnp_helpers_1.Helpers.info("Installing npm packages in " + this.project.name + "... ");
            this.project.helpers.run('npm install --ignore-engines --ignore-scripts --force --no-lockfile', { cwd: this.project.location, output: true, biggerBuffer: true }).sync();
        }
        catch (e) {
            console.log(e);
            tnp_helpers_1.Helpers.error("Command: npm install failed.", false, true);
        }
    };
    //#endregion
    //#region QUICK_FIX tsconfig for project
    QuickFixes.prototype.fixTsConfigInBaselineFork = function () {
        if (this.project.projectType !== 'baseline-fork' || this.project.navigatorVersionLessThan('v1.6')) {
            return;
        }
        var orgTsconfig = tnp_core_1.path.join(this.project.location, 'node_modules', 'es-build-ui', 'tsconfig.json');
        var propsToCopy = [
            'emitDecoratorMetadata',
            'experimentalDecorators',
            'paths',
            'lib',
            'target',
            'module',
            'moduleResolution'
        ];
        var customPathes = JSON.parse('{' + tools_backend_1.Tools.ModulesForDecorationArr.map(function (esModuleName) {
            return "\"" + esModuleName + "/*\": [\n        \"./custom/" + esModuleName + "/*\"\n      ]";
        }).join(",\n") + '}');
        var tsconfigTemplate = {
            'compilerOptions': {
                'baseUrl': '.',
                'paths': {}
            }
        };
        if (tnp_core_1.fse.existsSync(orgTsconfig)) {
            try {
                var file_1 = tnp_helpers_1.Helpers.readJson(orgTsconfig);
                propsToCopy.forEach(function (prop) {
                    if (file_1 === null || file_1 === void 0 ? void 0 : file_1.compilerOptions[prop]) {
                        tsconfigTemplate.compilerOptions[prop] = file_1.compilerOptions[prop];
                    }
                });
            }
            catch (error) { }
        }
        tnp_core_1._.merge(tsconfigTemplate.compilerOptions.paths, customPathes);
        var destination = tnp_core_1.path.join(this.project.location, 'tsconfig.json');
        if (!tnp_core_1.fse.existsSync(destination)) {
            tnp_core_1.rimraf.sync(destination);
        }
        tnp_helpers_1.Helpers.writeFile(destination, tsconfigTemplate);
    };
    QuickFixes.prototype.overrideEsBuildUi = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var esBuildUiPath, decoratedFiles, esBuildUiProject_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.project.projectType !== 'baseline-fork') {
                            return [2 /*return*/];
                        }
                        esBuildUiPath = this.project.location + "/custom/es-build-ui";
                        decoratedFiles = tnp_core_1.glob.sync(esBuildUiPath + "/**/*.*");
                        if (!(decoratedFiles.length > 0)) return [3 /*break*/, 3];
                        if (!(typeof this.project.children.find(function (c) { return c.name === 'es-build-ui'; }) === 'undefined')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.project.submodules.link('es-build-ui')];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        esBuildUiProject_1 = this.project.children.find(function (c) { return c.name === 'es-build-ui'; });
                        decoratedFiles.forEach(function (absulutePath) {
                            var relativePath = absulutePath.replace(esBuildUiPath, '');
                            var source = absulutePath;
                            var destination = tnp_core_1.path.join(esBuildUiProject_1.location, relativePath);
                            tnp_core_1.fse.copyFileSync(source, destination);
                        });
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region QUIC_FIX long build on macos
    QuickFixes.prototype.fixLongBuild = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var relativePathWebpackConfig, relativePathWebpackDevConfig, esBuildUiPath, buildFile, buildDevFile, content, emptyPluginFork;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.project.projectType !== 'baseline-fork' || this.project.navigatorVersionLessThan('v1.6')) {
                            return [2 /*return*/];
                        }
                        relativePathWebpackConfig = "webpack/config/webpack.common.config.js";
                        relativePathWebpackDevConfig = "webpack/config/webpack.dev.config.js";
                        esBuildUiPath = this.project.location + "/custom/es-build-ui/" + relativePathWebpackConfig;
                        if (tnp_core_1.fse.existsSync(esBuildUiPath)) {
                            return [2 /*return*/];
                        }
                        if (!(typeof this.project.children.find(function (c) { return c.name === 'es-build-ui'; }) === 'undefined')) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.project.submodules.link('es-build-ui')];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        buildFile = tnp_core_1.path.join(this.project.location, "node_modules/es-build-ui/" + relativePathWebpackConfig);
                        buildDevFile = tnp_core_1.path.join(this.project.location, "node_modules/es-build-ui/" + relativePathWebpackDevConfig);
                        if (!!tnp_core_1.fse.existsSync(buildFile)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.project.submodules.link('es-build-ui')];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4:
                        content = tnp_core_1.fse.readFileSync(buildFile, 'utf8');
                        emptyPluginFork = "\n    // navi-cli fix for long, heavy build\n    function ForkTsCheckerWebpackPlugin() {  this.apply = function(){}; }";
                        content = content.replace("const ForkTsCheckerWebpackPlugin = require('fork-ts-checker-webpack-plugin');", emptyPluginFork);
                        // const emptyPluginGettext = `// TODO
                        // // navi-cli fix for long, heavy build
                        // function EsGettextPlugin() {  this.apply = function(){}; }`;
                        // content = content.replace(`const EsGettextPlugin = require('../plugins/es-gettext-plugin');`, emptyPluginGettext);
                        tnp_core_1.fse.writeFileSync(buildFile, content);
                        content = tnp_core_1.fse.readFileSync(buildDevFile, 'utf8');
                        content = content.replace("compress: true,", "compress: true ,\n    host: '0.0.0.0',");
                        tnp_core_1.fse.writeFileSync(buildDevFile, content);
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region QICK_FIX remove cache loader for invalidated cache
    QuickFixes.prototype.removeCacheLoaderFromWebpack = function () {
        tnp_helpers_1.Helpers.info("Removing .cache-loader ...");
        tnp_core_1.rimraf.sync(tnp_core_1.path.join(this.project.location, '.cache-loader'));
    };
    //#endregion
    //#region QUICK_FIX start navigator with special arguments
    QuickFixes.prototype.startNavigator = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f, _g, _h;
            return tslib_1.__generator(this, function (_j) {
                switch (_j.label) {
                    case 0:
                        if (!this.project.navigatorVersionLessOrEqual('v1.5')) return [3 /*break*/, 2];
                        _b = (_a = this.project.helpers).run;
                        _c = "npm-run bower install && npm-run gulp serve --gulpfile node_modules/es-build-ui/gulpfile.js";
                        _d = "  --port ";
                        return [4 /*yield*/, this.project.helpers.getFreePort(9000)];
                    case 1:
                        _b.apply(_a, [_c + (_d + (_j.sent()) + " --cwd .")]).sync();
                        return [3 /*break*/, 4];
                    case 2:
                        _f = (_e = this.project.helpers).run;
                        _g = "npm-run webpack-dev-server --env.profile=development "
                            + "--config=node_modules/es-build-ui/webpack/config/webpack.dev.config.js ";
                        _h = "--context=. --watch --watch-poll --port ";
                        return [4 /*yield*/, this.project.helpers.getFreePort(9000)];
                    case 3:
                        _f.apply(_e, [_g + (_h + (_j.sent()))]).sync();
                        _j.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return QuickFixes;
}(project_feature_backend_1.ProjectFeature));
exports.QuickFixes = QuickFixes;
//# sourceMappingURL=quick-fixes.backend.js.map