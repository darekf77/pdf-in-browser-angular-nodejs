"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Submodules = void 0;
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_helpers_1 = require("tnp-helpers");
var project_backend_1 = require("./project.backend");
var tools_backend_1 = require("./tools.backend");
var tnp_config_1 = require("tnp-config");
//#endregion
var Submodules = /** @class */ (function () {
    //#region constructor
    function Submodules(project) {
        this.project = project;
    }
    //#endregion
    //#region clone all submodules
    Submodules.prototype.cloneAll = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var modules, index, name_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        modules = tools_backend_1.Tools.ModulesForDecorationArr;
                        modules = modules.filter(function (c) { return !['es-abstract'].includes(c); });
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < modules.length)) return [3 /*break*/, 4];
                        name_1 = modules[index];
                        return [4 /*yield*/, this.link(name_1)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region clone submodule
    Submodules.prototype.clone = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index, child, vendorForBower, vendorForNpm, vendorBower, vendorNpm, parentNodeModules, vendorBowerSubPorject, vendorNpmSubPorject;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.project.projectType === 'baseline-fork')) return [3 /*break*/, 4];
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < this.project.children.length)) return [3 /*break*/, 4];
                        child = this.project.children[index];
                        return [4 /*yield*/, child.submodules.clone()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4:
                        if (this.project.projectType === 'child-module') {
                            vendorForBower = tnp_config_1.config.folder.vendor;
                            vendorForNpm = tnp_config_1.config.folder.node_modules;
                            vendorBower = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.project.parent.location, vendorForBower));
                            vendorNpm = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.project.parent.location, vendorForNpm));
                            parentNodeModules = tnp_core_1.path.join(this.project.parent.location, tnp_config_1.config.folder.node_modules);
                            vendorBowerSubPorject = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(vendorBower, this.project.name));
                            if (this.project.navigatorVersionLessOrEqual('v1.5') && tnp_core_1.fse.existsSync(vendorBowerSubPorject)) {
                                tnp_helpers_1.Helpers.tryRemoveDir(vendorBowerSubPorject);
                            }
                            vendorNpmSubPorject = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(vendorNpm, this.project.name));
                            if (tnp_core_1.fse.existsSync(vendorNpmSubPorject)) {
                                tnp_helpers_1.Helpers.tryRemoveDir(vendorNpmSubPorject);
                            }
                            if (this.project.navigatorVersionLessOrEqual('v1.5')) {
                                tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(vendorBower, tnp_core_1.path.basename(this.project.location)));
                                tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(vendorBower, this.project.name));
                            }
                            tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(vendorNpm, tnp_core_1.path.basename(this.project.location)));
                            tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(vendorNpm, this.project.name));
                            if (this.project.navigatorVersionLessOrEqual('v1.5')) {
                                tnp_helpers_1.Helpers.createSymLink(this.project.location, tnp_core_1.crossPlatformPath(tnp_core_1.path.join(vendorBower, this.project.name)));
                            }
                            tnp_helpers_1.Helpers.createSymLink(this.project.location, tnp_core_1.crossPlatformPath(tnp_core_1.path.join(vendorNpm, this.project.name)));
                            if (tnp_core_1.fse.existsSync(parentNodeModules)) {
                                tnp_helpers_1.Helpers.tryRemoveDir(tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.node_modules));
                                tnp_helpers_1.Helpers.createSymLink(tnp_core_1.crossPlatformPath(parentNodeModules), tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.node_modules)));
                                console.log('Linking parent node modules to child done');
                            }
                            if (this.project.navigatorVersionLessOrEqual('v1.5')) {
                                tnp_helpers_1.Helpers.renameFolder(tnp_core_1.path.basename(this.project.location), this.project.name, vendorBower);
                            }
                            tnp_helpers_1.Helpers.renameFolder(tnp_core_1.path.basename(this.project.location), this.project.name, vendorNpm);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region link submodule
    Submodules.prototype.link = function (childProjectName, actionType) {
        if (actionType === void 0) { actionType = 'soft-clone'; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var paretOrigin, subProjectOrigin, newSubProjectName, newSubProjectLocation, project;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.project.projectType !== 'baseline-fork') {
                            tnp_helpers_1.Helpers.error("This command is only for navigator baseline fork");
                            return [2 /*return*/];
                        }
                        paretOrigin = this.project.helpers.run("git remote get-url --push origin", { output: false }).sync().toString().trim();
                        subProjectOrigin = paretOrigin.replace("" + this.project.name, childProjectName);
                        newSubProjectName = this.project.prefix.toUpperCase() + "-" + childProjectName;
                        newSubProjectLocation = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.external, newSubProjectName));
                        if (actionType !== 'link') {
                            tnp_helpers_1.Helpers.git.clone({
                                cwd: tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.project.location, tnp_config_1.config.folder.external)),
                                url: subProjectOrigin,
                                destinationFolderName: newSubProjectName,
                                override: (actionType === 'clone-override')
                            });
                        }
                        project = project_backend_1.Project.From(newSubProjectLocation);
                        if (!project) return [3 /*break*/, 2];
                        this.project.children.push(project);
                        return [4 /*yield*/, project.submodules.clone()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    return Submodules;
}());
exports.Submodules = Submodules;
//# sourceMappingURL=submodules.backend.js.map