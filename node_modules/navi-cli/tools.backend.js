"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tools = void 0;
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tnp_cli_1 = require("tnp-cli");
var tnp_config_1 = require("tnp-config");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var vpnSplit = require("vpn-split");
var Tools;
(function (Tools) {
    //#region reexport
    Tools.HostForServer = vpnSplit.HostForServer;
    Tools.ServerOptionsLocalConfig15 = [
        'apiProxyTarget',
    ];
    Tools.ServerOptionsLocalConfig16 = tslib_1.__spreadArray(tslib_1.__spreadArray([], Tools.ServerOptionsLocalConfig15), [
        'addressValidationProxyTarget',
        'schedulerProxyTarget'
    ]);
    //#region compare baseline version
    function compareVer(version, operator, baselineVersion) {
        if (baselineVersion === 'none') {
            tnp_helpers_1.Helpers.warn("[navigatorVersionLessOrEqual] Comparation of incorrect navigator version: " + this.baselineVersion);
            return false;
        }
        var local = Number(baselineVersion.replace('v', '').replace('.', ''));
        var parameterVersion = Number(version.replace('v', '').replace('.', ''));
        if (isNaN(local) || isNaN(parameterVersion)) {
            return false;
        }
        if (operator === 'less-or-equal') {
            return local <= parameterVersion;
        }
        if (operator === 'more-or-equal') {
            return local >= parameterVersion;
        }
        if (operator === 'less') {
            return local < parameterVersion;
        }
        if (operator === 'more') {
            return local > parameterVersion;
        }
        return false;
    }
    Tools.compareVer = compareVer;
    //#endregion
    //#endregion
    //#region models arrays
    Tools.ModulesForDecorationArr = [
        'es-rs-ui',
        'es-olpm-ui',
        'es-ips-ui',
        'es-ms-ui',
        'es-pm-ui',
        'es-ps-ui',
        'es-auth-ui',
        'es-common',
        'es-global-ui',
        'es-build-ui',
        'es-connect-ui',
        'es-dashboard-ui',
        'es-abstract',
    ];
    Tools.ModulesPrefixesList = [
        'rs',
        'ips',
        'olpm',
        'ps',
        'pm',
        'ms',
        'global',
        'dashboard',
        'connect',
        'common',
        'auth',
        'build',
        'abstract',
    ];
    var PackageJSON = /** @class */ (function () {
        function PackageJSON(location) {
            this.data = tnp_helpers_1.Helpers.readJson(tnp_core_1.path.join(location, tnp_config_1.config.file.package_json));
            if (!this.data.tnp) {
                this.data.tnp = { type: 'navi' };
                tnp_helpers_1.Helpers.writeFile(tnp_core_1.path.join(location, tnp_config_1.config.file.package_json), this.data);
            }
        }
        return PackageJSON;
    }());
    Tools.PackageJSON = PackageJSON;
    var BowerJSON = /** @class */ (function () {
        function BowerJSON(location) {
            var bowerPath = tnp_core_1.path.join(location, tnp_config_1.config.file.bower_json);
            if (tnp_core_1.fse.existsSync(bowerPath)) {
                this.data = tnp_core_1.fse.readJsonSync(bowerPath);
            }
        }
        return BowerJSON;
    }());
    Tools.BowerJSON = BowerJSON;
    //#endregion
    //#region vscode
    var __AllColors = {
        aliceblue: 'f0f8ff',
        antiquewhite: 'faebd7',
        aqua: '00ffff',
        aquamarine: '7fffd4',
        azure: 'f0ffff',
        beige: 'f5f5dc',
        bisque: 'ffe4c4',
        black: '000000',
        blanchedalmond: 'ffebcd',
        blue: '0000ff',
        blueviolet: '8a2be2',
        brown: 'a52a2a',
        burlywood: 'deb887',
        cadetblue: '5f9ea0',
        chartreuse: '7fff00',
        chocolate: 'd2691e',
        coral: 'ff7f50',
        cornflowerblue: '6495ed',
        cornsilk: 'fff8dc',
        crimson: 'dc143c',
        cyan: '00ffff',
        darkblue: '00008b',
        darkcyan: '008b8b',
        darkgoldenrod: 'b8860b',
        darkgray: 'a9a9a9',
        darkgreen: '006400',
        darkkhaki: 'bdb76b',
        darkmagenta: '8b008b',
        darkolivegreen: '556b2f',
        darkorange: 'ff8c00',
        darkorchid: '9932cc',
        darkred: '8b0000',
        darksalmon: 'e9967a',
        darkseagreen: '8fbc8f',
        darkslateblue: '483d8b',
        darkslategray: '2f4f4f',
        darkturquoise: '00ced1',
        darkviolet: '9400d3',
        deeppink: 'ff1493',
        deepskyblue: '00bfff',
        dimgray: '696969',
        dodgerblue: '1e90ff',
        feldspar: 'd19275',
        firebrick: 'b22222',
        floralwhite: 'fffaf0',
        forestgreen: '228b22',
        fuchsia: 'ff00ff',
        gainsboro: 'dcdcdc',
        ghostwhite: 'f8f8ff',
        gold: 'ffd700',
        goldenrod: 'daa520',
        gray: '808080',
        green: '008000',
        greenyellow: 'adff2f',
        honeydew: 'f0fff0',
        hotpink: 'ff69b4',
        indianred: 'cd5c5c',
        indigo: '4b0082',
        ivory: 'fffff0',
        khaki: 'f0e68c',
        lavender: 'e6e6fa',
        lavenderblush: 'fff0f5',
        lawngreen: '7cfc00',
        lemonchiffon: 'fffacd',
        lightblue: 'add8e6',
        lightcoral: 'f08080',
        lightcyan: 'e0ffff',
        lightgoldenrodyellow: 'fafad2',
        lightgrey: 'd3d3d3',
        lightgreen: '90ee90',
        lightpink: 'ffb6c1',
        lightsalmon: 'ffa07a',
        lightseagreen: '20b2aa',
        lightskyblue: '87cefa',
        lightslateblue: '8470ff',
        lightslategray: '778899',
        lightsteelblue: 'b0c4de',
        lightyellow: 'ffffe0',
        lime: '00ff00',
        limegreen: '32cd32',
        linen: 'faf0e6',
        magenta: 'ff00ff',
        maroon: '800000',
        mediumaquamarine: '66cdaa',
        mediumblue: '0000cd',
        mediumorchid: 'ba55d3',
        mediumpurple: '9370d8',
        mediumseagreen: '3cb371',
        mediumslateblue: '7b68ee',
        mediumspringgreen: '00fa9a',
        mediumturquoise: '48d1cc',
        mediumvioletred: 'c71585',
        midnightblue: '191970',
        mintcream: 'f5fffa',
        mistyrose: 'ffe4e1',
        moccasin: 'ffe4b5',
        navajowhite: 'ffdead',
        navy: '000080',
        oldlace: 'fdf5e6',
        olive: '808000',
        olivedrab: '6b8e23',
        orange: 'ffa500',
        orangered: 'ff4500',
        orchid: 'da70d6',
        palegoldenrod: 'eee8aa',
        palegreen: '98fb98',
        paleturquoise: 'afeeee',
        palevioletred: 'd87093',
        papayawhip: 'ffefd5',
        peachpuff: 'ffdab9',
        peru: 'cd853f',
        pink: 'ffc0cb',
        plum: 'dda0dd',
        powderblue: 'b0e0e6',
        purple: '800080',
        red: 'ff0000',
        rosybrown: 'bc8f8f',
        royalblue: '4169e1',
        saddlebrown: '8b4513',
        salmon: 'fa8072',
        sandybrown: 'f4a460',
        seagreen: '2e8b57',
        seashell: 'fff5ee',
        sienna: 'a0522d',
        silver: 'c0c0c0',
        skyblue: '87ceeb',
        slateblue: '6a5acd',
        slategray: '708090',
        snow: 'fffafa',
        springgreen: '00ff7f',
        steelblue: '4682b4',
        tan: 'd2b48c',
        teal: '008080',
        thistle: 'd8bfd8',
        tomato: 'ff6347',
        turquoise: '40e0d0',
        violet: 'ee82ee',
        violetred: 'd02090',
        wheat: 'f5deb3',
        white: 'ffffff',
        whitesmoke: 'f5f5f5',
        yellow: 'ffff00',
        yellowgreen: '9acd32'
    };
    function Colors() {
        Object.keys(__AllColors).forEach(function (key) {
            if (!__AllColors[key].startsWith('#')) { // TODO not optimal solution
                __AllColors[key] = "#" + __AllColors[key];
            }
        });
        return __AllColors;
    }
    Tools.Colors = Colors;
    var VSCODE;
    (function (VSCODE) {
        var _this = this;
        VSCODE.vscode = {
            extensions: {
                'recommendations': tnp_core_1.fse.readJSONSync(tnp_core_1.path.join(__dirname, '..', '.vscode', 'extensions.json')).recommendations
            },
            settings: {
                'files.exclude': {
                    '**/.git': true,
                    '**/.svn': true,
                    '**/.hg': true,
                    '**/CVS': true,
                    '**/.DS_Store': true,
                    '.build': true,
                    '.idea': true,
                    'external': true,
                    'vendor': true,
                    'node_modules': true,
                    '.test': true,
                    '.cache-loader': true,
                },
                'workbench.colorTheme': function (project) {
                    return (project.isChildModuleInsideExternalFolderInBaselineFork && project.parent.vscodeSettings) ?
                        project.parent.vscodeSettings['workbench.colorTheme'] : 'Default Dark+';
                },
                'workbench.colorCustomizations': {
                    'activityBar.background': function (_a) {
                        var name = _a.name;
                        return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            var defaultColors;
                            return tslib_1.__generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4 /*yield*/, Promise.resolve().then(function () { return require('./current-projects-and-servers.backend'); })];
                                    case 1:
                                        defaultColors = (_b.sent()).AllDefaultColors;
                                        return [2 /*return*/, (defaultColors[name]) && defaultColors[name]];
                                }
                            });
                        });
                    },
                    'activityBar.foreground': function (project) {
                        return project.isChildModuleInsideExternalFolderInBaselineFork ? Colors().black : void 0;
                    },
                    'statusBar.background': function (project) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                        var defaultColors;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, Promise.resolve().then(function () { return require('./current-projects-and-servers.backend'); })];
                                case 1:
                                    defaultColors = (_a.sent()).AllDefaultColors;
                                    return [2 /*return*/, project.isChildModuleInsideExternalFolderInBaselineFork ?
                                            defaultColors[project.parent.name]
                                            : defaultColors[project.name]];
                            }
                        });
                    }); }
                },
                'editor.rulers': [
                    100, 120
                ],
                'search.exclude': {
                    '**/.git': true,
                    '**/bower_components': true,
                    '**/vendor': true,
                    '**/external': true,
                    '**/node_modules': true,
                },
                'eslint.enable': true,
                'eslint.options': {
                    // "configFile": "node_modules/eslint-config-igt/index.js",
                    'configFile': 'node_modules/es-build-ui/.eslintrc'
                },
                'tslint.configFile': 'node_modules/es-build-ui/tslint.json',
                'files.autoSave': 'on',
                'eslint.autoFixOnSave': true
            },
            tasks: {
                // See https://go.microsoft.com/fwlink/?LinkId=733558
                // for the documentation about the tasks.json format
                'version': '0.1.0',
                'command': 'navi',
                'isShellCommand': true,
                'showOutput': 'always',
                'suppressTaskName': true,
                'tasks': [{
                        'taskName': 'install',
                        'args': [
                            'start'
                        ],
                        'isBuildCommand': true
                    }
                ]
            }
        };
    })(VSCODE = Tools.VSCODE || (Tools.VSCODE = {}));
    //#endregion
    //#region helpers
    function globalArgumentsParser(argsv) {
        var options = require('minimist')(argsv);
        var toCheck = {
            'tnpNonInteractive': void 0,
            'findNearestProject': void 0,
            'findNearestProjectWithGitRoot': void 0,
            'findNearestProjectType': void 0,
            'findNearestProjectTypeWithGitRoot': void 0,
            'cwd': void 0
        };
        Object.keys(toCheck).forEach(function (key) {
            toCheck[key] = options[key];
        });
        options = tnp_core_1._.cloneDeep(toCheck);
        var findNearestProjectWithGitRoot = options.findNearestProjectWithGitRoot, findNearestProjectTypeWithGitRoot = options.findNearestProjectTypeWithGitRoot, cwd = options.cwd;
        var findNearestProject = options.findNearestProject, findNearestProjectType = options.findNearestProjectType;
        Object
            .keys(options)
            .filter(function (key) { return key.startsWith('tnp'); })
            .forEach(function (key) {
            options[key] = !!options[key];
            global[key] = options[key];
        });
        var cwdFromArgs = cwd;
        var findProjectWithGitRoot = !!findNearestProjectWithGitRoot ||
            !!findNearestProjectTypeWithGitRoot;
        if (!!findNearestProjectWithGitRoot) {
            findNearestProject = findNearestProjectWithGitRoot;
        }
        if (tnp_core_1._.isString(findNearestProjectTypeWithGitRoot)) {
            findNearestProjectType = findNearestProjectTypeWithGitRoot;
        }
        if (tnp_core_1._.isString(cwdFromArgs)) {
            var nearest = void 0;
            if (findNearestProject || tnp_core_1._.isString(findNearestProjectType)) {
                var classProject = typescript_class_helpers_1.CLASS.getBy('Project');
                nearest = classProject.nearestTo(cwdFromArgs, {
                    type: findNearestProjectType,
                    findGitRoot: findProjectWithGitRoot,
                });
                if (!nearest) {
                    tnp_helpers_1.Helpers.error("Not able to find neerest project for arguments: [\n " + argsv.join(',\n') + "\n]", false, true);
                }
            }
            if (nearest) {
                cwdFromArgs = nearest.location;
            }
            if (tnp_core_1.fse.existsSync(cwdFromArgs) && !tnp_core_1.fse.lstatSync(cwdFromArgs).isDirectory()) {
                cwdFromArgs = tnp_core_1.path.dirname(cwdFromArgs);
            }
            if (tnp_core_1.fse.existsSync(cwdFromArgs) && tnp_core_1.fse.lstatSync(cwdFromArgs).isDirectory()) {
                process.chdir(cwdFromArgs);
            }
            else {
                tnp_helpers_1.Helpers.error("Incorrect --cwd argument for args: [\n " + argsv.join(',\n') + "\n]", false, true);
            }
        }
        argsv = removeArg('findNearestProjectType', argsv);
        Object.keys(toCheck).forEach(function (argName) {
            argsv = removeArg(argName, argsv);
        });
        return argsv;
    }
    Tools.globalArgumentsParser = globalArgumentsParser;
    function removeArg(arg, argsv) {
        argsv = argsv.filter(function (f, i) {
            var regexString = "^\\-\\-(" + arg + "$|" + arg + "\\=)+";
            if ((new RegExp(regexString)).test(f)) {
                var nextParam = argsv[i + 1];
                if (nextParam && !nextParam.startsWith("--")) {
                    argsv[i + 1] = '';
                }
                return false;
            }
            return true;
        }).filter(function (f) { return !!f; });
        return argsv;
    }
    var FileOperations = /** @class */ (function () {
        function FileOperations(project) {
            this.project = project;
        }
        FileOperations.prototype.findDecoratedFilesInBaselineFor = function (relativePathToFile) {
            var _this = this;
            var cwd = this.project.parent.location;
            var files = tnp_core_1.glob.sync("custom/**/*.*", {
                cwd: cwd
            }).map(function (f) {
                return {
                    fileName: tnp_core_1.path.basename(f),
                    realtivePathToFile: f,
                    absoluteLocation: tnp_core_1.path.join(cwd, f)
                };
            });
            var exactMatcheRelative = files.filter(function (f) {
                var relativeFromCustom = f.realtivePathToFile.split('/').slice(2).join('/');
                return relativeFromCustom === relativePathToFile;
            });
            var exactMatchesBasename = files.filter(function (f) {
                return tnp_core_1.path.basename(f.realtivePathToFile) === tnp_core_1.path.basename(relativePathToFile);
            });
            var query = tnp_core_1._.kebabCase(tnp_helpers_1.Helpers.path.removeExt(tnp_core_1.path.basename(relativePathToFile)));
            var exactMatchesDecorator = files
                .filter(function (f) { return f.fileName.search('decorator') !== -1; })
                .filter(function (f) {
                var decorator = tnp_core_1._.kebabCase(tnp_helpers_1.Helpers.path.removeExt(f.fileName));
                decorator = decorator.replace('decorators', '');
                decorator = decorator.replace('decorator', '');
                decorator = tnp_core_1._.kebabCase(decorator);
                return query === decorator;
            });
            var results = tslib_1.__spreadArray(tslib_1.__spreadArray(tslib_1.__spreadArray([], exactMatcheRelative), exactMatchesBasename), exactMatchesDecorator);
            var seen = {};
            return tslib_1.__spreadArray([], results
                .filter(function (c) {
                if (seen[c.absoluteLocation]) {
                    return false;
                }
                seen[c.absoluteLocation] = true;
                return true;
            })
                .map(function (c) {
                return { option: c.absoluteLocation, label: _this.project.parent.name + " - " + c.fileName };
            }));
        };
        FileOperations.prototype.findSourceOfDecoratedFile = function (decoratedFileRelativePath) {
            var relativeFromCustom = decoratedFileRelativePath.split('/');
            var moduleName = relativeFromCustom[1];
            var relativePath = decoratedFileRelativePath.split('/').slice(2).join('/');
            var child = this.project.children.find(function (c) { return c.name === moduleName; });
            if (child) {
                var cwd_1 = child.location;
                var files = tnp_core_1.glob.sync("src/**/*.*", {
                    cwd: cwd_1
                }).map(function (f) {
                    return {
                        cleaned: tnp_core_1._.kebabCase(tnp_core_1.path.basename(tnp_helpers_1.Helpers.path.removeExt(f))),
                        fileName: tnp_core_1.path.basename(f),
                        realtivePathToFile: f,
                        absoluteLocation: tnp_core_1.path.join(cwd_1, f)
                    };
                });
                var cleanedRelativePath_1 = tnp_core_1._.kebabCase(tnp_core_1.path.basename(tnp_helpers_1.Helpers.path.removeExt(relativePath
                    .replace('decorators', '')
                    .replace('decorator', ''))));
                var cleanedRelativePathOrg = cleanedRelativePath_1;
                var exactMatch = files.find(function (_a) {
                    var cleaned = _a.cleaned;
                    return cleaned === cleanedRelativePath_1;
                });
                if (!exactMatch) {
                    cleanedRelativePath_1 = cleanedRelativePathOrg.replace('controller', 'container');
                    exactMatch = files.find(function (_a) {
                        var cleaned = _a.cleaned;
                        return cleaned === cleanedRelativePath_1;
                    });
                }
                if (!exactMatch) {
                    cleanedRelativePath_1 = cleanedRelativePathOrg.replace('container', 'controller');
                    exactMatch = files.find(function (_a) {
                        var cleaned = _a.cleaned;
                        return cleaned === cleanedRelativePath_1;
                    });
                }
                if (!exactMatch) {
                    cleanedRelativePath_1 = cleanedRelativePathOrg.replace('component', 'controller');
                    exactMatch = files.find(function (_a) {
                        var cleaned = _a.cleaned;
                        return cleaned === cleanedRelativePath_1;
                    });
                }
                if (!exactMatch) {
                    cleanedRelativePath_1 = cleanedRelativePathOrg.replace('controller', 'component');
                    exactMatch = files.find(function (_a) {
                        var cleaned = _a.cleaned;
                        return cleaned === cleanedRelativePath_1;
                    });
                }
                if (!exactMatch) {
                    cleanedRelativePath_1 = cleanedRelativePathOrg.replace('component', 'container');
                    exactMatch = files.find(function (_a) {
                        var cleaned = _a.cleaned;
                        return cleaned === cleanedRelativePath_1;
                    });
                }
                if (!exactMatch) {
                    cleanedRelativePath_1 = cleanedRelativePathOrg.replace('container', 'component');
                    exactMatch = files.find(function (_a) {
                        var cleaned = _a.cleaned;
                        return cleaned === cleanedRelativePath_1;
                    });
                }
                if (exactMatch) {
                    tnp_helpers_1.Helpers.run("navi goto " + exactMatch.absoluteLocation).sync();
                    return;
                }
                else {
                    tnp_helpers_1.Helpers.error("Not able to find exact match for module: '" + moduleName + "' from file: " + decoratedFileRelativePath + "\n\n        cleanedRelativePath: " + cleanedRelativePath_1 + "\n\n        files: " + files.map(function (c) { return c.cleaned; }).join('\n') + "\n        ", false, true);
                }
            }
            tnp_helpers_1.Helpers.error("Not able to find module: '" + moduleName + "' from file: " + decoratedFileRelativePath, false, true);
        };
        return FileOperations;
    }());
    Tools.FileOperations = FileOperations;
    var NavigatorBusinessModule = /** @class */ (function () {
        function NavigatorBusinessModule(moduleConfig) {
            Object.assign(this, moduleConfig);
        }
        return NavigatorBusinessModule;
    }());
    Tools.NavigatorBusinessModule = NavigatorBusinessModule;
    var NavigatorProjectInfoConfig = /** @class */ (function (_super) {
        tslib_1.__extends(NavigatorProjectInfoConfig, _super);
        function NavigatorProjectInfoConfig() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.codeStyle = 'mixed';
            return _this;
        }
        return NavigatorProjectInfoConfig;
    }(NavigatorBusinessModule));
    Tools.NavigatorProjectInfoConfig = NavigatorProjectInfoConfig;
    var NavigatorProjectInfo = /** @class */ (function (_super) {
        tslib_1.__extends(NavigatorProjectInfo, _super);
        function NavigatorProjectInfo(projectConfig) {
            var _this = _super.call(this, projectConfig) || this;
            _this.projectConfig = projectConfig;
            projectConfig.etcHostsAliases = tnp_core_1._.keys(projectConfig.etcHostsAliases).reduce(function (prev, hostName) {
                var _a;
                var host = Tools.HostForServer.From(projectConfig.etcHostsAliases[hostName], "Alias for '" + tnp_cli_1.CLI.chalk.bold(hostName) + "' in site " + tnp_cli_1.CLI.chalk.bold(_this.name));
                return tnp_core_1._.merge(prev, (_a = {},
                    _a[hostName] = host,
                    _a));
            }, {});
            var value = projectConfig;
            Tools.ServerOptionsLocalConfig16.forEach(function (transformKey) {
                if (value[transformKey]) {
                    var defaultObject_1 = value[transformKey].default;
                    var foundedINOther = (tnp_core_1._.keys(value[transformKey].other)
                        .map(function (nameOfServer) {
                        var f = value[transformKey].other[nameOfServer];
                        f.name = nameOfServer;
                        return f;
                    }).find(function (f) {
                        return (tnp_core_1._.isString(f.domain) && (f.domain.trim() !== '') && (f.domain === defaultObject_1.domain)) ||
                            (tnp_core_1._.isString(f.ip) && (f.ip.trim() !== '') && (f.ip === defaultObject_1.ip));
                    }) || {});
                    defaultObject_1.name = foundedINOther.name;
                    value[transformKey].default = new Tools.HostForServer(defaultObject_1);
                    tnp_core_1._.keys(value[transformKey].other).forEach(function (nameOfServer) {
                        var objectForClass = value[transformKey].other[nameOfServer];
                        objectForClass.name = nameOfServer;
                        value[transformKey].other[nameOfServer] = new Tools.HostForServer(objectForClass);
                    });
                }
            });
            Object.assign(_this, projectConfig);
            return _this;
        }
        Object.defineProperty(NavigatorProjectInfo.prototype, "name", {
            get: function () {
                return tnp_core_1.path.basename(this.url).replace(/\.git$/, '');
            },
            enumerable: false,
            configurable: true
        });
        NavigatorProjectInfo.prototype.cloneTo = function (folderUrl) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var dest, res;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            dest = tnp_core_1.path.join(folderUrl, this.name);
                            if (!tnp_core_1.fse.existsSync(dest)) return [3 /*break*/, 2];
                            return [4 /*yield*/, tnp_helpers_1.Helpers.questionYesNo("Folder " + this.name + " alredy exist, delete it ?")];
                        case 1:
                            res = _a.sent();
                            if (res) {
                                tnp_helpers_1.Helpers.tryRemoveDir(dest);
                            }
                            else {
                                tnp_helpers_1.Helpers.pressKeyAndContinue('Operation not completed... press any key');
                                return [2 /*return*/, false];
                            }
                            _a.label = 2;
                        case 2:
                            console.log("Cloning " + this.name + "...");
                            tnp_helpers_1.Helpers.git.clone({ cwd: folderUrl, url: this.url });
                            tnp_helpers_1.Helpers.info("Clone success");
                            return [2 /*return*/, true];
                    }
                });
            });
        };
        return NavigatorProjectInfo;
    }(NavigatorProjectInfoConfig));
    Tools.NavigatorProjectInfo = NavigatorProjectInfo;
    //#endregion
    //#region global deps config
    Tools.GlobalDepsConfig = {
        npm: [
            { name: 'npm-run', version: '4.1.2' },
            { name: 'rimraf' },
            { name: 'mkdirp' },
            { name: 'renamer', version: '2.0.1' },
            { name: 'http-server' },
            { name: 'bower' },
            { name: 'fkill', installName: 'fkill-cli' },
            { name: 'ts-node' },
            { name: 'vsce' },
            { name: 'yarn' },
            { name: 'yo' },
            { name: 'check-node-version' },
            { name: 'vsce' }
        ],
        programs: []
    };
    //#endregion
    //#region module fix
    function moduleFix(moduleNAme) {
        if (!(Tools.ModulesForDecorationArr.includes(moduleNAme))) {
            if (moduleNAme === 'common') {
                moduleNAme = "es-" + moduleNAme;
            }
            else {
                moduleNAme = "es-" + moduleNAme + "-ui";
            }
        }
        return moduleNAme;
    }
    Tools.moduleFix = moduleFix;
    //#endregion
})(Tools = exports.Tools || (exports.Tools = {}));
//# sourceMappingURL=tools.backend.js.map