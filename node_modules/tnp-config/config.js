"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * Dariusz Filipiak
 * @author darekf77@gmail.com
 * Recommended config for all isomorphic libs *
 */
//#region @backend
var tnp_core_1 = require("tnp-core");
if (global && !global['ENV']) {
    global['ENV'] = {};
}
var tnp_core_2 = require("tnp-core");
exports.Helpers = tnp_core_2.CoreHelpers;
exports.GlobalIsomorphicDependencies = {
    npm: [
        { name: 'rimraf' },
        { name: 'npm-run', version: '4.1.2' },
        { name: 'cpr' },
        { name: 'check-node-version' },
        { name: 'vsce' },
    ],
    programs: [
    // {
    //   name: 'code',
    //   website: 'https://code.visualstudio.com/'
    // }
    ]
};
exports.GlobalLibTypeName = {
    isomorphicLib: 'isomorphic-lib',
    angularLib: 'angular-lib',
    electronClient: 'electron-client',
    ionicLib: 'ionic-lib',
    angularClient: 'angular-client',
    ionicClient: 'ionic-client',
    workspace: 'workspace',
    container: 'container',
    docker: 'docker',
    unknowNpmProject: 'unknow-npm-project',
    vscodeExt: 'vscode-ext',
    chromeExt: 'chrome-ext',
    singleFileProject: 'single-file-project',
    navi: 'navi',
    scenario: 'scenario'
};
exports.LibTypeArr = [
    exports.GlobalLibTypeName.angularLib,
    exports.GlobalLibTypeName.isomorphicLib,
    exports.GlobalLibTypeName.angularClient,
    exports.GlobalLibTypeName.ionicClient,
    exports.GlobalLibTypeName.electronClient,
    exports.GlobalLibTypeName.workspace,
    exports.GlobalLibTypeName.container,
    exports.GlobalLibTypeName.docker,
    exports.GlobalLibTypeName.unknowNpmProject,
    exports.GlobalLibTypeName.vscodeExt,
    exports.GlobalLibTypeName.chromeExt,
    exports.GlobalLibTypeName.navi,
    exports.GlobalLibTypeName.scenario,
];
exports.CoreLibCategoryArr = [
    exports.GlobalLibTypeName.angularLib,
    exports.GlobalLibTypeName.isomorphicLib,
    exports.GlobalLibTypeName.angularClient,
    exports.GlobalLibTypeName.electronClient,
    exports.GlobalLibTypeName.ionicClient,
    exports.GlobalLibTypeName.docker,
    'common'
];
//#endregion
var allowedEnvironments = ['static', 'dev', 'prod', 'stage', 'online', 'test', 'qa', 'custom'];
var allowedEnvironmentsObj = {};
allowedEnvironments.forEach(function (s) {
    allowedEnvironmentsObj[s] = s;
});
var firedev = 'firedev';
var morphi = 'morphi';
var urlMorphi = 'https://github.com/darekf77/morphi.git';
var filesNotAllowedToClean = {
    _gitignore: '.gitignore',
    _npmrc: '.npmrc',
    _npmignore: '.npmignore',
    tslint_json: 'tslint.json',
    _editorconfig: '.editorconfig',
    _angularCli_json: '.angular-cli.json',
    _vscode_launch_json: '.vscode/launch.json',
};
var file = tslib_1.__assign({ _bowerrc: '.bowerrc', bower_json: 'bower.json', controllers_ts: 'controllers.ts', entities_ts: 'entities.ts', autob_actions_js: 'auto-actions.js', local_config_js: 'local-config.js', build_config_js: 'build-config.js', local_config: 'local-config', start_backend_ts: 'start.backend.ts', package_json: 'package.json', package_json5: 'package.json5', package_json__tnp_json: 'package.json_tnp.json', package_json__devDependencies_json: 'package.json_devDependencies.json', yarn_lock: 'yarn.lock', package_lock_json: 'package-lock.json', tnpEnvironment_json: 'tmp-environment.json', environment: 'environment', environment_js: 'environment.js', tmp_transaction_pid_txt: 'tmp-transaction-pid.txt', manifest_webmanifest: 'manifest.webmanifest', publicApi_ts: 'public_api.ts', publicApi_d_ts: 'public_api.d.ts', _babelrc: '.babelrc', index_d_ts: 'index.d.ts', index_ts: 'index.ts', index_js: 'index.js', index_js_map: 'index.js.map', db_json: 'db.json', db_for_tests_json: 'db-for-tests.json', tmpDockerImageId: 'tmp-docker-image-id', tmp_recent_json: 'recent.json', tmpIsomorphicPackagesJson: 'tmp-isomorphic-packages.json', tsconfig_json: 'tsconfig.json', README_MD: 'README.md', server_key: 'server.key', server_cert: 'server.cert', server_chain_cert: 'server-chain.cert', meta_config_md: 'meta-content.md' }, filesNotAllowedToClean);
var packageJsonSplit = [
    file.package_json__tnp_json,
    file.package_json__devDependencies_json,
];
var tempFolders = {
    bundle: 'bundle',
    vendor: 'vendor',
    docs: 'docs',
    dist: 'dist',
    tmp: 'tmp',
    tmpBundleRelease: 'tmp-bundle-release',
    tempSrc: 'tmp-src',
    tempSrcDist: 'tmp-src-dist',
    previewDistApp: 'dist-app',
    preview: 'preview',
    browser: 'browser',
    _browser: '.browser',
    module: 'module',
    backup: 'backup',
    node_modules: 'node_modules',
    client: 'client',
    tnp_tests_context: 'tmp-tests-context',
    tmpPackage: 'tmp-package',
    tmpScenarios: 'tmp-scenarios',
    tmpTestsEnvironments: 'tmp-tests-environments',
    testsEnvironments: 'tests-environments',
};
var folder = tslib_1.__assign({ scripts: 'scripts', scenarios: 'scenarios', bower: 'bower', src: 'src', out: 'out', custom: 'custom', components: 'components', assets: 'assets', apps: 'apps', 
    // entities: 'entities',
    // controllers: 'controllers',
    // projects: 'projects',
    workspace: 'workspace', container: 'container', bin: 'bin', _bin: '.bin', _vscode: '.vscode', project: 'project', external: 'external', tmpDist: 'tmp-dist' }, tempFolders);
// @LAST RESOLVE TNP LOCATION !!! for each context and RELEASE TNP-CONFIG
var dirnameForTnp;
//#region @backend
dirnameForTnp = tnp_core_1.crossPlatformPath(__dirname);
//#endregion
var firedevProjectsRelative = "../firedev-projects";
//#region @backend
if (process.platform === 'win32' && dirnameForTnp.endsWith('dist')) { // TODO QUICK_FIX for windows
    dirnameForTnp = tnp_core_1.crossPlatformPath(tnp_core_1.path.dirname(dirnameForTnp));
}
if (dirnameForTnp.endsWith("/tnp-config/dist")) {
    // local folder with tnp
    dirnameForTnp = dirnameForTnp.replace("/tnp-config/dist", '/tnp');
}
else if (dirnameForTnp.endsWith("/tnp/node_modules/tnp-config")) {
    // local folder with tnp
    dirnameForTnp = dirnameForTnp.replace("/tnp/node_modules/tnp-config", '/tnp');
}
else {
    // global tnp node_modules being use in firedev case
    dirnameForTnp = dirnameForTnp.replace(/\/tnp\-config$/, '/tnp');
}
// console.log('dirnameForTnp after', dirnameForTnp)
// process.exit(0)
// TODO
// !global.hideLog && console.log(`tnp from: ${tnp_folder_location}`);
// process.exit(0)
//#endregion
//#region @backend
function pathResolved() {
    // console.log('pathResolved', partOfPath);
    var partOfPath = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        partOfPath[_i] = arguments[_i];
    }
    if (global['frameworkName'] && global['frameworkName'] === firedev) {
        var joined = partOfPath.join('/');
        var projectsInUserFolder = tnp_core_1.path.join(tnp_core_1.crossPlatformPath(tnp_core_1.os.homedir()), firedev, morphi, 'projects');
        var pathResult = joined.replace((dirnameForTnp + '/' + firedevProjectsRelative), projectsInUserFolder);
        pathResult = tnp_core_1.crossPlatformPath(tnp_core_1.path.resolve(pathResult));
        var morphiPathUserInUserDir = tnp_core_1.path.join(tnp_core_1.crossPlatformPath(tnp_core_1.os.homedir()), firedev, morphi);
        if (pathResolved.prototype.resolved) {
            // console.info(`Firedev base projects in are ok.`);
        }
        else {
            if (!tnp_core_1.fse.existsSync(morphiPathUserInUserDir)) {
                if (!tnp_core_1.fse.existsSync(tnp_core_1.path.dirname(morphiPathUserInUserDir))) {
                    tnp_core_1.fse.mkdirpSync(tnp_core_1.path.dirname(morphiPathUserInUserDir));
                }
                try {
                    tnp_core_1.child_process.execSync("git clone " + urlMorphi, { cwd: tnp_core_1.path.dirname(morphiPathUserInUserDir) });
                    tnp_core_1.fse.removeSync(tnp_core_1.path.join(tnp_core_1.path.dirname(morphiPathUserInUserDir), 'morphi/.vscode'));
                }
                catch (error) {
                    console.error("[config] Not able to clone repository: " + urlMorphi + " in:\n           " + morphiPathUserInUserDir);
                }
            }
            else {
                try {
                    tnp_core_1.child_process.execSync("git reset --hard && git pull origin master", { cwd: morphiPathUserInUserDir });
                    tnp_core_1.fse.removeSync(tnp_core_1.path.join(tnp_core_1.path.dirname(morphiPathUserInUserDir), 'morphi/.vscode'));
                }
                catch (error) {
                    console.error("[config] Not pull origin of morphi: " + urlMorphi + " in:\n          " + morphiPathUserInUserDir);
                }
            }
            pathResolved.prototype.resolved = true;
        }
        return pathResult;
    }
    return tnp_core_1.crossPlatformPath(tnp_core_1.path.resolve(tnp_core_1.path.join.apply(tnp_core_1.path, partOfPath)));
}
//#endregion
var moduleNameAngularLib = [
    folder.components,
    folder.module,
    folder.dist,
    folder.browser,
];
var moduleNameIsomorphicLib = [
    folder.src,
    folder.dist,
    folder.browser,
];
var argsReplacementsBuild = {
    'baw': 'build:app:watch',
    'ba': 'build:app',
    'bap': 'build:app:prod',
    'bdw': 'build:dist:watch',
    'bw': 'build:watch',
    'bdpw': 'build:dist:prod:watch',
    'bd': 'build:dist',
    'bb': 'build:bundle',
    'bbp': 'build:bundle:prod',
    'bbpw': 'build:bundle:prod:watch',
    'bbw': 'build:bundle:watch',
    'sb': 'static:build',
    'sbp': 'static:build:prod',
    'sbd': 'static:build:dist',
    'sbl': 'static:build:lib',
    'sba': 'static:build:app',
    'cb': 'clean:build'
};
exports.config = {
    //#region @backend
    get dbLocation() {
        var dbFileName = exports.config.file.db_json;
        if (global.testMode) {
            dbFileName = exports.config.file.db_for_tests_json;
        }
        var location = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(tnp_core_1.crossPlatformPath(tnp_core_1.os.homedir()), "" + exports.config.frameworkName, dbFileName));
        return location;
    },
    //#endregion
    coreProjectVersions: ['v1', 'v2'],
    quickFixes: {
        missingLibs: [
            'react-native-sqlite-storage'
        ]
    },
    packageJsonSplit: packageJsonSplit,
    regexString: {
        pathPartStringRegex: "(/([a-zA-Z0-9]|\\-|\\_|\\+|\\.)*)"
    },
    placeholders: {
        forProjectsInEnvironmentFile: '//<PLACEHOLDER_FOR_PROJECTS>'
    },
    array: {
        isomorphicPackages: 'isomorphicPackages'
    },
    defaultFrameworkVersion: 'v1',
    CONST: {
        UNIT_TEST_TIMEOUT: 5000,
        INTEGRATION_TEST: 30000,
    },
    debug: {
        sourceModifier: [],
        baselineSiteJoin: {
            DEBUG_PATHES: [
            // "src/apps/auth/AuthController.ts",
            // '/src/app/+preview-components/preview-components.component.ts',
            // '/src/controllers.ts',
            // '/src/app/+preview-components/components/+preview-buildtnpprocess/preview-buildtnpprocess.component.ts'
            ],
            DEBUG_MERGE_PATHES: [
            // "src/apps/auth/AuthController.ts",
            // '/src/app/+preview-components/components/+preview-buildtnpprocess/preview-buildtnpprocess.component.ts'
            // '/components/formly/base-components/editor/editor-wrapper.component.ts'
            // '/src/app/+preview-components/components/+preview-buildtnpprocess/preview-buildtnpprocess.component.ts'
            ]
        }
    },
    frameworkName: (global['frameworkName'] ? global['frameworkName'] : 'tnp'),
    startPort: 6001,
    frameworks: ['bootstrap', 'ionic', 'material'],
    //#region @backend
    argsReplacementsBuild: argsReplacementsBuild,
    argsGlobalFlags: [
        '-verbose',
        '-firedev',
        '-reinitDb',
        '-restartWorker',
        '-useWorker',
        '-dist',
        '-bundle',
    ],
    argsReplacements: tslib_1.__assign(tslib_1.__assign({}, argsReplacementsBuild), { 'ghpush': 'githubpush', 'ghpull': 'githubpull', 'l': 'last', 'sl': 'show:last', 'i': 'install', 'si': 'sinstall', 'il': 'install:locally', 'rc': 'recommit', 'rp': 'release:prod', 'r': 'release', 'lb': 'last:build', 'scm': 'showcoremodules', '--version': 'version', '-v': 'version', 'tpu': 'target:proj:update' }),
    coreBuildFrameworkNames: [
        'tnp',
        'tnp-ins',
        'tnp-debug',
        'firedev',
        'firedev-debug',
        'firedev-ins',
        'morphi',
        'morphi-debug',
        'morphi-ins',
    ],
    ports: {
        // VPN_SPLIT_CLIENT: 5656,
        VPN_SPLIT_SERVER: 5757,
    },
    domains: {
        localhost: 'localhost',
        firedev_io: 'firedev.io',
    },
    pathes: {
        logoSvg: 'logo.svg',
        logoPng: 'logo.png',
        /**
         * Location of compiled source code for tnp framework
         * Can be in 3 places:
         * - <..>/tnp/dist @DEPRACATED
         * - <..>/tnp/bundle @DEPRACATED
         * - <some-project>/node_modules/tnp @DEPRACATED
         *  - <some-project>/node_modules/tnp-config
        */
        tnp_folder_location: dirnameForTnp,
        tnp_vscode_ext_location: pathResolved(dirnameForTnp, firedevProjectsRelative, 'plugins', 'tnp-vscode-ext'),
        tnp_tests_context: pathResolved(dirnameForTnp, folder.tnp_tests_context),
        tnp_db_for_tests_json: pathResolved(dirnameForTnp, folder.bin, file.db_for_tests_json),
        scripts: {
            HELP_js: pathResolved(dirnameForTnp, folder.scripts, 'HELP.js'),
            allHelpFiles: tnp_core_1.path.join(dirnameForTnp, folder.scripts, '/**/*.js'),
            allPattern: tnp_core_1.path.join(dirnameForTnp, "/" + folder.scripts + "/**/*.js"),
        },
        projectsExamples: function (version) {
            version = (!version || version === 'v1') ? '' : "-" + version;
            var result = {
                workspace: pathResolved(dirnameForTnp, firedevProjectsRelative + "/container" + version + "/workspace" + version),
                container: pathResolved(dirnameForTnp, firedevProjectsRelative + "/container" + version),
                projectByType: function (libType) {
                    if (libType === 'vscode-ext') {
                        // @ts-ignore
                        if (version === '') { // TODO current version handle somehow
                            // @ts-ignore
                            version = '-v2';
                        }
                        return pathResolved(dirnameForTnp, firedevProjectsRelative + "/container" + version + "/" + libType + version);
                    }
                    return pathResolved(dirnameForTnp, firedevProjectsRelative + "/container" + version + "/workspace" + version + "/" + libType + version);
                },
                singlefileproject: pathResolved(dirnameForTnp, firedevProjectsRelative + "/container" + version + "/single-file-project" + version)
            };
            return result;
        }
    },
    //#endregion
    allowedEnvironments: allowedEnvironments,
    folder: folder,
    tempFolders: tempFolders,
    filesNotAllowedToClean: Object.keys(filesNotAllowedToClean).map(function (key) { return filesNotAllowedToClean[key]; }),
    file: file,
    default: {
        cloud: {
            environment: {
                name: 'online'
            }
        }
    },
    SUBERIZED_PREFIX: "---stuberized",
    names: {
        env: allowedEnvironmentsObj,
        baseline: 'baseline',
        defaultServer: 'default server',
    },
    extensions: {
        /**
           * Modify source: import,export, requires
           */
        get modificableByReplaceFn() {
            return [
                'ts',
                'js',
                'css',
                'sass',
                'scss',
                'less',
            ].map(function (f) { return "." + f; });
        },
    },
    notFiredevProjects: [
        'unknow', 'unknow-npm-project', 'scenario', 'navi'
    ],
    /**
     * Build allowed types
     */
    allowedTypes: {
        /**
         * Projects for build:app:watch command
         */
        app: [
            exports.GlobalLibTypeName.angularClient,
            exports.GlobalLibTypeName.angularLib,
            exports.GlobalLibTypeName.isomorphicLib,
            exports.GlobalLibTypeName.ionicClient,
            exports.GlobalLibTypeName.docker,
            exports.GlobalLibTypeName.container,
            exports.GlobalLibTypeName.vscodeExt,
        ],
        /**
         * Projects for build:(dist|bundle):(watch) command
         */
        libs: [
            exports.GlobalLibTypeName.angularLib,
            exports.GlobalLibTypeName.isomorphicLib,
            exports.GlobalLibTypeName.workspace,
            exports.GlobalLibTypeName.container,
            exports.GlobalLibTypeName.docker,
            exports.GlobalLibTypeName.vscodeExt,
        ]
    },
    moduleNameAngularLib: moduleNameAngularLib,
    moduleNameIsomorphicLib: moduleNameIsomorphicLib,
    filesExtensions: {
        filetemplate: 'filetemplate'
    },
    projectTypes: {
        forNpmLibs: [
            exports.GlobalLibTypeName.angularLib,
            exports.GlobalLibTypeName.isomorphicLib,
        ],
        with: {
            angularAsCore: [
                exports.GlobalLibTypeName.angularClient,
                exports.GlobalLibTypeName.angularLib,
                exports.GlobalLibTypeName.ionicClient,
            ],
            componetsAsSrc: [
                exports.GlobalLibTypeName.angularLib,
            ],
        }
    },
    // environmentName,
    localLibs: [
        'eslint',
        'mkdirp',
        'gulp',
        'npm-run',
        'rimraf',
        'nodemon',
        'release-it',
        'tsc',
        'watch',
        'http-server',
        'ts-node',
        'sort-package-json',
        'concurrently',
        'sloc',
        'morphi'
    ],
    helpAlias: [
        '-h',
        '--help',
        '-help',
        'help'
    ],
    required: {
        npm: [
            { name: 'extract-zip', version: '1.6.7' },
            { name: 'watch', version: '1.0.2' },
            { name: 'check-node-version' },
            { name: 'npm-run', version: '4.1.2' },
            { name: 'rimraf' },
            { name: 'mkdirp' },
            { name: 'renamer' },
            { name: 'nodemon' },
            { name: 'madge' },
            { name: 'http-server' },
            { name: 'increase-memory-limit' },
            { name: 'bower' },
            { name: 'fkill', installName: 'fkill-cli' },
            { name: 'yo' },
            { name: 'mocha' },
            // { name: 'chai' },
            { name: 'ts-node' },
            { name: 'vsce' },
            { name: 'stmux' },
            { name: 'webpack-bundle-analyzer' },
            { name: 'ng', installName: '@angular/cli' },
            { name: 'ngx-pwa-icons', version: '0.1.2' },
            { name: 'real-favicon', installName: 'cli-real-favicon' },
            { name: 'babel', installName: 'babel-cli' },
            { name: 'javascript-obfuscator' },
            { name: 'uglifyjs', installName: 'uglify-js' },
        ],
        niceTools: [
            { name: 'speed-test' },
            { name: 'npm-name' },
            { name: 'vantage', platform: 'linux' },
            { name: 'clinic', platform: 'linux' },
            { name: 'vtop', platform: 'linux' },
            { name: 'public-ip' },
            { name: 'empty-trash' },
            { name: 'is-up' },
            { name: 'is-online' },
            { name: 'ttystudio' },
            { name: 'bcat' },
            { name: 'wifi-password', installName: 'wifi-password-cli' },
            { name: 'wallpaper', installName: 'wallpaper-cli' },
            { name: 'brightness', installName: 'brightness-cli' },
            { name: 'subdownloader' },
            { name: 'rtail' },
            { name: 'iponmap' },
            { name: 'jsome' },
            { name: 'drawille', isNotCli: true },
            { name: 'columnify', isNotCli: true },
            { name: 'multispinner', isNotCli: true },
            { name: 'cfonts' },
        ],
        programs: [,
            {
                name: 'code',
                website: 'https://code.visualstudio.com/'
            }
        ]
    }
};
//# sourceMappingURL=config.js.map