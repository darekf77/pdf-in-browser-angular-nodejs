"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var symbols_1 = require("./symbols");
var storage_1 = require("./storage");
var classname_1 = require("./classname");
var index_1 = require("./index");
function getClasses() {
    var s = storage_1.getStorage();
    return s[symbols_1.SYMBOL.CLASSES];
}
function setClassName(target, className, options) {
    var _a = options || {
        classFamily: void 0,
        uniqueKey: 'id',
        classNameInBrowser: void 0,
        singleton: void 0,
        autoinstance: false
    }, classFamily = _a.classFamily, uniqueKey = _a.uniqueKey, classNameInBrowser = _a.classNameInBrowser, singleton = _a.singleton;
    if (!tnp_core_1._.isUndefined(singleton) && tnp_core_1._.isBoolean(singleton) && singleton) {
        singleton = 'first-instance';
    }
    if (!uniqueKey) {
        uniqueKey = 'id';
    }
    if (target) {
        target[symbols_1.SYMBOL.CLASSNAMEKEY] = className;
        target[symbols_1.SYMBOL.CLASSNAMEKEYBROWSER] = classNameInBrowser;
    }
    var existed = getClasses()
        .find(function (f) { return f.className === className; });
    if (existed) {
        existed.target = target;
    }
    else {
        var res = {
            className: className,
            classNameInBrowser: classNameInBrowser,
            target: target,
            uniqueKey: uniqueKey,
            classFamily: classFamily
        };
        if (tnp_core_1._.isUndefined(classFamily)) {
            Object.defineProperty(res, 'classFamily', {
                get: function () {
                    var parent = Object.getPrototypeOf(target);
                    if (!tnp_core_1._.isFunction(parent) || parent.name === 'Object' || parent.name === '') {
                        return className;
                    }
                    var classNameNew = classname_1.CLASSNAME.getClassName(parent);
                    return classname_1.CLASSNAME.getClassFamilyByClassName(classNameNew);
                }
            });
        }
        getClasses().push(res);
    }
    var Original = target;
    if (singleton === 'first-instance' || singleton === 'last-instance') {
        var obj_1 = {
            decoratedConstructor: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // console.log(`DECORATED CONSTRUCTOR OF ${Original.name}`)
                var context = Original.apply(this, args);
                var existedSingleton = index_1.CLASS.getSingleton(Original);
                if (!existedSingleton || singleton === 'last-instance') {
                    index_1.CLASS.setSingletonObj(Original, this);
                    index_1.CLASS.setSingletonObj(obj_1.decoratedConstructor, this);
                    // console.log(`Singleton created for "${className}", mode: ${singleton} `);
                }
                else {
                    // console.log('ingleton exists')
                }
                return context;
            }
        };
        // copy prototype so intanceof operator still works
        obj_1.decoratedConstructor.prototype = Original.prototype;
        Object.keys(Original).forEach(function (name) { obj_1.decoratedConstructor[name] = Original[name]; });
        Object.defineProperty(obj_1.decoratedConstructor, 'name', {
            value: className,
            configurable: true,
        });
        // (obj.decoratedConstructor as any).name = className;
        // console.log('return new contruor', decoratedConstructor)
        return obj_1.decoratedConstructor;
    }
    else if (singleton === 'autoinstance') {
        // console.log(`AUTOINSTANCE FOR ${target.name}`)
        var auto = new Original();
        index_1.CLASS.setSingletonObj(Original, auto);
        // console.log(`Singleton created for "${className}", mode: ${singleton} `)
    }
}
exports.setClassName = setClassName;
//# sourceMappingURL=set-class-name.js.map