"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var models_1 = require("./models");
var symbols_1 = require("./symbols");
var index_1 = require("./index");
var tnp_core_2 = require("tnp-core");
var storage_1 = require("./storage");
var set_class_name_1 = require("./set-class-name");
function getClasses() {
    var s = storage_1.getStorage();
    return s[symbols_1.SYMBOL.CLASSES];
}
var CLASSNAME;
(function (CLASSNAME_1) {
    function getClassConfig(target, configs) {
        if (configs === void 0) { configs = []; }
        if (!tnp_core_1._.isFunction(target)) {
            throw "[typescript-class-helper][getClassConfig] Cannot get class config from: " + target;
        }
        var meta = symbols_1.SYMBOL.CLASS_META_CONFIG;
        var config;
        if (!target[meta]) {
            config = new models_1.Models.ClassConfig();
            config.classReference = target;
        }
        else {
            config = target[meta];
            var parentClass = Object.getPrototypeOf(target);
            if (config.classReference === parentClass) {
                var childConfig = new models_1.Models.ClassConfig();
                childConfig.vParent = config;
                childConfig.classReference = target;
                config.vChildren.push(childConfig);
                config = childConfig;
            }
        }
        target[meta] = config;
        configs.push(config);
        return (tnp_core_1._.isFunction(parentClass) && parentClass.name !== '') ? getClassConfig(parentClass, configs) : configs;
    }
    CLASSNAME_1.getClassConfig = getClassConfig;
    /**
     * PLEASE PROVIDE NAME AS TYPED STRING, NOT VARIABLE
     * Decorator requred for production mode
     * @param name Name of class
     */
    function CLASSNAME(className, options) {
        return function (target) {
            // console.log(`CLASSNAME Inited ${className}`)
            return set_class_name_1.setClassName(target, className, options);
        };
    }
    CLASSNAME_1.CLASSNAME = CLASSNAME;
    function getClassName(target, production) {
        if (production === void 0) { production = false; }
        if (tnp_core_1._.isString(target)) {
            console.trace(target);
            console.warn("[typescript-class-helpers][getClassName] target is string: '" + target + "', produciton: " + production);
            return target;
        }
        if (!tnp_core_1._.isFunction(target)) {
            console.trace(target);
            console.error("[typescript-class-helpers][getClassName] target is not a class");
            return void 0;
        }
        if (tnp_core_2.Helpers.isBrowser && tnp_core_1._.isString(target[symbols_1.SYMBOL.CLASSNAMEKEYBROWSER])) {
            return target[symbols_1.SYMBOL.CLASSNAMEKEYBROWSER];
        }
        if (target[symbols_1.SYMBOL.CLASSNAMEKEY]) {
            return target[symbols_1.SYMBOL.CLASSNAMEKEY];
        }
        if (production) {
            console.error("[typescript-class-helpers][getClassName(...)](PRODUCTION MODE ERROR)\n              Please use decoartor @CLASSNAME for each entity or controller\n              This is preventing class name problem in minified code.\n\n              import { CLASS } from 'typescript-class-helpers';\n\n              @CLASS.NAME('ExampleClass')\n              class ExampleClass {\n                ...\n              }\n              ", target);
        }
        return target.name;
    }
    CLASSNAME_1.getClassName = getClassName;
    function getObjectIndexPropertyValue(obj) {
        var className = index_1.Helpers.getNameFromObject(obj);
        // console.log('className',className)
        var c = getClasses().find(function (c) { return c.className === className; });
        // console.log('c',c)
        if (c) {
            return c.uniqueKey;
        }
    }
    CLASSNAME_1.getObjectIndexPropertyValue = getObjectIndexPropertyValue;
    function getClassFamilyByClassName(className) {
        var c = getClasses().find(function (c) { return c.className === className; });
        // console.log('getClasses()', getClasses())
        if (c) {
            return c.classFamily;
        }
    }
    CLASSNAME_1.getClassFamilyByClassName = getClassFamilyByClassName;
    function getObjectClassFamily(obj) {
        var className = index_1.Helpers.getNameFromObject(obj);
        // console.log('className',className)
        var c = getClasses().find(function (c) { return c.className === className; });
        // console.log('c',c)
        if (c) {
            return c.classFamily;
        }
    }
    CLASSNAME_1.getObjectClassFamily = getObjectClassFamily;
    function getObjectIndexValue(obj) {
        var className = index_1.Helpers.getNameFromObject(obj);
        // console.log('className',className)
        var c = getClasses().find(function (c) { return c.className === className; });
        // console.log('c',c)
        if (c && tnp_core_1._.isString(c.uniqueKey)) {
            return obj[c.uniqueKey];
        }
    }
    CLASSNAME_1.getObjectIndexValue = getObjectIndexValue;
    function getClassBy(className) {
        var res;
        if (Array.isArray(className)) {
            if (className.length !== 1) {
                throw "Mapping error... please use proper class names:\n  {\n    propertyObject: 'MyClassName',\n    propertyWithArray: ['MyClassName']\n  }\n\n        ";
            }
            className = className[0];
        }
        if (typeof className === 'function') { // TODO QUICK_FIX
            res = className;
        }
        if (className === 'Date') {
            res = Date;
        }
        var c = getClasses().find(function (c) { return c.className === className; });
        if (c) {
            res = c.target;
        }
        // console.log(`getClassBy "${className} return \n\n ${res} \n\n`)
        return res;
    }
    CLASSNAME_1.getClassBy = getClassBy;
})(CLASSNAME = exports.CLASSNAME || (exports.CLASSNAME = {}));
//# sourceMappingURL=classname.js.map