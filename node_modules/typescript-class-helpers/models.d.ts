import { ConfigModels } from 'tnp-config';
export declare namespace Models {
    type CLASSNAMEOptions = {
        uniqueKey?: string;
        /**
         * autoinstance - create instance of singleton automaticly inside decorator
         * first-instance - use first instace of created class as decorator
         */
        singleton?: 'autoinstance' | 'first-instance' | 'last-instance' | boolean;
        classFamily?: string;
        classNameInBrowser?: string;
    };
    class ParamConfig {
        paramName: string;
        paramType: ConfigModels.ParamType;
        index: number;
        defaultType: any;
        expireInSeconds?: number;
    }
    class MethodConfig {
        methodName: string;
        path: string;
        descriptor: PropertyDescriptor;
        type: ConfigModels.HttpMethod;
        realtimeUpdate: boolean;
        requestHandler: any;
        parameters: {
            [paramName: string]: ParamConfig;
        };
    }
    interface ClassMeta {
        uniqueKey?: string;
        className?: string;
        classFamily?: string;
        classNameInBrowser?: string;
        target?: Function;
    }
    class ClassConfig {
        browserTransformFn?: (entity: any) => any;
        singleton: Object;
        injections: {
            getter: Function;
            propertyName: string;
        }[];
        calculatedPath: string;
        path: string;
        vChildren?: ClassConfig[];
        vParent?: ClassConfig;
        classReference: Function;
        methods: {
            [methodName: string]: MethodConfig;
        };
    }
}
