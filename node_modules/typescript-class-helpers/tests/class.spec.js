"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var index_1 = require("../index");
var Test = /** @class */ (function () {
    function Test() {
        this.id = Test_1.id++;
    }
    Test_1 = Test;
    var Test_1;
    Test.id = 0;
    Test = Test_1 = tslib_1.__decorate([
        index_1.CLASS.NAME('Test'),
        tslib_1.__metadata("design:paramtypes", [])
    ], Test);
    return Test;
}());
var User = /** @class */ (function () {
    function User(id) {
        if (tnp_core_1._.isNumber(id)) {
            this.id = id;
        }
        else {
            this.id = User_1.id++;
        }
    }
    User_1 = User;
    User.prototype.dupa = function () {
        console.log('jest em!');
        return true;
    };
    var User_1;
    User.id = 0;
    User = User_1 = tslib_1.__decorate([
        index_1.CLASS.NAME('User'),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], User);
    return User;
}());
mocha_1.describe('CLASS', function () {
    mocha_1.before(function () {
        User.id = 0;
    });
    mocha_1.it('CLASS.NAME shoudl work', function () {
        var d = new User();
        var c = index_1.CLASS.getBy('User');
        var c2 = index_1.CLASS.getBy(User);
        // console.log('c', c)
        var d1 = new c();
        chai_1.expect(d).to.be.instanceOf(User);
        chai_1.expect(d1).to.be.instanceOf(User);
        chai_1.expect(d).to.be.instanceOf(c2);
        chai_1.expect(d1).to.be.instanceOf(c2);
        chai_1.expect(d).to.be.instanceOf(c);
        chai_1.expect(d1).to.be.instanceOf(c);
    });
    mocha_1.it('Comparaion should work', function () {
        var u1 = new User(111);
        var u2 = new User(222);
        var u3as1 = new User(111);
        chai_1.expect(index_1.CLASS.OBJECT(u1).isEqual(u2)).to.be.false;
        chai_1.expect(index_1.CLASS.OBJECT(u1).isEqual(u3as1)).to.be.true;
    });
    mocha_1.it('Is class Object should works', function () {
        var u1 = new User(111);
        chai_1.expect(index_1.CLASS.OBJECT(u1).isClassObject).to.be.true;
        var oo = {};
        chai_1.expect(index_1.CLASS.OBJECT(oo).isClassObject).to.be.false;
        chai_1.expect(index_1.CLASS.OBJECT(oo).indexValue).to.be.undefined;
        chai_1.expect(index_1.CLASS.OBJECT(oo).indexProperty).to.be.undefined;
    });
    mocha_1.it('should handle readme exapmle', function () {
        var Example = /** @class */ (function () {
            function Example() {
            }
            Example = tslib_1.__decorate([
                index_1.CLASS.NAME('Example')
            ], Example);
            return Example;
        }());
        chai_1.expect(index_1.CLASS.getName(Example) === 'Example').to.be.true;
        chai_1.expect(index_1.CLASS.getNameFromObject(new Example()) === 'Example').to.be.true;
        chai_1.expect(index_1.CLASS.getBy('Example') === Example).to.be.true;
    });
});
//# sourceMappingURL=class.spec.js.map