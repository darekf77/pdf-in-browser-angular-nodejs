"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var index_1 = require("../index");
var SingletonTest = /** @class */ (function () {
    function SingletonTest(id) {
        this.id = id;
        this.testest = 'testest';
        this.testest += id;
    }
    SingletonTest = tslib_1.__decorate([
        index_1.CLASS.NAME('SingletonTest', { singleton: 'first-instance' }),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], SingletonTest);
    return SingletonTest;
}());
var SingletonTestLast = /** @class */ (function () {
    function SingletonTestLast(id) {
        this.id = id;
        this.testest = 'testest';
        this.testest += id;
    }
    SingletonTestLast = tslib_1.__decorate([
        index_1.CLASS.NAME('SingletonTestLast', { singleton: 'last-instance' }),
        tslib_1.__metadata("design:paramtypes", [Number])
    ], SingletonTestLast);
    return SingletonTestLast;
}());
var SingletonTest2 = /** @class */ (function () {
    function SingletonTest2() {
        this.testest = 'testest';
    }
    SingletonTest2 = tslib_1.__decorate([
        index_1.CLASS.NAME('SingletonTest2', {})
    ], SingletonTest2);
    return SingletonTest2;
}());
var SingletonTest3 = /** @class */ (function () {
    function SingletonTest3() {
        this.testest = 'testest';
    }
    SingletonTest3 = tslib_1.__decorate([
        index_1.CLASS.NAME('SingletonTest3')
    ], SingletonTest3);
    return SingletonTest3;
}());
var EntityTest = /** @class */ (function () {
    function EntityTest() {
    }
    EntityTest = tslib_1.__decorate([
        index_1.CLASS.NAME('EntityTest')
    ], EntityTest);
    return EntityTest;
}());
var SingletonTest4 = /** @class */ (function () {
    function SingletonTest4() {
        this.testest = 'testest';
    }
    SingletonTest4 = tslib_1.__decorate([
        index_1.CLASS.NAME('SingletonTest4', { singleton: 'first-instance' })
    ], SingletonTest4);
    return SingletonTest4;
}());
var SingParent = /** @class */ (function () {
    function SingParent() {
        this.parentProp = 'hello Parent';
    }
    SingParent.prototype.super = function () {
        return this.parentProp;
    };
    SingParent = tslib_1.__decorate([
        index_1.CLASS.NAME('SingParent')
    ], SingParent);
    return SingParent;
}());
var SingChild = /** @class */ (function (_super) {
    tslib_1.__extends(SingChild, _super);
    function SingChild() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SingChild = tslib_1.__decorate([
        index_1.CLASS.NAME('SingChild', { singleton: 'first-instance' })
    ], SingChild);
    return SingChild;
}(SingParent));
var Autoinstance = /** @class */ (function (_super) {
    tslib_1.__extends(Autoinstance, _super);
    function Autoinstance() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Autoinstance = tslib_1.__decorate([
        index_1.CLASS.NAME('Autoinstance', { singleton: 'autoinstance' })
    ], Autoinstance);
    return Autoinstance;
}(SingParent));
var AutoinstanceNot = /** @class */ (function (_super) {
    tslib_1.__extends(AutoinstanceNot, _super);
    function AutoinstanceNot() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AutoinstanceNot = tslib_1.__decorate([
        index_1.CLASS.NAME('AutoinstanceNot', { singleton: 'first-instance' })
    ], AutoinstanceNot);
    return AutoinstanceNot;
}(SingParent));
function updateChain(entity, target) {
    if (!tnp_core_1._.isFunction(entity)) {
        return;
    }
    // console.log(`Entity ${entity.name} shoudl have controler singleton ${target.name}`)
    Object.defineProperty(entity.prototype, 'ctrl', {
        get: function () {
            return index_1.CLASS.getSingleton(target);
        }
    });
    Object.defineProperty(entity, 'ctrl', {
        get: function () {
            return index_1.CLASS.getSingleton(target);
        }
    });
}
var SingletonNoClassName = /** @class */ (function () {
    function SingletonNoClassName() {
    }
    return SingletonNoClassName;
}());
mocha_1.describe('Singleton', function () {
    mocha_1.it('should create singleton for class without @CLAS.NAME decorators', function () {
        var i = new SingletonNoClassName();
        index_1.CLASS.setSingletonObj(SingletonNoClassName, i);
        chai_1.expect(index_1.CLASS.getSingleton(SingletonNoClassName)).to.be.eq(i);
    });
    mocha_1.it('should create singleton first instance', function () {
        var i = new SingletonTest(1);
        new SingletonTest(2);
        new SingletonTest(3);
        // console.log('SINGLETON',SingletonTest[SYMBOL.SINGLETON])
        chai_1.expect(index_1.CLASS.getSingleton(SingletonTest)).to.be.eq(i);
    });
    mocha_1.it('should create singleton last instance', function () {
        var i1 = new SingletonTestLast(1);
        var i2 = new SingletonTestLast(2);
        var i3 = new SingletonTestLast(3);
        // console.log('SINGLETON',SingletonTest[SYMBOL.SINGLETON])
        chai_1.expect(index_1.CLASS.getSingleton(SingletonTestLast)).to.be.eq(i3);
    });
    mocha_1.it('should not create singleton ', function () {
        var i = new SingletonTest2();
        new SingletonTest2();
        new SingletonTest2();
        // console.log('SINGLETON',SingletonTest[SYMBOL.SINGLETON])
        chai_1.expect(index_1.CLASS.getSingleton(SingletonTest2)).to.be.undefined;
    });
    mocha_1.it('should not create singleton ', function () {
        var i = new SingletonTest3();
        new SingletonTest3();
        new SingletonTest3();
        // console.log('SINGLETON',SingletonTest[SYMBOL.SINGLETON])
        chai_1.expect(index_1.CLASS.getSingleton(SingletonTest3)).to.be.undefined;
    });
    mocha_1.it('should create singleton as getter; ', function () {
        new SingletonTest4();
        updateChain(EntityTest, SingletonTest4);
        var a = new EntityTest();
        chai_1.expect(a['ctrl']).to.be.instanceOf(SingletonTest4);
        // expect(EntityTest['ctrl']).to.be.instanceOf(SingletonTest4)
    });
    mocha_1.it('should handle ineritance', function () {
        var parentProp = (new SingParent()).parentProp;
        new SingParent();
        new SingParent();
        new SingChild();
        new SingChild();
        var child = new SingChild();
        chai_1.expect((child).parentProp).to.be.eq(parentProp);
        chai_1.expect(child.super()).to.be.eq(parentProp);
    });
    mocha_1.it('should perpare autoinstance', function () {
        chai_1.expect(index_1.CLASS.getSingleton(Autoinstance)).to.not.be.undefined;
        chai_1.expect(index_1.CLASS.getSingleton(AutoinstanceNot)).to.be.undefined;
    });
});
//# sourceMappingURL=singleton.spec.js.map