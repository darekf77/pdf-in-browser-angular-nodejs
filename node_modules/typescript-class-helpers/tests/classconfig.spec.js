"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var index_1 = require("../index");
var Parent = /** @class */ (function () {
    function Parent() {
    }
    return Parent;
}());
var Child = /** @class */ (function (_super) {
    tslib_1.__extends(Child, _super);
    function Child() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Child;
}(Parent));
var Child1 = /** @class */ (function (_super) {
    tslib_1.__extends(Child1, _super);
    function Child1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Child1;
}(Parent));
var Child2 = /** @class */ (function (_super) {
    tslib_1.__extends(Child2, _super);
    function Child2() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Child2;
}(Child));
var Child3 = /** @class */ (function (_super) {
    tslib_1.__extends(Child3, _super);
    function Child3() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Child3;
}(Child2));
mocha_1.describe('CLASS CONFIG', function () {
    mocha_1.it('Should create class config', function () { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var parent, child, child1, child2, child3;
        return tslib_1.__generator(this, function (_a) {
            parent = index_1.CLASS.getConfig(Parent)[0];
            child = index_1.CLASS.getConfig(Child)[0];
            child1 = index_1.CLASS.getConfig(Child1)[0];
            child2 = index_1.CLASS.getConfig(Child2)[0];
            child3 = index_1.CLASS.getConfig(Child3)[0];
            // console.log(`parent: ${parent.classReference.name}`)
            chai_1.expect(parent.classReference).to.be.eq(Parent);
            chai_1.expect(parent.vChildren.length).to.be.eq(2);
            chai_1.expect(child.classReference).to.be.eq(Child);
            chai_1.expect(child.vParent).to.be.eq(parent);
            chai_1.expect(child1.classReference).to.be.eq(Child1);
            chai_1.expect(child1.vParent).to.be.eq(parent);
            chai_1.expect(child2.classReference).to.be.eq(Child2);
            chai_1.expect(child2.vParent).to.be.eq(child);
            chai_1.expect(child3.classReference).to.be.eq(Child3);
            chai_1.expect(child3.vParent).to.be.eq(child2);
            chai_1.expect(child2.vChildren.length).to.be.eq(1);
            return [2 /*return*/];
        });
    }); });
});
//# sourceMappingURL=classconfig.spec.js.map