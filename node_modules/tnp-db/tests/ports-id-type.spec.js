"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var tnp_models_1 = require("tnp-models");
var port_instance_1 = require("../entites/port-instance");
mocha_1.describe('Ports type spec', function () {
    mocha_1.it('should compare correcly simple number types', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                (function () {
                    var t1 = new port_instance_1.PortInstance(3000);
                    var t2 = new port_instance_1.PortInstance(3000);
                    chai_1.expect(t1.includes(t2)).to.be.true;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance(3000);
                    var t2 = new port_instance_1.PortInstance(2000);
                    chai_1.expect(t1.includes(t2)).to.be.false;
                })();
                return [2 /*return*/];
            });
        });
    });
    mocha_1.it('it should compare correcly array types', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                (function () {
                    var t1 = new port_instance_1.PortInstance([2000, 3000, 4000]);
                    var t2 = new port_instance_1.PortInstance([2000]);
                    chai_1.expect(t1.includes(t2)).to.be.true;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance([2000, 3000, 4000]);
                    var t2 = new port_instance_1.PortInstance([5000]);
                    chai_1.expect(t1.includes(t2)).to.be.false;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance([]);
                    var t2 = new port_instance_1.PortInstance([]);
                    chai_1.expect(t1.includes(t2)).to.be.false;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance([1, 2, 3]);
                    var t2 = new port_instance_1.PortInstance([3, 2, 1]);
                    chai_1.expect(t1.includes(t2)).to.be.true;
                })();
                return [2 /*return*/];
            });
        });
    });
    mocha_1.it('it should compare correcly range types', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                (function () {
                    var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(3000).to(5000));
                    var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(4000).to(4500));
                    chai_1.expect(t1.includes(t2)).to.be.true;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(3000).to(5000));
                    var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(3000).to(5000));
                    chai_1.expect(t1.includes(t2)).to.be.true;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(3000).to(5000));
                    var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(4500));
                    chai_1.expect(t1.includes(t2)).to.be.false;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(3000).to(5000));
                    var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(4000).to(5500));
                    chai_1.expect(t1.includes(t2)).to.be.false;
                })();
                (function () {
                    var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(3000).to(5000));
                    var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(5500));
                    chai_1.expect(t1.includes(t2)).to.be.false;
                })();
                return [2 /*return*/];
            });
        });
    });
    mocha_1.describe('it should compare correcly mixed types', function () {
        mocha_1.it('it should compare correcly number and range ', function () {
            (function () {
                var t1 = new port_instance_1.PortInstance(3000);
                var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(5500));
                chai_1.expect(t1.includes(t2)).to.be.true;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(5500));
                var t2 = new port_instance_1.PortInstance(3000);
                chai_1.expect(t1.includes(t2)).to.be.true;
            })();
        });
        mocha_1.it('it should compare correcly array and range ', function () {
            (function () {
                var t1 = new port_instance_1.PortInstance([3000]);
                var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(5500));
                chai_1.expect(t1.includes(t2)).to.be.true;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(5500));
                var t2 = new port_instance_1.PortInstance([3000]);
                chai_1.expect(t1.includes(t2)).to.be.true;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance([3000]);
                var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(4000).to(5500));
                chai_1.expect(t1.includes(t2)).to.be.false;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(4000).to(5500));
                var t2 = new port_instance_1.PortInstance([3000]);
                chai_1.expect(t1.includes(t2)).to.be.false;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance([3000]);
                var t2 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(2500));
                chai_1.expect(t1.includes(t2)).to.be.false;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(2000).to(2500));
                var t2 = new port_instance_1.PortInstance([3000]);
                chai_1.expect(t1.includes(t2)).to.be.false;
            })();
        });
        mocha_1.it('it should compare correcly array and number ', function () {
            (function () {
                var t1 = new port_instance_1.PortInstance(3000);
                var t2 = new port_instance_1.PortInstance([2000, 3000, 5000]);
                chai_1.expect(t1.includes(t2)).to.be.true;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance([2000, 3000, 5000]);
                var t2 = new port_instance_1.PortInstance(3000);
                chai_1.expect(t1.includes(t2)).to.be.true;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance(4000);
                var t2 = new port_instance_1.PortInstance([2000, 3000, 5000]);
                chai_1.expect(t1.includes(t2)).to.be.false;
            })();
            (function () {
                var t1 = new port_instance_1.PortInstance([2000, 3000, 5000]);
                var t2 = new port_instance_1.PortInstance(4000);
                chai_1.expect(t1.includes(t2)).to.be.false;
            })();
        });
    });
});
//# sourceMappingURL=ports-id-type.spec.js.map