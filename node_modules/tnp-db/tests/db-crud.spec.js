"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_helpers_1 = require("tnp-helpers");
var low = require("lowdb");
var tnp_core_1 = require("tnp-core");
var FileSync = require("lowdb/adapters/FileSync");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var mocha_1 = require("mocha");
var chai_1 = require("chai");
// import { Helpers } from 'tnp-helpers';
// import { Models } from 'tnp-models';
var index_1 = require("../index");
var base_entity_1 = require("../entites/base-entity");
var db_crud_1 = require("../db-crud");
var entites_1 = require("../entites");
function db() {
    var location = tnp_core_1.path.join(tnp_core_1.crossPlatformPath(__dirname), '../../tmp-test-db.json');
    if (tnp_core_1.fse.existsSync(location)) {
        tnp_core_1.fse.unlinkSync(location);
    }
    var adapter = new FileSync(location);
    var db = low(adapter);
    return db;
}
var TestInstance = /** @class */ (function (_super) {
    tslib_1.__extends(TestInstance, _super);
    function TestInstance(value) {
        var _this = _super.call(this) || this;
        _this.value = value;
        return _this;
    }
    TestInstance.prototype.isEqual = function (anotherInstace) {
        return this.value === anotherInstace.value;
    };
    return TestInstance;
}(base_entity_1.DBBaseEntity));
mocha_1.describe('Db crud', function () {
    tnp_helpers_1.Project.projects.length;
    mocha_1.it('should handle other types that (ports,domain,projects,commands,builds)', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var crud, entityName, defaultValues, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        crud = new db_crud_1.DbCrud(db(), void 0);
                        entityName = base_entity_1.DBBaseEntity.entityNameFromClassName(typescript_class_helpers_1.CLASS.getName(TestInstance));
                        chai_1.expect(entityName).to.be.eq('tests');
                        defaultValues = {};
                        defaultValues[entityName] = [];
                        return [4 /*yield*/, crud.clearDBandReinit(defaultValues)];
                    case 1:
                        _c.sent();
                        _a = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(TestInstance)];
                    case 2:
                        _a.apply(void 0, [(_c.sent()).length]).to.be.eq(0);
                        return [4 /*yield*/, crud.addIfNotExist(new TestInstance(1))];
                    case 3:
                        _c.sent();
                        _b = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(TestInstance)];
                    case 4:
                        _b.apply(void 0, [(_c.sent()).length]).to.be.eq(1);
                        return [2 /*return*/];
                }
            });
        });
    });
    mocha_1.it('should handle ports', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var crud, entityName, defaultValues, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        crud = new db_crud_1.DbCrud(db(), void 0);
                        entityName = base_entity_1.DBBaseEntity.entityNameFromClassName(typescript_class_helpers_1.CLASS.getName(entites_1.PortInstance));
                        chai_1.expect(entityName).to.be.eq('ports');
                        defaultValues = {};
                        defaultValues[entityName] = [];
                        return [4 /*yield*/, crud.clearDBandReinit(defaultValues)];
                    case 1:
                        _c.sent();
                        _a = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(entites_1.PortInstance)];
                    case 2:
                        _a.apply(void 0, [(_c.sent()).length]).to.be.eq(0);
                        return [4 /*yield*/, crud.addIfNotExist(new entites_1.PortInstance(5000))];
                    case 3:
                        _c.sent();
                        _b = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(entites_1.PortInstance)];
                    case 4:
                        _b.apply(void 0, [(_c.sent()).length]).to.be.eq(1);
                        return [2 /*return*/];
                }
            });
        });
    });
    mocha_1.it('should handle domains', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var crud, entityName, defaultValues, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        crud = new db_crud_1.DbCrud(db(), void 0);
                        entityName = base_entity_1.DBBaseEntity.entityNameFromClassName(typescript_class_helpers_1.CLASS.getName(entites_1.DomainInstance));
                        chai_1.expect(entityName).to.be.eq('domains');
                        defaultValues = {};
                        defaultValues[entityName] = [];
                        return [4 /*yield*/, crud.clearDBandReinit(defaultValues)];
                    case 1:
                        _c.sent();
                        _a = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(entites_1.DomainInstance)];
                    case 2:
                        _a.apply(void 0, [(_c.sent()).length]).to.be.eq(0);
                        return [4 /*yield*/, crud.addIfNotExist(new entites_1.DomainInstance('onet.pl'))];
                    case 3:
                        _c.sent();
                        _b = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(entites_1.DomainInstance)];
                    case 4:
                        _b.apply(void 0, [(_c.sent()).length]).to.be.eq(1);
                        return [2 /*return*/];
                }
            });
        });
    });
    mocha_1.it('should handle builds', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var crud, entityName, defaultValues, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        crud = new db_crud_1.DbCrud(db(), void 0);
                        entityName = base_entity_1.DBBaseEntity.entityNameFromClassName(typescript_class_helpers_1.CLASS.getName(index_1.BuildInstance));
                        chai_1.expect(entityName).to.be.eq('builds');
                        defaultValues = {};
                        defaultValues[entityName] = [];
                        return [4 /*yield*/, crud.clearDBandReinit(defaultValues)];
                    case 1:
                        _c.sent();
                        _a = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.BuildInstance)];
                    case 2:
                        _a.apply(void 0, [(_c.sent()).length]).to.be.eq(0);
                        return [4 /*yield*/, crud.addIfNotExist(new index_1.BuildInstance())];
                    case 3:
                        _c.sent();
                        _b = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.BuildInstance)];
                    case 4:
                        _b.apply(void 0, [(_c.sent()).length]).to.be.eq(1);
                        return [2 /*return*/];
                }
            });
        });
    });
    mocha_1.it('should handle commands', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var crud, entityName, defaultValues, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        crud = new db_crud_1.DbCrud(db(), void 0);
                        entityName = base_entity_1.DBBaseEntity.entityNameFromClassName(typescript_class_helpers_1.CLASS.getName(index_1.CommandInstance));
                        chai_1.expect(entityName).to.be.eq('commands');
                        defaultValues = {};
                        defaultValues[entityName] = [];
                        return [4 /*yield*/, crud.clearDBandReinit(defaultValues)];
                    case 1:
                        _c.sent();
                        _a = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.CommandInstance)];
                    case 2:
                        _a.apply(void 0, [(_c.sent()).length]).to.be.eq(0);
                        return [4 /*yield*/, crud.addIfNotExist(new index_1.CommandInstance())];
                    case 3:
                        _c.sent();
                        _b = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.CommandInstance)];
                    case 4:
                        _b.apply(void 0, [(_c.sent()).length]).to.be.eq(1);
                        return [2 /*return*/];
                }
            });
        });
    });
    mocha_1.it('should handle projects', function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var crud, entityName, defaultValues, _a, _b, loc, _c, _d, _e;
            return tslib_1.__generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        crud = new db_crud_1.DbCrud(db(), void 0);
                        entityName = base_entity_1.DBBaseEntity.entityNameFromClassName(typescript_class_helpers_1.CLASS.getName(index_1.ProjectInstance));
                        chai_1.expect(entityName).to.be.eq('projects');
                        defaultValues = {};
                        defaultValues[entityName] = [];
                        return [4 /*yield*/, crud.clearDBandReinit(defaultValues)];
                    case 1:
                        _f.sent();
                        _a = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.ProjectInstance)];
                    case 2:
                        _a.apply(void 0, [(_f.sent()).length]).to.be.eq(0);
                        return [4 /*yield*/, crud.addIfNotExist(new index_1.ProjectInstance())];
                    case 3:
                        _f.sent();
                        _b = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.ProjectInstance)];
                    case 4:
                        _b.apply(void 0, [(_f.sent()).length]).to.be.eq(1);
                        loc = '/asdasd';
                        return [4 /*yield*/, crud.addIfNotExist(new index_1.ProjectInstance(loc))];
                    case 5:
                        _f.sent();
                        _c = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.ProjectInstance)];
                    case 6:
                        _c.apply(void 0, [(_f.sent()).length]).to.be.eq(2);
                        return [4 /*yield*/, crud.remove(new index_1.ProjectInstance(loc))];
                    case 7:
                        _f.sent();
                        _d = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.ProjectInstance)];
                    case 8:
                        _d.apply(void 0, [(_f.sent()).length]).to.be.eq(1);
                        return [4 /*yield*/, crud.set(new index_1.ProjectInstance('/asdasdaaaa'))];
                    case 9:
                        _f.sent();
                        _e = chai_1.expect;
                        return [4 /*yield*/, crud.getAll(index_1.ProjectInstance)];
                    case 10:
                        _e.apply(void 0, [(_f.sent()).length]).to.be.eq(2);
                        return [2 /*return*/];
                }
            });
        });
    });
});
//# sourceMappingURL=db-crud.spec.js.map