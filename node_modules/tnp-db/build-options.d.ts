import { Project } from 'tnp-helpers';
import { Models } from 'tnp-models';
export declare class BuildOptions implements Models.dev.StartForOptions {
    static PropsToOmmitWhenStringify: string[];
    prod?: boolean;
    outDir?: Models.dev.BuildDir;
    watch?: boolean;
    uglify?: boolean;
    obscure?: boolean;
    nodts?: boolean;
    staticBuild?: boolean;
    watchOnly?: boolean;
    skipCopyToSelection?: boolean;
    args?: string;
    progressCallback?: (fractionValue: number) => any;
    noConsoleClear?: boolean;
    /**
     * Do not generate backend code
     */
    genOnlyClientCode?: boolean;
    appBuild?: boolean;
    buildForAllClients?: boolean;
    baseHref?: string;
    /**
     * Generate only backend, without browser version
     */
    onlyBackend?: boolean;
    onlyWatchNoBuild?: boolean;
    copyto?: Project[] | string[];
    copytoAll?: boolean;
    /**
     * For isomorphic-lib
     * Specyify build targets as workspace childs projects names
     */
    forClient?: Project[] | string[];
    private static getMainOptions;
    static from(argsString: string, projectCurrent: Project, mainOptions?: Partial<BuildOptions>, reason?: string): Promise<BuildOptions>;
    static exportToCMD(buildOptions: BuildOptions): Promise<string>;
    toString: () => string;
}
