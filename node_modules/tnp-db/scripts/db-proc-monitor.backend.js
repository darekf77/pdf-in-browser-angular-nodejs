"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_helpers_1 = require("tnp-helpers");
var tnp_helpers_2 = require("tnp-helpers");
var DBProcMonitor = /** @class */ (function () {
    function DBProcMonitor(db) {
        this.db = db;
    }
    DBProcMonitor.prototype.start = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repeat()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DBProcMonitor.prototype.repeat = function (n) {
        if (n === void 0) { n = 0; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var builds;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.db.updateProcesses()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.db.getBuilds()];
                    case 2:
                        builds = _a.sent();
                        tnp_helpers_1.Helpers.clearConsole();
                        tnp_helpers_1.Helpers.log("\n===== Check counter: " + n + ", projects: " + tnp_helpers_2.Project.projects.length + " === ");
                        builds.forEach(function (b) {
                            tnp_helpers_1.Helpers.log(b.pid + "\t" + b.location + "\t" + b.cmd + "\t" + (b.buildOptions && b.buildOptions.watch) + "\n");
                        });
                        // console.log('waiting')
                        setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.repeat(n + 1)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, 1000);
                        return [2 /*return*/];
                }
            });
        });
    };
    return DBProcMonitor;
}());
exports.DBProcMonitor = DBProcMonitor;
//# sourceMappingURL=db-proc-monitor.backend.js.map