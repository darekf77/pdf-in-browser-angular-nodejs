"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var psList = require("ps-list");
var tnp_helpers_1 = require("tnp-helpers");
var DBMonitTop = /** @class */ (function () {
    function DBMonitTop(db) {
        this.db = db;
    }
    DBMonitTop.prototype.start = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repeat()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DBMonitTop.prototype.repeat = function (n) {
        var _this = this;
        if (n === void 0) { n = 0; }
        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var procs;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, psList()];
                    case 1:
                        procs = _a.sent();
                        tnp_helpers_1.Helpers.clearConsole();
                        procs
                            .filter(function (f) { return f.cmd.search('node') !== -1; })
                            .filter(function (f) { return f.cmd.search("/Applications/Visual Studio Code.app") === -1; })
                            .forEach(function (p) {
                            tnp_helpers_1.Helpers.log(p.ppid + "\t" + p.pid + "\t" + p.name + "\t" + p.cmd + "\n");
                        });
                        setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.repeat(n + 1)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, 1000);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    return DBMonitTop;
}());
exports.DBMonitTop = DBMonitTop;
//# sourceMappingURL=monit-top.backend.js.map