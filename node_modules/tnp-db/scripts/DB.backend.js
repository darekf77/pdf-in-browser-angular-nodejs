"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_config_1 = require("tnp-config");
//#region @backend
var psList = require("ps-list");
var index_1 = require("../index");
var index_2 = require("../index");
var tnp_helpers_1 = require("tnp-helpers");
var db_proc_monitor_backend_1 = require("./db-proc-monitor.backend");
var monit_top_backend_1 = require("./monit-top.backend");
var monit_commands_backend_1 = require("./monit-commands.backend");
function $LAST(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, last;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, index_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.lastCommandFrom(process.cwd(), false)];
                case 2:
                    last = _a.sent();
                    // console.log('last commadn to run', last)
                    return [4 /*yield*/, db.runCommand(!!last ? last : new index_2.CommandInstance(undefined, process.cwd()))];
                case 3:
                    // console.log('last commadn to run', last)
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.$LAST = $LAST;
function $LAST_BUILD(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, last;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, index_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.lastCommandFrom(process.cwd(), true)];
                case 2:
                    last = _a.sent();
                    // console.log('last commadn to run', last)
                    return [4 /*yield*/, db.runCommand(!!last ? last : new index_2.CommandInstance(undefined, process.cwd(), true))];
                case 3:
                    // console.log('last commadn to run', last)
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.$LAST_BUILD = $LAST_BUILD;
function $SHOW_LAST(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db, last;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // console.log(args)
                    global.muteMessages = true;
                    return [4 /*yield*/, index_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, db.lastCommandFrom(process.cwd(), true)];
                case 2:
                    last = _a.sent();
                    global.muteMessages = false;
                    process.stdout.write(last.command);
                    // console.log('last commadn to run', last)
                    // await db.runCommand(!!last ? last : new CommandInstance(undefined, process.cwd(), true));
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
exports.$SHOW_LAST = $SHOW_LAST;
var $DB = function (args) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var db, db;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(args.trim() === 'reinit')) return [3 /*break*/, 3];
                global.reinitDb = true;
                return [4 /*yield*/, index_1.TnpDB.Instance()];
            case 1:
                db = _a.sent();
                return [4 /*yield*/, db.setCommand(tnp_config_1.config.frameworkName + " db reinit")];
            case 2:
                _a.sent();
                return [3 /*break*/, 6];
            case 3: return [4 /*yield*/, index_1.TnpDB.Instance()];
            case 4:
                db = _a.sent();
                return [4 /*yield*/, db.setCommand(tnp_config_1.config.frameworkName + " db")];
            case 5:
                _a.sent();
                _a.label = 6;
            case 6:
                process.exit(0);
                return [2 /*return*/];
        }
    });
}); };
function $MONIT_TOP() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, index_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, (new monit_top_backend_1.DBMonitTop(db)).start()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function $MONIT_COMMANDS() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, index_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, (new monit_commands_backend_1.DBMonitCommands(db)).start()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function $EXISTS(args) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var pid, ps;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    pid = Number(args.trim());
                    return [4 /*yield*/, psList()];
                case 1:
                    ps = _a.sent();
                    tnp_helpers_1.Helpers.log("process.pid: " + process.pid);
                    tnp_helpers_1.Helpers.log("pid to check: " + pid);
                    // console.log(!!ps.find(p => p.pid === pid))
                    process.exit(0);
                    return [2 /*return*/];
            }
        });
    });
}
function $PROC_MONITOR() {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var db;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, index_1.TnpDB.Instance()];
                case 1:
                    db = _a.sent();
                    return [4 /*yield*/, (new db_proc_monitor_backend_1.DBProcMonitor(db)).start()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
var $DB_REINIT = function () {
    return $DB('reinit');
};
exports.default = {
    $PROC_MONITOR: tnp_helpers_1.Helpers.CLIWRAP($PROC_MONITOR, '$PROC_MONITOR'),
    $MONIT_TOP: tnp_helpers_1.Helpers.CLIWRAP($MONIT_TOP, '$MONIT_TOP'),
    $MONIT_COMMANDS: tnp_helpers_1.Helpers.CLIWRAP($MONIT_COMMANDS, '$MONIT_COMMANDS'),
    $DB: tnp_helpers_1.Helpers.CLIWRAP($DB, '$DB'),
    $DB_REINIT: tnp_helpers_1.Helpers.CLIWRAP($DB_REINIT, '$DB_REINIT'),
    $LAST: tnp_helpers_1.Helpers.CLIWRAP($LAST, '$LAST'),
    $LAST_BUILD: tnp_helpers_1.Helpers.CLIWRAP($LAST_BUILD, '$LAST_BUILD'),
    $SHOW_LAST: tnp_helpers_1.Helpers.CLIWRAP($SHOW_LAST, '$SHOW_LAST'),
    $EXISTS: tnp_helpers_1.Helpers.CLIWRAP($EXISTS, '$EXISTS')
};
//#endregion
//# sourceMappingURL=DB.backend.js.map