import { Models } from 'tnp-models';
import { Project } from 'tnp-helpers';
import { ProcessBoundAction } from './models';
import { BuildOptions } from './build-options';
import { BuildInstance, CommandInstance, ProjectInstance, ProcessInstance } from './entites';
export { BuildInstance, CommandInstance, ProjectInstance, ProcessInstance } from './entites';
export declare class TnpDB {
    readonly location: string;
    private static _instance;
    private static instance;
    static Instance(dbLocation?: string): Promise<TnpDB>;
    static get InstanceSync(): TnpDB;
    private __projectsCtrl;
    private __domainsCtrl;
    private __buildsCtrl;
    private __portsCtrl;
    private __commandsCtrl;
    private __processCtrl;
    private _adapter;
    get portsManaber(): Promise<import("./controllers/ports-set.backend").PortsSet>;
    get db(): import("./daemon/deamon-controller").IDBCrud;
    rawGet<T = any>(keyOrEntityName: string): Promise<T>;
    rawSet<T = any>(keyOrEntityName: string, json: T): Promise<void>;
    private crud;
    listenToChannel(project: Project, channel: Models.realtime.UpdateType, callback: () => void | Promise<void>): void;
    triggerChangeForProject(project: Project, channel: Models.realtime.UpdateType): Promise<any>;
    constructor(location: string);
    private init;
    initCoreProjects(): Promise<void>;
    getWokerPort(): Promise<number>;
    killWorker(): Promise<void>;
    checkBuildIfAllowed(currentProject: Project, buildOptions: BuildOptions, pid: number, ppid: number, onlyUpdate: boolean): Promise<void>;
    /**
     * bounding of realtime BE/FE processes
     */
    boundActions(action1: ProcessBoundAction, action2: ProcessBoundAction): Promise<void>;
    private boundProcess;
    getProceses(): Promise<ProcessInstance[]>;
    resetProcessess(): Promise<void>;
    updateProcesses(): Promise<void>;
    runCommand(cmd: CommandInstance): Promise<void>;
    getCommands(): Promise<CommandInstance[]>;
    lastCommandFrom(location: string, buildCommand?: boolean): Promise<CommandInstance>;
    setCommand(command: string): Promise<void>;
    updateCommandBuildOptions(location: string, buildOptions: BuildOptions): Promise<void>;
    getBuildsBy(options: {
        location?: string;
        watch?: boolean;
        prod?: boolean;
        appBuild?: boolean;
        baseHref?: boolean;
        pid?: number;
        ppid?: number;
    }): Promise<BuildInstance[]>;
    distBuildFoundedFor(project: Project): Promise<BuildInstance>;
    appBuildFoundedFor(project: Project): Promise<BuildInstance[]>;
    getBuilds(): Promise<BuildInstance[]>;
    updateBuildOptions(buildOptions: BuildOptions, pid: number): Promise<void>;
    getProjects(): Promise<ProjectInstance[]>;
    addProjectIfNotExist(project: Project): Promise<void>;
    killInstancesFrom(projects: Project[]): Promise<void>;
}
