"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var _ = require("lodash");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var base_entity_1 = require("./entites/base-entity");
var entites_1 = require("./entites");
var tnp_helpers_1 = require("tnp-helpers");
var background_worker_process_1 = require("background-worker-process");
var deamon_controller_1 = require("./daemon/deamon-controller");
var daemon_entity_1 = require("./daemon/daemon-entity");
var DbCrud = /** @class */ (function () {
    function DbCrud(dbFromFile, dbWrapper) {
        this.dbFromFile = dbFromFile;
        this.dbWrapper = dbWrapper;
    }
    Object.defineProperty(DbCrud.prototype, "db", {
        get: function () {
            if (this.worker) {
                return this.worker;
            }
            return this.dbFromFile;
        },
        enumerable: true,
        configurable: true
    });
    DbCrud.prototype.createInstance = function (classFN, entities, registerdOnPort, startNew) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, background_worker_process_1.WorkersFactor.create(classFN, entities, registerdOnPort, {
                            killAlreadRegisteredProcess: startNew,
                            startWorkerServiceAsChildProcess: startNew,
                            disabledRealtime: false,
                            preventSameContexts: true,
                        })];
                    case 1:
                        res = _a.sent();
                        if (process.platform === 'win32' && startNew) {
                            tnp_helpers_1.Helpers.info('Waiting 10 seconds on windows platofrom...');
                            tnp_helpers_1.Helpers.sleep(10);
                        }
                        return [2 /*return*/, res];
                }
            });
        });
    };
    DbCrud.prototype.initDeamon = function (recreate) {
        if (recreate === void 0) { recreate = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entities, portsManager;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        entities = [daemon_entity_1.DbUpdateProjectEntity];
                        return [4 /*yield*/, this.dbWrapper.portsManaber];
                    case 1:
                        portsManager = _a.sent();
                        return [4 /*yield*/, portsManager.registerOnFreePort({
                                name: typescript_class_helpers_1.CLASS.getName(deamon_controller_1.DbDaemonController)
                            }, {
                                actionWhenAssignedPort: function (itWasRegisterd, registerdOnPort) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                    var res, isHealtyWorker, copyDataToWorker, allData;
                                    return tslib_1.__generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                tnp_helpers_1.Helpers.log("[tnp-db][deamon] " + (itWasRegisterd ? 'already' : 'inited') + " on port: " + registerdOnPort);
                                                return [4 /*yield*/, this.createInstance(deamon_controller_1.DbDaemonController, entities, registerdOnPort, (!itWasRegisterd || recreate))];
                                            case 1:
                                                res = _a.sent();
                                                return [4 /*yield*/, res.instance.$$healty];
                                            case 2:
                                                isHealtyWorker = _a.sent();
                                                copyDataToWorker = (!itWasRegisterd || recreate || !isHealtyWorker);
                                                if (!!isHealtyWorker) return [3 /*break*/, 4];
                                                res.context.destroy();
                                                return [4 /*yield*/, this.createInstance(deamon_controller_1.DbDaemonController, entities, registerdOnPort, true)];
                                            case 3:
                                                res = _a.sent();
                                                _a.label = 4;
                                            case 4:
                                                if (!copyDataToWorker) return [3 /*break*/, 6];
                                                allData = tnp_helpers_1.Helpers.readJson(this.dbWrapper.location);
                                                return [4 /*yield*/, res.instance.copyAllToWorker(allData, this.dbWrapper.location).received];
                                            case 5:
                                                _a.sent();
                                                _a.label = 6;
                                            case 6:
                                                // @ts-ignore
                                                this.context = res.context;
                                                // @ts-ignore
                                                this.worker = res.instance;
                                                return [2 /*return*/];
                                        }
                                    });
                                }); }
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    // private listenters = {} as any;
    // onEntityChange(classFN: Function): BehaviorSubject<void> {
    //   return this.listenters[getEntityNameByClassFN(classFN)];
    // }
    DbCrud.prototype.clearDBandReinit = function (defaultValues) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // Object.keys(defaultValues).forEach((entityName) => {
                    //   this.listenters[entityName] = new BehaviorSubject(void 0);
                    // });
                    return [4 /*yield*/, this.db.defaults(defaultValues)
                            .write()];
                    case 1:
                        // Object.keys(defaultValues).forEach((entityName) => {
                        //   this.listenters[entityName] = new BehaviorSubject(void 0);
                        // });
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DbCrud.prototype.getAll = function (classFN) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var entityName, res, index, v, _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        entityName = getEntityNameByClassFN(classFN);
                        // console.log(`${CLASS.getName(classFN)} entity name from object`, entityName);
                        // process.exit(0)
                        return [4 /*yield*/, this.db.read()];
                    case 1:
                        // console.log(`${CLASS.getName(classFN)} entity name from object`, entityName);
                        // process.exit(0)
                        _c.sent();
                        return [4 /*yield*/, this.db.get(entityName).value()];
                    case 2:
                        res = _c.sent();
                        if (!_.isArray(res)) return [3 /*break*/, 7];
                        index = 0;
                        _c.label = 3;
                    case 3:
                        if (!(index < res.length)) return [3 /*break*/, 6];
                        v = res[index];
                        _a = res;
                        _b = index;
                        return [4 /*yield*/, this.afterRetrive(v, entityName)];
                    case 4:
                        _a[_b] = (_c.sent());
                        _c.label = 5;
                    case 5:
                        index++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/, res.filter(function (f) { return !!f; })];
                    case 7: return [2 /*return*/, []];
                }
            });
        });
    };
    DbCrud.prototype.addIfNotExist = function (entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var classFN, all, indexFounded;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        classFN = typescript_class_helpers_1.CLASS.getFromObject(entity);
                        return [4 /*yield*/, this.getAll(typescript_class_helpers_1.CLASS.getFromObject(entity))];
                    case 1:
                        all = _a.sent();
                        indexFounded = all.findIndex(function (f) { return f.isEqual(entity); });
                        if (!(indexFounded === -1)) return [3 /*break*/, 3];
                        all.push(entity);
                        // console.log(`NOT FOUND - ADD : all.length ${all.length}`,all);
                        return [4 /*yield*/, this.setBulk(all, classFN)];
                    case 2:
                        // console.log(`NOT FOUND - ADD : all.length ${all.length}`,all);
                        _a.sent();
                        return [2 /*return*/, true];
                    case 3: 
                    // console.log(`FOUNDED ????? - NOT ADD`);
                    return [2 /*return*/, false];
                }
            });
        });
    };
    DbCrud.prototype.remove = function (entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var classFN, all, filtered;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        classFN = typescript_class_helpers_1.CLASS.getFromObject(entity);
                        return [4 /*yield*/, this.getAll(typescript_class_helpers_1.CLASS.getFromObject(entity))];
                    case 1:
                        all = _a.sent();
                        filtered = all.filter(function (f) { return !f.isEqual(entity); });
                        if (filtered.length === all.length) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.setBulk(filtered, classFN)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    DbCrud.prototype.set = function (entity) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var classFN, all, existed;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        classFN = typescript_class_helpers_1.CLASS.getFromObject(entity);
                        tnp_helpers_1.Helpers.log('getting all start');
                        return [4 /*yield*/, this.getAll(typescript_class_helpers_1.CLASS.getFromObject(entity))];
                    case 1:
                        all = _a.sent();
                        tnp_helpers_1.Helpers.log('getting all done');
                        existed = all.find(function (f) { return f.isEqual(entity); });
                        if (existed) {
                            _.merge(existed, entity);
                        }
                        else {
                            all.push(entity);
                        }
                        tnp_helpers_1.Helpers.log('setting all');
                        return [4 /*yield*/, this.setBulk(all, classFN)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DbCrud.prototype.setBulk = function (entites, classFN) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var className, entityName, json;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!_.isArray(entites)) {
                            tnp_helpers_1.Helpers.error("[db-crud] setBuild - this is not array of entities");
                        }
                        if (entites.length === 0 && !_.isFunction(classFN)) {
                            tnp_helpers_1.Helpers.error("Please provide class function in setBuild(entites, <class function hrere>)");
                        }
                        className = _.isFunction(classFN) ? typescript_class_helpers_1.CLASS.getName(classFN) :
                            typescript_class_helpers_1.CLASS.getNameFromObject(_.first(entites));
                        entityName = getEntityNameByClassName(className);
                        json = entites.map(function (c) { return _this.preprareEntityForSave(c); });
                        // console.log(`[setBulk] set json for entity ${entityName}`, json)
                        return [4 /*yield*/, this.db.read()];
                    case 1:
                        // console.log(`[setBulk] set json for entity ${entityName}`, json)
                        _a.sent();
                        return [4 /*yield*/, this.db.set(entityName, json).write()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    DbCrud.prototype.afterRetrive = function (value, entityName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var v, ins, cmd, c, v, d, v, r, p;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(entityName === 'builds')) return [3 /*break*/, 2];
                        v = value;
                        ins = new entites_1.BuildInstance(v);
                        return [4 /*yield*/, ins.prepare('afterRetrive')];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, ins];
                    case 2:
                        if (entityName === 'commands') {
                            cmd = value;
                            c = new entites_1.CommandInstance(cmd.command, cmd.location, !!cmd.isBuildCommand);
                            return [2 /*return*/, c];
                        }
                        if (entityName === 'domains') {
                            v = value;
                            d = _.merge(new entites_1.DomainInstance(), v);
                            d.declaredIn = d.declaredIn.map(function (d) {
                                return { environment: d.environment, project: tnp_helpers_1.Project.From(d.project) };
                            });
                            return [2 /*return*/, d];
                        }
                        if (entityName === 'ports') {
                            v = value;
                            r = _.merge(new entites_1.PortInstance(), v);
                            if (_.isString(r.reservedFor)) {
                                r.reservedFor = tnp_helpers_1.Project.From(r.reservedFor);
                            }
                            return [2 /*return*/, r];
                        }
                        if (entityName === 'projects') {
                            p = new entites_1.ProjectInstance(value);
                            return [2 /*return*/, p];
                            // return fse.existsSync(p.locationOfProject) ? p : void 0;
                        }
                        if (entityName === 'processes') {
                            return [2 /*return*/, _.merge(new entites_1.ProcessInstance(), value)];
                        }
                        return [2 /*return*/, value];
                }
            });
        });
    };
    DbCrud.prototype.preprareEntityForSave = function (entity) {
        // console.log(`prerpare entity, typeof ${typeof entity}`, entity)
        // console.log('typeof BuildInstance', typeof BuildInstance)
        [entites_1.BuildInstance, entites_1.PortInstance, entites_1.CommandInstance, entites_1.DomainInstance, entites_1.ProjectInstance]
            .find(function (f) {
            if (!f) {
                throw "Undefined instance of class. Probably circural dependency";
            }
            return false;
        });
        if (entity instanceof entites_1.BuildInstance) {
            var _a = entity, pid = _a.pid, ppid = _a.ppid, project = _a.project, location_1 = _a.location, cmd = _a.cmd;
            return _.cloneDeep({
                pid: pid,
                ppid: ppid,
                cmd: cmd,
                location: _.isString(location_1) ? location_1 : (!!project && project.location)
            });
        }
        if (entity instanceof entites_1.PortInstance) {
            var port = entity;
            return _.cloneDeep({
                id: port.id,
                reservedFor: !!port.reservedFor && _.isString(port.reservedFor.location) ?
                    port.reservedFor.location : port.reservedFor
            });
        }
        if (entity instanceof entites_1.CommandInstance) {
            var cmd = entity;
            var command = cmd.command, location_2 = cmd.location, isBuildCommand = cmd.isBuildCommand;
            return _.cloneDeep({
                command: command, location: location_2, isBuildCommand: isBuildCommand
            });
        }
        if (entity instanceof entites_1.DomainInstance) {
            var domain = entity;
            var activeFor = domain.activeFor, address = domain.address, declaredIn = domain.declaredIn;
            return _.cloneDeep({
                declaredIn: declaredIn.map(function (d) {
                    return { environment: d.environment, project: d.project.location };
                }),
                address: address,
            });
        }
        if (entity instanceof entites_1.ProcessInstance) {
            return entity;
        }
        if (entity instanceof entites_1.ProjectInstance) {
            return entity.locationOfProject;
        }
        return entity;
    };
    return DbCrud;
}());
exports.DbCrud = DbCrud;
function getEntityNameByClassFN(classFN) {
    return getEntityNameByClassName(typescript_class_helpers_1.CLASS.getName(classFN));
}
function getEntityNameByClassName(className) {
    return className === 'Project' ? 'projects' : base_entity_1.DBBaseEntity.entityNameFromClassName(className);
}
//#endregion
//# sourceMappingURL=db-crud.js.map