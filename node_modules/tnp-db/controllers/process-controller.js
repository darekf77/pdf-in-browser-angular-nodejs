"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var _ = require("lodash");
var base_controlller_1 = require("./base-controlller");
var entites_1 = require("../entites");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_1 = require("tnp-helpers");
var ProcessController = /** @class */ (function (_super) {
    tslib_1.__extends(ProcessController, _super);
    function ProcessController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ProcessController.prototype.addExisted = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                tnp_helpers_1.Helpers.log("[db][reinit] adding existed processes");
                // const ps: PsListInfo[] = await psList();
                // // console.log(ps.filter(p => p.cmd?.split(' ').filter(p => p.endsWith(`/bin/tnp`)).length > 0));
                // const proceses = ps
                //   .filter(p => {
                //     return !!p.cmd.split(' ').find(p => p.endsWith(`/bin/tnp`))
                //   })
                //   .map(p => {
                //     const proc = new ProcessInstance();
                //     proc.pid = p.pid;
                //     proc.cmd = p.cmd;
                //     proc.name = p.name;
                //     return proc;
                //   })
                this.crud.setBulk([], entites_1.ProcessInstance);
                return [2 /*return*/];
            });
        });
    };
    ProcessController.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ProcessController.prototype.findProcessByInfo = function (metaInfo) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var className, entityId, entityProperty, proceses, existed;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        className = metaInfo.className, entityId = metaInfo.entityId, entityProperty = metaInfo.entityProperty;
                        return [4 /*yield*/, this.crud.getAll(entites_1.ProcessInstance)];
                    case 1:
                        proceses = _a.sent();
                        existed = proceses.find(function (p) {
                            return (p.info &&
                                p.info.className === className &&
                                p.info.entityId === entityId &&
                                p.info.entityProperty === entityProperty);
                        });
                        return [2 /*return*/, existed];
                }
            });
        });
    };
    ProcessController.prototype.boundProcess = function (metaInfo, relation1TO1entityId) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var existed, saveToDB;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        saveToDB = true;
                        if (!!existed) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.findProcessByInfo(metaInfo)];
                    case 1:
                        existed = _a.sent();
                        if (existed && !_.isNumber(relation1TO1entityId)) {
                            saveToDB = false;
                        }
                        _a.label = 2;
                    case 2:
                        if (!existed) {
                            existed = new entites_1.ProcessInstance();
                            saveToDB = true;
                        }
                        existed.setInfo(metaInfo);
                        if (_.isNumber(relation1TO1entityId)) {
                            existed.relation1TO1entityId = relation1TO1entityId;
                        }
                        if (!saveToDB) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.crud.set(existed)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, existed];
                }
            });
        });
    };
    ProcessController = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ProcessController')
    ], ProcessController);
    return ProcessController;
}(base_controlller_1.BaseController));
exports.ProcessController = ProcessController;
//#endregion
//# sourceMappingURL=process-controller.js.map