"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var _ = require("lodash");
var path = require("path");
var fse = require("fs-extra");
var base_controlller_1 = require("./base-controlller");
var entites_1 = require("../entites");
var tnp_config_1 = require("tnp-config");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_1 = require("tnp-helpers");
var ProjectsController = /** @class */ (function (_super) {
    tslib_1.__extends(ProjectsController, _super);
    function ProjectsController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.recognized = [];
        return _this;
    }
    ProjectsController.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    ProjectsController.prototype.addExisted = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[db][reinit] adding existed projects");
                        if (global['frameworkName'] === 'firedev') {
                            tnp_helpers_1.Helpers.log("[tnp-db] For now dont discover project in tnp db");
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.discoverProjectsInLocation(path.resolve(path.join(tnp_helpers_1.Project.Tnp.location, '..')))];
                    case 1:
                        _a.sent();
                        if (!global.testMode) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.discoverProjectsInLocation(path.resolve(tnp_config_1.config.pathes.tnp_tests_context), true)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.discoverProjectsInLocation(path.resolve(path.join(tnp_helpers_1.Project.Tnp.location, '../firedev-projects')))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ProjectsController.prototype.addIfNotExists = function (projectInstance) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var proj, children, index, c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!projectInstance) {
                            return [2 /*return*/];
                        }
                        if (this.recognized.find(function (p) { return p.project.location === projectInstance.project.location; })) {
                            return [2 /*return*/];
                        }
                        this.recognized.push(projectInstance);
                        if (!(projectInstance.project.isWorkspace && !projectInstance.project.isGenerated
                            && projectInstance.project.distribution)) return [3 /*break*/, 2];
                        proj = projectInstance.project.distribution;
                        if (!proj) return [3 /*break*/, 2];
                        // console.log(`ADD STATIC ${proj.location}`)
                        return [4 /*yield*/, this.addIfNotExists(entites_1.ProjectInstance.from(proj))];
                    case 1:
                        // console.log(`ADD STATIC ${proj.location}`)
                        _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, this.crud.addIfNotExist(projectInstance)];
                    case 3:
                        if (!_a.sent()) return [3 /*break*/, 11];
                        if (!_.isArray(projectInstance.project.preview)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.addIfNotExists(entites_1.ProjectInstance.from(projectInstance.project.preview))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        if (!_.isArray(projectInstance.project.children)) return [3 /*break*/, 9];
                        children = projectInstance.project.children;
                        index = 0;
                        _a.label = 6;
                    case 6:
                        if (!(index < children.length)) return [3 /*break*/, 9];
                        c = children[index];
                        return [4 /*yield*/, this.addIfNotExists(entites_1.ProjectInstance.from(c))];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        index++;
                        return [3 /*break*/, 6];
                    case 9: return [4 /*yield*/, this.addIfNotExists(entites_1.ProjectInstance.from(projectInstance.project.preview))];
                    case 10:
                        _a.sent();
                        _a.label = 11;
                    case 11: return [2 /*return*/];
                }
            });
        });
    };
    ProjectsController.prototype.discoverProjectsInLocation = function (location, searchSubfolders) {
        if (searchSubfolders === void 0) { searchSubfolders = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var locations, index, subLocation, projects, index, project;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!searchSubfolders) return [3 /*break*/, 5];
                        locations = fse
                            .readdirSync(location)
                            .map(function (name) { return path.join(location, name); });
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < locations.length)) return [3 /*break*/, 4];
                        subLocation = locations[index];
                        return [4 /*yield*/, this.discoverProjectsInLocation(subLocation)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                    case 5:
                        projects = fse.readdirSync(location)
                            .map(function (name) { return path.join(location, name); })
                            .map(function (location) {
                            // console.log(location)
                            return tnp_helpers_1.Project.From(location);
                        })
                            .filter(function (f) { return !!f; })
                            .filter(function (f) {
                            return f.typeIsNot('unknow-npm-project');
                        });
                        index = 0;
                        _a.label = 6;
                    case 6:
                        if (!(index < projects.length)) return [3 /*break*/, 9];
                        project = projects[index];
                        return [4 /*yield*/, this.addIfNotExists(entites_1.ProjectInstance.from(project))];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8:
                        index++;
                        return [3 /*break*/, 6];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    ProjectsController = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ProjectsController')
    ], ProjectsController);
    return ProjectsController;
}(base_controlller_1.BaseController));
exports.ProjectsController = ProjectsController;
//#endregion
//# sourceMappingURL=projects-controller.js.map