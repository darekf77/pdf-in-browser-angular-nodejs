"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var _ = require("lodash");
var psList = require("ps-list");
var base_controlller_1 = require("./base-controlller");
var tnp_helpers_1 = require("tnp-helpers");
var build_instance_1 = require("../entites/build-instance");
// import { BuildOptions } from '../../project/features';
var typescript_class_helpers_1 = require("typescript-class-helpers");
var wrapper_db_backend_1 = require("../wrapper-db.backend");
var index_1 = require("../index");
var tnp_config_1 = require("tnp-config");
var BuildsController = /** @class */ (function (_super) {
    tslib_1.__extends(BuildsController, _super);
    function BuildsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Update if proceses exists (by pid)
     */
    BuildsController.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ps, filteredBuilds;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, psList()];
                    case 1:
                        ps = _a.sent();
                        return [4 /*yield*/, this.getExisted(ps)];
                    case 2:
                        filteredBuilds = _a.sent();
                        return [4 /*yield*/, this.crud.setBulk(filteredBuilds, build_instance_1.BuildInstance)];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BuildsController.prototype.getExisted = function (ps) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var procs, _loop_1, index;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        procs = ps.filter(function (p) {
                            var _a;
                            return ((_a = p.cmd) === null || _a === void 0 ? void 0 : _a.split(' ').filter(function (p) {
                                var ends = ((tnp_config_1.config.coreBuildFrameworkNames || []).filter(function (c) {
                                    return p.endsWith("/bin/" + c);
                                }).length > 0);
                                return ends;
                            }).length) > 0;
                        });
                        _loop_1 = function (index) {
                            var p, location_1, project, splitCMd, tnpParam, db, lastBuildCommand, db, lastNotBuildCommand, b;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        p = procs[index];
                                        location_1 = tnp_helpers_1.Helpers.getWorkingDirOfProcess(p.pid);
                                        project = tnp_helpers_1.Project.From(location_1);
                                        if (!project) return [3 /*break*/, 8];
                                        tnp_helpers_1.Helpers.log("\n\n        location: " + location_1 + ",\n          pid: " + p.pid + ",\n          cmd: " + p.cmd + ",\n          ppid: " + p.ppid + ",\n\n        ", 1);
                                        splitCMd = (p === null || p === void 0 ? void 0 : p.cmd) ? p.cmd.split(' ') : [];
                                        if (!(splitCMd.length >= 3)) return [3 /*break*/, 6];
                                        tnpParam = tnp_helpers_1.Helpers.cliTool.simplifiedCmd(splitCMd[2]);
                                        if (![
                                            tnp_helpers_1.Helpers.cliTool.simplifiedCmd(index_1.DB.$LAST_BUILD),
                                            tnp_helpers_1.Helpers.cliTool.simplifiedCmd(index_1.DB.$LAST_BUILD, true),
                                        ].includes(tnpParam)) return [3 /*break*/, 3];
                                        return [4 /*yield*/, wrapper_db_backend_1.TnpDB.Instance()];
                                    case 1:
                                        db = _a.sent();
                                        return [4 /*yield*/, db.getCommands()];
                                    case 2:
                                        lastBuildCommand = (_a.sent()).find(function (c) { return c.location === location_1 && c.isBuildCommand; });
                                        if (lastBuildCommand) {
                                            p.cmd = lastBuildCommand.command;
                                        }
                                        return [3 /*break*/, 6];
                                    case 3:
                                        if (![
                                            tnp_helpers_1.Helpers.cliTool.simplifiedCmd(index_1.DB.$LAST),
                                            tnp_helpers_1.Helpers.cliTool.simplifiedCmd(index_1.DB.$LAST, true),
                                        ].includes(tnpParam)) return [3 /*break*/, 6];
                                        return [4 /*yield*/, wrapper_db_backend_1.TnpDB.Instance()];
                                    case 4:
                                        db = _a.sent();
                                        return [4 /*yield*/, db.getCommands()];
                                    case 5:
                                        lastNotBuildCommand = (_a.sent()).find(function (c) { return c.location === location_1 && !c.isBuildCommand; });
                                        if (lastNotBuildCommand) {
                                            p.cmd = lastNotBuildCommand.command;
                                        }
                                        _a.label = 6;
                                    case 6:
                                        b = new build_instance_1.BuildInstance({
                                            location: location_1,
                                            pid: p.pid,
                                            cmd: p.cmd,
                                            ppid: p.ppid,
                                        });
                                        return [4 /*yield*/, b.prepare('get existed')
                                            // console.log('result build instance', b)
                                        ];
                                    case 7:
                                        _a.sent();
                                        // console.log('result build instance', b)
                                        procs[index] = b;
                                        return [3 /*break*/, 9];
                                    case 8:
                                        procs[index] = void 0;
                                        _a.label = 9;
                                    case 9: return [2 /*return*/];
                                }
                            });
                        };
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < procs.length)) return [3 /*break*/, 4];
                        return [5 /*yield**/, _loop_1(index)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/, procs
                            .filter(function (b) { return !!b; })
                            .filter(function (b) { return b.isTnpProjectBuild; })];
                }
            });
        });
    };
    BuildsController.prototype.addExisted = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[db][reinit] adding existed builds");
                        return [4 /*yield*/, this.update()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BuildsController.prototype.killInstancesFrom = function (projects) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var projectsLocations;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        projectsLocations = projects.map(function (p) { return p.location; });
                        return [4 /*yield*/, this.crud.getAll(build_instance_1.BuildInstance)];
                    case 1:
                        (_a.sent())
                            .filter(function (b) { return projectsLocations.includes(b.project.location); })
                            .forEach(function (b) {
                            try {
                                b.kill();
                            }
                            catch (error) {
                                tnp_helpers_1.Helpers.warn("Not able to kill " + b.brief);
                            }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    BuildsController.prototype.add = function (project, buildOptions, pid, ppid) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentB;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentB = new build_instance_1.BuildInstance({
                            buildOptions: buildOptions,
                            pid: pid,
                            location: project.location,
                            ppid: ppid
                        });
                        return [4 /*yield*/, currentB.prepare('db add')];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.crud.addIfNotExist(currentB)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BuildsController.prototype.distBuildFoundedFor = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var all, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.update()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.crud.getAll(build_instance_1.BuildInstance)];
                    case 2:
                        all = _a.sent();
                        result = all.find(function (b) {
                            // if(b.location === '/Users/darek/projects/npm/firedev-projects/container-v2/workspace-v2/angular-lib-v2') {
                            //   console.log('checking ', b.location)
                            //   console.log('cmd ', b.cmd)
                            //   console.log('b.buildOptions.forClient ', b.buildOptions && (b.buildOptions.forClient as any[]).map(c => c.name));
                            // }
                            return b.location === project.location
                                && b.buildOptions
                                && b.buildOptions.watch === true
                                && b.buildOptions.appBuild === false
                                && (project.isStandaloneProject ? true :
                                    _.isObject(b.buildOptions.forClient.find(function (c) {
                                        // console.log(`checking ${c.name}`)
                                        return c.location === project.location;
                                    })));
                        });
                        // console.log(`result: ${!!result}`)
                        return [2 /*return*/, result];
                }
            });
        });
    };
    BuildsController.prototype.appBuildFoundedFor = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var all, possibleLocation, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.update()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.crud.getAll(build_instance_1.BuildInstance)];
                    case 2:
                        all = _a.sent();
                        possibleLocation = [];
                        if (project.isStandaloneProject) {
                            possibleLocation.push(project.location);
                        }
                        else if (project.isWorkspaceChildProject) {
                            project.parent.children.forEach(function (c) {
                                possibleLocation.push(c.location);
                            });
                        }
                        result = all.filter(function (b) {
                            return b.buildOptions
                                && b.buildOptions.watch === true
                                && b.buildOptions.appBuild === true
                                && possibleLocation.includes(b.location);
                        });
                        // console.log('result', result.map(c => {
                        //   return `${c.location},
                        //    appBuild: ${c.buildOptions.appBuild}
                        //    watch: ${c.buildOptions.watch}
                        //    `
                        // }))
                        return [2 /*return*/, result];
                }
            });
        });
    };
    BuildsController.prototype.getExistedByPid = function (pid) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var all;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.update()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.crud.getAll(build_instance_1.BuildInstance)];
                    case 2:
                        all = _a.sent();
                        return [2 /*return*/, all.find(function (a) { return a.pid === pid; })];
                }
            });
        });
    };
    BuildsController.prototype.getExistedForOptions = function (project, buildOptions, pid, ppid) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentB, all, existed;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.update()];
                    case 1:
                        _a.sent();
                        currentB = new build_instance_1.BuildInstance({ buildOptions: buildOptions, pid: pid, location: project.location, ppid: ppid });
                        return [4 /*yield*/, currentB.prepare('getExistedForOptions')];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.crud.getAll(build_instance_1.BuildInstance)];
                    case 3:
                        all = _a.sent();
                        existed = all.find(function (b) {
                            return b.isEqual(currentB);
                        });
                        if (_.isObject(existed)) {
                            return [2 /*return*/, existed];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    BuildsController = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('BuildsController')
    ], BuildsController);
    return BuildsController;
}(base_controlller_1.BaseController));
exports.BuildsController = BuildsController;
//#endregion
//# sourceMappingURL=builds-controller.js.map