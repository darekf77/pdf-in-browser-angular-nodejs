import { Project } from 'tnp-helpers';
import { PortInstance } from '../entites';
import { Models } from 'tnp-models';
export declare class PortsSet {
    private saveCallback;
    get numOfFreePortsAvailable(): number;
    get numOfTakenPortsAvailable(): number;
    get numOfAllPortsAvailable(): number;
    static get count(): {
        freePorts(ports: PortInstance[]): number;
        allPorts(ports: PortInstance[]): number;
    };
    private ports;
    constructor(ports: PortInstance[], saveCallback: (ports: PortInstance[]) => Promise<PortInstance[]>);
    private checkIfFreePortAmountEnouth;
    /**
     * @deprecated
     * // TODO refactor this
     */
    reserveFreePortsFor(projectLocationOrSystemService: Project | Models.system.SystemService, howManyPorts?: number): Promise<boolean>;
    private _reserveFreePortsFor;
    /**
     * Get port of just registerd service
     */
    registerOnFreePort(service: Models.system.SystemService, options?: Models.system.RegisterServiceOptions): Promise<number>;
    getReserverFor(projectLocationOrSevice: string | Models.system.SystemService): Promise<PortInstance[]>;
    getPortOf(service: Models.system.SystemService): Promise<number>;
    update(port: PortInstance): Promise<boolean>;
    remove(port: PortInstance): Promise<void>;
    private makeFree;
    makeFreeAndKill(portIns: PortInstance): Promise<void>;
    add(port: PortInstance): Promise<boolean>;
}
