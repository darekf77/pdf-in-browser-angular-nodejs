"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var base_controlller_1 = require("./base-controlller");
var entites_1 = require("../entites");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var DomainsController = /** @class */ (function (_super) {
    tslib_1.__extends(DomainsController, _super);
    function DomainsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    DomainsController.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    DomainsController.prototype.addExisted = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var domains;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[db][reinit] adding existed domains");
                        domains = [];
                        return [4 /*yield*/, this.crud.getAll(tnp_helpers_1.Project)];
                    case 1:
                        (_a.sent()).forEach(function (p) {
                            var project = p.project;
                            if (project && !project.isWorkspaceChildProject && project.env &&
                                project.env.config && project.env.config.domain) {
                                // console.log(`Domain detected: ${p.env.config.domain}, env:${p.env.config.name} `)
                                var address = project.env.config.domain;
                                var environment = project.env.config.name;
                                _this.addDomain(address, environment, domains, project);
                            }
                            if (project && project.env) {
                                project.env.configsFromJs.forEach(function (c) {
                                    _this.addDomain(c.domain, c.name, domains, project);
                                });
                            }
                        });
                        return [4 /*yield*/, this.crud.setBulk(domains, entites_1.DomainInstance)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DomainsController.prototype.addDomain = function (address, environment, domains, project) {
        if (!tnp_core_1._.isString(address) || address.trim() === '') {
            return;
        }
        var existed = domains.find(function (d) { return d.address === address; });
        if (existed) {
            if (existed.declaredIn.filter(function (d) { return d.environment === environment
                && d.project === d.project; }).length === 0) {
                existed.declaredIn.push({ project: project, environment: environment });
            }
        }
        else {
            var domain = new entites_1.DomainInstance();
            domain.address = address;
            domain.declaredIn = [{ project: project, environment: environment }];
            domains.push(domain);
        }
    };
    DomainsController = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('DomainsController')
    ], DomainsController);
    return DomainsController;
}(base_controlller_1.BaseController));
exports.DomainsController = DomainsController;
//#endregion
//# sourceMappingURL=domains-controller.js.map