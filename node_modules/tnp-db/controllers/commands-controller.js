"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var _ = require("lodash");
// const start = global.start as any;
var tnp_helpers_1 = require("tnp-helpers");
var base_controlller_1 = require("./base-controlller");
var command_instance_1 = require("../entites/command-instance");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var project_instance_1 = require("../entites/project-instance");
var tnp_config_1 = require("tnp-config");
var CommandsController = /** @class */ (function (_super) {
    tslib_1.__extends(CommandsController, _super);
    function CommandsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CommandsController.prototype.addExisted = function (previousCommands) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var projecsLocaitons;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[db][reinit] adding existed commands");
                        return [4 /*yield*/, this.crud.getAll(project_instance_1.ProjectInstance)];
                    case 1:
                        projecsLocaitons = (_a.sent()).map(function (p) { return p.locationOfProject; });
                        return [2 /*return*/, previousCommands.filter(function (c) { return projecsLocaitons.includes(c.location); })];
                }
            });
        });
    };
    CommandsController.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    CommandsController.prototype.lastCommandFrom = function (location, buildCommand) {
        if (buildCommand === void 0) { buildCommand = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var commands, cmd;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.getAll(command_instance_1.CommandInstance)];
                    case 1:
                        commands = _a.sent();
                        if (buildCommand) {
                            cmd = commands.find(function (c) {
                                return (c.location === location && c.isBuildCommand);
                            });
                        }
                        else {
                            cmd = commands.find(function (c) {
                                return (c.location === location && !c.isBuildCommand);
                            });
                            if (!cmd) {
                                cmd = commands.find(function (c) {
                                    return (c.location === location && c.isBuildCommand);
                                });
                            }
                        }
                        return [2 /*return*/, cmd];
                }
            });
        });
    };
    CommandsController.prototype.runCommand = function (cmd) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(cmd && _.isString(cmd.command) && cmd.command.trim() !== '')) return [3 /*break*/, 2];
                        return [4 /*yield*/, global.start(cmd.command.split(' '), tnp_config_1.config['frameworkName'], global['frameworkMode'])];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        tnp_helpers_1.Helpers.error("Last " + (cmd.isBuildCommand ? 'build' : '') + " command for location: " + cmd.location + " doen't exists", false, true);
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CommandsController.prototype.runLastCommandIn = function (location) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var commands, cmd;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.getAll(command_instance_1.CommandInstance)];
                    case 1:
                        commands = _a.sent();
                        cmd = commands.find(function (c) { return c.location === location; });
                        if (!(cmd && _.isString(cmd.command) && cmd.command.trim() !== '')) return [3 /*break*/, 3];
                        return [4 /*yield*/, global.start(cmd.command.split(' '), tnp_config_1.config['frameworkName'], global['frameworkMode'])];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        tnp_helpers_1.Helpers.error("Last command for location: " + cmd.location + " doen't exists", false, true);
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CommandsController.prototype.updateCommandBuildOptions = function (location, buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var cmd, clients, copyto;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log('getting last cmd');
                        return [4 /*yield*/, this.lastCommandFrom(location, true)];
                    case 1:
                        cmd = _a.sent();
                        if (!cmd) return [3 /*break*/, 3];
                        clients = _.isArray(buildOptions.forClient) ? tnp_helpers_1.Helpers.arrays.uniqArray(buildOptions.forClient, 'location')
                            .map(function (c) {
                            return "--forClient " + c.name;
                        }).join(' ') : '';
                        copyto = _.isArray(buildOptions.copyto) ?
                            tnp_helpers_1.Helpers.arrays.uniqArray(buildOptions.copyto, 'location')
                                .map(function (c) {
                                return "--copyto " + c.location;
                            }).join(' ') : '';
                        cmd.command = cmd.shortCommandForLastCommand + ' ' + clients + ' ' + copyto;
                        return [4 /*yield*/, this.crud.set(cmd)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    CommandsController = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('CommandsController')
    ], CommandsController);
    return CommandsController;
}(base_controlller_1.BaseController));
exports.CommandsController = CommandsController;
//#endregion
//# sourceMappingURL=commands-controller.js.map