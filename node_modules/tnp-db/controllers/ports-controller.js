"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_helpers_1 = require("tnp-helpers");
var tnp_models_1 = require("tnp-models");
var base_controlller_1 = require("./base-controlller");
var port_instance_1 = require("../entites/port-instance");
var ports_set_backend_1 = require("./ports-set.backend");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var PortsController = /** @class */ (function (_super) {
    tslib_1.__extends(PortsController, _super);
    function PortsController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PortsController.prototype.update = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Object.defineProperty(PortsController.prototype, "manager", {
        get: function () {
            var _this = this;
            return new Promise(function (resolve) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                var instances;
                var _this = this;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (!!this._manager) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.crud.getAll(port_instance_1.PortInstance)];
                        case 1:
                            instances = _a.sent();
                            this._manager = new ports_set_backend_1.PortsSet(instances, function (newPorts) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.crud.setBulk(newPorts, port_instance_1.PortInstance)];
                                        case 1:
                                            _a.sent();
                                            return [4 /*yield*/, this.crud.getAll(port_instance_1.PortInstance)];
                                        case 2: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); });
                            _a.label = 2;
                        case 2:
                            resolve(this._manager);
                            return [2 /*return*/];
                    }
                });
            }); });
        },
        enumerable: true,
        configurable: true
    });
    PortsController.prototype.addExisted = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var defaultPorts;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[db][reinit] adding existed ports");
                        defaultPorts = [
                            new port_instance_1.PortInstance([80, 443], new tnp_models_1.Models.system.SystemService('http(s) related')),
                            new port_instance_1.PortInstance(6000, new tnp_models_1.Models.system.SystemService('generaly not working... taken by something else')),
                            new port_instance_1.PortInstance(tnp_models_1.Models.other.Range.from(4300).to(5999))
                        ];
                        return [4 /*yield*/, this.crud.setBulk(defaultPorts, port_instance_1.PortInstance)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    PortsController = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('PortsController')
    ], PortsController);
    return PortsController;
}(base_controlller_1.BaseController));
exports.PortsController = PortsController;
//#endregion
//# sourceMappingURL=ports-controller.js.map