import { DBBaseEntity } from './entites/base-entity';
import { EntityNames } from './entites';
import { DbDaemonController, IDBCrud } from './daemon/deamon-controller';
import type { TnpDB } from './wrapper-db.backend';
import { Morphi } from 'morphi';
export declare class DbCrud {
    private dbFromFile;
    private dbWrapper;
    readonly worker: DbDaemonController;
    get db(): IDBCrud;
    constructor(dbFromFile: IDBCrud, dbWrapper: TnpDB);
    private createInstance;
    readonly context: Morphi.FrameworkContext;
    initDeamon(recreate?: boolean): Promise<void>;
    clearDBandReinit(defaultValues: {
        [entityName: string]: any[];
    }): Promise<void>;
    getAll<T extends DBBaseEntity>(classFN: Function): Promise<T[]>;
    addIfNotExist(entity: DBBaseEntity): Promise<boolean>;
    remove(entity: DBBaseEntity): Promise<boolean>;
    set(entity: DBBaseEntity): Promise<void>;
    setBulk(entites: DBBaseEntity[], classFN: Function): Promise<boolean>;
    protected afterRetrive<T = any>(value: any, entityName: EntityNames): Promise<DBBaseEntity>;
    protected preprareEntityForSave(entity: DBBaseEntity): string | DBBaseEntity<any>;
}
