import { Morphi } from 'morphi';
import { WorkerProcessClass } from 'background-worker-process';
export interface IDBCrud {
    read: () => Promise<any>;
    defaults: (any: any) => {
        write: () => Promise<any>;
    };
    set: (objPath: string, json: object) => {
        write: () => Promise<any>;
    };
    get: (objPath: string) => {
        value: () => Promise<any>;
    };
}
export declare class DbDaemonController extends WorkerProcessClass implements Morphi.BASE_CONTROLLER_INIT, IDBCrud {
    logArr: any[];
    log(msg: string): void;
    pathToDb: string;
    private _data;
    get data(): any;
    private debounce;
    private saveToFileAction;
    private saveToFileDebounceAction;
    read: () => Promise<void>;
    defaultsWriteToDB(data: any): Morphi.Response<any>;
    defaults: (data: any) => {
        write: () => Promise<any>;
    };
    triggerSave(): Morphi.Response<any>;
    triggerChangeOfProject(location: string, channel: string): Morphi.Response<any>;
    setValueToDb(objPath: string, json: object): Morphi.Response<any>;
    set: (objPath: string, json: object) => {
        write: () => Promise<any>;
    };
    getValueFromDb(objPath: string): Morphi.Response<any>;
    get: (objPath: string) => {
        value: () => Promise<any>;
    };
    copyAllToWorker(data: any, pathToDb: string): Morphi.Response<any>;
    get filename(): string;
    hello(): Morphi.Response;
    allprojects(): Morphi.Response<any>;
    info(): Morphi.Response<string>;
    showLog(): Morphi.Response<string>;
    wholeDb(): () => Promise<string>;
    wholeDbWithPath(pathToData: string): () => Promise<string>;
    showEntity(entityname: string): Morphi.Response<string>;
    initExampleDbData(): Promise<void>;
}
declare const _default: (port: any) => Promise<any>;
export default _default;
