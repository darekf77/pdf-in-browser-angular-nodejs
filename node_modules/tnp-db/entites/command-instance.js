"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_config_1 = require("tnp-config");
//#region @backend
var _ = require("lodash");
var base_entity_1 = require("./base-entity");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var CommandInstance = /** @class */ (function (_super) {
    tslib_1.__extends(CommandInstance, _super);
    function CommandInstance(command, location, isBuildCommand) {
        if (isBuildCommand === void 0) { isBuildCommand = false; }
        var _this = _super.call(this) || this;
        _this.command = command;
        _this.location = location;
        _this.isBuildCommand = isBuildCommand;
        _this.command = CommandInstance_1.fixedCommand(command);
        return _this;
    }
    CommandInstance_1 = CommandInstance;
    CommandInstance.prototype.isEqual = function (anotherInstace) {
        return (this.location === anotherInstace.location && this.isBuildCommand === anotherInstace.isBuildCommand);
    };
    CommandInstance.fixedCommand = function (command) {
        // console.log(`command to fix: ${command}`)
        if (!command) {
            return command;
        }
        var args = command.split(' ');
        var shortCoreToolsNames = tnp_config_1.config.coreBuildFrameworkNames;
        var i = args.findIndex(function (arg) {
            var ends = (shortCoreToolsNames.filter(function (s) { return arg.endsWith("/bin/" + s); }).length > 0);
            return ends;
        });
        if (i === -1) {
            return command;
        }
        // console.log('founded index', i)
        var res = tnp_config_1.config.frameworkName + " " + args.slice(i + 1, args.length).join(' ');
        // console.log('res', res)
        return res;
    };
    Object.defineProperty(CommandInstance.prototype, "shortCommandForLastCommand", {
        get: function () {
            if (!this.command) {
                return '';
            }
            var args = this.command.split(' ');
            if (_.first(args) === 'tnp') {
                return "tnp " + args[1];
            }
            var tnpArg = args.find(function (arg) { return arg.endsWith("/bin/tnp"); });
            var i = args.indexOf(tnpArg);
            if (i < args.length - 1) {
                return "tnp " + args[i + 1];
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    // project: Project;
    CommandInstance.from = function (location) {
        return {
            command: function (command) {
                var c = new CommandInstance_1(command, location);
                return c;
            }
        };
    };
    var CommandInstance_1;
    CommandInstance = CommandInstance_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('CommandInstance'),
        tslib_1.__metadata("design:paramtypes", [String, String, Boolean])
    ], CommandInstance);
    return CommandInstance;
}(base_entity_1.DBBaseEntity));
exports.CommandInstance = CommandInstance;
//#endregion
//# sourceMappingURL=command-instance.js.map