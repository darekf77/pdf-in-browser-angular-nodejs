"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var _ = require("lodash");
var command_instance_1 = require("./command-instance");
var base_entity_1 = require("./base-entity");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_2 = require("tnp-helpers");
var build_options_1 = require("../build-options");
var BuildInstance = /** @class */ (function (_super) {
    tslib_1.__extends(BuildInstance, _super);
    function BuildInstance(data) {
        var _this = _super.call(this) || this;
        if (!data) {
            data = {};
        }
        _this.data = data;
        return _this;
    }
    BuildInstance.prototype.prepare = function (reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var data, _a, _b, _c, _d, _e, _f;
            return tslib_1.__generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        data = this.data;
                        // console.log('PROJECT', !!Project)
                        // console.log('BuildOptions', !!BuildOptions)
                        this.pid = data.pid;
                        this.ppid = data.ppid;
                        this.location = data.location;
                        this.cmd = command_instance_1.CommandInstance.fixedCommand(data.cmd);
                        if (!this.cmd) return [3 /*break*/, 3];
                        _a = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.from(this.cmd, tnp_helpers_2.Project.From(this.location), void 0, reason)];
                    case 1:
                        _a._buildOptions = _g.sent();
                        _b = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.exportToCMD(this._buildOptions)];
                    case 2:
                        _b.cmd = _g.sent();
                        return [3 /*break*/, 9];
                    case 3:
                        if (!_.isObject(data.buildOptions)) return [3 /*break*/, 7];
                        _c = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.exportToCMD(data.buildOptions)];
                    case 4:
                        _c.cmd = _g.sent();
                        _d = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.from(this.cmd, tnp_helpers_2.Project.From(this.location), void 0, reason)];
                    case 5:
                        _d._buildOptions = _g.sent();
                        _e = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.exportToCMD(this._buildOptions)];
                    case 6:
                        _e.cmd = _g.sent();
                        return [3 /*break*/, 9];
                    case 7:
                        this.cmd = '';
                        _f = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.from(this.cmd, tnp_helpers_2.Project.From(this.location), void 0, reason)];
                    case 8:
                        _f._buildOptions = _g.sent();
                        _g.label = 9;
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(BuildInstance.prototype, "isTnpProjectBuild", {
        get: function () {
            var res = (_.isString(this.cmd) && this.cmd.trim() !== '' && _.isObject(this.buildOptions));
            // if (!res) {
            // console.log('it is not a build', this.cmd)
            // }
            return res;
        },
        enumerable: true,
        configurable: true
    });
    BuildInstance.prototype.updateCmdFrom = function (buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, _b;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.exportToCMD(buildOptions)];
                    case 1:
                        _a.cmd = _c.sent();
                        _b = this;
                        return [4 /*yield*/, build_options_1.BuildOptions.from(this.cmd, tnp_helpers_2.Project.From(this.location), void 0, 'update from cmd')];
                    case 2:
                        _b._buildOptions = _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(BuildInstance.prototype, "buildOptions", {
        get: function () {
            return this._buildOptions;
        },
        enumerable: true,
        configurable: true
    });
    BuildInstance.prototype.isEqual = function (anotherInstace) {
        if (!anotherInstace) {
            return false;
        }
        return (this.pid == anotherInstace.pid ||
            (this.location === anotherInstace.location &&
                this.buildOptions.watch === anotherInstace.buildOptions.watch &&
                this.buildOptions.appBuild === anotherInstace.buildOptions.appBuild &&
                this.buildOptions.outDir === anotherInstace.buildOptions.outDir));
    };
    Object.defineProperty(BuildInstance.prototype, "brief", {
        get: function () {
            var brief = this.buildOptions ? ('(' +
                (this.buildOptions.staticBuild ? 'static' : '') + ',' +
                (this.buildOptions.prod ? 'prod' : '') + ',' +
                (this.buildOptions.watch ? 'watch' : 'normal') + ',' +
                (this.buildOptions.appBuild ? 'app' : 'lib') + ',' +
                (this.buildOptions.outDir) +
                ')') : '';
            return brief + ("build instace for project: " + this.project.name + " on pid: " + this.pid);
        },
        enumerable: true,
        configurable: true
    });
    BuildInstance.prototype.kill = function () {
        tnp_helpers_1.Helpers.log("Killing " + this.brief);
        tnp_helpers_1.Helpers.killProcess(this.pid);
    };
    Object.defineProperty(BuildInstance.prototype, "project", {
        get: function () {
            return tnp_helpers_2.Project.From(this.location);
        },
        enumerable: true,
        configurable: true
    });
    BuildInstance = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('BuildInstance'),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], BuildInstance);
    return BuildInstance;
}(base_entity_1.DBBaseEntity));
exports.BuildInstance = BuildInstance;
//#endregion
//# sourceMappingURL=build-instance.js.map