"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var _ = require("lodash");
var tnp_models_1 = require("tnp-models");
var base_entity_1 = require("./base-entity");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var PortInstance = /** @class */ (function (_super) {
    tslib_1.__extends(PortInstance, _super);
    function PortInstance(id, reservedFor) {
        var _this = _super.call(this) || this;
        _this.id = id;
        _this.reservedFor = reservedFor;
        if (_.isArray(id)) {
            _this.id = _.sortBy(id);
        }
        return _this;
    }
    PortInstance_1 = PortInstance;
    PortInstance.clone = function (p) {
        if (_.isObject(p.id) && !_.isArray(p.id)) {
            return new PortInstance_1(tnp_models_1.Models.other.Range.clone(p.id), p.reservedFor);
        }
        if (_.isArray(p.id)) {
            return new PortInstance_1(_.cloneDeep(p.id), p.reservedFor);
        }
        return new PortInstance_1(p.id, p.reservedFor);
    };
    PortInstance.prototype.addIdIfPossible = function (id) {
        if (_.isNumber(this.id) && _.isNumber(id)) {
            this.id = [this.id, id];
            return true;
        }
        if (_.isArray(this.id) && _.isNumber(id)) {
            if (!this.id.includes(id)) {
                this.id.push(id);
                this.makeSmaller();
                return true;
            }
        }
        if (_.isObject(this.id) && _.isNumber(id)) {
            var idRange = this.id;
            if (idRange.to + 1 === id) {
                idRange.to = id;
                return true;
            }
        }
        return false;
    };
    Object.defineProperty(PortInstance.prototype, "isFree", {
        get: function () {
            return !this.reservedFor;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PortInstance.prototype, "array", {
        get: function () {
            var allPorts = [];
            if (_.isNumber(this.id)) {
                allPorts.push(this.id);
            }
            if (_.isArray(this.id)) {
                allPorts = allPorts.concat(this.id);
            }
            if (!_.isArray(this.id) && _.isObject(this.id)) {
                var range = this.id;
                allPorts = allPorts.concat(range.array);
            }
            return allPorts;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PortInstance.prototype, "size", {
        get: function () {
            if (_.isUndefined(this.id)) {
                console.log(this);
                throw "Undefined id for instace above";
            }
            if (_.isNumber(this.id)) {
                return 1;
            }
            if (_.isArray(this.id)) {
                return this.id.length;
            }
            // console.log('THIS ID',this.id)
            return this.id.length;
        },
        enumerable: true,
        configurable: true
    });
    PortInstance.prototype.isEqual = function (port) {
        if (!port) {
            return false;
        }
        return _.isEqual(this.id, port.id);
    };
    Object.defineProperty(PortInstance.prototype, "sortIndex", {
        get: function () {
            if (_.isNumber(this.id)) {
                return this.id;
            }
            if (_.isArray(this.id)) {
                return _.first(this.id);
            }
            return this.id.from;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * [1] => 1
     * [1,2,3,4,5] => Range(0 to 5)
     * Range(1 to 1) => 1
     */
    PortInstance.prototype.makeSmaller = function () {
        if (_.isArray(this.id)) {
            if (this.id.length === 0) {
                this.id = _.first(this.id);
                return;
            }
            if (_.first(this.id) + (this.id.length - 1) === _.last(this.id)) {
                this.id = tnp_models_1.Models.other.Range.from(_.first(this.id)).to(_.last(this.id));
                return;
            }
        }
        if (_.isObject(this.id)) {
            var rangeId = this.id;
            if (rangeId.from === rangeId.to) {
                this.id = rangeId.from;
                return;
            }
        }
    };
    PortInstance.prototype.includes = function (anotherInstance) {
        var _this = this;
        var anotherId = anotherInstance.id;
        // simple types
        if (_.isNumber(this.id) && _.isNumber(anotherId)) {
            return this.id === anotherId;
        }
        if (_.isArray(this.id) && _.isArray(anotherId)) {
            return anotherId.filter(function (another) {
                return _this.id.includes(another);
            }).length > 0;
        }
        if (_.isObject(this.id) && !_.isArray(this.id) &&
            _.isObject(anotherId) && !_.isArray(anotherId)) {
            var idRange = this.id;
            var anotherIdRange = anotherId;
            return idRange.contains(anotherIdRange);
        }
        // mixed types
        if (_.isNumber(this.id) && _.isArray(anotherId)) {
            return anotherId.includes(this.id);
        }
        if (_.isNumber(this.id) && _.isObject(anotherId)) {
            return anotherId.contains(this.id);
        }
        if (_.isArray(this.id) && _.isNumber(anotherId)) {
            return this.id.includes(anotherId);
        }
        if (_.isArray(this.id) && _.isObject(anotherId) && !_.isArray(anotherId)) {
            return this.id.filter(function (num) { return anotherId.contains(num); })
                .length === this.id.length;
        }
        if (_.isObject(this.id) && !_.isArray(this.id) && _.isNumber(anotherId)) {
            return this.id.contains(anotherId);
        }
        if (_.isObject(this.id) && !_.isArray(this.id) && _.isArray(anotherId)) {
            return anotherId.filter(function (num) { return _this.id.contains(num); })
                .length === anotherId.length;
        }
        // console.warn('Port instacne unknow types')
        return false;
    };
    var PortInstance_1;
    PortInstance = PortInstance_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('PortInstance'),
        tslib_1.__metadata("design:paramtypes", [Object, Object])
    ], PortInstance);
    return PortInstance;
}(base_entity_1.DBBaseEntity));
exports.PortInstance = PortInstance;
//#endregion
//# sourceMappingURL=port-instance.js.map