"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var low = require("lowdb");
var fse = require("fs-extra");
var _ = require("lodash");
var path = require("path");
var FileSync = require("lowdb/adapters/FileSync");
//#endregion
//#region isomorphic
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_helpers_1 = require("tnp-helpers");
//#endregion
//#region local
var db_crud_1 = require("./db-crud");
var deamon_controller_1 = require("./daemon/deamon-controller");
var daemon_entity_1 = require("./daemon/daemon-entity");
var controllers_1 = require("./controllers");
var entites_1 = require("./entites");
//#endregion
var tnp_config_1 = require("tnp-config");
var buildOptionsParams = ['watch', 'appBuild', 'prod'];
var entites_2 = require("./entites");
exports.BuildInstance = entites_2.BuildInstance;
exports.CommandInstance = entites_2.CommandInstance;
exports.ProjectInstance = entites_2.ProjectInstance;
exports.ProcessInstance = entites_2.ProcessInstance;
// const log = Helpers.Log.create(`[tnp-db][wrapper-db.backend]`);
var TnpDB = /** @class */ (function () {
    //#region constructor/init
    function TnpDB(location) {
        this.location = location;
    }
    TnpDB.instance = function (location) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this._instance) return [3 /*break*/, 2];
                        this._instance = new TnpDB(location);
                        return [4 /*yield*/, this._instance.init(!fse.existsSync(location))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this._instance];
                }
            });
        });
    };
    TnpDB.Instance = function (dbLocation) {
        return this.instance(tnp_config_1.config.dbLocation);
    };
    Object.defineProperty(TnpDB, "InstanceSync", {
        get: function () {
            if (!this._instance) {
                tnp_helpers_1.Helpers.error("Please use (await TnpDB.Instance) here");
            }
            return this._instance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TnpDB.prototype, "portsManaber", {
        get: function () {
            return this.__portsCtrl.manager;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TnpDB.prototype, "db", {
        get: function () {
            var _a;
            return (_a = this.crud) === null || _a === void 0 ? void 0 : _a.db;
        },
        enumerable: true,
        configurable: true
    });
    TnpDB.prototype.rawGet = function (keyOrEntityName) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.db) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.db.get(keyOrEntityName).value()];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.rawSet = function (keyOrEntityName, json) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.db) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.db.set(keyOrEntityName, json).write()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    TnpDB.prototype.listenToChannel = function (project, channel, callback) {
        daemon_entity_1.DbUpdateProjectEntity.for(project).subscribeRealtimeUpdates({
            callback: function (data) {
                tnp_helpers_1.Helpers.log("ext update. channel: \"" + channel + "\" ", data.body.json);
                _.isFunction(callback) && tnp_helpers_1.Helpers.runSyncOrAsync(callback);
            },
            property: channel
        });
    };
    TnpDB.prototype.triggerChangeForProject = function (project, channel) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.worker.triggerChangeOfProject(project.location, channel).received];
                    case 1: return [2 /*return*/, _a.sent()]; // TODO QUICK_FIX
                }
            });
        });
    };
    TnpDB.prototype.init = function (recreate) {
        if (recreate === void 0) { recreate = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var previousCommands;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (global.reinitDb) {
                            recreate = true;
                        }
                        if (recreate) {
                            if (global.dbAlreadyRecreated) {
                                tnp_helpers_1.Helpers.log("[tnp-db] db already recreated");
                                return [2 /*return*/];
                            }
                            global.dbAlreadyRecreated = true;
                            tnp_helpers_1.Helpers.log('[db] recreate db instance');
                        }
                        if (!tnp_helpers_1.Helpers.exists(this.location)) {
                            tnp_helpers_1.Helpers.writeFile(this.location, '');
                        }
                        this._adapter = new FileSync(this.location);
                        this.crud = new db_crud_1.DbCrud(low(this._adapter), this);
                        // Helpers.log('[db] Writed default values');
                        this.__projectsCtrl = new controllers_1.ProjectsController(this.crud);
                        this.__domainsCtrl = new controllers_1.DomainsController(this.crud);
                        this.__buildsCtrl = new controllers_1.BuildsController(this.crud);
                        this.__portsCtrl = new controllers_1.PortsController(this.crud);
                        this.__commandsCtrl = new controllers_1.CommandsController(this.crud);
                        this.__processCtrl = new controllers_1.ProcessController(this.crud);
                        if (!recreate) return [3 /*break*/, 11];
                        tnp_helpers_1.Helpers.log('[db] reinit transacton started');
                        return [4 /*yield*/, this.crud.getAll(entites_1.CommandInstance)];
                    case 1:
                        previousCommands = _a.sent();
                        tnp_helpers_1.Helpers.log("[db][reinit] writing default values");
                        return [4 /*yield*/, this.crud.clearDBandReinit({
                                projects: [],
                                domains: [],
                                ports: [],
                                builds: [],
                                commands: [],
                                processes: []
                            })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.__projectsCtrl.addExisted()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.__domainsCtrl.addExisted()];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.__commandsCtrl.addExisted(previousCommands)];
                    case 5:
                        _a.sent();
                        return [4 /*yield*/, this.__portsCtrl.addExisted()];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.__buildsCtrl.addExisted()];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.__processCtrl.addExisted()];
                    case 8:
                        _a.sent();
                        if (!tnp_config_1.config) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.initCoreProjects()];
                    case 9:
                        _a.sent();
                        _a.label = 10;
                    case 10:
                        tnp_helpers_1.Helpers.info("[db][reinit] DONE");
                        tnp_helpers_1.Helpers.log('[db] reinit transacton finish');
                        _a.label = 11;
                    case 11:
                        if (!global.useWorker) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.crud.initDeamon(recreate || global.restartWorker)];
                    case 12:
                        _a.sent();
                        _a.label = 13;
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region initCoreprojects
    TnpDB.prototype.initCoreProjects = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var allCoreProject, index, p, linkedFiles, index2, l, source, dest;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        allCoreProject = [];
                        tnp_config_1.config.coreProjectVersions.forEach(function (v) {
                            var corePorjectsTypes = ['angular-lib', 'isomorphic-lib'];
                            var projects = corePorjectsTypes.map(function (t) { return tnp_helpers_1.Project.by(t, v); });
                            allCoreProject = tslib_1.__spreadArrays(projects, allCoreProject);
                        });
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < allCoreProject.length)) return [3 /*break*/, 4];
                        p = allCoreProject[index];
                        console.log(p.genericName + " " + p.location);
                        linkedFiles = p.projectLinkedFiles();
                        for (index2 = 0; index2 < linkedFiles.length; index2++) {
                            l = linkedFiles[index2];
                            source = path.join(l.sourceProject.location, l.relativePath);
                            dest = path.join(p.location, l.relativePath);
                            if (!tnp_helpers_1.Helpers.exists(source)) {
                                tnp_helpers_1.Helpers.error("[config] Core source do not exists: " + source, false, true);
                            }
                            tnp_helpers_1.Helpers.info("link from: " + source + " to " + dest);
                            tnp_helpers_1.Helpers.createSymLink(source, dest);
                        }
                        return [4 /*yield*/, p.filesStructure.struct()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        index++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TnpDB.prototype.getWokerPort = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var portsManager;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.portsManaber];
                    case 1:
                        portsManager = _a.sent();
                        return [4 /*yield*/, portsManager.getPortOf({ name: typescript_class_helpers_1.CLASS.getName(deamon_controller_1.DbDaemonController) })];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.killWorker = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var portsManager, error_1, portTokill;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.portsManaber];
                    case 1:
                        portsManager = _a.sent();
                        tnp_helpers_1.Helpers.log("[killing worker] starting killing db worker...");
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, this.db.triggerSave().received];
                    case 3:
                        _a.sent();
                        tnp_helpers_1.Helpers.log("[killing worker] trigerr save OK");
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        tnp_helpers_1.Helpers.log("[killing worker] trigerr save ERROR");
                        return [3 /*break*/, 5];
                    case 5: return [4 /*yield*/, portsManager.getPortOf({ name: typescript_class_helpers_1.CLASS.getName(deamon_controller_1.DbDaemonController) })];
                    case 6:
                        portTokill = _a.sent();
                        return [4 /*yield*/, tnp_helpers_1.Helpers.killProcessByPort(portTokill)];
                    case 7:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#region check if build allowed
    TnpDB.prototype.checkBuildIfAllowed = function (currentProject, buildOptions, pid, ppid, onlyUpdate) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var killAndRemove, existed, confirm_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // console.log('current build options', buildOptions)
                    return [4 /*yield*/, this.__projectsCtrl.addIfNotExists(entites_1.ProjectInstance.from(currentProject))];
                    case 1:
                        // console.log('current build options', buildOptions)
                        _a.sent();
                        killAndRemove = function (existed) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        try {
                                            tnp_helpers_1.Helpers.killProcess(existed.pid);
                                        }
                                        catch (error) {
                                        }
                                        return [4 /*yield*/, this.crud.remove(existed)];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); };
                        _a.label = 2;
                    case 2:
                        if (!true) return [3 /*break*/, 13];
                        if (onlyUpdate) {
                            return [3 /*break*/, 13];
                        }
                        return [4 /*yield*/, this.__buildsCtrl.getExistedForOptions(currentProject, buildOptions, pid, ppid)];
                    case 3:
                        existed = _a.sent();
                        if (!(existed && currentProject.isGenerated === existed.project.isGenerated)) return [3 /*break*/, 10];
                        if (!global.tnpNonInteractive) return [3 /*break*/, 5];
                        tnp_helpers_1.Helpers.warn('automatic kill of active build instance in static build mode');
                        return [4 /*yield*/, killAndRemove(existed)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 2];
                    case 5:
                        if (!(existed.pid !== process.pid)) return [3 /*break*/, 9];
                        tnp_helpers_1.Helpers.log("\n\n          Current process pid: " + process.pid + ", current ppid: " + process.ppid + "\n\n          ");
                        return [4 /*yield*/, tnp_helpers_1.Helpers.questionYesNo("\n\n          There is active process on pid " + existed.pid + ", do you wanna kill this process ?\n         build options: " + existed.buildOptions.toString())];
                    case 6:
                        confirm_1 = _a.sent();
                        if (!confirm_1) return [3 /*break*/, 8];
                        return [4 /*yield*/, killAndRemove(existed)];
                    case 7:
                        _a.sent();
                        return [3 /*break*/, 2];
                    case 8:
                        process.exit(0);
                        _a.label = 9;
                    case 9: return [3 /*break*/, 12];
                    case 10: return [4 /*yield*/, this.__buildsCtrl.add(currentProject, buildOptions, pid, ppid)];
                    case 11:
                        _a.sent();
                        _a.label = 12;
                    case 12: return [3 /*break*/, 13];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region processes
    /**
     * bounding of realtime BE/FE processes
     */
    TnpDB.prototype.boundActions = function (action1, action2) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var d, proc;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, action1(void 0)];
                    case 1:
                        d = _a.sent();
                        return [4 /*yield*/, this.boundProcess(d.metaInfo, d.relation1TO1entityId)];
                    case 2:
                        proc = _a.sent();
                        return [4 /*yield*/, action2(proc)];
                    case 3:
                        d = _a.sent();
                        if (!d) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.boundProcess(d.metaInfo, d.relation1TO1entityId)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    TnpDB.prototype.boundProcess = function (metaInfo, relation1TO1entityId) {
        var _this = this;
        return new Promise(function (resolve) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var proc;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__processCtrl.boundProcess(metaInfo, relation1TO1entityId)];
                    case 1:
                        proc = _a.sent();
                        resolve(proc);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    TnpDB.prototype.getProceses = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.getAll(entites_1.ProcessInstance)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.resetProcessess = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.setBulk([], entites_1.ProcessInstance)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TnpDB.prototype.updateProcesses = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_helpers_1.Helpers.log("[db] Updating buillds...");
                        return [4 /*yield*/, this.__buildsCtrl.update()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region commands
    TnpDB.prototype.runCommand = function (cmd) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__commandsCtrl.runCommand(cmd)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TnpDB.prototype.getCommands = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.getAll(entites_1.CommandInstance)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.lastCommandFrom = function (location, buildCommand) {
        if (buildCommand === void 0) { buildCommand = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__commandsCtrl.lastCommandFrom(location, buildCommand)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.setCommand = function (command) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var location, cb, c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        location = process.cwd();
                        if (!fse.existsSync(location)) {
                            tnp_helpers_1.Helpers.error("Cannot set command - location doesn't exists: " + location);
                            return [2 /*return*/];
                        }
                        cb = new entites_1.CommandInstance(command, location);
                        if (!(_.isString(cb.command) && cb.command.trim().startsWith(tnp_config_1.config.frameworkName + " b"))) return [3 /*break*/, 2];
                        cb.isBuildCommand = true;
                        return [4 /*yield*/, this.crud.set(cb)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2:
                        c = new entites_1.CommandInstance(command, location);
                        return [4 /*yield*/, this.crud.set(c)];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TnpDB.prototype.updateCommandBuildOptions = function (location, buildOptions) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__commandsCtrl.updateCommandBuildOptions(location, buildOptions)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region builds
    TnpDB.prototype.getBuildsBy = function (options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var buildsFromDB, paramsToCheck;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getBuilds()];
                    case 1:
                        buildsFromDB = _a.sent();
                        if (_.isNil(options)) {
                            return [2 /*return*/, buildsFromDB];
                        }
                        paramsToCheck = Object.keys(options);
                        if (paramsToCheck.length === 0) {
                            return [2 /*return*/, buildsFromDB];
                        }
                        return [2 /*return*/, buildsFromDB.filter(function (build) {
                                return paramsToCheck.filter(function (p) {
                                    if (buildOptionsParams.includes(p)) {
                                        return build.buildOptions && build.buildOptions[p] == options[p];
                                    }
                                    else {
                                        return build[p] == options[p];
                                    }
                                }).length === paramsToCheck.length;
                            })];
                }
            });
        });
    };
    TnpDB.prototype.distBuildFoundedFor = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__buildsCtrl.distBuildFoundedFor(project)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.appBuildFoundedFor = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__buildsCtrl.appBuildFoundedFor(project)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.getBuilds = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__buildsCtrl.update()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.crud.getAll(entites_1.BuildInstance)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    TnpDB.prototype.updateBuildOptions = function (buildOptions, pid) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var existed;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__buildsCtrl.getExistedByPid(pid)];
                    case 1:
                        existed = _a.sent();
                        if (!existed) return [3 /*break*/, 4];
                        return [4 /*yield*/, existed.updateCmdFrom(buildOptions)];
                    case 2:
                        _a.sent();
                        // console.log(existed);
                        return [4 /*yield*/, this.crud.set(existed)];
                    case 3:
                        // console.log(existed);
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    //#endregion
    //#region projects
    TnpDB.prototype.getProjects = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var projects;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.getAll(entites_1.ProjectInstance)];
                    case 1:
                        projects = _a.sent();
                        projects = projects.filter(function (p) { return !!p.project; });
                        return [4 /*yield*/, this.crud.setBulk(projects, entites_1.ProjectInstance)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, projects];
                }
            });
        });
    };
    TnpDB.prototype.addProjectIfNotExist = function (project) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__projectsCtrl.addIfNotExists(entites_1.ProjectInstance.from(project))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TnpDB.prototype.killInstancesFrom = function (projects) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.__buildsCtrl.update()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.__buildsCtrl.killInstancesFrom(projects)];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.__buildsCtrl.update()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return TnpDB;
}());
exports.TnpDB = TnpDB;
//# sourceMappingURL=wrapper-db.backend.js.map