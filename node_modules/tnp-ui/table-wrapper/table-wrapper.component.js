"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var _ = require("lodash");
var morphi_1 = require("morphi");
var ng2_logger_1 = require("ng2-logger");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var log = ng2_logger_1.Log.create('Table wrapper');
var TableWrapperComponent = /** @class */ (function () {
    function TableWrapperComponent() {
        this.arrayDataConfig = new morphi_1.Morphi.CRUD.ModelDataConfig();
        this.allowedColumns = [];
        this.messages = {
            emptyMessage: undefined,
            totalMessage: undefined
        };
        this.rows = _.times(50, function (id) {
            return {
                id: id,
                name: "Amazing " + id + " row "
            };
        });
        this.columns = [
            {
                prop: 'id'
            },
            {
                prop: 'name'
            }
        ];
    }
    TableWrapperComponent.prototype.setSorting = function (e) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                log.i('sorting', e);
                return [2 /*return*/];
            });
        });
    };
    TableWrapperComponent.prototype.setPage = function (e) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.arrayDataConfig.set.pagination.pageNumber(e.offset + 1);
                        return [4 /*yield*/, this.retriveData()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    TableWrapperComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var columns, error_1;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.arrayDataConfig.set.pagination.rowDisplayed(5);
                        log.i('arrayDataConfig', this.arrayDataConfig);
                        log.i('this.crud.entity', typescript_class_helpers_1.CLASS.describeProperites(this.crud.entity));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        columns = typescript_class_helpers_1.CLASS.describeProperites(this.crud.entity)
                            .filter(function (prop) { return _this.allowedColumns.length > 0 ? _this.allowedColumns.includes(prop) : true; })
                            .map(function (prop) {
                            return { prop: prop };
                        });
                        this.columns = columns;
                        log.i('columns', columns);
                        return [4 /*yield*/, this.retriveData()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TableWrapperComponent.prototype.retriveData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rows, totalElements;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.getAll(this.arrayDataConfig).received.observable.take(1).toPromise()];
                    case 1:
                        rows = _a.sent();
                        totalElements = Number(rows.headers.get(morphi_1.Morphi.SYMBOL.X_TOTAL_COUNT));
                        if (!isNaN(totalElements)) {
                            this.arrayDataConfig.set.pagination.totalElement(totalElements);
                        }
                        log.i(morphi_1.Morphi.SYMBOL.X_TOTAL_COUNT, rows.headers.get(morphi_1.Morphi.SYMBOL.X_TOTAL_COUNT));
                        log.i('rows', rows.body.json);
                        this.rows = rows.body.json;
                        return [2 /*return*/];
                }
            });
        });
    };
    TableWrapperComponent.prototype.onTableContextMenu = function (e) {
        // if (this.rowHref) {
        //   this.router.navigateByUrl(this.rowHref)
        // }
        log.i('context menu event', e);
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], TableWrapperComponent.prototype, "arrayDataConfig", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], TableWrapperComponent.prototype, "rowHref", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], TableWrapperComponent.prototype, "allowedColumns", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", morphi_1.Morphi.CRUD.Base)
    ], TableWrapperComponent.prototype, "crud", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], TableWrapperComponent.prototype, "rows", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], TableWrapperComponent.prototype, "columns", void 0);
    TableWrapperComponent = tslib_1.__decorate([
        core_1.Component({
            selector: 'app-table-wrapper',
            templateUrl: './table-wrapper.component.html',
            styleUrls: ['./table-wrapper.component.scss']
        }),
        tslib_1.__metadata("design:paramtypes", [])
    ], TableWrapperComponent);
    return TableWrapperComponent;
}());
exports.TableWrapperComponent = TableWrapperComponent;
//# sourceMappingURL=table-wrapper.component.js.map