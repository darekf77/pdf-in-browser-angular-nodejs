"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
var core_1 = require("@angular/core");
var dialog_1 = require("@angular/material/dialog");
var ngx_store_1 = require("ngx-store");
var ng2_logger_1 = require("ng2-logger");
var log = ng2_logger_1.Log.create('draggable popup component', ng2_logger_1.Level.__NOTHING);
var modalPosLeft = 100;
var modalPosTop = 100;
var modalWidth = (window.innerWidth / 2) || 400;
var modalHeight = 260;
var DraggablePopupComponent = /** @class */ (function () {
    // public dialogRef: MatDialogRef<DraggablePopupWindowComponent>;
    function DraggablePopupComponent(dialog) {
        this.dialog = dialog;
        this.isBeforeNgInit = true;
        this.title = '';
        this.onPin = new core_1.EventEmitter();
        // console.log(mdiBell)
    }
    Object.defineProperty(DraggablePopupComponent.prototype, "height", {
        get: function () {
            if (this.id && this.sizeById[this.id]) {
                return this.sizeById[this.id].height;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DraggablePopupComponent.prototype, "isPinned", {
        // @LocalStorage() private pinnedById: {
        //   [key: string]: boolean;
        // } & { save: () => void; } = {} as any;
        // private usePinnedValueFromStorage = true;
        get: function () {
            return this.pinned;
            // if (this.isBeforeNgInit) {
            //   return this.pinned;
            // }
            // if(this.usePinnedValueFromStorage) {
            //   return this.pinnedById[this.id];
            // }
            // return this.usePinnedValueFromStorage;
        },
        set: function (v) {
            this.pinned = v;
            this.onPin.next(v);
            // if (this.isBeforeNgInit) {
            //   return;
            // }
            // if(this.usePinnedValueFromStorage) {
            //   this.pinnedById[this.id] = v;
            // } else {
            //   // @ts-ignore
            //   this.pinned = v;
            // }
            // this.onPin.next(v);
        },
        enumerable: true,
        configurable: true
    });
    DraggablePopupComponent.prototype.reset = function () {
        this.positionsById[this.id] = void 0;
        this.sizeById[this.id] = void 0;
        this.init(false);
    };
    DraggablePopupComponent.prototype.init = function (open) {
        var _this = this;
        if (open === void 0) { open = true; }
        log.i("Initing with id=" + this.id);
        var position = this.positionsById[this.id] ? this.positionsById[this.id] : {
            left: modalPosLeft,
            top: modalPosTop
        };
        this.positionsById[this.id] = position;
        this.positionsById.save();
        log.i("localStoragePositionAvailable", position);
        var size = this.sizeById[this.id] ? this.sizeById[this.id] : {
            x: modalWidth,
            y: modalHeight,
        };
        this.sizeById[this.id] = size;
        this.sizeById.save();
        log.i("localStorageSizeAvailable", size);
        this.initialPos = {
            x: position.left,
            y: position.top,
        };
        this.initialSize = {
            w: size.width,
            h: size.height,
        };
        if (open) {
            setTimeout(function () {
                _this.modalRoot.show();
            });
        }
    };
    DraggablePopupComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var idAvailable;
            return tslib_1.__generator(this, function (_a) {
                this.positionsById = this.positionsById ? this.positionsById : {};
                this.sizeById = this.sizeById ? this.sizeById : {};
                // if (_.isUndefined(this.pinned)) {
                //   this.usePinnedValueFromStorage = true;
                // }
                this.isBeforeNgInit = false;
                idAvailable = (!_.isNil(this.id) && !_.isObject(this.id));
                return [2 /*return*/];
            });
        });
    };
    DraggablePopupComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.isOpen) {
            setTimeout(function () {
                _this.init();
            });
        }
    };
    DraggablePopupComponent.prototype.ngOnDestroy = function () {
        // this.dialogRef?.close()
        this.modalRoot.hide();
    };
    DraggablePopupComponent.prototype.closePopup = function () {
        this.setPinned(false);
        this.modalRoot.hide();
    };
    DraggablePopupComponent.prototype.setPinned = function (v) {
        if (this.id) {
            this.isPinned = v;
        }
    };
    DraggablePopupComponent.prototype.newSize = function (size) {
        if (!this.id) {
            log.w("no praent id... no update for local sorage values");
            return;
        }
        log.i("Updating local sorage size values");
        this.sizeById[this.id].width = size.w;
        this.sizeById[this.id].height = size.h;
        this.sizeById = this.sizeById;
        this.sizeById.save();
        log.i("saved size id=" + this.id, this.sizeById[this.id]);
    };
    DraggablePopupComponent.prototype.newPosition = function (pos) {
        if (!this.id) {
            log.w("no praent id... no update for local sorage values");
            return;
        }
        log.i("Updating local sorage position values");
        this.positionsById[this.id].left = pos.x;
        this.positionsById[this.id].top = pos.y;
        this.positionsById = this.positionsById;
        this.positionsById.save();
        log.i("saved position id=" + this.id, this.positionsById[this.id]);
    };
    DraggablePopupComponent.popups = {};
    tslib_1.__decorate([
        core_1.ViewChild('modalRoot'),
        tslib_1.__metadata("design:type", Object)
    ], DraggablePopupComponent.prototype, "modalRoot", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], DraggablePopupComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], DraggablePopupComponent.prototype, "title", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DraggablePopupComponent.prototype, "isOpen", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", Object)
    ], DraggablePopupComponent.prototype, "onPin", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], DraggablePopupComponent.prototype, "pinned", void 0);
    tslib_1.__decorate([
        ngx_store_1.LocalStorage(),
        tslib_1.__metadata("design:type", Object)
    ], DraggablePopupComponent.prototype, "positionsById", void 0);
    tslib_1.__decorate([
        ngx_store_1.LocalStorage(),
        tslib_1.__metadata("design:type", Object)
    ], DraggablePopupComponent.prototype, "sizeById", void 0);
    DraggablePopupComponent = tslib_1.__decorate([
        core_1.Component({
            selector: 'app-draggable-popup',
            templateUrl: 'draggable-popup.component.html',
            styleUrls: ['draggable-popup.component.scss'],
            encapsulation: core_1.ViewEncapsulation.None,
        }),
        tslib_1.__metadata("design:paramtypes", [dialog_1.MatDialog])
    ], DraggablePopupComponent);
    return DraggablePopupComponent;
}());
exports.DraggablePopupComponent = DraggablePopupComponent;
//# sourceMappingURL=draggable-popup.component.js.map