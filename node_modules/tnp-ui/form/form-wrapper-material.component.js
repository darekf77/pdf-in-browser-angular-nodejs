"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("lodash");
// angular
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
// material
var dialog_1 = require("@angular/material/dialog");
// other
var morphi_1 = require("morphi");
var ng2_logger_1 = require("ng2-logger");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var log = ng2_logger_1.Log.create('form warpper material component');
var FormWrapperMaterialComponent = /** @class */ (function () {
    function FormWrapperMaterialComponent(dialog, resolver) {
        this.dialog = dialog;
        this.resolver = resolver;
        this.modelDataConfig = new morphi_1.Morphi.CRUD.ModelDataConfig();
        this.formly = {
            form: (undefined),
            options: undefined,
            fields: undefined
        };
        this.mode = 'update';
        this.form = new forms_1.FormGroup({});
        this.model = {};
        this.showButtons = true;
        this.options = {};
        this.fields = [];
        this.backupModel = {};
        this.submit = new core_1.EventEmitter();
        this.complete = new core_1.EventEmitter();
    }
    Object.defineProperty(FormWrapperMaterialComponent.prototype, "hasRegisteredCmp", {
        get: function () {
            return !!this.ftype;
        },
        enumerable: true,
        configurable: true
    });
    FormWrapperMaterialComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var ob, m;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        log.i('[formwarpper] this.fields before anyting from input', this.fields);
                        // console.log('model', this.model);
                        // log.i(`CRUD`, this.crud);
                        if (!this.entity && this.crud && this.crud.entity) {
                            this.entity = this.crud.entity;
                        }
                        if (!this.entity && _.isObject(this.model)) {
                            ob = _.isArray(this.model) ? _.first(this.model) : this.model;
                            this.entity = typescript_class_helpers_1.CLASS.getFromObject(ob);
                        }
                        log.i('[formwarpper] this.fields before resolve from input', this.fields);
                        this.resolveFields();
                        this.formly.options = this.options;
                        this.formly.form = this.formGroup ? this.formGroup : this.form;
                        this.setModel(this.model);
                        if (!(!_.isUndefined(this.id))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.crud.getBy(this.id, this.modelDataConfig).received];
                    case 1:
                        m = _a.sent();
                        this.setModel(m.body.json);
                        _a.label = 2;
                    case 2:
                        this.createOrder();
                        log.i('result formly', this.formly);
                        return [2 /*return*/];
                }
            });
        });
    };
    FormWrapperMaterialComponent.prototype.waringAboutDecorator = function () {
        console.error("\n\n    Please use:\n    @Morphi.Entity(...)\n\n    decorator for entity \"" + (this.entity && _.trim(this.entity.name)) + "\"\n\n    ");
    };
    FormWrapperMaterialComponent.prototype.resolveFields = function () {
        var _this = this;
        var fieldsFromEntity = _.isFunction(this.entity) ? morphi_1.Morphi.Formly.getFrom(this.entity) : [];
        log.i("fields from entity : " + (this.entity && this.entity.name), fieldsFromEntity);
        if (_.isFunction(this.entity) && !fieldsFromEntity) {
            this.waringAboutDecorator();
        }
        if (_.isArray(this.fields)) {
            log.i('field from input', this.fields);
            if (_.isArray(fieldsFromEntity)) {
                var keys_1 = fieldsFromEntity.map(function (c) { return c.key; });
                fieldsFromEntity = fieldsFromEntity.map(function (field) {
                    return _.merge(field, _this.fields.find(function (f) { return f.key === field.key; }));
                });
                fieldsFromEntity = fieldsFromEntity
                    .concat(this.fields.filter(function (field) { return !keys_1.includes(field.key); }));
                // log.i('field affer contact', fields);
            }
        }
        if (!_.isArray(fieldsFromEntity)) {
            fieldsFromEntity = this.fields;
        }
        fieldsFromEntity = fieldsFromEntity.filter(function (_a) {
            var key = _a.key;
            if (_.isArray(_this.exclude)) {
                return !(key && _this.exclude.includes(key));
            }
            if (_.isArray(_this.include)) {
                return (key && _this.include.includes(key));
            }
            return true;
        });
        // log.i('fields filter', fields);
        this.formly.fields = fieldsFromEntity;
        // log.i('FORMLY FIELDS', this.formly.fields);
    };
    FormWrapperMaterialComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (this.hasRegisteredCmp) {
            setTimeout(function () {
                _this.entitycomponent.clear();
                var factory = _this.resolver.resolveComponentFactory(_this.ftype.component);
                var componentRef = _this.entitycomponent.createComponent(factory);
                componentRef.instance.model = _this.model;
            });
        }
    };
    FormWrapperMaterialComponent.prototype.createOrder = function () {
        var _this = this;
        if (!this.fieldsOrder) {
            this.fieldsOrder = [];
        }
        if (_.isString(this.fieldsOrder)) {
            this.fieldsOrder = this.fieldsOrder.split(',');
        }
        // log.i('create order!', this.fieldsOrder);
        var fieldsNewOrder = [];
        if (this.fieldsOrder.length > 0) {
            this.fieldsOrder.forEach(function (orderKey) {
                var f = _this.formly.fields.find(function (_a) {
                    var key = _a.key, id = _a.id;
                    return (key === orderKey || id === orderKey);
                });
                if (f) {
                    fieldsNewOrder.push(f);
                }
            });
            this.formly.fields = fieldsNewOrder.concat(this.formly.fields.filter(function (f) { return !fieldsNewOrder.includes(f); }));
            // log.i('new Order', this.formly.fields.map(f => f.key).join(','));
        }
    };
    FormWrapperMaterialComponent.prototype.setModel = function (model) {
        this.model = model;
        this.backupModel = _.cloneDeep(this.model);
    };
    FormWrapperMaterialComponent.prototype.ngSubmit = function (model) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var id, resultModel, m, e_1, m, e_2;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        id = model.id;
                        resultModel = model;
                        log.i('submit model', model);
                        if (!this.crud) return [3 /*break*/, 10];
                        if (!(this.mode === 'update')) return [3 /*break*/, 5];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.crud.updateById(id, model, this.modelDataConfig).received];
                    case 2:
                        m = _a.sent();
                        log.i('Model update success', m);
                        resultModel = m.body.json;
                        this.submit.next(model);
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        log.er('Model update error', e_1);
                        this.submit.error(e_1);
                        return [3 /*break*/, 4];
                    case 4: return [3 /*break*/, 9];
                    case 5:
                        if (!(this.mode === 'create')) return [3 /*break*/, 9];
                        _a.label = 6;
                    case 6:
                        _a.trys.push([6, 8, , 9]);
                        return [4 /*yield*/, this.crud.create(model, this.modelDataConfig).received];
                    case 7:
                        m = _a.sent();
                        log.i('Model create success', m);
                        resultModel = m.body.json;
                        this.submit.next(model);
                        return [3 /*break*/, 9];
                    case 8:
                        e_2 = _a.sent();
                        log.er('Model create error', e_2);
                        this.submit.error(e_2);
                        return [3 /*break*/, 9];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        if (this.crud) {
                            this.submit.next(model);
                        }
                        _a.label = 11;
                    case 11:
                        this.complete.next(resultModel);
                        return [2 /*return*/];
                }
            });
        });
    };
    FormWrapperMaterialComponent.prototype.delete = function (id) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.crud.deleteById(id).received];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    FormWrapperMaterialComponent.prototype.openDeleteDialog = function (id) {
        var _this = this;
        log.i('openDeleteDialog to delete id: ', id);
        this.id_toDelete = id;
        this.dialogRefDelete = this.dialog.open(this.templateDelete);
        this.dialogRefDelete.afterClosed().subscribe(function (result) {
            log.i("dialog result: " + result + " ");
            if (result) {
                _this.complete.next();
            }
        });
    };
    FormWrapperMaterialComponent.prototype.onNoClick = function () {
        this.dialogRefDelete.close();
    };
    FormWrapperMaterialComponent.prototype.clear = function () {
        this.model = this.backupModel;
        this.backupModel = _.cloneDeep(this.model);
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormWrapperMaterialComponent.prototype, "modelDataConfig", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('templateDelete'),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], FormWrapperMaterialComponent.prototype, "templateDelete", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], FormWrapperMaterialComponent.prototype, "id", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('entitycomponent', { read: core_1.ViewContainerRef }),
        tslib_1.__metadata("design:type", core_1.ViewContainerRef)
    ], FormWrapperMaterialComponent.prototype, "entitycomponent", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], FormWrapperMaterialComponent.prototype, "exclude", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], FormWrapperMaterialComponent.prototype, "include", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], FormWrapperMaterialComponent.prototype, "fieldsOrder", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], FormWrapperMaterialComponent.prototype, "mode", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", morphi_1.Morphi.CRUD.Base)
    ], FormWrapperMaterialComponent.prototype, "crud", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormWrapperMaterialComponent.prototype, "form", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", forms_1.FormGroup)
    ], FormWrapperMaterialComponent.prototype, "formGroup", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormWrapperMaterialComponent.prototype, "model", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormWrapperMaterialComponent.prototype, "showButtons", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], FormWrapperMaterialComponent.prototype, "options", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], FormWrapperMaterialComponent.prototype, "fields", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", Object)
    ], FormWrapperMaterialComponent.prototype, "submit", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", Object)
    ], FormWrapperMaterialComponent.prototype, "complete", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Function)
    ], FormWrapperMaterialComponent.prototype, "entity", void 0);
    FormWrapperMaterialComponent = tslib_1.__decorate([
        core_1.Component({
            selector: 'app-form-wrapper-material',
            templateUrl: './form-wrapper-material.component.html',
            styleUrls: ['./form-wrapper-material.component.scss']
        }),
        tslib_1.__metadata("design:paramtypes", [dialog_1.MatDialog,
            core_1.ComponentFactoryResolver])
    ], FormWrapperMaterialComponent);
    return FormWrapperMaterialComponent;
}());
exports.FormWrapperMaterialComponent = FormWrapperMaterialComponent;
//# sourceMappingURL=form-wrapper-material.component.js.map