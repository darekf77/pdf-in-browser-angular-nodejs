"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var dialog_1 = require("@angular/material/dialog");
var morphi_1 = require("morphi");
var ng2_logger_1 = require("ng2-logger");
// @LAST prolem here
var ng2_rest_1 = require("ng2-rest");
var router_1 = require("@angular/router");
var lodash_1 = require("lodash");
var tnp_helpers_1 = require("tnp-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var _ = require("lodash");
var log = ng2_logger_1.Log.create('List wrapper components', ng2_logger_1.Level.__NOTHING);
var DualComponentControllerExtendedForListWrapper = /** @class */ (function (_super) {
    tslib_1.__extends(DualComponentControllerExtendedForListWrapper, _super);
    function DualComponentControllerExtendedForListWrapper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(DualComponentControllerExtendedForListWrapper.prototype, "data", {
        get: function () {
            return this.getValTemplateOptions('data');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentControllerExtendedForListWrapper.prototype, "linkSchema", {
        get: function () {
            return this.getValTemplateOptions('linkSchema');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentControllerExtendedForListWrapper.prototype, "linkProp", {
        get: function () {
            return this.getValTemplateOptions('linkProp');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentControllerExtendedForListWrapper.prototype, "nameProp", {
        get: function () {
            return this.getValTemplateOptions('nameProp');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentControllerExtendedForListWrapper.prototype, "lockProp", {
        get: function () {
            return this.getValTemplateOptions('lockProp');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentControllerExtendedForListWrapper.prototype, "icon", {
        get: function () {
            return this.getValTemplateOptions('icon');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentControllerExtendedForListWrapper.prototype, "allowedColumns", {
        get: function () {
            return this.getValTemplateOptions('allowedColumns');
        },
        enumerable: true,
        configurable: true
    });
    return DualComponentControllerExtendedForListWrapper;
}(tnp_helpers_1.DualComponentController));
exports.DualComponentControllerExtendedForListWrapper = DualComponentControllerExtendedForListWrapper;
var ListWrapperComponent = /** @class */ (function (_super) {
    tslib_1.__extends(ListWrapperComponent, _super);
    function ListWrapperComponent(router, dialogService) {
        var _this = _super.call(this) || this;
        _this.router = router;
        _this.dialogService = dialogService;
        _this.DualComponentController = DualComponentControllerExtendedForListWrapper;
        _this.isLoading = false;
        _this.icon = 'info';
        _this.data = [
            { href: 'http://onet.pl', name: 'Onet' },
            { href: 'http://google.pl', name: 'Google' }
        ];
        _this.linkProp = 'href';
        _this.linkSchema = 'example/:id';
        _this.nameProp = 'name';
        _this.lockProp = '';
        _this.allowedColumns = [];
        _this.arrayDataConfig = new morphi_1.Morphi.CRUD.ModelDataConfig();
        _this.columns = [
            {
                prop: 'id'
            },
            {
                prop: 'name'
            }
        ];
        return _this;
    }
    ListWrapperComponent.prototype.ngOnInit = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var columns;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, _super.prototype.ngOnInit.call(this)];
                    case 1:
                        _a.sent();
                        log.i("this.data", this.data);
                        log.i("CRUD", this.crud);
                        log.i("CRUD ENTITY", this.crud && this.crud.entity);
                        if (this.lockProp) {
                            this.icon = 'lock';
                        }
                        if (this.crud && this.crud.entity) {
                            columns = typescript_class_helpers_1.CLASS.describeProperites(this.crud && this.crud.entity)
                                .filter(function (prop) { return _this.allowedColumns.length > 0 ? _this.allowedColumns.includes(prop) : true; })
                                .map(function (prop) {
                                return { prop: prop };
                            });
                            this.columns = columns;
                            log.i('columns', columns);
                        }
                        if (this.crud) {
                            // await this.retriveData();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    ListWrapperComponent.prototype.open = function (d) {
        console.log('OPEN', d);
        if (_.isFunction(d.action)) {
            d.action(d);
            return;
        }
        var link = d.href;
        log.i("open link: " + link);
        if (link && lodash_1.isString(link) && link.trim() !== '') {
            this.router.navigateByUrl(link);
        }
    };
    ListWrapperComponent.prototype.complete = function (model) {
        log.i('COMPLETE');
        this.ctrl.data.push(model);
        if (this.dialogRef) {
            this.dialogRef.close();
        }
    };
    Object.defineProperty(ListWrapperComponent.prototype, "links", {
        // async retriveData() {
        //   this.isLoading = true;
        //   log.i('this.crud.entity',CLASS.describeProperites(this.crud.entity));
        //   try {
        //     log.i('this.arrayDataConfig', this.arrayDataConfig);
        //     const rows = await this.crud.getAll(this.arrayDataConfig).received;
        //     const totalElements = Number(rows.headers.get(Morphi.SYMBOL.X_TOTAL_COUNT));
        //     this.isLoading = false;
        //     if (!isNaN(totalElements)) {
        //       this.arrayDataConfig.set.pagination.totalElement(totalElements);
        //     }
        //     this.data = rows.body.json;
        //     log.i('init link with ', this.data);
        //     this.initLinks(this.data);
        //   } catch (error) {
        //     this.isLoading = false;
        //   }
        // }
        get: function () {
            var _this = this;
            if (!(this.ctrl && this.ctrl.data)) {
                return [];
            }
            // log.d('init links this.linkSchema', this.linkSchema);
            var links = this.ctrl.data.map(function (row) {
                if (_this.linkSchema) {
                    // log.d('interpolated link row', row);
                    var href = ng2_rest_1.interpolateParamsToUrl(row, _this.linkSchema);
                    // log.d('interpolated link', href);
                    // log.d('row', row)
                    // log.d('this.linkProp', this.linkProp)
                    // log.d('this.nameProp', this.nameProp)
                    var res = { href: href, name: row[_this.nameProp], lock: row[_this.lockProp], action: row.action };
                    // log.d('res', res);
                    return res;
                }
                // log.d('row', row)
                // log.d('this.linkProp', this.linkProp)
                // log.d('this.nameProp', this.nameProp)
                return { href: row[_this.linkProp], name: row[_this.nameProp], action: row.action };
            });
            // log.i('links', links);
            return links;
        },
        enumerable: true,
        configurable: true
    });
    ListWrapperComponent.prototype.createDialog = function () {
        // this.model = {};
        this.dialogRef = this.dialogService.open(this.templateCreate);
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ListWrapperComponent.prototype, "icon", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], ListWrapperComponent.prototype, "data", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ListWrapperComponent.prototype, "linkProp", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ListWrapperComponent.prototype, "linkSchema", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ListWrapperComponent.prototype, "nameProp", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ListWrapperComponent.prototype, "lockProp", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], ListWrapperComponent.prototype, "allowedColumns", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Object)
    ], ListWrapperComponent.prototype, "arrayDataConfig", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('create'),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], ListWrapperComponent.prototype, "templateCreate", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", morphi_1.Morphi.CRUD.Base)
    ], ListWrapperComponent.prototype, "crud", void 0);
    ListWrapperComponent = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ListWrapperComponent'),
        core_1.Component({
            selector: 'app-list-wrapper',
            templateUrl: './list-wrapper.component.html',
            styleUrls: ['./list-wrapper.component.scss']
        }),
        tslib_1.__metadata("design:paramtypes", [router_1.Router,
            dialog_1.MatDialog])
    ], ListWrapperComponent);
    return ListWrapperComponent;
}(tnp_helpers_1.BaseFormlyComponent));
exports.ListWrapperComponent = ListWrapperComponent;
//# sourceMappingURL=list-wrapper.component.js.map