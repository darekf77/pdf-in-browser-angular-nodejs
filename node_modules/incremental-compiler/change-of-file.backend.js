"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region imports
var tnp_core_1 = require("tnp-core");
var helpers_backend_1 = require("./helpers.backend");
//#endregion
var ChangeOfFile = /** @class */ (function () {
    function ChangeOfFile(clientsForChange, fileAbsolutePath, eventName) {
        if (clientsForChange === void 0) { clientsForChange = []; }
        if (fileAbsolutePath === void 0) { fileAbsolutePath = void 0; }
        if (eventName === void 0) { eventName = void 0; }
        this.fileAbsolutePath = fileAbsolutePath;
        this.eventName = eventName;
        this.executedFor = [];
        this._clientsForChange = [];
        this._clientsForChange = clientsForChange;
        this.datetime = new Date();
    }
    Object.defineProperty(ChangeOfFile.prototype, "clientsForChange", {
        get: function () {
            var _this = this;
            return this._clientsForChange.filter(function (f) { return !_this.executedFor.includes(f); });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChangeOfFile.prototype, "clientsForChangeFilterExt", {
        get: function () {
            var _this = this;
            return this.clientsForChange.filter(function (f) {
                if (!tnp_core_1._.isArray(f.subscribeOnlyFor) || f.subscribeOnlyFor.length === 0) {
                    return true;
                }
                return f.subscribeOnlyFor.includes(_this.fileExt);
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ChangeOfFile.prototype, "fileExt", {
        get: function () {
            return tnp_core_1.path.extname(this.fileAbsolutePath).replace('.', '');
        },
        enumerable: true,
        configurable: true
    });
    ChangeOfFile.prototype.clientsBy = function (clientNameOrClass, condition) {
        return helpers_backend_1.clientsBy(clientNameOrClass, condition, this.clientsForChange);
    };
    return ChangeOfFile;
}());
exports.ChangeOfFile = ChangeOfFile;
//# sourceMappingURL=change-of-file.backend.js.map