"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var compiler_manager_backend_1 = require("./compiler-manager.backend");
var helpers_backend_1 = require("./helpers.backend");
var tnp_cli_1 = require("tnp-cli");
var BaseClientCompiler = /** @class */ (function () {
    function BaseClientCompiler(options) {
        this.subscribeOnlyFor = [];
        this.compilationWrapper = helpers_backend_1.Helpers.compilationWrapper;
        this.pathResolve = false;
        this.__folderPath = [];
        if (tnp_core_1._.isUndefined(options)) {
            options = {};
        }
        if (tnp_core_1._.isUndefined(options.executeOutsideScenario)) {
            options.executeOutsideScenario = true;
        }
        if (!tnp_core_1._.isArray(options.subscribeOnlyFor)) {
            options.subscribeOnlyFor = [];
        }
        if (tnp_core_1._.isUndefined(options.folderPath)) {
            options.folderPath = [];
        }
        if (tnp_core_1._.isString(options.folderPath)) {
            options.folderPath = [options.folderPath];
        }
        if (!tnp_core_1._.isString(options.folderPath) && !tnp_core_1._.isArray(options.folderPath)) {
            helpers_backend_1.Helpers.error("Folder path shoudl be string or array", false, true);
        }
        if (tnp_core_1._.isUndefined(options.watchDepth)) {
            options.watchDepth = Number.POSITIVE_INFINITY;
        }
        if (tnp_core_1._.isNumber(options.watchDepth)) {
            options.watchDepth = Math.abs(options.watchDepth);
        }
        if (tnp_core_1._.isUndefined(options.followSymlinks)) {
            options.followSymlinks = true;
        }
        if (tnp_core_1._.isUndefined(options.notifyOnFileUnlink)) {
            options.notifyOnFileUnlink = false;
        }
        Object.assign(this, options);
    }
    Object.defineProperty(BaseClientCompiler.prototype, "folderPath", {
        get: function () {
            var _this = this;
            if (!this.pathResolve) {
                this.pathResolve = true;
                this.__folderPath.map(function (p) {
                    if (tnp_core_1.fse.existsSync(p)) {
                        return tnp_core_1.path.resolve(p);
                    }
                    else {
                        helpers_backend_1.Helpers.warn("[BaseClientCompiler] client \"" + typescript_class_helpers_1.CLASS.getNameFromObject(_this) + "\" folderPath doesn't not exist " + _this.folderPath);
                        return void 0;
                    }
                }).filter(function (f) { return !!f; });
            }
            return this.__folderPath;
        },
        set: function (v) {
            this.__folderPath = v;
        },
        enumerable: true,
        configurable: true
    });
    BaseClientCompiler.prototype.fixTaskName = function (taskName) {
        if (!tnp_core_1._.isString(taskName)) {
            taskName = "task of client \"" + typescript_class_helpers_1.CLASS.getNameFromObject(this) + "\"";
        }
        return taskName;
    };
    //#region start
    /**
     * Do not override this
     */
    BaseClientCompiler.prototype.start = function (taskName, afterInitCallBack) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        compiler_manager_backend_1.CompilerManager.Instance.addClient(this);
                        taskName = this.fixTaskName(taskName);
                        if (!(this.folderPath.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.compilationWrapper(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, compiler_manager_backend_1.CompilerManager.Instance.syncInit(this)];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, tnp_cli_1.CLI.chalk.green('sync action') + " for " + taskName, 'Event:')];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        helpers_backend_1.Helpers.log("No action for task: " + taskName);
                        _a.label = 3;
                    case 3:
                        if (!tnp_core_1._.isFunction(afterInitCallBack)) return [3 /*break*/, 5];
                        return [4 /*yield*/, helpers_backend_1.Helpers.runSyncOrAsync(afterInitCallBack)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, this];
                }
            });
        });
    };
    //#endregion
    //#region start and watch
    /**
     * Do not override this
     */
    BaseClientCompiler.prototype.startAndWatch = function (taskName, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, watchOnly, afterInitCallBack;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = options || {}, watchOnly = _a.watchOnly, afterInitCallBack = _a.afterInitCallBack;
                        taskName = this.fixTaskName(taskName);
                        if (!(this.folderPath.length > 0)) return [3 /*break*/, 7];
                        if (!watchOnly) return [3 /*break*/, 1];
                        console.log(tnp_cli_1.CLI.chalk.gray("[incremental-compiler] Watch mode only for \"" + taskName + "\""));
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.start(taskName, afterInitCallBack)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        if (!tnp_core_1._.isFunction(this.preAsyncAction)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.compilationWrapper(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                                return tslib_1.__generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.preAsyncAction()];
                                        case 1:
                                            _a.sent();
                                            return [2 /*return*/];
                                    }
                                });
                            }); }, tnp_cli_1.CLI.chalk.green('pre-async action') + " for " + taskName, 'Event:')];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5: return [4 /*yield*/, compiler_manager_backend_1.CompilerManager.Instance.asyncInit(this)];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        helpers_backend_1.Helpers.log("No action for task: " + taskName);
                        _b.label = 8;
                    case 8: return [2 /*return*/, this];
                }
            });
        });
    };
    //#endregion
    //#region actions
    BaseClientCompiler.prototype.syncAction = function (absolteFilesPathes) {
        return void 0;
    };
    BaseClientCompiler.prototype.preAsyncAction = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    BaseClientCompiler.prototype.asyncAction = function (asyncEvents, additionalData) {
        return void 0;
    };
    return BaseClientCompiler;
}());
exports.BaseClientCompiler = BaseClientCompiler;
//# sourceMappingURL=base-client-compiler.backend.js.map