"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_cli_1 = require("tnp-cli");
var dateformat = require("dateformat");
var tnp_core_1 = require("tnp-core");
var ng2_logger_1 = require("ng2-logger");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#endregion
var HelpersIncCompiler = /** @class */ (function (_super) {
    tslib_1.__extends(HelpersIncCompiler, _super);
    function HelpersIncCompiler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(HelpersIncCompiler, "Instance", {
        get: function () {
            if (!HelpersIncCompiler._instance) {
                HelpersIncCompiler._instance = new HelpersIncCompiler();
            }
            return HelpersIncCompiler._instance;
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    HelpersIncCompiler.prototype.error = function (details, noExit, noTrace) {
        if (noExit === void 0) { noExit = false; }
        if (noTrace === void 0) { noTrace = false; }
        console.error(details);
        if (!noExit) {
            process.exit(0);
        }
    };
    HelpersIncCompiler.prototype.info = function (details) {
        console.info(details);
    };
    HelpersIncCompiler.prototype.log = function (details) {
        console.log(details);
    };
    HelpersIncCompiler.prototype.warn = function (details, trace) {
        if (trace === void 0) { trace = false; }
        console.warn(details);
    };
    HelpersIncCompiler.prototype.runSyncOrAsync = function (fn, args) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var promisOrValue;
            return tslib_1.__generator(this, function (_a) {
                if (tnp_core_1._.isUndefined(fn)) {
                    return [2 /*return*/];
                }
                promisOrValue = fn(args);
                if (promisOrValue instanceof Promise) {
                    // wasPromise = true;
                    promisOrValue = Promise.resolve(promisOrValue);
                }
                // console.log('was promis ', wasPromise)
                return [2 /*return*/, promisOrValue];
            });
        });
    };
    HelpersIncCompiler.prototype.compilationWrapper = function (fn, taskName, executionType) {
        if (taskName === void 0) { taskName = 'Task'; }
        if (executionType === void 0) { executionType = 'Compilation of'; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            function currentDate() {
                return "[" + dateformat(new Date(), 'HH:MM:ss') + "]";
            }
            var error_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!fn || !tnp_core_1._.isFunction(fn)) {
                            exports.Helpers.error(executionType + " wrapper: \"" + fn + "\" is not a function.");
                            process.exit(1);
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        exports.Helpers.log(currentDate() + " " + executionType + " \"" + taskName + "\" Started..");
                        return [4 /*yield*/, exports.Helpers.runSyncOrAsync(fn)];
                    case 2:
                        _a.sent();
                        exports.Helpers.log(currentDate() + " " + executionType + " \"" + taskName + "\" Done\u2713");
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        exports.Helpers.log(tnp_cli_1.CLI.chalk.red(error_1));
                        exports.Helpers.log(currentDate() + " " + executionType + " " + taskName + " ERROR");
                        process.exit(1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return HelpersIncCompiler;
}(ng2_logger_1.Helpers));
exports.HelpersIncCompiler = HelpersIncCompiler;
function clientsBy(clientNameOrClass, condition, clients) {
    if (tnp_core_1._.isFunction(clientNameOrClass)) {
        clientNameOrClass = typescript_class_helpers_1.CLASS.getName(clientNameOrClass);
    }
    return clients.filter(function (cinstance) {
        var classesOk = (typescript_class_helpers_1.CLASS.getNameFromObject(cinstance) === clientNameOrClass);
        if (classesOk) {
            if (tnp_core_1._.isFunction(condition)) {
                return !!condition(cinstance);
            }
            else {
                return true;
            }
        }
        return false;
    });
}
exports.clientsBy = clientsBy;
exports.Helpers = HelpersIncCompiler.Instance;
//# sourceMappingURL=helpers.backend.js.map