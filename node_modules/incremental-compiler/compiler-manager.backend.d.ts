import { ChangeOfFile } from './change-of-file.backend';
import { BaseClientCompiler } from './base-client-compiler.backend';
export declare class CompilerManager {
    private static _instance;
    static get Instance(): CompilerManager;
    private constructor();
    private watcher;
    private lastAsyncFiles;
    private currentObservedFolder;
    private clients;
    private asyncEventScenario;
    private inited;
    syncInit(client: BaseClientCompiler): Promise<void>;
    asyncInit(client: BaseClientCompiler): Promise<void>;
    get allClients(): {
        get<T = BaseClientCompiler<any, any, any>>(clientNameOrClass: string | Function, condition: (c: T) => boolean): BaseClientCompiler<any, any, any>[] | T[];
    };
    addClient(client: BaseClientCompiler): void;
    initScenario(onAsyncFileChange?: (event: ChangeOfFile) => Promise<any>): Promise<void>;
    private preventAlreadyInited;
    private get firstFoldersToWatch();
}
