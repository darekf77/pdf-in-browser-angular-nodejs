import { ChangeOfFile } from './change-of-file.backend';
import { Models } from './models';
import { ConfigModels } from 'tnp-config';
export declare class BaseClientCompiler<RES_ASYNC = any, RES_SYNC = any, ADDITIONAL_DATA = any> implements Models.BaseClientCompilerOptions {
    readonly followSymlinks: boolean;
    readonly subscribeOnlyFor: ConfigModels.FileExtension[];
    readonly executeOutsideScenario: boolean;
    readonly watchDepth: Number;
    readonly notifyOnFileUnlink: boolean;
    compilationWrapper: (fn: () => void, taskName?: string, executionType?: "Compilation of" | "Code execution of" | "Event:") => Promise<void>;
    private pathResolve;
    private __folderPath;
    constructor(options?: Models.BaseClientCompilerOptions);
    set folderPath(v: string[]);
    get folderPath(): string[];
    private fixTaskName;
    /**
     * Do not override this
     */
    start(taskName?: string, afterInitCallBack?: () => void): Promise<BaseClientCompiler<RES_ASYNC, RES_SYNC, ADDITIONAL_DATA>>;
    /**
     * Do not override this
     */
    startAndWatch(taskName?: string, options?: Models.StartAndWatchOptions): Promise<BaseClientCompiler<RES_ASYNC, RES_SYNC, ADDITIONAL_DATA>>;
    syncAction(absolteFilesPathes?: string[]): Promise<RES_SYNC>;
    preAsyncAction(): Promise<void>;
    asyncAction(asyncEvents: ChangeOfFile, additionalData?: ADDITIONAL_DATA): Promise<RES_ASYNC>;
}
