"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region imports
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_core_1 = require("tnp-core");
var change_of_file_backend_1 = require("./change-of-file.backend");
var helpers_backend_1 = require("./helpers.backend");
//#endregion
function AsyncAction() {
    return function (target, propertyKey, propertyDescriptor) {
        // get original method
        // unsub(void 0, void 0);
        var originalMethod = propertyDescriptor.value;
        // redefine descriptor value within own function block
        propertyDescriptor.value = function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // log arguments before original function
            // console.log(`${propertyKey} method called with args:     ${JSON.stringify(args, null, 2)}`);
            var first = tnp_core_1._.first(args);
            if (first instanceof change_of_file_backend_1.ChangeOfFile) {
                var ex = first.clientsForChange.find(function (f) {
                    // console.log(`${CLASS.getNameFromObject(f)} === ${CLASS.getNameFromObject(this)}`)
                    return typescript_class_helpers_1.CLASS.getNameFromObject(f) === typescript_class_helpers_1.CLASS.getNameFromObject(_this);
                });
                // console.log('ex', ex)
                if (ex) {
                    first.executedFor.push(ex);
                    // console.log(`HHHH!!!!! Async Method called fror ${CLASS.getNameFromObject(this)}`);
                }
            }
            // attach original method implementation
            var result = originalMethod.apply(this, args);
            // log result of method
            // console.log(`${propertyKey} method return value:  ${JSON.stringify(result)}`);
            return result;
        };
    };
}
exports.AsyncAction = AsyncAction;
var instancesNames = [];
function IncCompilerClass(options) {
    return function (target) {
        var className = options.className;
        if (instancesNames.includes(className)) {
            helpers_backend_1.Helpers.warn("Compiler class \"" + className + "\" already has instance.", false);
        }
        instancesNames.push(className);
        typescript_class_helpers_1.CLASS.NAME(className)(target);
    };
}
exports.IncCompilerClass = IncCompilerClass;
//# sourceMappingURL=decorators.backend.js.map