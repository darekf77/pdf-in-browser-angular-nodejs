"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require("rxjs/add/operator/map");
var cookie_1 = require("./cookie");
var mapping_1 = require("./mapping");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var json10_1 = require("json10");
var request_cache_1 = require("./request-cache");
var tnp_core_1 = require("tnp-core");
// const log = Log.create('rest namespace', Level.__NOTHING)
var Models;
(function (Models) {
    Models.MethodConfig = typescript_class_helpers_1.Models.MethodConfig;
    Models.ClassConfig = typescript_class_helpers_1.Models.ClassConfig;
    Models.ParamConfig = typescript_class_helpers_1.Models.ParamConfig;
    ;
    ;
    [];
    var BaseBody = /** @class */ (function () {
        function BaseBody() {
        }
        BaseBody.prototype.toJSON = function (data, isJSONArray) {
            if (isJSONArray === void 0) { isJSONArray = false; }
            var r = isJSONArray ? [] : {};
            if (typeof data === 'string') {
                try {
                    r = JSON.parse(data);
                }
                catch (e) { }
            }
            else if (typeof data === 'object') {
                return data;
            }
            return r;
        };
        return BaseBody;
    }());
    Models.BaseBody = BaseBody;
    var HttpBody = /** @class */ (function (_super) {
        tslib_1.__extends(HttpBody, _super);
        function HttpBody(body, isArray, entity, circular) {
            if (isArray === void 0) { isArray = false; }
            var _this = _super.call(this) || this;
            _this.body = body;
            _this.isArray = isArray;
            _this.entity = entity;
            _this.circular = circular;
            return _this;
        }
        Object.defineProperty(HttpBody.prototype, "booleanValue", {
            get: function () {
                return ['ok', 'true'].includes(this.body.trim());
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpBody.prototype, "json", {
            get: function () {
                if (this.entity && typeof this.entity === 'object') {
                    var json = this.toJSON(this.body, this.isArray);
                    return mapping_1.Mapping.encode(json, this.entity, this.circular);
                }
                var res = this.toJSON(this.body, this.isArray);
                if (this.circular && Array.isArray(this.circular)) {
                    res = json10_1.JSON10.parse(JSON.stringify(res), this.circular);
                }
                return res;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(HttpBody.prototype, "text", {
            get: function () {
                return this.body.replace(/^\"/, '').replace(/\"$/, '');
            },
            enumerable: true,
            configurable: true
        });
        return HttpBody;
    }(BaseBody));
    Models.HttpBody = HttpBody;
    var ErrorBody = /** @class */ (function (_super) {
        tslib_1.__extends(ErrorBody, _super);
        function ErrorBody(data) {
            var _this = _super.call(this) || this;
            _this.data = data;
            return _this;
        }
        Object.defineProperty(ErrorBody.prototype, "json", {
            get: function () {
                return this.toJSON(this.data);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ErrorBody.prototype, "text", {
            get: function () {
                return this.data;
            },
            enumerable: true,
            configurable: true
        });
        return ErrorBody;
    }(BaseBody));
    Models.ErrorBody = ErrorBody;
    var BaseResponse = /** @class */ (function () {
        function BaseResponse(responseText, headers, statusCode, isArray) {
            if (isArray === void 0) { isArray = false; }
            this.responseText = responseText;
            this.headers = headers;
            this.statusCode = statusCode;
            this.isArray = isArray;
        }
        Object.defineProperty(BaseResponse.prototype, "cookies", {
            get: function () {
                return BaseResponse.cookies;
            },
            enumerable: true,
            configurable: true
        });
        BaseResponse.cookies = cookie_1.Cookie.Instance;
        return BaseResponse;
    }());
    Models.BaseResponse = BaseResponse;
    var HttpResponse = /** @class */ (function (_super) {
        tslib_1.__extends(HttpResponse, _super);
        function HttpResponse(sourceRequest, responseText, headers, statusCode, entity, circular, jobid, isArray) {
            if (isArray === void 0) { isArray = false; }
            var _this = _super.call(this, responseText, headers, statusCode, isArray) || this;
            _this.sourceRequest = sourceRequest;
            _this.responseText = responseText;
            _this.headers = headers;
            _this.statusCode = statusCode;
            _this.entity = entity;
            _this.circular = circular;
            _this.jobid = jobid;
            _this.isArray = isArray;
            _this.init();
            return _this;
        }
        HttpResponse.prototype.init = function () {
            if (typeof this.entity === 'string') {
                // const headerWithMapping = headers.get(entity);
                var entityJSON = this.headers.getAll(this.entity);
                if (!!entityJSON) {
                    this.entity = JSON.parse(entityJSON.join());
                }
            }
            if (typeof this.circular === 'string') {
                // const headerWithMapping = headers.get(circular);
                var circuralJSON = this.headers.getAll(this.circular);
                if (!!circuralJSON) {
                    this.circular = JSON.parse(circuralJSON.join());
                }
            }
            this.body = new HttpBody(this.responseText, this.isArray, this.entity, this.circular);
        };
        Object.defineProperty(HttpResponse.prototype, "cache", {
            get: function () {
                if (tnp_core_1._.isUndefined(this.rq)) {
                    this.rq = new request_cache_1.RequestCache(this);
                }
                return new request_cache_1.RequestCache(this);
            },
            enumerable: true,
            configurable: true
        });
        return HttpResponse;
    }(BaseResponse));
    Models.HttpResponse = HttpResponse;
    var HttpResponseError = /** @class */ (function (_super) {
        tslib_1.__extends(HttpResponseError, _super);
        // public tryRecconect() {
        // }
        function HttpResponseError(message, responseText, headers, statusCode, jobid) {
            var _this = _super.call(this, responseText, headers, statusCode) || this;
            _this.message = message;
            _this.jobid = jobid;
            _this.body = new ErrorBody(responseText);
            return _this;
        }
        return HttpResponseError;
    }(BaseResponse));
    Models.HttpResponseError = HttpResponseError;
})(Models = exports.Models || (exports.Models = {}));
//# sourceMappingURL=models.js.map