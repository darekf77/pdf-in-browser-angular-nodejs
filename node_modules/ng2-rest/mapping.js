"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var tnp_core_2 = require("tnp-core");
var lodash_walk_object_1 = require("lodash-walk-object");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_core_3 = require("tnp-core");
var Mapping;
(function (Mapping) {
    function decode(json, autodetect) {
        if (autodetect === void 0) { autodetect = false; }
        tnp_core_3.Helpers.simulateBrowser = true;
        // console.log('DECODE isBrowser', HelpersLog.isBrowser)
        if (tnp_core_1._.isUndefined(json)) {
            return void 0;
        }
        var mapping = decodeFromDecorator(tnp_core_1._.isArray(json) ? tnp_core_1._.first(json) : json, !autodetect);
        if (autodetect) {
            mapping = tnp_core_1._.merge(getMappingNaive(json), mapping);
        }
        tnp_core_3.Helpers.simulateBrowser = false;
        return mapping;
    }
    Mapping.decode = decode;
    function encode(json, mapping, circular) {
        if (circular === void 0) { circular = []; }
        if (tnp_core_1._.isString(json) || tnp_core_1._.isBoolean(json) || tnp_core_1._.isNumber(json)) {
            return json;
        }
        if (mapping['']) {
            var decoratorMapping = getModelsMapping(typescript_class_helpers_1.CLASS.getBy(mapping['']));
            mapping = tnp_core_1._.merge(mapping, decoratorMapping);
        }
        var res;
        if (tnp_core_1._.isArray(circular) && circular.length > 0) {
            res = setMappingCirc(json, mapping, circular);
        }
        else {
            res = setMapping(json, mapping);
        }
        return res;
    }
    Mapping.encode = encode;
    function decodeFromDecorator(json, production) {
        if (production === void 0) { production = false; }
        var entityClass = typescript_class_helpers_1.CLASS.getFromObject(json);
        var mappings = getModelsMapping(entityClass);
        return mappings;
    }
    function getModelsMapping(entity) {
        if (!tnp_core_1._.isFunction(entity) || entity === Object) {
            return {};
        }
        var className = typescript_class_helpers_1.CLASS.getName(entity);
        // console.log(`getMaping for: '${className}' `)
        var enityOWnMapping = tnp_core_1._.isArray(entity[typescript_class_helpers_1.SYMBOL.MODELS_MAPPING]) ?
            entity[typescript_class_helpers_1.SYMBOL.MODELS_MAPPING] : [{ '': className }];
        var res = {};
        var parents = enityOWnMapping
            .filter(function (m) { return !tnp_core_1._.isUndefined(m['']) && m[''] !== className; })
            .map(function (m) { return m['']; });
        enityOWnMapping.reverse().forEach(function (m) {
            m = tnp_core_1._.cloneDeep(m);
            // console.log(`'${className}' m:`, m)
            Object.keys(m).forEach(function (key) {
                var v = m[key];
                var isArr = tnp_core_1._.isArray(v);
                var model = isArr ? tnp_core_1._.first(v) : v;
                if (parents.includes(model)) {
                    m[key] = isArr ? [className] : className;
                }
            });
            res = tnp_core_1._.merge(res, m);
        });
        res[''] = className;
        // console.log(`mapping for ${className} : ${JSON.stringify(res)}`)
        return res;
    }
    Mapping.getModelsMapping = getModelsMapping;
    function add(o, path, mapping) {
        if (mapping === void 0) { mapping = {}; }
        if (!o || Array.isArray(o) || typeof o !== 'object')
            return;
        var objectClassName = typescript_class_helpers_1.CLASS.getName(Object.getPrototypeOf(o).constructor);
        var resolveClass = typescript_class_helpers_1.CLASS.getBy(objectClassName);
        if (!resolveClass) {
            if (objectClassName !== 'Object') {
                if (tnp_core_2.Helpers.isBrowser) {
                    console.error("Cannot resolve class \"" + objectClassName + "\" while mapping.");
                }
            }
            return;
        }
        if (!mapping[path])
            mapping[path] = typescript_class_helpers_1.CLASS.getName(resolveClass);
        ;
    }
    /**
     * USE ONLY IN DEVELOPMENT
     * @param c
     * @param path
     * @param mapping
     * @param level
     */
    function getMappingNaive(c, path, mapping, level) {
        if (path === void 0) { path = ''; }
        if (mapping === void 0) { mapping = {}; }
        if (level === void 0) { level = 0; }
        if (Array.isArray(c)) {
            c.forEach(function (c) { return getMappingNaive(c, path, mapping, level); });
            return mapping;
        }
        if (++level === 16)
            return;
        add(c, path, mapping);
        for (var p in c) {
            if (c.hasOwnProperty(p)) {
                var v = c[p];
                if (Array.isArray(v) && v.length > 0) { // reducer as impovement
                    v.forEach(function (elem, i) {
                        // const currentPaht = [`path[${i}]`, p].filter(c => c.trim() != '').join('.');
                        var currentPaht = [path, p].filter(function (c) { return c.trim() != ''; }).join('.');
                        getMappingNaive(elem, currentPaht, mapping, level);
                    });
                }
                else if (typeof v === 'object') {
                    var currentPaht = [path, p].filter(function (c) { return c.trim() != ''; }).join('.');
                    add(v, currentPaht, mapping);
                    getMappingNaive(v, currentPaht, mapping, level);
                }
            }
        }
        return mapping;
    }
    function getMappingPathFrom(pathLodhas) {
        if (!tnp_core_1._.isString(pathLodhas)) {
            return void 0;
        }
        var regex = /\[([0-9a-zA-Z]|\'|\")*\]/g;
        pathLodhas = pathLodhas
            .replace(regex, '')
            .replace('..', '.');
        if (pathLodhas.startsWith('.')) {
            pathLodhas = pathLodhas.slice(1);
        }
        return pathLodhas;
    }
    function setMappingCirc(json, mapping, circular) {
        if (mapping === void 0) { mapping = {}; }
        if (circular === void 0) { circular = []; }
        var mainClassFn = !tnp_core_1._.isArray(json) && typescript_class_helpers_1.CLASS.getBy(mapping['']);
        // console.log(mapping)
        lodash_walk_object_1.walk.Object(json, function (v, lodashPath, changeValue) {
            if (!tnp_core_1._.isUndefined(v) && !tnp_core_1._.isNull(v)) {
                var mappingPath = getMappingPathFrom(lodashPath);
                if (!tnp_core_1._.isUndefined(mapping[mappingPath])) {
                    var isArray = tnp_core_1._.isArray(mapping[mappingPath]);
                    if (!isArray) {
                        var className = isArray ? tnp_core_1._.first(mapping[mappingPath]) : mapping[mappingPath];
                        var classFN = typescript_class_helpers_1.CLASS.getBy(className);
                        if (tnp_core_1._.isFunction(classFN)) {
                            // console.log(`mapping: '${mappingPath}', lp: '${lodashPath}' class: '${className}' , set `, v.location)
                            changeValue(tnp_core_1._.merge(new classFN(), v));
                        }
                    }
                }
            }
        });
        circular.forEach(function (c) {
            var ref = tnp_core_1._.get(json, c.circuralTargetPath);
            tnp_core_1._.set(json, c.pathToObj, ref);
        });
        if (tnp_core_1._.isFunction(mainClassFn)) {
            json = tnp_core_1._.merge(new mainClassFn(), json);
        }
        return json;
    }
    function setMapping(json, mapping) {
        if (mapping === void 0) { mapping = {}; }
        // console.log('mapping', mapping)
        if (Array.isArray(json)) {
            return json.map(function (j) {
                return setMapping(j, mapping);
            });
        }
        var mainClassFn = typescript_class_helpers_1.CLASS.getBy(mapping['']);
        var _loop_1 = function (key) {
            if (json.hasOwnProperty(key)) {
                // if (mainClassFn && mainClassFn.name === 'Project') {
                //   // console.log(`OWn property: "${key}"`)
                // }
                if (tnp_core_1._.isArray(json[key])) {
                    json[key] = json[key].map(function (arrObj) {
                        var objMapping = getModelsMapping(typescript_class_helpers_1.CLASS.getBy(mapping[key]));
                        return setMapping(arrObj, objMapping);
                    });
                }
                else if (tnp_core_1._.isObject(json[key])) {
                    var objMapping = getModelsMapping(typescript_class_helpers_1.CLASS.getBy(mapping[key]));
                    json[key] = setMapping(json[key], objMapping);
                }
            }
        };
        for (var key in json) {
            _loop_1(key);
        }
        Object
            .keys(mapping)
            .filter(function (key) { return key !== '' && key.split('.').length >= 2; })
            .forEach(function (lodasPath) {
            // console.log(`Loadsh path: ${lodasPath}`)
            var objMapping = getModelsMapping(typescript_class_helpers_1.CLASS.getBy(mapping[lodasPath]));
            var input = tnp_core_1._.get(json, lodasPath);
            if (!tnp_core_1._.isUndefined(input)) {
                var res = setMapping(input, objMapping);
                tnp_core_1._.set(json, lodasPath, res);
            }
        });
        if (!mainClassFn) {
            return json;
        }
        return tnp_core_1._.merge(new mainClassFn(), json);
    }
    function DefaultModelWithMapping(defaultModelValues, mapping) {
        return function (target) {
            if (!tnp_core_1._.isArray(target[typescript_class_helpers_1.SYMBOL.MODELS_MAPPING])) {
                target[typescript_class_helpers_1.SYMBOL.MODELS_MAPPING] = [];
            }
            target[typescript_class_helpers_1.SYMBOL.MODELS_MAPPING].push({ '': typescript_class_helpers_1.CLASS.getName(target) });
            if (tnp_core_1._.isObject(mapping)) {
                target[typescript_class_helpers_1.SYMBOL.MODELS_MAPPING] = target[typescript_class_helpers_1.SYMBOL.MODELS_MAPPING].concat(mapping);
                Object.keys(mapping)
                    .forEach(function (key) {
                    var v = mapping;
                    if (tnp_core_1._.isUndefined(v) || tnp_core_1._.isFunction(v)) {
                        throw "\n\n\n            Class: '" + target.name + "'\n[ng2rest] Bad mapping value for path: " + key + " , please use type: <string> or [<string>]\n";
                    }
                });
            }
            if (tnp_core_1._.isObject(defaultModelValues)) {
                var toMerge_1 = {};
                var describedTarget = typescript_class_helpers_1.CLASS
                    .describeProperites(target)
                    .filter(function (prop) { return /^([a-zA-Z0-9]|\_|\#)+$/.test(prop); });
                // console.log(`describedTarget: ${describedTarget} for ${target.name}`)
                describedTarget.forEach(function (propDefInConstr) {
                    if (defaultModelValues[propDefInConstr]) {
                        console.warn("\n\n            CONFLICT: default value for property: \"" + propDefInConstr + "\"\n            in class \"" + target.name + "\" already defined as typescript\n            default class proprty value.\n\n            ");
                    }
                    else {
                        toMerge_1[propDefInConstr] = null; // TODO from toString I can't know that
                    }
                });
                // console.log(`merge "${JSON.stringify(target.prototype)}" with "${JSON.stringify(defaultModelValues)}"`)
                target[typescript_class_helpers_1.SYMBOL.DEFAULT_MODEL] = tnp_core_1._.merge(toMerge_1, defaultModelValues);
                var propsToOmmit = Object
                    .keys(target[typescript_class_helpers_1.SYMBOL.DEFAULT_MODEL])
                    .filter(function (key) {
                    var descriptor = Object
                        .getOwnPropertyDescriptor(target.prototype, key);
                    return !!descriptor;
                });
                tnp_core_1._.merge(target.prototype, tnp_core_1._.omit(target[typescript_class_helpers_1.SYMBOL.DEFAULT_MODEL], propsToOmmit));
                // console.log(`DEFAULT VALUE MERGE for ${target.name}`)
            }
        };
    }
    Mapping.DefaultModelWithMapping = DefaultModelWithMapping;
})(Mapping = exports.Mapping || (exports.Mapping = {}));
//# sourceMappingURL=mapping.js.map