/**
 * Based on Headers from https://github.com/angular/angular/blob/master/packages/http/src/headers.ts
 */
export declare type RestHeadersOptions = RestHeaders | {
    [name: string]: (string | string[]);
};
export declare class RestHeaders {
    /** @internal header names are lower case */
    _headers: Map<string, string[]>;
    /** @internal map lower case names to actual names */
    _normalizedNames: Map<string, string>;
    static from(headers?: RestHeadersOptions): RestHeaders;
    private constructor();
    /**
     * Returns a new RestHeaders instance from the given DOMString of Response RestHeaders
     */
    static fromResponseHeaderString(headersString: string): RestHeaders;
    /**
     * Appends a header to existing list of header values for a given header name.
     */
    append(name: string, value: string): void;
    /**
     * Deletes all header values for the given name.
     */
    delete(name: string): void;
    forEach(fn: (values: string[], name: string, headers: Map<string, string[]>) => void): void;
    /**
     * Returns first header that matches given name.
     */
    get(name: string): string;
    /**
     * Checks for existence of header by given name.
     */
    has(name: string): boolean;
    /**
     * Returns the names of the headers
     */
    keys(): string[];
    /**
     * Sets or overrides header value for given name.
     */
    set(name: string, value: string | string[]): void;
    /**
     * Returns values of all headers.
     */
    values(): string[][];
    /**
     * Returns string of all headers.
     */
    toJSON(): {
        [name: string]: any;
    };
    /**
     * Returns list of header values for a given name.
     */
    getAll(name: string): string[];
    private mayBeSetNormalizedName;
}
