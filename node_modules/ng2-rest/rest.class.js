"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region import
require("rxjs/add/operator/map");
var params_1 = require("./params");
var rest_headers_1 = require("./rest-headers");
//#endregion
exports.DEFAULT_HEADERS = {
    'Content-Type': 'application/json',
    'Accept': 'application/json'
};
var Rest = /** @class */ (function () {
    function Rest(endpoint, request, meta) {
        var _this = this;
        this.request = request;
        this.meta = meta;
        //#endregion
        //#region  constructor
        this._headers = rest_headers_1.RestHeaders.from(exports.DEFAULT_HEADERS);
        //#endregion
        this.array = {
            get: function (params, doNotSerializeParams) {
                if (params === void 0) { params = void 0; }
                return _this.req('get', void 0, params, doNotSerializeParams, true);
            },
            head: function (params, doNotSerializeParams) {
                if (params === void 0) { params = void 0; }
                return _this.req('head', void 0, params, doNotSerializeParams, true);
            },
            post: function (item, params, doNotSerializeParams) {
                return _this.req('post', item, params, doNotSerializeParams, true);
            },
            put: function (item, params, doNotSerializeParams) {
                return _this.req('put', item, params, doNotSerializeParams, true);
            },
            patch: function (item, params, doNotSerializeParams) {
                return _this.req('patch', item, params, doNotSerializeParams, true);
            },
            delete: function (params, doNotSerializeParams) {
                return _this.req('delete', void 0, params, doNotSerializeParams, true);
            },
            jsonp: function (params, doNotSerializeParams) {
                return _this.req('jsonp', void 0, params, doNotSerializeParams, true);
            }
        };
        this.__meta_endpoint = endpoint;
    }
    Rest.prototype.mock = function (mock) {
        if ((typeof mock === 'function') || (typeof mock === 'object')) {
            this.mockHttp = mock;
        }
        else {
            throw "[ng2-rest]\n      .model(...)\n      .mock( < BAD MOCK DATA > )\n      ...\n      ";
        }
        return this;
    };
    Object.defineProperty(Rest.prototype, "endpoint", {
        get: function () {
            var e = this.__meta_endpoint;
            if (this.restQueryParams !== void 0 && this._endpointRest !== void 0
                && typeof this._endpointRest === 'string' && this._endpointRest.trim() !== '')
                e = this._endpointRest;
            return e;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rest.prototype, "__rest_endpoint", {
        set: function (endpoint) {
            this._endpointRest = endpoint;
            if (endpoint === void 0) {
                this.restQueryParams = void 0;
            }
            else {
                this.restQueryParams = params_1.getRestParams(endpoint, this.__meta_endpoint);
            }
        },
        enumerable: true,
        configurable: true
    });
    Rest.prototype.creatUrl = function (params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return "" + this.endpoint + params_1.getParamsUrl(params, doNotSerializeParams);
    };
    Object.defineProperty(Rest.prototype, "headers", {
        get: function () {
            return this._headers;
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region  req
    Rest.prototype.req = function (method, item, params, doNotSerializeParams, isArray) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        if (isArray === void 0) { isArray = false; }
        var modelUrl = this.creatUrl(params, doNotSerializeParams);
        var body = item ? JSON.stringify(item) : void 0;
        var result = this.request[method.toLowerCase()](modelUrl, body, this.headers, this.meta, isArray, this.mockHttp);
        this._headers = rest_headers_1.RestHeaders.from(exports.DEFAULT_HEADERS);
        this.mockHttp = void 0;
        return result;
    };
    //#endregion
    //#region http methods
    //#region replay
    Rest.prototype.replay = function (method) {
        this.request.replay(method, this.meta);
    };
    Rest.prototype.get = function (params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return this.req('get', void 0, params, doNotSerializeParams);
    };
    Rest.prototype.head = function (params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return this.req('head', void 0, params, doNotSerializeParams);
    };
    Rest.prototype.post = function (item, params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return this.req('post', item, params, doNotSerializeParams);
    };
    Rest.prototype.put = function (item, params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return this.req('put', item, params, doNotSerializeParams);
    };
    Rest.prototype.patch = function (item, params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return this.req('patch', item, params, doNotSerializeParams);
    };
    Rest.prototype.delete = function (params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return this.req('delete', void 0, params, doNotSerializeParams);
    };
    Rest.prototype.jsonp = function (params, doNotSerializeParams) {
        if (doNotSerializeParams === void 0) { doNotSerializeParams = false; }
        return this.req('jsonp', void 0, params, doNotSerializeParams);
    };
    return Rest;
}());
exports.Rest = Rest;
//# sourceMappingURL=rest.class.js.map