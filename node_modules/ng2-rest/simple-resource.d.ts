import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/toPromise';
import { Models } from './models';
export interface RestPromises<A, TA, QP extends Models.UrlParams> {
    get: (queryParams?: QP) => Observable<Models.HttpResponse<A>>;
    head: (queryParams?: QP) => Observable<Models.HttpResponse<A>>;
    query: (queryParams?: QP) => Observable<Models.HttpResponse<TA>>;
    put: (item?: A, queryParams?: QP) => Observable<Models.HttpResponse<A>>;
    patch: (item?: A, queryParams?: QP) => Observable<Models.HttpResponse<A>>;
    post: (item?: A, queryParams?: QP) => Observable<Models.HttpResponse<A>>;
    delete: (queryParams?: QP) => Observable<Models.HttpResponse<A> | any>;
}
export interface Model<A, TA, RP extends Object, QP extends Models.UrlParams> {
    (restParams?: RP): RestPromises<A, TA, QP>;
}
/**
 *
 * @export
 * @class SimpleResource
 * @template A single model type
 * @template TA array model type
 * @template RP rest parameters type
 * @template QP query parameters type
 */
export declare class SimpleResource<A, TA> {
    model: Model<A, TA, Object, Models.UrlParams>;
    private static _isSetQueryParamsSerialization;
    static set doNotSerializeQueryParams(value: any);
    static __destroy(): void;
    constructor(endpoint: string, model: string);
}
