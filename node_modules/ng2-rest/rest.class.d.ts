import 'rxjs/add/operator/map';
import { Models } from './models';
import { RestRequest } from './rest-request';
import { RestHeaders } from './rest-headers';
export declare const DEFAULT_HEADERS: {
    'Content-Type': string;
    Accept: string;
};
export declare class Rest<T, TA = T[]> implements Models.FnMethodsHttpWithMock<T, TA> {
    private request;
    private meta;
    private mockHttp;
    mock(mock: Models.MockHttp): Models.FnMethodsHttp<T, TA>;
    private __meta_endpoint;
    private _endpointRest;
    private get endpoint();
    private restQueryParams;
    set __rest_endpoint(endpoint: any);
    private creatUrl;
    private _headers;
    get headers(): RestHeaders;
    constructor(endpoint: string, request: RestRequest, meta: Models.MetaRequest);
    private req;
    replay(method: Models.HttpMethod): void;
    array: {
        get: (params?: Models.UrlParams[], doNotSerializeParams?: boolean) => Models.PromiseObservableMix<Models.HttpResponse<TA>>;
        head: (params?: Models.UrlParams[], doNotSerializeParams?: boolean) => Models.PromiseObservableMix<Models.HttpResponse<TA>>;
        post: (item: TA, params?: Models.UrlParams[], doNotSerializeParams?: boolean) => Models.PromiseObservableMix<Models.HttpResponse<TA>>;
        put: (item: TA, params?: Models.UrlParams[], doNotSerializeParams?: boolean) => Models.PromiseObservableMix<Models.HttpResponse<TA>>;
        patch: (item: TA, params?: Models.UrlParams[], doNotSerializeParams?: boolean) => Models.PromiseObservableMix<Models.HttpResponse<TA>>;
        delete: (params?: Models.UrlParams[], doNotSerializeParams?: boolean) => Models.PromiseObservableMix<Models.HttpResponse<TA>>;
        jsonp: (params?: Models.UrlParams[], doNotSerializeParams?: boolean) => Models.PromiseObservableMix<Models.HttpResponse<TA>>;
    };
    get(params?: Models.UrlParams[], doNotSerializeParams?: boolean): Models.PromiseObservableMix<Models.HttpResponse<T>>;
    head(params?: Models.UrlParams[], doNotSerializeParams?: boolean): Models.PromiseObservableMix<Models.HttpResponse<T>>;
    post(item: T, params?: Models.UrlParams[], doNotSerializeParams?: boolean): Models.PromiseObservableMix<Models.HttpResponse<T>>;
    put(item: T, params?: Models.UrlParams[], doNotSerializeParams?: boolean): Models.PromiseObservableMix<Models.HttpResponse<T>>;
    patch(item: T, params?: Models.UrlParams[], doNotSerializeParams?: boolean): Models.PromiseObservableMix<Models.HttpResponse<T>>;
    delete(params?: Models.UrlParams[], doNotSerializeParams?: boolean): Models.PromiseObservableMix<Models.HttpResponse<T>>;
    jsonp(params?: Models.UrlParams[], doNotSerializeParams?: boolean): Models.PromiseObservableMix<Models.HttpResponse<T>>;
}
