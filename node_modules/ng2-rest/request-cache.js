"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var models_1 = require("./models");
var ng2_logger_1 = require("ng2-logger");
var tnp_core_1 = require("tnp-core");
var rest_headers_1 = require("./rest-headers");
var log = ng2_logger_1.Log.create('request-cache', ng2_logger_1.Level.__NOTHING);
var RequestCache = /** @class */ (function () {
    function RequestCache(response) {
        this.response = response;
    }
    RequestCache.restoreFromLocalStorage = function () {
        if (tnp_core_1.Helpers.isNode) {
            return;
        }
        if (!RequestCache.isRestoredFromLocalStorage) {
            RequestCache.isRestoredFromLocalStorage = true;
            var data = localStorage.getItem(RequestCache.LOCAL_STORAGE_KEY);
            var requests = [];
            if (data) {
                try {
                    requests = JSON.parse(data);
                }
                catch (error) {
                }
                var restored = requests.map(function (r) {
                    var _a = r.response, sourceRequest = _a.sourceRequest, responseText = _a.responseText, body = _a.body, headers = _a.headers, circular = _a.circular, entity = _a.entity, isArray = _a.isArray, cookies = _a.cookies, statusCode = _a.statusCode;
                    r.response = new models_1.Models.HttpResponse(sourceRequest, responseText, rest_headers_1.RestHeaders.from(headers), statusCode, entity, circular, -1, // jobid from local storage TODO
                    isArray);
                    r = new RequestCache(r.response);
                    r.response.rq = r;
                    return r;
                });
                log.i('RESTORED FROM LOCAL STORAGE', restored);
                RequestCache.cached = restored;
            }
        }
    };
    RequestCache.findBy = function (sourceRequest) {
        log.i('findby', sourceRequest);
        log.i('RequestCache.cached', RequestCache.cached);
        RequestCache.restoreFromLocalStorage();
        return RequestCache.cached.find(function (c) {
            var a = c.response.sourceRequest;
            var b = sourceRequest;
            return (a.isArray === b.isArray &&
                a.url === b.url &&
                a.method === b.method &&
                a.body === b.body);
        });
    };
    Object.defineProperty(RequestCache.prototype, "containsCache", {
        get: function () {
            RequestCache.restoreFromLocalStorage();
            return RequestCache.cached.includes(this);
        },
        enumerable: true,
        configurable: true
    });
    RequestCache.prototype.persistsInLocalStorage = function () {
        localStorage.setItem(RequestCache.LOCAL_STORAGE_KEY, JSON.stringify(RequestCache.cached.map(function (r) {
            return {
                response: {
                    sourceRequest: r.response.sourceRequest,
                    responseText: r.response.responseText,
                    headers: r.response.headers,
                    statusCode: r.response.statusCode,
                    entity: r.response.entity,
                    circular: r.response.circular,
                    isArray: r.response.isArray,
                }
            };
        })));
    };
    RequestCache.prototype.store = function () {
        RequestCache.restoreFromLocalStorage();
        if (!this.containsCache) {
            RequestCache.cached.push(this);
            this.persistsInLocalStorage();
        }
        else {
            console.log('already stored');
        }
        return this;
    };
    RequestCache.prototype.remove = function () {
        RequestCache.restoreFromLocalStorage();
        var index = RequestCache.cached.indexOf(this);
        if (index !== -1) {
            RequestCache.cached.splice(index, 1);
            this.persistsInLocalStorage();
        }
        else {
            console.log('already removed');
        }
    };
    RequestCache.LOCAL_STORAGE_KEY = 'ng2restrequestcache';
    RequestCache.cached = [];
    RequestCache.isRestoredFromLocalStorage = false;
    return RequestCache;
}());
exports.RequestCache = RequestCache;
//# sourceMappingURL=request-cache.js.map