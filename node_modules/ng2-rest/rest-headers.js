"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var RestHeaders = /** @class */ (function () {
    function RestHeaders(headers) {
        var _this = this;
        /** @internal header names are lower case */
        this._headers = new Map();
        /** @internal map lower case names to actual names */
        this._normalizedNames = new Map();
        if (headers instanceof RestHeaders) {
            headers.forEach(function (values, name) {
                values.forEach(function (value) { return _this.set(name, value); });
            });
        }
        else {
            Object.keys(headers).forEach(function (name) {
                var values = (Array.isArray(headers[name]) ? headers[name] : [headers[name]]);
                _this.delete(name);
                values.forEach(function (value) { return _this.set(name, value); });
            });
        }
    }
    RestHeaders.from = function (headers) {
        if (!headers) {
            return void 0;
        }
        return new RestHeaders(headers);
    };
    /**
     * Returns a new RestHeaders instance from the given DOMString of Response RestHeaders
     */
    RestHeaders.fromResponseHeaderString = function (headersString) {
        var headers = new RestHeaders();
        headersString.split('\n').forEach(function (line) {
            var index = line.indexOf(':');
            if (index > 0) {
                var name_1 = line.slice(0, index);
                var value = line.slice(index + 1).trim();
                headers.set(name_1, value);
            }
        });
        return headers;
    };
    /**
     * Appends a header to existing list of header values for a given header name.
     */
    RestHeaders.prototype.append = function (name, value) {
        var values = this.getAll(name);
        if (values === null) {
            this.set(name, value);
        }
        else {
            values.push(value);
        }
    };
    /**
     * Deletes all header values for the given name.
     */
    RestHeaders.prototype.delete = function (name) {
        var lcName = name.toLowerCase();
        this._normalizedNames.delete(lcName);
        this._headers.delete(lcName);
    };
    RestHeaders.prototype.forEach = function (fn) {
        var _this = this;
        this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });
    };
    /**
     * Returns first header that matches given name.
     */
    RestHeaders.prototype.get = function (name) {
        var values = this.getAll(name);
        if (values === null) {
            return null;
        }
        return values.length > 0 ? values[0] : null;
    };
    /**
     * Checks for existence of header by given name.
     */
    RestHeaders.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };
    /**
     * Returns the names of the headers
     */
    RestHeaders.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };
    /**
     * Sets or overrides header value for given name.
     */
    RestHeaders.prototype.set = function (name, value) {
        if (Array.isArray(value)) {
            if (value.length) {
                this._headers.set(name.toLowerCase(), [value.join(',')]);
            }
        }
        else {
            this._headers.set(name.toLowerCase(), [value]);
        }
        this.mayBeSetNormalizedName(name);
    };
    /**
     * Returns values of all headers.
     */
    RestHeaders.prototype.values = function () { return Array.from(this._headers.values()); };
    /**
     * Returns string of all headers.
     */
    // TODO(vicb): returns {[name: string]: string[]}
    RestHeaders.prototype.toJSON = function () {
        var _this = this;
        var serialized = {};
        if (!this._headers) {
            debugger;
        }
        this._headers.forEach(function (values, name) {
            var split = [];
            values.forEach(function (v) { return split.push.apply(split, v.split(',')); });
            serialized[_this._normalizedNames.get(name)] = split;
        });
        return serialized;
    };
    /**
     * Returns list of header values for a given name.
     */
    RestHeaders.prototype.getAll = function (name) {
        return this.has(name) ? this._headers.get(name.toLowerCase()) : null;
    };
    RestHeaders.prototype.mayBeSetNormalizedName = function (name) {
        var lcName = name.toLowerCase();
        if (!this._normalizedNames.has(lcName)) {
            this._normalizedNames.set(lcName, name);
        }
    };
    return RestHeaders;
}());
exports.RestHeaders = RestHeaders;
//# sourceMappingURL=rest-headers.js.map