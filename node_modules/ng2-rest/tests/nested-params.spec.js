"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var mocha_1 = require("mocha");
var chai_1 = require("chai");
var UrlNestedParams = require("../params");
mocha_1.describe('Nested params', function () {
    mocha_1.it('shoudl generate stars', function () {
        chai_1.expect(UrlNestedParams.stars(5)).to.be.eq("*****");
    });
    mocha_1.it('shoudl be good pattern', function () {
        var pattern = 'http://something.com/book/:boookId/author/:author';
        chai_1.expect(UrlNestedParams.isValid(pattern)).to.be.true;
    });
    mocha_1.it('shoudl not be good pattern', function () {
        var pattern = 'http://something.com/book/boookId/author/author';
        chai_1.expect(UrlNestedParams.isValid(pattern)).to.be.false;
    });
    mocha_1.it('shoudl valid url - pattern', function () {
        var pattern = 'http://something.com/book/:boookId/author/:author';
        var url = 'http://something.com/book/12/author/jensend';
        chai_1.expect(UrlNestedParams.check(url, pattern)).to.be.true;
    });
    mocha_1.it('shoudl valid url - pattern (with slash on end) ', function () {
        var pattern = 'http://something.com/book/:boookId/author/:author/';
        var url = 'http://something.com/book/12/author/jensend';
        chai_1.expect(UrlNestedParams.check(url, pattern)).to.be.true;
    });
    mocha_1.it('shoudl valid url (with slash on end) - pattern ', function () {
        var pattern = 'http://something.com/book/:boookId/author/:author';
        var url = 'http://something.com/book/12/author/jensend/';
        chai_1.expect(UrlNestedParams.check(url, pattern)).to.be.true;
    });
    mocha_1.it('shoudl not valid bad urls ', function () {
        var pattern = 'http://something.com/book/:boookId/author/:author';
        var url = 'something.com/book/12/author/jensend/';
        chai_1.expect(UrlNestedParams.check(url, pattern)).to.be.false;
    });
    mocha_1.it('shoudl not valid url with pattern ', function () {
        var pattern = 'http://something.com/book/:boookId/author/:author';
        var url = 'http://something.com/book/12/author';
        chai_1.expect(UrlNestedParams.check(url, pattern)).to.be.false;
    });
    mocha_1.it('shoudl retrive models ', function () {
        var pattern = 'http://something.com/book/:boookId/author/:authorId';
        chai_1.expect(UrlNestedParams.getModels(pattern)).to.deep.eq(['book', 'author']);
    });
    mocha_1.it('shoudl check if url contains models ', function () {
        var url = 'http://something.com/book/12/author';
        chai_1.expect(UrlNestedParams.containsModels(url, ['book', 'author'])).to.be.true;
    });
    mocha_1.it('should retrive proper names of rest query params', function () {
        var pattern = 'http://something.com/book/:bookId/author/:author';
        chai_1.expect(UrlNestedParams.getRestPramsNames(pattern)).to.deep.eq(['bookId', 'author']);
    });
    mocha_1.it('should retrive pairs value/key for rest query params', function () {
        var pattern = 'http://something.com/book/:bookId/author/:author';
        var url = 'http://something.com/book/12/author/Wilson';
        chai_1.expect(UrlNestedParams.getRestParams(url, pattern)).to.deep.eq({
            bookId: 12,
            author: 'Wilson'
        });
    });
    mocha_1.it('should retrive pairs value/key for rest query params 3 level', function () {
        var pattern = 'http://something.com/book/:bookId/author/:author/withCover/:withCoverVal';
        var url = 'http://something.com/book/12/author/Wilson/withCover/true';
        chai_1.expect(UrlNestedParams.getRestParams(url, pattern)).to.deep.eq({
            bookId: 12,
            author: 'Wilson',
            withCoverVal: true
        });
    });
    mocha_1.it('should retrive pairs value/key for rest query params 3 level other case', function () {
        var title = 'aaasdasd';
        var pattern = 'http://something.com/books/:bookid/title/:titleId/mission/:missionId';
        var url = "http://something.com/books/34/title/" + title + "/mission/true";
        chai_1.expect(UrlNestedParams.getRestParams(url, pattern)).to.deep.eq({
            bookid: 34,
            titleId: title,
            missionId: true
        });
    });
    mocha_1.it('should interpolate params 1 level', function () {
        var title = 'aaasdasd';
        var obj = {
            bookid: 34
        };
        var pattern = '/books/:bookid';
        var url = "/books/34";
        chai_1.expect(UrlNestedParams.interpolateParamsToUrl(obj, pattern)).to.eq(url);
    });
    mocha_1.it('should interpolate params 1 level, based prefix ', function () {
        var title = 'aaasdasd';
        var obj = {
            bookid: 34
        };
        var pattern = '/api/books/:bookid';
        var url = "/api/books/34";
        chai_1.expect(UrlNestedParams.interpolateParamsToUrl(obj, pattern)).to.eq(url);
    });
    mocha_1.it('should interpolate params 3 level', function () {
        var title = 'aaasdasd';
        var obj = {
            bookid: 34,
            titleId: title,
            missionId: true
        };
        var pattern = '/books/:bookid/title/:titleId/mission/:missionId';
        var url = "/books/34/title/" + title + "/mission/true";
        chai_1.expect(UrlNestedParams.interpolateParamsToUrl(obj, pattern)).to.eq(url);
    });
    mocha_1.it('should interpolate params with last alone param', function () {
        var title = 'aaasdasd';
        var obj = {
            bookid: 34,
            titleId: title,
            missionId: true
        };
        var pattern = '/books/:bookid/titles';
        var url = "/books/34/titles";
        chai_1.expect(UrlNestedParams.interpolateParamsToUrl(obj, pattern)).to.eq(url);
    });
    mocha_1.it('should interpolate params with last alone param2', function () {
        var title = 'aaasdasd';
        var obj = {};
        var pattern = '/books/:bookid/titles';
        var url = "/books";
        chai_1.expect(UrlNestedParams.interpolateParamsToUrl(obj, pattern)).to.eq(url);
    });
    mocha_1.it('shoudl check if url not contains models ', function () {
        var url = 'http://something.com/booka/12/author';
        chai_1.expect(UrlNestedParams.containsModels(url, ['book', 'author'])).to.be.false;
    });
    // it('should save nested model (1 level) ',
    //     inject([Resource, Http, MockBackend, Jsonp],
    //         (rest: Resource<APIS, User, User[]>, http: Http, backend: MockBackend, jp) => {
    //             backend.connections.subscribe(
    //                 (c: MockConnection) => {
    //                     expect(c.request.method).toBe(RequestMethod.Post);
    //                     // expect(c.request.url).toBe('https://somewhere.com/users/12');
    //                     user.id = 1;
    //                     let res = new Response(new ResponseOptions({
    //                         body: JSON.stringify(user)
    //                     }));
    //                     c.mockRespond(res);
    //                 });
    //             rest = new Resource<APIS, User, User[]>(http, jp);
    //             let url = 'https://somewhere.com/users/:userid';
    //             Resource.map(APIS.FIRST.toString(), url);
    //             Resource.mockingMode.setBackendOnly();
    //             rest.add(APIS.FIRST, 'users/:userid');
    //             rest.api(APIS.FIRST, `users/12`, )
    //                 .save(user).subscribe((res) => {
    //                     expect(res.id).toBeDefined();
    //                 }, (err) => {
    //                     fail;
    //                 });
    //         }));
    // it('should have proper rest query params', async(() => {
    //     let d = inject([Resource, Http, Jsonp],
    //         (rest: Resource<APIS, User, User[]>, http: Http, jp: Jsonp) => {
    //             let title = 'some title';
    //             rest = new Resource<APIS, User, User[]>(http, jp);
    //             let url = 'https://somewhere.com';
    //             Resource.map(APIS.FIRST.toString(), url);
    //             Resource.mockingMode.setMocksOnly();
    //             rest.add(APIS.FIRST, 'books/:bookid/title/:titleId');
    //             let ctrl = (request: MockRequest<User>) => {
    //                 expect(request.restParams).toBeDefined();
    //                 expect(request.restParams['bookid']).toBe(34);
    //                 expect(request.restParams['titleId']).toBe(title)
    //                 return request.data;
    //             }
    //             rest.api(APIS.FIRST, `books/34/title/${title}`)
    //                 .mock(user, 0, ctrl)
    //                 .get([{ id: 0 }]).subscribe((res) => {
    //                     expect(res.id).toBe(100);
    //                 }, (err) => {
    //                     fail;
    //                 });
    //         })
    //     d();
    // }));
    // it('should have proper rest query params 3 level aa', async(() => {
    //     let d = inject([Resource, Http, Jsonp],
    //         (rest: Resource<APIS, User, User[]>, http: Http, jp: Jsonp) => {
    //             let title = 'sometitle';
    //             rest = new Resource<APIS, User, User[]>(http, jp);
    //             let url = 'https://somewhere.com';
    //             Resource.map(APIS.FIRST.toString(), url);
    //             Resource.mockingMode.setMocksOnly();
    //             rest.add(APIS.FIRST, 'books/:bookid/title/:titleId/mission/:missionId');
    //             let ctrl = (request: MockRequest<User>) => {
    //                 expect(request.restParams).toBeDefined();
    //                 expect(request.restParams['bookid']).toBe(34);
    //                 expect(request.restParams['titleId']).toBe(title)
    //                 expect(request.restParams['missionId']).to.be.true;
    //                 return request.data;
    //             }
    //             rest.api(APIS.FIRST, `books/34/title/${title}/mission/true`)
    //                 .mock(user, 0, ctrl)
    //                 .get([{ id: 0 }]).subscribe((res) => {
    //                     expect(res.id).toBe(100);
    //                 }, (err) => {
    //                     fail;
    //                 });
    //         })
    //     d();
    // }));
    // it('shoudl check if url contains models with dash ', () => {
    //     let url = 'http://something.com/book-ddd/12/author';
    //     expect(UrlNestedParams.containsModels(url, ['book-ddd', 'author'])).to.be.true;
    // })
    // it('shoudl retrive models ', () => {
    //     let pattern = 'http://something.com/book-shitty/:boookId/author/:authorId';
    //     expect(UrlNestedParams.getModels(pattern)).toEqual(['book-shitty', 'author']);
    // })
});
//# sourceMappingURL=nested-params.spec.js.map