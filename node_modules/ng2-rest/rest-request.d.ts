import 'rxjs/add/operator/map';
import 'rxjs/add/operator/takeUntil';
import 'rxjs/add/operator/take';
import { Models } from './models';
import { RestHeaders } from './rest-headers';
export declare class RestRequest {
    static zone: any;
    private static jobId;
    private subjectInuUse;
    private meta;
    private handlerResult;
    checkCache(sourceRequest: Models.HandleResultSourceRequestOptions, jobid: number): boolean;
    private req;
    private getReplay;
    private generalReq;
    get(url: string, body: string, headers: RestHeaders, meta: Models.MetaRequest, isArray: boolean, mockHttp: Models.MockHttp): Models.PromiseObservableMix<any>;
    head(url: string, body: string, headers: RestHeaders, meta: Models.MetaRequest, isArray: boolean, mockHttp: Models.MockHttp): Models.PromiseObservableMix<any>;
    delete(url: string, body: string, headers: RestHeaders, meta: Models.MetaRequest, isArray: boolean, mockHttp: Models.MockHttp): Models.PromiseObservableMix<any>;
    post(url: string, body: string, headers: RestHeaders, meta: Models.MetaRequest, isArray: boolean, mockHttp: Models.MockHttp): Models.PromiseObservableMix<any>;
    put(url: string, body: string, headers: RestHeaders, meta: Models.MetaRequest, isArray: boolean, mockHttp: Models.MockHttp): Models.PromiseObservableMix<any>;
    patch(url: string, body: string, headers: RestHeaders, meta: Models.MetaRequest, isArray: boolean, mockHttp: Models.MockHttp): Models.PromiseObservableMix<any>;
    jsonp(url: string, body: string, headers: RestHeaders, meta: Models.MetaRequest, isArray: boolean, mockHttp: Models.MockHttp): Models.PromiseObservableMix<any>;
    private replaySubjects;
    replay(method: Models.HttpMethod, meta: Models.MetaRequest): void;
}
