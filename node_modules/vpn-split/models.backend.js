"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var tnp_cli_1 = require("tnp-cli");
var tnp_helpers_1 = require("tnp-helpers");
var HostForServer = /** @class */ (function () {
    function HostForServer(data) {
        var _this = this;
        this.toString = function () {
            return "[string version] " + _this.nameWithIpOrDomain;
        };
        if (data === null || data === void 0 ? void 0 : data.ipOrDomain) {
            if (tnp_helpers_1.Helpers.isValidIp(data.ipOrDomain)) {
                data.ip = data.ipOrDomain;
            }
            else {
                data.domain = data.ipOrDomain;
            }
        }
        if (data && !data.ip) {
            data.ip = '';
        }
        if (data && !data.domain) {
            data.domain = '';
        }
        if (!data) {
            data = {};
        }
        if (tnp_core_1._.isString(data === null || data === void 0 ? void 0 : data.aliases)) {
            data.aliases = tnp_helpers_1.Helpers.strings.splitIfNeed(data.aliases);
        }
        this._data = data;
    }
    HostForServer.prototype.clone = function () {
        return HostForServer.From(this);
    };
    HostForServer.From = function (ipOrDomain, name, disabled) {
        if (name === void 0) { name = ''; }
        if (disabled === void 0) { disabled = false; }
        if (!ipOrDomain) {
            return void 0;
        }
        if (tnp_core_1._.isObject(ipOrDomain) && ipOrDomain instanceof HostForServer) {
            var dataClone = tnp_core_1._.cloneDeep(ipOrDomain._data);
            dataClone.name = (name && (name.trim() !== '')) ?
                name : dataClone.name;
            if (!tnp_core_1._.isBoolean(dataClone.disabled)) {
                dataClone.disabled = disabled;
            }
            return new HostForServer(dataClone);
        }
        if (tnp_core_1._.isString(ipOrDomain)) {
            var parsed = tnp_helpers_1.Helpers.urlParse(ipOrDomain);
            if (parsed) {
                ipOrDomain = parsed;
            }
        }
        if (tnp_core_1._.isObject(ipOrDomain) && (ipOrDomain instanceof URL)) {
            ipOrDomain = ipOrDomain;
            if (tnp_helpers_1.Helpers.isValidIp(ipOrDomain === null || ipOrDomain === void 0 ? void 0 : ipOrDomain.host)) {
                return new HostForServer({ ip: ipOrDomain.origin, name: name, disabled: disabled });
            }
            else {
                return new HostForServer({ domain: ipOrDomain.origin, name: name, disabled: disabled });
            }
        }
        else {
            if (tnp_core_1._.isString(ipOrDomain)) {
                return new HostForServer({ ipOrDomain: ipOrDomain, name: name, disabled: disabled });
            }
            else {
                ipOrDomain.name = (name && (name.trim() !== '')) ?
                    name : ipOrDomain.name;
                if (!tnp_core_1._.isBoolean(ipOrDomain.disabled)) {
                    ipOrDomain.disabled = disabled;
                }
                return new HostForServer(ipOrDomain);
            }
        }
    };
    Object.defineProperty(HostForServer.prototype, "ip", {
        get: function () {
            if (this.disabled) {
                return '';
            }
            return this._data.ip;
        },
        set: function (newIpAddress) {
            this._data.ip = newIpAddress;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "domain", {
        get: function () {
            if (this.disabled) {
                return '';
            }
            return this._data.domain;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "aliases", {
        get: function () {
            if (this.disabled) {
                return [];
            }
            if (tnp_core_1._.isString(this._data.aliases)) {
                return this._data.aliases.split(' ');
            }
            if (!tnp_core_1._.isArray(this._data.aliases)) {
                return [];
            }
            return this._data.aliases;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "firstAlias", {
        get: function () {
            return tnp_core_1._.first(this.aliases);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "name", {
        get: function () {
            return this._data.name;
        },
        set: function (v) {
            this._data.name = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "disabled", {
        get: function () {
            return this._data.disabled;
        },
        set: function (v) {
            this._data.disabled = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "isDefault", {
        get: function () {
            return this._data.isDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "identifier", {
        get: function () {
            return tnp_core_1._.kebabCase(this._data.name);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "ipOrDomain", {
        get: function () {
            if (this.disabled) {
                return '';
            }
            var res = (this.domain ? this.domain : this.ip) || '';
            return res;
            // return res.startsWith('http') ? res : `http://${res}`;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "ipOrFirstAlias", {
        get: function () {
            if (this.disabled) {
                return '';
            }
            var res = (this.firstAlias ? this.firstAlias : this.ip) || '';
            return res;
            // return res.startsWith('http') ? res : `http://${res}`;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "hostname", {
        get: function () {
            var h = tnp_helpers_1.Helpers.urlParse(this.ipOrFirstAlias, true);
            return h ? h.hostname : void 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "hostnameFirstAlias", {
        get: function () {
            var h = tnp_helpers_1.Helpers.urlParse(this.firstAlias, true);
            return h ? h.hostname : void 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "hostnameIp", {
        get: function () {
            var h = tnp_helpers_1.Helpers.urlParse(this.ip);
            return h ? h.hostname : void 0;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HostForServer.prototype, "nameWithIpOrDomain", {
        get: function () {
            return tnp_cli_1.CLI.chalk.underline(this.name + " " + this.ipOrDomain);
        },
        enumerable: true,
        configurable: true
    });
    return HostForServer;
}());
exports.HostForServer = HostForServer;
//# sourceMappingURL=models.backend.js.map