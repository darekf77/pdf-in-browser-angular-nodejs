"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hostile = require("hostile");
var tnp_cli_1 = require("tnp-cli");
var tnp_core_1 = require("tnp-core");
var Hostile = /** @class */ (function () {
    function Hostile() {
    }
    /**
     * Display all current ip records
     */
    Hostile.prototype.list = function () {
        var lines;
        try {
            lines = hostile.get(false);
        }
        catch (err) {
            return this.error(err);
        }
        lines.forEach(function (item) {
            if (item.length > 1) {
                console.log(item[0], tnp_cli_1.CLI.chalk.green(item[1]));
            }
            else {
                console.log(item);
            }
        });
    };
    /**
     * Set a new host
     * @param {string} ip
     * @param {string} host
     */
    Hostile.prototype.set = function (ip, host) {
        if (!ip || !host) {
            return this.error('Invalid syntax: hostile set <ip> <host>');
        }
        if (ip === 'local' || ip === 'localhost') {
            ip = '127.0.0.1';
        }
        else if (!tnp_core_1.net.isIP(ip)) {
            return this.error('Invalid IP address');
        }
        try {
            hostile.set(ip, host);
        }
        catch (err) {
            return this.error('Error: ' + err.message + '. Are you running as root?');
        }
        console.log(tnp_cli_1.CLI.chalk.green('Added ' + host));
    };
    /**
     * Remove a host
     * @param {string} host
     */
    Hostile.prototype.remove = function (host) {
        var _this = this;
        var lines;
        try {
            lines = hostile.get(false);
        }
        catch (err) {
            return this.error(err);
        }
        lines.forEach(function (item) {
            if (item[1] === host) {
                try {
                    hostile.remove(item[0], host);
                }
                catch (err) {
                    return _this.error('Error: ' + err.message + '. Are you running as root?');
                }
                console.log(tnp_cli_1.CLI.chalk.green('Removed ' + host));
            }
        });
    };
    /**
     * Load hosts given a file
     * @param {string} filePath
     */
    Hostile.prototype.load = function (filePath) {
        var _this = this;
        var lines = this.parseFile(filePath);
        lines.forEach(function (item) {
            _this.set(item[0], item[1]);
        });
        console.log(tnp_cli_1.CLI.chalk.green('\nAdded %d hosts!'), lines.length);
    };
    /**
     * Remove hosts given a file
     * @param {string} filePath
     */
    Hostile.prototype.unload = function (filePath) {
        var _this = this;
        var lines = this.parseFile(filePath);
        lines.forEach(function (item) {
            _this.remove(item[1]);
        });
        console.log(tnp_cli_1.CLI.chalk.green('Removed %d hosts!'), lines.length);
    };
    /**
     * Get all the lines of the file as array of arrays [[IP, host]]
     * @param {string} filePath
     */
    Hostile.prototype.parseFile = function (filePath) {
        var lines;
        try {
            lines = hostile.getFile(filePath, false);
        }
        catch (err) {
            return this.error(err);
        }
        return lines;
    };
    /**
     * Print an error and exit the program
     * @param {string} message
     */
    Hostile.prototype.error = function (err) {
        console.error(tnp_cli_1.CLI.chalk.red(err.message || err));
        process.exit(-1);
    };
    return Hostile;
}());
exports.Hostile = Hostile;
//# sourceMappingURL=hostile.backend.js.map