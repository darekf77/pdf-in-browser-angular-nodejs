export declare type EtcHosts = {
    [hostName in string]: HostForServer;
};
export declare type IEtcHosts = {
    [hostName in string]: Pick<HostForServer, 'aliases' | 'ipOrDomain'>;
};
export interface OptHostForServer {
    ip?: string;
    domain?: string;
    ipOrDomain?: string;
    aliases?: string[];
    isDefault?: boolean;
    name?: string;
    /**
     * if true - ip and domain will output empty string
     */
    disabled?: boolean;
}
export declare class HostForServer implements OptHostForServer {
    private _data;
    clone(): HostForServer;
    static From(ipOrDomain: string | URL | Pick<OptHostForServer | HostForServer, 'ipOrDomain' | 'aliases'>, name?: string, disabled?: boolean): HostForServer;
    constructor(data: OptHostForServer);
    get ip(): string;
    set ip(newIpAddress: string);
    get domain(): string;
    get aliases(): string[];
    get firstAlias(): string;
    get name(): string;
    set name(v: string);
    get disabled(): boolean;
    get isDefault(): boolean;
    get identifier(): string;
    set disabled(v: boolean);
    get ipOrDomain(): string;
    get ipOrFirstAlias(): string;
    get hostname(): string;
    get hostnameFirstAlias(): string;
    get hostnameIp(): string;
    get nameWithIpOrDomain(): string;
    toString: () => string;
}
