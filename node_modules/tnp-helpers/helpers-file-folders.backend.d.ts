import { Models } from 'tnp-models';
export declare class HelpersFileFolders {
    /**
     * Calculate file or string checksum
     */
    checksum(absolutePathToFileOrContent: string, algorithm?: 'md5' | 'sha1'): string;
    getValueFromJSON(filepath: string, lodashGetPath: string, defaultValue?: any): any;
    readValueFromJson(filepath: string, lodashGetPath: string, defaultValue?: any): any;
    setValueToJSON(filepath: string, lodashGetPath: string, value: any): void;
    /**
     * file size in bytes
     */
    size(filePath: string): number;
    pathFromLink(filePath: string): string;
    renameFolder(from: string, to: string, cwd?: string): void;
    getTempFolder(): string;
    isPlainFileOrFolder(filePath: any): boolean;
    requireUncached(module: any): any;
    /**
     * get default export object from  js file
     * @param jsFilePath
     */
    require(jsFilePath: string): any;
    tryRecreateDir(dirpath: string): void;
    tryCopyFrom(source: string, destination: string, options?: {}): void;
    removeIfExists(absoluteFileOrFolderPath: string): void;
    removeFileIfExists(absoluteFilePath: string, options?: {
        modifiedFiles?: Models.other.ModifiedFiles;
    }): void;
    removeFolderIfExists(absoluteFolderPath: string, options?: {
        modifiedFiles?: Models.other.ModifiedFiles;
    }): void;
    tryRemoveDir(dirpath: string, contentOnly?: boolean): void;
    move(from: string, to: string): void;
    remove(fileOrFolderPathOrPatter: string, exactFolder?: boolean): void;
    findChildren<T>(location: any, createFn: (childLocation: string) => T): T[];
    findChildrenNavi<T>(location: any, createFn: (childLocation: string) => T): T[];
    getRecrusiveFilesFrom(dir: any): string[];
    getLinesFromFiles(filename: string, lineCount?: number): Promise<string[]>;
    /**
     * Get the most recent changes file in direcory
     * @param dir absoulute path to file
     */
    getMostRecentFileName(dir: any): string;
    getMostRecentFilesNames(dir: any): string[];
    removeExcept(fromPath: string, exceptFolderAndFiles: string[]): void;
    copy(sourceDir: string, destinationDir: string, options?: {
        filter?: any;
        overwrite?: boolean;
        recursive?: boolean;
        omitFolders?: string[];
        omitFoldersBaseFolder?: string;
        copySymlinksAsFiles?: boolean;
        useTempFolder?: boolean;
    }): void;
    copyFile(sourcePath: string, destinationPath: string, options?: {
        transformTextFn?: (input: string) => string;
        debugMode?: boolean;
        fast?: boolean;
        dontCopySameContent?: boolean;
        modifiedFiles?: Models.other.ModifiedFiles;
    }): boolean;
    /**
     * get real absolute path
     */
    resolve(fileOrFolderPath: string): string;
}
