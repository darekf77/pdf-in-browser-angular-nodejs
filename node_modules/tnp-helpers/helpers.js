"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var helpers_array_obj_1 = require("./helpers-array-obj");
var helpers_messages_1 = require("./helpers-messages");
var helpers_strings_regexes_1 = require("./helpers-strings-regexes");
var helpers_environment_1 = require("./helpers-environment");
var helpers_strings_1 = require("./helpers-strings");
var condition_wait_1 = require("./condition-wait");
//#region @backend
var tnp_core_2 = require("tnp-core");
var Task = require("task.js");
var tnp_core_3 = require("tnp-core");
var url_1 = require("url");
var helpers_git_backend_1 = require("./helpers-git.backend");
var helpers_cli_tool_backend_1 = require("./helpers-cli-tool.backend");
var helpers_morphi_framework_backend_1 = require("./helpers-morphi-framework.backend");
var helpers_process_backend_1 = require("./helpers-process.backend");
var ts_code_modifier_1 = require("./ts-code-modifier");
var helpers_npm_backend_1 = require("./helpers-npm.backend");
var helpers_system_terminal_backend_1 = require("./helpers-system-terminal.backend");
var helpers_file_folders_backend_1 = require("./helpers-file-folders.backend");
var helpers_dependencies_backend_1 = require("./helpers-dependencies.backend");
var helpers_path_backend_1 = require("./helpers-path.backend");
var helpers_network_backend_1 = require("./helpers-network.backend");
var helpers_json5_backend_1 = require("./helpers-json5.backend");
var tnp_cli_1 = require("tnp-cli");
//#endregion
var tnp_config_1 = require("tnp-config");
var index_1 = require("./index");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var morphi_1 = require("morphi");
var tnp_core_4 = require("tnp-core");
function applyMixins(derivedCtor, baseCtors) {
    baseCtors.forEach(function (baseCtor) {
        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));
        });
    });
}
exports.applyMixins = applyMixins;
// @ts-ignore
var HelpersTnp = /** @class */ (function (_super) {
    tslib_1.__extends(HelpersTnp, _super);
    function HelpersTnp(
    //#region @backend
    tsCodeModifier, cliTool, terminal, git, npm, morphi, deps, path, network, json5, 
    //#endregion
    arrays, strings) {
        if (tsCodeModifier === void 0) { tsCodeModifier = new ts_code_modifier_1.TsCodeModifer(); }
        if (cliTool === void 0) { cliTool = new helpers_cli_tool_backend_1.HelpersCliTool(); }
        if (terminal === void 0) { terminal = new helpers_system_terminal_backend_1.HelpersTerminal(); }
        if (git === void 0) { git = new helpers_git_backend_1.HelpersGit(); }
        if (npm === void 0) { npm = new helpers_npm_backend_1.HelpersNpm(); }
        if (morphi === void 0) { morphi = new helpers_morphi_framework_backend_1.HelpersMorphiFramework(); }
        if (deps === void 0) { deps = new helpers_dependencies_backend_1.HelpersDependencies(); }
        if (path === void 0) { path = new helpers_path_backend_1.HelpersPath(); }
        if (network === void 0) { network = new helpers_network_backend_1.HelpersNetwork(); }
        if (json5 === void 0) { json5 = new helpers_json5_backend_1.HelpersJSON5(); }
        if (arrays === void 0) { arrays = new helpers_array_obj_1.HelpersArrayObj(); }
        if (strings === void 0) { strings = new helpers_strings_1.HelpersStrings(); }
        var _this = _super.call(this) || this;
        _this.tsCodeModifier = tsCodeModifier;
        _this.cliTool = cliTool;
        _this.terminal = terminal;
        _this.git = git;
        _this.npm = npm;
        _this.morphi = morphi;
        _this.deps = deps;
        _this.path = path;
        _this.network = network;
        _this.json5 = json5;
        _this.arrays = arrays;
        _this.strings = strings;
        _this.conditionWait = condition_wait_1.conditionWait;
        //#endregion
        //#region @backend
        _this.checkEnvironment = function (deps) { return tnp_cli_1.CLI.checkEnvironment(deps); };
        //#endregion
        _this.applyMixins = applyMixins;
        return _this;
    }
    Object.defineProperty(HelpersTnp, "Instance", {
        get: function () {
            if (!HelpersTnp._instance) {
                HelpersTnp._instance = new HelpersTnp();
            }
            return HelpersTnp._instance;
        },
        enumerable: true,
        configurable: true
    });
    HelpersTnp.prototype.CLIWRAP = function (f, name) {
        typescript_class_helpers_1.CLASS.setName(f, name);
        return f;
    };
    //#region @backend
    HelpersTnp.prototype.urlParse = function (portOrHost, forceDomain) {
        if (forceDomain === void 0) { forceDomain = false; }
        var url;
        if (portOrHost instanceof url_1.URL) {
            url = portOrHost;
        }
        else if (tnp_core_1._.isNumber(portOrHost)) {
            url = new url_1.URL("http://localhost:" + portOrHost);
        }
        else if (!tnp_core_1._.isNaN(Number(portOrHost))) {
            url = new url_1.URL("http://localhost:" + Number(portOrHost));
        }
        else if (tnp_core_1._.isString(portOrHost)) {
            try {
                url = new url_1.URL(portOrHost);
            }
            catch (error) { }
            if (index_1.Helpers.isValidIp(portOrHost)) {
                try {
                    url = new url_1.URL("http://" + portOrHost);
                }
                catch (error) {
                    index_1.Helpers.warn("Not able to get port from " + portOrHost);
                }
            }
            if (forceDomain) {
                var domain = portOrHost;
                url = new url_1.URL(domain.startsWith('http') ? domain : "http://" + portOrHost);
            }
        }
        return url;
    };
    //#endregion
    //#region @backend
    HelpersTnp.prototype.slash = function (pathFromWindowsOrUnixType) {
        return tnp_core_2.crossPlatformPath(pathFromWindowsOrUnixType);
    };
    //#endregion
    HelpersTnp.prototype.isElevated = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, tnp_core_3.isElevated()];
                    case 1:
                        //#region @backend
                        if (!(_a.sent())) {
                            index_1.Helpers.error("[tnp-helpers] Please run this program as sudo (or admin on windows)", false, true);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    //#region @backend
    HelpersTnp.prototype.localIpAddress = function () {
        return index_1.Helpers.getStringFrom('ipconfig getifaddr en0', "ip v4 address of first ethernet interface");
    };
    //#endregion
    //#region @backend
    HelpersTnp.prototype.allLocalIpAddresses = function () {
        var networkInterfaces = require('os').networkInterfaces;
        var nets = networkInterfaces();
        var results = Object.create(null); // Or just '{}', an empty object
        var ips = [];
        for (var _i = 0, _a = Object.keys(nets); _i < _a.length; _i++) {
            var name_1 = _a[_i];
            for (var _b = 0, _c = nets[name_1]; _b < _c.length; _b++) {
                var net = _c[_b];
                // Skip over non-IPv4 and internal (i.e. 127.0.0.1) addresses
                if (net.family === 'IPv4' && !net.internal) {
                    if (!results[name_1]) {
                        results[name_1] = [];
                    }
                    ips.push(net.address);
                    results[name_1].push(net.address);
                }
            }
        }
        return ips.map(function (a) { return index_1.Helpers.urlParse(a); });
    };
    //#endregion
    HelpersTnp.prototype.mesureExectionInMs = function (description, functionToExecute) {
        var functionArguments = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            functionArguments[_i - 2] = arguments[_i];
        }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var start, end;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        start = new Date();
                        return [4 /*yield*/, index_1.Helpers.runSyncOrAsync.apply(index_1.Helpers, tslib_1.__spreadArrays([functionToExecute], functionArguments))];
                    case 1:
                        _a.sent();
                        end = new Date() - start;
                        if (morphi_1.Morphi.IsBrowser) {
                            index_1.Helpers.info("Execution time: " + end.toString() + "ms for \"" + description + "\"");
                        }
                        //#region @backend
                        index_1.Helpers.info("Execution time: " + tnp_cli_1.CLI.chalk.bold(end.toString()) + "ms for \"" + tnp_cli_1.CLI.chalk.bold(description) + "\"");
                        //#endregion
                        return [2 /*return*/, end];
                }
            });
        });
    };
    HelpersTnp.prototype.mesureExectionInMsSync = function (description, functionToExecute) {
        var start = new Date();
        functionToExecute();
        //@ts-ignore
        var end = new Date() - start;
        if (morphi_1.Morphi.IsBrowser) {
            index_1.Helpers.info("Execution time: " + end.toString() + "ms for \"" + description + "\"");
        }
        //#region @backend
        index_1.Helpers.info("Execution time: " + tnp_cli_1.CLI.chalk.bold(end.toString()) + "ms for \"" + tnp_cli_1.CLI.chalk.bold(description) + "\"");
        //#endregion
        return end;
    };
    HelpersTnp.prototype.waitForCondition = function (conditionFn, howOfftenCheckInMs) {
        var _this = this;
        if (howOfftenCheckInMs === void 0) { howOfftenCheckInMs = 1000; }
        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, index_1.Helpers.runSyncOrAsync(conditionFn)];
                    case 1:
                        result = _a.sent();
                        if (result) {
                            resolve(void 0);
                        }
                        else {
                            setTimeout(function () {
                                index_1.Helpers.waitForCondition(conditionFn, howOfftenCheckInMs).then(function () {
                                    resolve(void 0);
                                });
                            }, howOfftenCheckInMs);
                        }
                        return [2 /*return*/];
                }
            });
        }); });
    };
    HelpersTnp.prototype.getBrowserVerPath = function (moduleName) {
        //#region @backend
        if (!moduleName) {
            return tnp_config_1.config.folder.browser;
        }
        return tnp_config_1.config.folder.browser + "-for-" + moduleName;
        //#endregion
    };
    HelpersTnp.prototype.getMethodName = function (obj, method) {
        var methodName = null;
        Object.getOwnPropertyNames(obj).forEach(function (prop) {
            if (obj[prop] === method) {
                methodName = prop;
            }
        });
        if (methodName !== null) {
            return methodName;
        }
        var proto = Object.getPrototypeOf(obj);
        if (proto) {
            return index_1.Helpers.getMethodName(proto, method);
        }
        return null;
    };
    HelpersTnp.prototype.fixWebpackEnv = function (env) {
        tnp_core_1._.forIn(env, function (v, k) {
            var value = v;
            if (value === 'true')
                env[k] = true;
            if (value === 'false')
                env[k] = false;
        });
    };
    //#region @backend
    HelpersTnp.prototype.workerCalculateArray = function (dataToSplit, operation, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, maxesForWorkes, workerLimit, globals, workersNumber, chunks, splitEven, workerIndex, promises, n;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = options || {}, maxesForWorkes = _a.maxesForWorkes, workerLimit = _a.workerLimit, globals = _a.globals;
                        if (tnp_core_1._.isUndefined(globals)) {
                            globals = {};
                        }
                        if (tnp_core_1._.isUndefined(maxesForWorkes)) {
                            maxesForWorkes = {
                                0: 5,
                                1: 10,
                                2: 15,
                                3: 25,
                            };
                        }
                        if (tnp_core_1._.isUndefined(workerLimit) || workerLimit === Infinity) {
                            workerLimit = (tnp_core_2.os.cpus().length - 1);
                        }
                        if (workerLimit <= 0) {
                            workerLimit = 0;
                        }
                        if (!((tnp_core_1._.isNumber(maxesForWorkes[0]) && maxesForWorkes[0] > 0 && dataToSplit.length <= maxesForWorkes[0]) ||
                            workerLimit === 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, operation(dataToSplit, void 0)];
                    case 1: return [2 /*return*/, _b.sent()];
                    case 2:
                        workersNumber = Number(Object
                            .keys(maxesForWorkes)
                            .filter(function (key) { return key != '0'; })
                            .sort()
                            .reverse()
                            .find(function (key) { return maxesForWorkes[key] <= dataToSplit.length; }));
                        chunks = [];
                        if (tnp_core_1._.isNumber(workersNumber)) {
                            splitEven = Math.floor(dataToSplit.length / workersNumber);
                            for (workerIndex = 0; workerIndex <= workersNumber; workerIndex++) {
                                if (workerIndex === workersNumber) {
                                    chunks[chunks.length - 1] = chunks[chunks.length - 1].concat(dataToSplit.slice(workerIndex * splitEven, dataToSplit.length));
                                }
                                else {
                                    chunks.push(dataToSplit.slice(workerIndex * splitEven, workerIndex * splitEven + splitEven));
                                }
                            }
                        }
                        promises = [];
                        for (n = 0; n < chunks.length; n++) {
                            (function (chunks, n) {
                                var dataChunk = chunks[n];
                                console.log("worker " + n + " " + dataChunk.join(',\t'));
                                // console.log('pass to worker', Helpers)
                                var task = new Task({
                                    globals: tnp_core_1._.merge(globals, {
                                        n: n,
                                        dataChunk: dataChunk
                                    }),
                                    requires: {
                                        request: 'request-promise',
                                    }
                                });
                                promises.push(task.run(operation));
                            })(chunks, n);
                        }
                        return [4 /*yield*/, Promise.all(promises)];
                    case 3: return [2 /*return*/, _b.sent()];
                }
            });
        });
    };
    return HelpersTnp;
}(tnp_core_4.CoreHelpers));
exports.HelpersTnp = HelpersTnp;
applyMixins(HelpersTnp, [
    helpers_messages_1.HelpersMessages,
    helpers_strings_regexes_1.HelpersStringsRegexes,
    helpers_environment_1.HelpersEnvironment,
    //#region @backend
    helpers_process_backend_1.HelpersProcess,
    helpers_file_folders_backend_1.HelpersFileFolders,
]);
//# sourceMappingURL=helpers.js.map