"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_cli_1 = require("tnp-cli");
var dateformat = require("dateformat");
var index_1 = require("./index");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_config_1 = require("tnp-config");
var ng2_logger_1 = require("ng2-logger");
var prompts = require('prompts');
var fuzzy = require("fuzzy");
var inquirer = require("inquirer");
var inquirerAutocomplete = require("inquirer-autocomplete-prompt");
inquirer.registerPrompt('autocomplete', inquirerAutocomplete);
var spawn = require("cross-spawn");
//#endregion
// TODO idea of procees someday to change
/**
 * - long buffer by default
 * - easy catch output of commands
 * - wrap with try catch
 * - handle backgroud proceses
 */
// function childExc(command: string) {
//   return {
//     syncExecutedValue({ displayOutput = false }): string {
//       return '';
//     },
//     asycRun({ hideOutput: 'all' | 'stdout' | 'stder' }) {
//     }
//   }
// }
var HelpersProcess = /** @class */ (function () {
    function HelpersProcess() {
    }
    HelpersProcess.prototype.restartApplicationItself = function (nameOfApp) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                index_1.Helpers.log("Restarting " + nameOfApp);
                return [2 /*return*/, new Promise(function () {
                        setTimeout(function () {
                            process.on('exit', function () {
                                spawn(process.argv.shift(), tslib_1.__spreadArrays(process.argv, ['--restarting']), {
                                    cwd: tnp_core_1.crossPlatformPath(process.cwd()),
                                    detached: true,
                                    stdio: 'inherit'
                                });
                            });
                            process.exit();
                        }, 5000);
                    })];
            });
        });
    };
    HelpersProcess.prototype.osIsMacOs = function (versino) {
        if (versino == 'big-sur') {
            return tnp_core_1.os.release().startsWith('20.');
        }
        if (versino == 'catalina') {
            return tnp_core_1.os.release().startsWith('19.');
        }
        // TODO other oses
    };
    HelpersProcess.prototype.changeCwdWrapper = function (dir, functionToExecure, logLevel) {
        if (logLevel === void 0) { logLevel = ng2_logger_1.Level.__NOTHING; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var currentCwd;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        currentCwd = tnp_core_1.crossPlatformPath(process.cwd());
                        index_1.Helpers.changeCwd(dir);
                        ng2_logger_1.Log.disableLogs(logLevel);
                        return [4 /*yield*/, index_1.Helpers.runSyncOrAsync(functionToExecure)];
                    case 1:
                        _a.sent();
                        ng2_logger_1.Log.enableLogs();
                        index_1.Helpers.changeCwd(currentCwd);
                        return [2 /*return*/];
                }
            });
        });
    };
    HelpersProcess.prototype.changeCwd = function (dir) {
        if (!dir) {
            return;
        }
        index_1.Helpers.goToDir(dir);
    };
    HelpersProcess.prototype.goToDir = function (dir) {
        if (dir === void 0) { dir = '..'; }
        var previous = tnp_core_1.crossPlatformPath(process.cwd());
        try {
            dir = tnp_core_1.path.isAbsolute(dir) ? dir :
                tnp_core_1.crossPlatformPath(tnp_core_1.path.resolve(tnp_core_1.path.join(tnp_core_1.crossPlatformPath(process.cwd()), dir)));
            if (tnp_core_1.path.basename(dir) === tnp_config_1.config.folder.external) {
                var belowExternal = tnp_core_1.path.resolve(tnp_core_1.path.join(dir, '..'));
                var classProject = typescript_class_helpers_1.CLASS.getBy('Project');
                if (tnp_core_1.fse.existsSync(belowExternal) && !!classProject.From(belowExternal)) {
                    dir = belowExternal;
                }
            }
            process.chdir(dir);
        }
        catch (err) {
            this.goToDir(previous);
            return false;
        }
        return true;
    };
    HelpersProcess.prototype.pressKeyOrWait = function (message, printWaitMessages) {
        if (message === void 0) { message = 'Press enter try again'; }
        if (printWaitMessages === void 0) { printWaitMessages = 0; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(tnp_core_1._.isNumber(printWaitMessages) && printWaitMessages > 0)) return [3 /*break*/, 2];
                        index_1.Helpers.log("Please wait (" + printWaitMessages + ") seconds");
                        return [4 /*yield*/, index_1.Helpers.pressKeyOrWait(message, printWaitMessages - 1)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                    case 2: return [2 /*return*/, new Promise(function (resovle) {
                            index_1.Helpers.log(message);
                            process.stdin.once('data', function () {
                                resovle(void 0);
                            });
                        })];
                }
            });
        });
    };
    HelpersProcess.prototype.pressKeyAndContinue = function (message) {
        if (message === void 0) { message = 'Press enter to continue..'; }
        index_1.Helpers.info(message);
        if (process.platform === 'win32') {
            spawn.sync('pause', '', { shell: true, stdio: [0, 1, 2] });
            return;
        }
        require('child_process').spawnSync('read _ ', { shell: true, stdio: [0, 1, 2] });
        // return new Promise((resovle) => {
        //   Helpers.log(message);
        //   process.stdin.once('data', function () {
        //     resovle()
        //   });
        // })
    };
    HelpersProcess.prototype.list = function (question, choices) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, inquirer.prompt({
                            type: 'list',
                            name: 'value',
                            message: question,
                            choices: choices,
                            pageSize: 10,
                            loop: false,
                        })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.value];
                }
            });
        });
    };
    HelpersProcess.prototype.autocompleteAsk = function (question, choices, pageSize) {
        if (pageSize === void 0) { pageSize = 10; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            function source(__, input) {
                input = input || '';
                return new Promise(function (resolve) {
                    var fuzzyResult = fuzzy.filter(input, choices.map(function (f) { return f.name; }));
                    resolve(fuzzyResult.map(function (el) {
                        return { name: el.original, value: choices.find(function (c) { return c.name === el.original; }).value };
                    }));
                });
            }
            var res;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, inquirer.prompt({
                            type: 'autocomplete',
                            name: 'command',
                            pageSize: pageSize,
                            source: source,
                            message: question,
                            choices: choices
                        })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.command];
                }
            });
        });
    };
    HelpersProcess.prototype.questionYesNo = function (message, callbackTrue, callbackFalse, defaultValue) {
        if (defaultValue === void 0) { defaultValue = true; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        response = {
                            value: defaultValue
                        };
                        if (!global.tnpNonInteractive) return [3 /*break*/, 1];
                        index_1.Helpers.info(message + " - AUTORESPONSE: " + (defaultValue ? 'YES' : 'NO'));
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, prompts({
                            type: 'toggle',
                            name: 'value',
                            message: message,
                            initial: defaultValue,
                            active: 'yes',
                            inactive: 'no'
                        })];
                    case 2:
                        response = _a.sent();
                        _a.label = 3;
                    case 3:
                        if (!response.value) return [3 /*break*/, 6];
                        if (!callbackTrue) return [3 /*break*/, 5];
                        return [4 /*yield*/, index_1.Helpers.runSyncOrAsync(callbackTrue)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 8];
                    case 6:
                        if (!callbackFalse) return [3 /*break*/, 8];
                        return [4 /*yield*/, index_1.Helpers.runSyncOrAsync(callbackFalse)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2 /*return*/, response.value];
                }
            });
        });
    };
    Object.defineProperty(HelpersProcess.prototype, "isWsl", {
        get: function () {
            if (process.platform !== 'linux') {
                return false;
            }
            if (tnp_core_1.os.release().toLowerCase().includes('microsoft')) {
                return true;
            }
            try {
                return tnp_core_1.fse.readFileSync('/proc/version', 'utf8').toLowerCase().includes('microsoft');
            }
            catch (_) {
                return false;
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    HelpersProcess.prototype.getWorkingDirOfProcess = function (PID) {
        try {
            var cwd = tnp_core_1.child_process.execSync("lsof -p " + PID + " | awk '$4==\"cwd\" {print $9}'").toString().trim();
            return cwd;
        }
        catch (e) {
            index_1.Helpers.error(e);
        }
    };
    HelpersProcess.prototype.commnadOutputAsString = function (command, cwd, biggerBuffer) {
        if (cwd === void 0) { cwd = tnp_core_1.crossPlatformPath(process.cwd()); }
        if (biggerBuffer === void 0) { biggerBuffer = false; }
        var output = '';
        try {
            output = index_1.Helpers.run(command, { output: false, cwd: cwd, biggerBuffer: biggerBuffer }).sync().toString().trim();
            var splited = (output || '').split('\n');
            output = splited.pop();
        }
        catch (e) {
            index_1.Helpers.warn("[tnp-helepr] Not able to get output from command:\n      \"" + command + "\"\n      ");
        }
        return output;
    };
    HelpersProcess.prototype.outputToVScode = function (data, disableEncode) {
        if (disableEncode === void 0) { disableEncode = false; }
        if (tnp_core_1._.isObject(data)) {
            data = JSON.stringify(data);
        }
        if (disableEncode) {
            console.log(data);
        }
        else {
            console.log(encodeURIComponent(data));
        }
    };
    HelpersProcess.prototype.sleep = function (seconds) {
        if (seconds === void 0) { seconds = 1; }
        return index_1.Helpers.run("sleep " + seconds).sync();
    };
    HelpersProcess.prototype.actionWrapper = function (fn, taskName) {
        if (taskName === void 0) { taskName = 'Task'; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            function currentDate() {
                return "[" + dateformat(new Date(), 'HH:MM:ss') + "]";
            }
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // global.spinner && global.spinner.start()
                        index_1.Helpers.info(currentDate() + " \"" + taskName + "\" Started..");
                        return [4 /*yield*/, index_1.Helpers.runSyncOrAsync(fn)];
                    case 1:
                        _a.sent();
                        index_1.Helpers.info(currentDate() + " \"" + taskName + "\" Done\u2713");
                        return [2 /*return*/];
                }
            });
        });
    };
    HelpersProcess.prototype.terminalLine = function () {
        return tnp_core_1._.times(process.stdout.columns, function () { return '-'; }).join('');
    };
    HelpersProcess.prototype.killProcess = function (byPid) {
        index_1.Helpers.run("kill -9 " + byPid).sync();
    };
    HelpersProcess.prototype.killProcessByPort = function (portOrPortsToKill) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var index, port, org, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!tnp_core_1._.isArray(portOrPortsToKill)) {
                            portOrPortsToKill = [portOrPortsToKill];
                        }
                        index = 0;
                        _a.label = 1;
                    case 1:
                        if (!(index < portOrPortsToKill.length)) return [3 /*break*/, 6];
                        port = portOrPortsToKill[index];
                        org = port;
                        port = Number(port);
                        if (!tnp_core_1._.isNumber(port)) {
                            index_1.Helpers.warn("[tnp-helpers] Can't kill on port: \"" + org + "\"");
                            return [2 /*return*/];
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, tnp_core_1.fkill(":" + port, { force: true })];
                    case 3:
                        _a.sent();
                        // run(`fkill -f :${port} &> /dev/null`, { output: false }).sync()
                        index_1.Helpers.info("Processs killed successfully on port: " + port);
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        index_1.Helpers.warn("No process to kill  on port: " + port + "... ");
                        return [3 /*break*/, 5];
                    case 5:
                        index++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    HelpersProcess.prototype.clearConsole = function () {
        index_1.Helpers.msgCacheClear();
        console.log('\x1Bc');
        // process.stdout.write('\033c\033[3J');
        // try {
        //   run('clear').sync()
        // } catch (error) {
        //   console.log('clear console not succedd')
        // }
    };
    // process.on('uncaughtException', cleanExit)
    // process.on('unhandledRejection', cleanExit)
    // process.once('unhandledRejection', (err, aa) => {
    //   error(`'Exiting unhandledRejection
    //     Reason: ${err}
    //     ${JSON.stringify(aa)}
    //   `);
    // })
    HelpersProcess.prototype.formatPath = function (pathToFileOrFolder) {
        if (!tnp_core_1._.isString(pathToFileOrFolder)) {
            return "\n< provided path is not string: " + pathToFileOrFolder + " >\n";
        }
        if (!tnp_core_1.path.isAbsolute(pathToFileOrFolder)) {
            return "\n\n" + index_1.Helpers.terminalLine() + "\nrelativePath: " + pathToFileOrFolder + "\n" + index_1.Helpers.terminalLine() + "\n";
        }
        if (!tnp_core_1.fse.existsSync(pathToFileOrFolder)) {
            return "\n\n" + index_1.Helpers.terminalLine() + "\n< provided path does not exist: " + pathToFileOrFolder + " >\n" + index_1.Helpers.terminalLine() + "\n";
        }
        var isDirectory = tnp_core_1.fse.lstatSync(pathToFileOrFolder).isDirectory();
        return "\n" + index_1.Helpers.terminalLine() + "\n<-- " + (isDirectory ? 'Path to directory' : 'Path to file') + ": -->\n" + (isDirectory ? pathToFileOrFolder.split('/').map(function (c) { return "/" + c; }).join('').replace(/^\//, '') : (tnp_core_1.path.dirname(pathToFileOrFolder.split('/').map(function (c) { return "/" + c; }).join('').replace(/^\//, ''))
            + '\n/' + tnp_cli_1.CLI.chalk.bold(tnp_core_1.path.basename(pathToFileOrFolder)))) + "\n" + index_1.Helpers.terminalLine() + "\n";
    };
    ;
    HelpersProcess.prototype.waitForMessegeInStdout = function (proc, message) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        var resolved = false;
                        proc.stdout.on('data', function (data) {
                            // console.log(`
                            // [waitForMessegeInStdout] data: ${data}
                            // [waitForMessegeInStdout] data typeof: ${typeof data}
                            // `);
                            if (tnp_core_1._.isObject(data) && tnp_core_1._.isFunction(data.toString)) {
                                data = data.toString();
                            }
                            if (tnp_core_1._.isString(data) && data.search(message) !== -1) {
                                resolved = true;
                                resolve(void 0);
                            }
                        });
                        proc.once('exit', function () {
                            // console.log(`
                            // [waitForMessegeInStdout] exit: ${code}
                            // `);
                            if (!resolved) {
                                reject();
                            }
                        });
                    })];
            });
        });
    };
    HelpersProcess.prototype.prepareWatchCommand = function (cmd) {
        return tnp_core_1.os.platform() === 'win32' ? "\"" + cmd + "\"" : "'" + cmd + "'";
    };
    Object.defineProperty(HelpersProcess.prototype, "watcher", {
        get: function () {
            var that = index_1.Helpers;
            return {
                run: function (command, folderPath, options) {
                    if (folderPath === void 0) { folderPath = 'src'; }
                    var _a = options.cwd, cwd = _a === void 0 ? tnp_core_1.crossPlatformPath(process.cwd()) : _a, wait = options.wait;
                    var cmd = "tnp command " + command;
                    var toRun = "watch " + that.prepareWatchCommand(cmd) + " " + folderPath + " " + (wait ? ('--wait=' + wait) : '');
                    console.log('WATCH COMMAND ', toRun);
                    return that.run(toRun, { cwd: cwd }).async();
                },
                call: function (fn, params, folderPath, options) {
                    if (folderPath === void 0) { folderPath = 'src'; }
                    var _a = options.cwd, cwd = _a === void 0 ? tnp_core_1.crossPlatformPath(process.cwd()) : _a;
                    if (!fn) {
                        index_1.Helpers.error("Bad function: " + fn + " for watcher on folder: " + folderPath + ", with params: " + params);
                    }
                    var fnName = typeof fn === 'function' ? typescript_class_helpers_1.CLASS.getName(fn) : fn;
                    // console.log('Function name ', fnName)
                    var cmd = "tnp " + index_1.Helpers.cliTool.simplifiedCmd(fnName) + " " + params;
                    var toRun = "watch " + that.prepareWatchCommand(cmd) + " " + folderPath;
                    return that.run(toRun, { cwd: cwd }).async();
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    HelpersProcess.prototype.getStringFrom = function (command, descriptionOfCommand) {
        try {
            var res = index_1.Helpers.run(command, { output: false }).sync().toString();
            return res;
        }
        catch (error) {
            index_1.Helpers.warn("Not able to get string from \"" + (descriptionOfCommand ? descriptionOfCommand : command) + "\"");
            return void 0;
        }
    };
    return HelpersProcess;
}());
exports.HelpersProcess = HelpersProcess;
//# sourceMappingURL=helpers-process.backend.js.map