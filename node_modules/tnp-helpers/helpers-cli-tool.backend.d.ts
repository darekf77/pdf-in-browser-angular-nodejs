import type { Project } from './project';
export declare class HelpersCliTool {
    /**
     * return simplified version of command:
     * example: tnp HELLO:WORLD
     * will be: tnp helloworld
     *
     * or: `tnp ${$START}`
     * will be `tnp start`
     *
     * @param commandStringOrClass
     */
    simplifiedCmd(commandStringOrClass: string | Function, shortVersion?: boolean): any;
    argsFromBegin<T = any>(argumentsCommands: string | string[], argsFunc: (restOfCommandArgs: any) => T): {
        resolved: T[];
        /**
         * arguments string without resolved
         */
        commandString: string;
    };
    cleanCommand<T extends {
        [k: string]: string | boolean | string[] | boolean[];
    }>(command: string | string[], minimistOption: T): string;
    argsFrom<T = any>(args: string | string[]): T;
    removeStartEndCommandChars(command: string): string;
    resolveProject<T = Project>(args: string | string[], CurrentProject: Project, ProjectClass: typeof Project): T;
    /**
     * Resolve child project when accessing from parent workspace, container etc...
     * @param args string or string[] from cli args
     * @param CurrentProject project from process.cwd()
     */
    resolveChildProject(args: string | string[], CurrentProject: Project): Project;
    resolveProjectsFromArgs(args: string | string[], CurrentProject: Project, ProjectClass: typeof Project): Project[];
    /**
     * Check if your function name fits into command line param
     *
     * @param name name of function
     * @param restOfArgs arguments from command line
     */
    match(name: string, restOfArgs: string[]): {
        isMatch: boolean;
        restOfArgs: string[];
    };
}
