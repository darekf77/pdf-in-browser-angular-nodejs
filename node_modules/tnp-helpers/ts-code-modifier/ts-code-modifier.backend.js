"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var tsfmt = require("typescript-formatter");
var index_1 = require("../index");
var TsCodeModifer = /** @class */ (function () {
    function TsCodeModifer() {
    }
    TsCodeModifer.prototype.replace = function (input, regex, replacement) {
        return input.split('\n').map(function (line) {
            var lineTrim = line.trim();
            if (lineTrim.startsWith('//')) {
                return line;
            }
            // console.log(line)
            if (lineTrim.startsWith('import ') ||
                lineTrim.startsWith('export ') ||
                /^\}\s+from\s+(\"|\')/.test(lineTrim) ||
                /require\((\"|\')/.test(lineTrim)) {
                return line.replace(regex, replacement);
            }
            return line;
        }).join('\n');
    };
    TsCodeModifer.prototype.fixRegexes = function (input) {
        var regex = new RegExp("/.+/g", 'g');
        var matches = input.match(regex);
        if (tnp_core_1._.isArray(matches)) {
            matches.forEach(function (m) {
                if (m.search('`') === -1 && !m.trim().startsWith('//')) {
                    input = input.replace(m, "(new RegExp(`" + index_1.Helpers.escapeStringForRegEx(m.replace(new RegExp('/g$', ''), '')) + "`,'g'))");
                }
            });
        }
        return input;
    };
    /**
     * fix double apostrophes in imports,export, requires
     */
    TsCodeModifer.prototype.fixApostrphes = function (input) {
        var regex = new RegExp("(import|export|require\\(|\\}\\sfrom\\s(\\\"|\\')).+(\\\"|\\')", 'g');
        var matches = input.match(regex);
        if (tnp_core_1._.isArray(matches)) {
            matches.forEach(function (m) {
                if (m.search('`') === -1 && !m.trim().startsWith('//')) {
                    input = input.replace(m, m.replace(/\"/g, "'"));
                }
            });
        }
        return input;
    };
    /**
     * Format JS, TS file
     */
    TsCodeModifer.prototype.formatFile = function (filePath) {
        tsfmt.processFiles([filePath], {
            verbose: true,
            replace: true,
            verify: false,
            // tsconfig: true,
            // tslint: true,
            // editorconfig: true,
            tsfmt: true,
        });
    };
    return TsCodeModifer;
}());
exports.TsCodeModifer = TsCodeModifer;
//# sourceMappingURL=ts-code-modifier.backend.js.map