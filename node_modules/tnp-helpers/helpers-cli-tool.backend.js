"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var index_1 = require("./index");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_config_1 = require("tnp-config");
var HelpersCliTool = /** @class */ (function () {
    function HelpersCliTool() {
    }
    /**
     * return simplified version of command:
     * example: tnp HELLO:WORLD
     * will be: tnp helloworld
     *
     * or: `tnp ${$START}`
     * will be `tnp start`
     *
     * @param commandStringOrClass
     */
    HelpersCliTool.prototype.simplifiedCmd = function (commandStringOrClass, shortVersion) {
        if (shortVersion === void 0) { shortVersion = false; }
        if (tnp_core_1._.isFunction(commandStringOrClass)) {
            commandStringOrClass = typescript_class_helpers_1.CLASS.getName(commandStringOrClass);
        }
        if (!commandStringOrClass) {
            commandStringOrClass = '';
        }
        commandStringOrClass = tnp_core_1._
            .kebabCase(commandStringOrClass)
            .replace(/\$/g, '')
            .replace(/\-/g, '')
            .replace(/\:/g, '')
            .replace(/\_/g, '')
            .toLowerCase();
        if (shortVersion) {
            var shortKey = Object.keys(tnp_config_1.config.argsReplacements).find(function (key) {
                var v = index_1.Helpers.cliTool.simplifiedCmd(tnp_config_1.config.argsReplacements[key]);
                return v.trim() === commandStringOrClass.trim();
            });
            return shortKey;
        }
        return commandStringOrClass;
    };
    HelpersCliTool.prototype.argsFromBegin = function (argumentsCommands, argsFunc) {
        var tmpArgumentsCommands = argumentsCommands;
        var resolved = [];
        if (tnp_core_1._.isString(tmpArgumentsCommands)) {
            tmpArgumentsCommands = tmpArgumentsCommands.split(' ');
        }
        var commandString = (tmpArgumentsCommands || []);
        if (tnp_core_1._.isArray(commandString) && commandString.length > 0) {
            while (true) {
                if (commandString.length === 0) {
                    break;
                }
                var a = commandString.shift();
                var v = argsFunc(a);
                if (!tnp_core_1._.isNil(v)) {
                    resolved.push(v);
                    continue;
                }
                commandString.unshift(a);
                break;
            }
        }
        else {
            commandString = [];
        }
        return { resolved: resolved, commandString: (commandString).join(' ') };
    };
    HelpersCliTool.prototype.cleanCommand = function (command, minimistOption) {
        var isArray = tnp_core_1._.isArray(command);
        if (isArray) {
            command = command.join(' ');
        }
        command = command;
        minimistOption = tnp_core_1._.cloneDeep(minimistOption);
        delete minimistOption['_'];
        if (!tnp_core_1._.isString(command)) {
            command = '';
        }
        tnp_core_1._.keys(minimistOption).forEach(function (paramName) {
            var value = minimistOption[paramName];
            if (!tnp_core_1._.isArray(value)) {
                value = [value];
            }
            value
                .map(function (v) { return v.toString(); })
                .forEach(function (v) {
                [
                    paramName,
                    tnp_core_1._.kebabCase(paramName),
                    tnp_core_1._.camelCase(paramName)
                ].forEach(function (p) {
                    command = command
                        .replace(new RegExp("--" + p + "=" + v, ''), '')
                        .replace(new RegExp("--" + p + " *" + v, 'g'), '');
                });
            });
        });
        return command.trim();
    };
    HelpersCliTool.prototype.argsFrom = function (args) {
        if (tnp_core_1._.isArray(args)) {
            args = index_1.Helpers.cliTool.removeStartEndCommandChars(args.join(' ')).split(' ');
        }
        if (tnp_core_1._.isString(args)) {
            args = index_1.Helpers.cliTool.removeStartEndCommandChars(args).split(' ');
        }
        var obj = require('minimist')(args || []);
        Object.keys(obj).forEach(function (key) {
            var v = obj[key];
            if (v === 'true') {
                obj[key] = true;
            }
            if (v === 'false') {
                obj[key] = false;
            }
        });
        return (tnp_core_1._.isObject(obj) ? obj : {});
    };
    HelpersCliTool.prototype.removeStartEndCommandChars = function (command) {
        return (command || '')
            .replace(/^\"/, '')
            .replace(/^\'/, '')
            .replace(/\"$/, '')
            .replace(/\'$/, '')
            .trim();
    };
    HelpersCliTool.prototype.resolveProject = function (args, CurrentProject, ProjectClass) {
        if (!CurrentProject) {
            return void 0;
        }
        if (tnp_core_1._.isString(args)) {
            args = args.split(' ');
        }
        var firstArg = tnp_core_1._.first(args).replace(/\/$/, '');
        if (firstArg) {
            if (tnp_core_1.path.isAbsolute(firstArg)) {
                return ProjectClass.From(firstArg);
            }
            return ProjectClass.From(tnp_core_1.path.join(CurrentProject.location, firstArg));
        }
    };
    /**
     * Resolve child project when accessing from parent workspace, container etc...
     * @param args string or string[] from cli args
     * @param CurrentProject project from process.cwd()
     */
    HelpersCliTool.prototype.resolveChildProject = function (args, CurrentProject) {
        if (!CurrentProject) {
            return void 0;
        }
        if (tnp_core_1._.isString(args)) {
            args = args.split(' ');
        }
        var firstArg = tnp_core_1._.first(args);
        if (firstArg) {
            firstArg = firstArg.replace(/\/$/, '');
            var child = CurrentProject.children.find(function (c) { return c.name === firstArg; });
            if (child) {
                CurrentProject = child;
            }
        }
        return CurrentProject;
    };
    HelpersCliTool.prototype.resolveProjectsFromArgs = function (args, CurrentProject, ProjectClass) {
        var projects = [];
        if (!CurrentProject) {
            return [];
        }
        if (tnp_core_1._.isString(args)) {
            args = args.split(' ');
        }
        args.forEach(function (a) {
            var child = ProjectClass.From(tnp_core_1.path.join(CurrentProject.location, a));
            if (child) {
                projects.push(child);
            }
        });
        return projects;
    };
    /**
     * Check if your function name fits into command line param
     *
     * @param name name of function
     * @param restOfArgs arguments from command line
     */
    HelpersCliTool.prototype.match = function (name, restOfArgs) {
        var isMatch = false;
        var counter = 0;
        isMatch = !!restOfArgs
            .filter(function (a) { return !a.startsWith('--'); }) // TODO fix this also for other special paramters
            .find(function (vv, i) {
            if (++counter > 3) {
                // console.log(`counter NOT OK ${vv}`)
                return false;
            }
            // console.log(`counter ok for ${vv}`)
            var nameInKC = index_1.Helpers.cliTool.simplifiedCmd(name);
            var argInKC = index_1.Helpers.cliTool.simplifiedCmd(vv);
            var condition = (nameInKC === argInKC);
            if (condition) {
                restOfArgs = tnp_core_1._.slice(restOfArgs, i + 1, restOfArgs.length);
            }
            return condition;
        });
        return { isMatch: isMatch, restOfArgs: restOfArgs };
    };
    return HelpersCliTool;
}());
exports.HelpersCliTool = HelpersCliTool;
//# sourceMappingURL=helpers-cli-tool.backend.js.map