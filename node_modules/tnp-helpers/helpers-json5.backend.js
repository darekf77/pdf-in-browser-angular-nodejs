"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_config_1 = require("tnp-config");
var json5 = require("json5");
var json5Writer = require("json5-writer");
var glob = require("glob");
var index_1 = require("./index");
var JSON5Helpers = /** @class */ (function () {
    function JSON5Helpers(filePath, defaultValue) {
        if (defaultValue === void 0) { defaultValue = {}; }
        this.filePath = filePath;
        this.defaultValue = defaultValue;
        this.isDataReadFirstTime = false;
    }
    Object.defineProperty(JSON5Helpers.prototype, "readOnlyData", {
        get: function () {
            if (!this.isDataReadFirstTime) {
                this.isDataReadFirstTime = true;
                this.read();
            }
            try {
                var parsed = json5.parse(this.fileContent);
                return Object.freeze(parsed);
            }
            catch (error) {
                return Object.freeze(this.defaultValue);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JSON5Helpers.prototype, "writeInstance", {
        get: function () {
            var writer = json5Writer.load(this.fileContent);
            return writer;
        },
        enumerable: true,
        configurable: true
    });
    JSON5Helpers.prototype.read = function () {
        this.fileContent = index_1.Helpers.readFile(this.filePath);
    };
    JSON5Helpers.prototype.update = function (data) {
        var writer = this.writeInstance;
        writer.write(data);
        this.fileContent = writer.toSource();
    };
    JSON5Helpers.prototype.save = function () {
        index_1.Helpers.writeFile(this.filePath, this.fileContent);
    };
    return JSON5Helpers;
}());
exports.JSON5Helpers = JSON5Helpers;
var HelpersJSON5 = /** @class */ (function () {
    function HelpersJSON5() {
    }
    HelpersJSON5.prototype.fromFile = function (filePath) {
        return new JSON5Helpers(filePath);
    };
    HelpersJSON5.prototype.allFrom = function (folderPath) {
        var _this = this;
        return glob.sync(folderPath + "/*." + tnp_config_1.config.file.meta_config_md).map(function (f) {
            return _this.fromFile(f);
        });
    };
    return HelpersJSON5;
}());
exports.HelpersJSON5 = HelpersJSON5;
//# sourceMappingURL=helpers-json5.backend.js.map