"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var index_1 = require("./index");
function conditionWait(conditionAndTimeout) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, waitFor(conditionAndTimeout)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.conditionWait = conditionWait;
function waitFor(arr, messageToShow) {
    var _this = this;
    if (messageToShow === void 0) { messageToShow = void 0; }
    return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var check_1, timeoutCheck, timeoutNext, name_1, resultTrue;
        var _this = this;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(arr.length === 0)) return [3 /*break*/, 1];
                    resolve(void 0);
                    return [3 /*break*/, 3];
                case 1:
                    check_1 = arr.shift();
                    if (tnp_core_1._.isUndefined(check_1.timeoutCheck)) {
                        check_1.timeoutCheck = 2000;
                    }
                    if (tnp_core_1._.isUndefined(check_1.timeoutNext)) {
                        check_1.timeoutNext = 4000;
                    }
                    timeoutCheck = check_1.timeoutCheck, timeoutNext = check_1.timeoutNext, name_1 = check_1.name;
                    return [4 /*yield*/, index_1.Helpers.runSyncOrAsync(check_1.callback, check_1)];
                case 2:
                    resultTrue = _a.sent();
                    // console.log(`after: ${name}`)
                    if (resultTrue) {
                        // console.log(`timeout 1 is set to ${timeoutNext}`)
                        setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: 
                                    // console.log(`timeout 1 is over`)
                                    return [4 /*yield*/, waitFor(arr).then(function () {
                                            resolve(void 0);
                                        })];
                                    case 1:
                                        // console.log(`timeout 1 is over`)
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, timeoutNext);
                    }
                    else {
                        arr.unshift(check_1);
                        if (!messageToShow || check_1.errorMessage !== messageToShow) {
                            index_1.Helpers.info(check_1.errorMessage);
                        }
                        else {
                            // console.log(`dont show error  message ${check.errorMessage}`)
                        }
                        // console.log(`timeout 2 is set to ${timeoutCheck}, arr.length is ${arr.length}`)
                        setTimeout(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: 
                                    // console.log(`timeout 2 ${timeoutCheck} ovef`)
                                    return [4 /*yield*/, waitFor(arr, check_1.errorMessage).then(function () {
                                            resolve(void 0);
                                        })];
                                    case 1:
                                        // console.log(`timeout 2 ${timeoutCheck} ovef`)
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }, timeoutCheck);
                    }
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    }); });
}
//# sourceMappingURL=condition-wait.js.map