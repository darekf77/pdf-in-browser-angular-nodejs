/// <reference types="node" />
import { Project } from './project';
import { RunOptions } from 'tnp-core';
export declare abstract class ProjectGit {
    runCommandGetString(this: Project, command: string): string;
    run(this: Project, command: string, options?: RunOptions): {
        sync(): any;
        async(detach?: boolean): import("child_process").ChildProcess;
        asyncAsPromise(): any;
        unitlOutputContains(stdoutMsg: string | string[], stderMsg?: string | string[]): Promise<any>;
    };
    get git(this: Project): {
        clone(url: string, destinationFolderName?: string): void;
        restoreLastVersion(localFilePath: string): void;
        resetFiles(...relativePathes: string[]): void;
        readonly isGitRepo: boolean;
        readonly isGitRoot: boolean;
        readonly originURL: string;
        updateOrigin(askToRetry?: boolean): Promise<void>;
        commit(args?: string): void;
        pushCurrentBranch(force?: boolean): void;
        readonly thereAreSomeUncommitedChange: boolean;
        pullCurrentBranch(): Promise<void>;
        readonly currentBranchName: string;
        resetHard(): void;
        countComits(): number;
        lastCommitDate(): Date;
        lastCommitHash(): string;
        penultimageCommitHash(): string;
        lastTagHash(): string;
        /**
         * TODO does this make any sense
         */
        renameOrigin(newNameOrUlr: string): void;
    };
}
