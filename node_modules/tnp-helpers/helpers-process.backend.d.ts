/// <reference types="node" />
import { child_process } from 'tnp-core';
import { Models } from 'tnp-models';
import { Level } from 'ng2-logger';
/**
 * - long buffer by default
 * - easy catch output of commands
 * - wrap with try catch
 * - handle backgroud proceses
 */
export declare class HelpersProcess {
    restartApplicationItself(nameOfApp: string): Promise<unknown>;
    osIsMacOs(versino: 'big-sur' | 'catalina'): boolean;
    changeCwdWrapper(dir: string, functionToExecure: Function, logLevel?: Level): Promise<void>;
    changeCwd(dir?: string): void;
    goToDir(dir?: string): boolean;
    pressKeyOrWait(message?: string, printWaitMessages?: number): Promise<unknown>;
    pressKeyAndContinue(message?: string): void;
    list<T = string>(question: string, choices: {
        name: string;
        value: T;
    }[]): Promise<any>;
    autocompleteAsk<T = string>(question: string, choices: {
        name: string;
        value: T;
    }[], pageSize?: number): Promise<T>;
    questionYesNo(message: string, callbackTrue?: () => any, callbackFalse?: () => any, defaultValue?: boolean): Promise<boolean>;
    get isWsl(): boolean;
    getWorkingDirOfProcess(PID: number): string;
    commnadOutputAsString(command: string, cwd?: string, biggerBuffer?: boolean): string;
    outputToVScode(data: {
        label: string;
        option: string;
    }[] | string, disableEncode?: boolean): void;
    sleep(seconds?: number): any;
    actionWrapper(fn: () => void, taskName?: string): Promise<void>;
    terminalLine(): string;
    killProcess(byPid: number): void;
    killProcessByPort(portOrPortsToKill: number | number[]): Promise<void>;
    clearConsole(): void;
    formatPath(pathToFileOrFolder: string): string;
    waitForMessegeInStdout(proc: child_process.ChildProcess, message: string): Promise<unknown>;
    prepareWatchCommand(cmd: any): string;
    get watcher(): {
        run(command: string, folderPath: string, options: Models.system.WatchOptions): child_process.ChildProcess;
        call(fn: string | Function, params: string, folderPath: string, options: Models.system.WatchOptions): child_process.ChildProcess;
    };
    getStringFrom(command: string, descriptionOfCommand?: string): any;
}
