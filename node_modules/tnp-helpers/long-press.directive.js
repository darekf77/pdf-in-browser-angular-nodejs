"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var tnp_core_1 = require("tnp-core");
var ng2_logger_1 = require("ng2-logger");
var log = ng2_logger_1.Log.create("[tnp-helpers] long-press", ng2_logger_1.Level.__NOTHING);
var LongPress = /** @class */ (function () {
    function LongPress() {
        var _this = this;
        this.pressDuration = 1000;
        this.onLongPress = new core_1.EventEmitter();
        this.onLongPressing = new core_1.EventEmitter();
        this.onLongPressEnd = new core_1.EventEmitter();
        this.mouseX = 0;
        this.mouseY = 0;
        this.allowTrigger = false;
        this.triggerEnd = tnp_core_1._.debounce(function () {
            _this.endPress();
        }, 500);
    }
    Object.defineProperty(LongPress.prototype, "press", {
        get: function () { return this.pressing; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LongPress.prototype, "longPress", {
        get: function () { return this.longPressing; },
        enumerable: true,
        configurable: true
    });
    LongPress.prototype.onMouseDown = function (event) {
        var _this = this;
        // don't do right/middle clicks
        log.d("MOUSE DOWN ");
        if (event.which !== 1)
            return;
        this.allowTrigger = true;
        this.mouseX = event.clientX;
        this.mouseY = event.clientY;
        this.pressing = true;
        this.longPressing = false;
        this.timeout = setTimeout(function () {
            if (_this.allowTrigger) {
                _this.longPressing = true;
                log.d("long pressing start  pressDuration:" + _this.pressDuration + " ");
                _this.onLongPress.emit(event);
                _this.loop(event);
            }
        }, this.pressDuration);
        this.loop(event);
    };
    LongPress.prototype.onMouseMove = function (event) {
        if (this.pressing && !this.longPressing) {
            var xThres = (event.clientX - this.mouseX) > 10;
            var yThres = (event.clientY - this.mouseY) > 10;
            if (xThres || yThres) {
                this.endPress();
            }
        }
    };
    LongPress.prototype.loop = function (event) {
        var _this = this;
        if (this.longPressing) {
            this.timeout = setTimeout(function () {
                log.d("emil longpressing");
                _this.triggerEnd();
                _this.onLongPressing.emit(event);
                _this.loop(event);
            }, 50);
        }
    };
    LongPress.prototype.endPress = function (emit) {
        if (emit === void 0) { emit = true; }
        this.allowTrigger = false;
        clearTimeout(this.timeout);
        this.longPressing = false;
        this.pressing = false;
        if (emit) {
            log.d("EMIT END");
            this.onLongPressEnd.emit(true);
        }
        else {
            log.d("NOT EMIT END");
        }
    };
    LongPress.prototype.onMouseUp = function () {
        this.endPress(false);
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], LongPress.prototype, "pressDuration", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], LongPress.prototype, "onLongPress", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], LongPress.prototype, "onLongPressing", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], LongPress.prototype, "onLongPressEnd", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.press'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], LongPress.prototype, "press", null);
    tslib_1.__decorate([
        core_1.HostBinding('class.longpress'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [])
    ], LongPress.prototype, "longPress", null);
    tslib_1.__decorate([
        core_1.HostListener('mousedown', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LongPress.prototype, "onMouseDown", null);
    tslib_1.__decorate([
        core_1.HostListener('mousemove', ['$event']),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object]),
        tslib_1.__metadata("design:returntype", void 0)
    ], LongPress.prototype, "onMouseMove", null);
    tslib_1.__decorate([
        core_1.HostListener('mouseup'),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", []),
        tslib_1.__metadata("design:returntype", void 0)
    ], LongPress.prototype, "onMouseUp", null);
    LongPress = tslib_1.__decorate([
        core_1.Directive({ selector: '[long-press]' })
    ], LongPress);
    return LongPress;
}());
exports.LongPress = LongPress;
//# sourceMappingURL=long-press.directive.js.map