"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region imports
var glob = require("glob");
var path = require("path");
var _ = require("lodash");
var tnp_config_1 = require("tnp-config");
var index_1 = require("./index");
//#endregion
//#region create test part
function testPart(pathToFile, projPath) {
    var timeHash = (+new Date).toString(36);
    return ("\nimport * as _ from 'path';\nimport { describe, before, beforeEach, it } from 'mocha';\nimport { expect } from 'chai';\nimport { recreateEnvironment  } from 'node-cli-tester';\n\ndescribe('es-common-module.ts test',()=> {\n\n it('Should pass the test with hash \"" + timeHash + "\", async  () => {\n  const relativePathToFile = './" + timeHash + "/" + projPath + "/" + pathToFile + "';\n   recreateEnvironment(path.join(__dirname,relativePathToFile));\n   expect(true).to.not.be(false);\n })\n\n})\n  ").trim();
}
//#endregion
var MetaMd = /** @class */ (function () {
    //#endregion
    function MetaMd(filePath) {
        this.filePath = filePath;
    }
    MetaMd.create = function (json, fileContent, testContent) {
        return create((_.isObject(json) ? index_1.Helpers.stringify(json) : json), fileContent, testContent);
    };
    Object.defineProperty(MetaMd.prototype, "json", {
        //#endregion
        //#region getters
        get: function () {
            var content = index_1.Helpers.readFile(this.filePath) || '';
            try {
                var extracted = extract(content, MetaMd.JSON_PART);
                var parsed = index_1.Helpers.parse(extracted, true);
                return parsed;
            }
            catch (error) {
                return {};
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaMd.prototype, "readonlyMetaJson", {
        get: function () {
            return Object.freeze(this.json);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaMd.prototype, "fileContent", {
        get: function () {
            var content = index_1.Helpers.readFile(this.filePath) || '';
            return extract(content, MetaMd.FILE_CONTENT_PART);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MetaMd.prototype, "testContent", {
        get: function () {
            var content = index_1.Helpers.readFile(this.filePath) || '';
            return extract(content, MetaMd.TEST_PART);
        },
        enumerable: true,
        configurable: true
    });
    //#region recreate files/content/env before any tests
    /**
     * recate original files before any unit/intergration test
     */
    MetaMd.prototype.recreateIn = function (cwd) {
        // recreat whole structure
        if (cwd === void 0) { cwd = process.cwd(); }
    };
    //#region static fields
    MetaMd.JSON_PART = '@jsonPart';
    MetaMd.FILE_CONTENT_PART = '@fileContentPart';
    MetaMd.TEST_PART = '@testPart';
    return MetaMd;
}());
exports.MetaMd = MetaMd;
var MetaContentMd = /** @class */ (function () {
    function MetaContentMd() {
    }
    //#region preserve file
    MetaContentMd.prototype.preserveFile = function (originalAnyTypeFile, destinationFolder) {
        var properDestName = path.basename(originalAnyTypeFile) + ".meta-content.md";
        if (!index_1.Helpers.isFolder(destinationFolder)) {
            index_1.Helpers.error("[tnp-helpers][meta-content-md] Destination folder \"" + destinationFolder + "\"\n       is not a folder", false, true);
        }
        var orgFileBasename = path.basename(originalAnyTypeFile);
        var projects = {};
        var c = MetaMd.create({
            orgFileBasename: orgFileBasename,
            projects: projects,
        }, index_1.Helpers.readFile(originalAnyTypeFile));
        index_1.Helpers.writeFile(path.join(destinationFolder, properDestName), c);
    };
    //#endregion
    //#region handle instance from meta-content.md file
    MetaContentMd.prototype.instanceFrom = function (filePath) {
        return new MetaMd(filePath);
    };
    MetaContentMd.prototype.allInstancesFrom = function (folderPath) {
        var _this = this;
        return glob.sync(folderPath + "/*." + tnp_config_1.config.file.meta_config_md).map(function (f) {
            return _this.instanceFrom(f);
        });
    };
    return MetaContentMd;
}());
exports.MetaContentMd = MetaContentMd;
//#region create
function create(json5string, fileContent, testContent) {
    //   Helpers.log(`
    //   json5string
    // ${json5string}
    var _a;
    //   `)
    var metadataJSON = index_1.Helpers.parse(json5string, true);
    // Helpers.log(`metadataJSON.orgFileBasename: ${metadataJSON.orgFileBasename}`)
    var ext = path.extname(metadataJSON.orgFileBasename).replace(/^\./, '');
    var filePath = metadataJSON.orgFileBasename; // TODO
    if (!testContent) {
        var projPath = ((_a = _.maxBy(_.keys(metadataJSON.projects).map(function (projRelPath) {
            return { path: projRelPath, length: projRelPath.length };
        }), function (c) { return c.length; })) === null || _a === void 0 ? void 0 : _a.path) || '';
        testContent = testPart(filePath, projPath);
    }
    return ("\n  ```json5 " + MetaMd.JSON_PART + "\n" + json5string + "\n   ```\n\n   ```" + ext + " " + MetaMd.FILE_CONTENT_PART + "\n" + fileContent + "\n   ```\n\n   ```ts " + MetaMd.TEST_PART + "\n" + testContent + "\n   ```\n\n    ").split('\n').map(function (l) {
        return l.trim().startsWith('\`\`\`') ? l.trimLeft() : l;
    }).join('\n').trim() + '\n';
}
//#endregion
//#region extract data parts from content md file
function extract(content, PART_TO_FIND) {
    if (!content) {
        return;
    }
    var lines = [];
    var allLines = content.split('\n');
    var pushingActive = false;
    for (var index = 0; index < allLines.length; index++) {
        var orgLine = (allLines[index] || '');
        var line = orgLine.trim();
        if (pushingActive) {
            if (line.startsWith('\`\`\`')) {
                break;
            }
            else {
                lines.push(orgLine);
            }
        }
        if (line.startsWith('\`\`\`') && (line.search(PART_TO_FIND) !== -1)) {
            pushingActive = true;
        }
    }
    return lines.join('\n');
}
//#endregion
//# sourceMappingURL=meta-content-md.backend.js.map