/// <reference types="node" />
import { HelpersArrayObj } from './helpers-array-obj';
import { HelpersMessages } from './helpers-messages';
import { HelpersStringsRegexes } from './helpers-strings-regexes';
import { HelpersEnvironment } from './helpers-environment';
import { HelpersStrings } from './helpers-strings';
import { Helpers as HelperNg2Logger } from 'ng2-logger';
import { conditionWait } from './condition-wait';
import { URL } from 'url';
import { HelpersGit } from './helpers-git.backend';
import { HelpersCliTool } from './helpers-cli-tool.backend';
import { HelpersMorphiFramework } from './helpers-morphi-framework.backend';
import { HelpersProcess } from './helpers-process.backend';
import { TsCodeModifer } from './ts-code-modifier';
import { HelpersNpm } from './helpers-npm.backend';
import { HelpersTerminal } from './helpers-system-terminal.backend';
import { HelpersFileFolders } from './helpers-file-folders.backend';
import { HelpersDependencies } from './helpers-dependencies.backend';
import { HelpersPath } from './helpers-path.backend';
import { HelpersNetwork } from './helpers-network.backend';
import { HelpersJSON5 } from './helpers-json5.backend';
import { ConfigModels } from 'tnp-config';
import { CoreHelpers } from 'tnp-core';
export declare function applyMixins(derivedCtor: any, baseCtors: any[]): void;
export declare class HelpersTnp extends CoreHelpers {
    tsCodeModifier: TsCodeModifer;
    cliTool: HelpersCliTool;
    terminal: HelpersTerminal;
    git: HelpersGit;
    npm: HelpersNpm;
    morphi: HelpersMorphiFramework;
    deps: HelpersDependencies;
    path: HelpersPath;
    network: HelpersNetwork;
    json5: HelpersJSON5;
    arrays: HelpersArrayObj;
    strings: HelpersStrings;
    private static _instance;
    static get Instance(): HelpersTnp & HelperNg2Logger;
    private constructor();
    CLIWRAP(f: Function, name: string): Function;
    urlParse(portOrHost: (number | string | URL), forceDomain?: boolean): URL;
    slash(pathFromWindowsOrUnixType: string): string;
    isElevated(): Promise<void>;
    localIpAddress(): any;
    allLocalIpAddresses(): URL[];
    mesureExectionInMs(description: string, functionToExecute: Function, ...functionArguments: any[]): Promise<number>;
    mesureExectionInMsSync(description: string, functionToExecute: () => void): number;
    conditionWait: typeof conditionWait;
    waitForCondition(conditionFn: (any: any) => boolean, howOfftenCheckInMs?: number): Promise<unknown>;
    getBrowserVerPath(moduleName?: string): string;
    getMethodName(obj: any, method: any): string;
    fixWebpackEnv(env: Object): void;
    workerCalculateArray(dataToSplit: any[], operation: (dataChunk: any[], workerNumber?: number | undefined) => Promise<void>, options?: {
        maxesForWorkes?: {
            [workerMaxes: number]: number;
        };
        workerLimit?: number;
        globals?: any;
    }): Promise<void | any[]>;
    checkEnvironment: (deps?: ConfigModels.GlobalDependencies) => void;
    applyMixins: typeof applyMixins;
}
export interface HelpersTnp extends HelpersMessages, HelpersStringsRegexes, HelpersEnvironment, HelpersProcess, HelpersFileFolders {
}
