"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var ng2_logger_1 = require("ng2-logger");
var log = ng2_logger_1.Log.create("DualComponentController");
var DualComponentController = /** @class */ (function () {
    function DualComponentController(cmp, isFormlyMode) {
        if (isFormlyMode === void 0) { isFormlyMode = false; }
        this.cmp = cmp;
        this.isFormlyMode = isFormlyMode;
    }
    DualComponentController.prototype.getValTemplateOptions = function (propertyName) {
        var _a;
        if (this.isFormlyMode) {
            var res = (_a = this.cmp.field) === null || _a === void 0 ? void 0 : _a.templateOptions[propertyName];
            if (res === void 0 && this.cmp[propertyName]) {
                return this.cmp[propertyName];
            }
            return res;
        }
        return this.cmp[propertyName];
    };
    DualComponentController.prototype.getValContext = function (propertyName) {
        var _a;
        if (this.isFormlyMode) {
            var res = (_a = this.cmp) === null || _a === void 0 ? void 0 : _a.field[propertyName];
            if (res === void 0 && this.cmp[propertyName]) {
                return this.cmp[propertyName];
            }
            return res;
        }
        return this.cmp[propertyName];
    };
    Object.defineProperty(DualComponentController.prototype, "disabled", {
        get: function () {
            return this.getValTemplateOptions('disabled');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "required", {
        get: function () {
            return this.getValTemplateOptions('required');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "type", {
        get: function () {
            if (!this.isFormlyMode) {
                return typescript_class_helpers_1.CLASS.getNameFromObject(this.cmp);
            }
            return this.getValContext('type');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "label", {
        get: function () {
            return this.getValTemplateOptions('label');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "placeholder", {
        get: function () {
            return this.getValTemplateOptions('placeholder');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "defaultValue", {
        get: function () {
            return this.getValContext('defaultValue');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "formControl", {
        get: function () {
            return this.getValContext('formControl');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "key", {
        get: function () {
            return this.getValContext('key');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "path", {
        get: function () {
            return this.getValContext('path');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "model", {
        get: function () {
            if (this.isFormlyMode) {
                return this.getValContext('model');
            }
            else {
                return this.__model;
            }
        },
        set: function (v) {
            if (this.isFormlyMode) {
                log.w("[DualComponentController] You can't set model in formly component mode");
            }
            else {
                this.__model = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "mode", {
        get: function () {
            if (this.isFormlyMode) {
                return this.getValContext('mode');
            }
            else {
                return this.__mode;
            }
        },
        set: function (v) {
            if (this.isFormlyMode) {
                // this.cmp.field.mode =
                // log.w(`[DualComponentController] You can't set mode in formly component mode`);
            }
            else {
                this.__mode = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DualComponentController.prototype, "value", {
        get: function () {
            if (this.isFormlyMode) {
                return this.cmp.field.formControl.value;
            }
            if (tnp_core_1._.isString(this.path)) {
                return tnp_core_1._.get(this.cmp.model, this.path);
            }
            return this.cmp.model;
        },
        set: function (v) {
            if (this.isFormlyMode) {
                this.cmp.field.formControl.setValue(v);
                this.cmp.change.next(v);
                return;
            }
            if (tnp_core_1._.isString(this.path)) {
                tnp_core_1._.set(this.cmp.model, this.path, v);
            }
            else {
                this.cmp.model = v;
            }
        },
        enumerable: true,
        configurable: true
    });
    return DualComponentController;
}());
exports.DualComponentController = DualComponentController;
//# sourceMappingURL=dual-component-ctrl.js.map