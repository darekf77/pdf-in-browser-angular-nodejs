"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var git_project_1 = require("./git-project");
var tnp_cli_1 = require("tnp-cli");
var tnp_config_1 = require("tnp-config");
var tnp_core_2 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var morphi_1 = require("morphi");
var helpers_1 = require("./helpers");
var Helpers = helpers_1.HelpersTnp.Instance;
var Project = /** @class */ (function (_super) {
    tslib_1.__extends(Project, _super);
    function Project() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        //#region @backend
        _this.cache = {};
        _this.browser = {};
        return _this;
    }
    Project.typeFrom = function (location) {
        //#region @backendFunc
        var PackageJSON = typescript_class_helpers_1.CLASS.getBy('PackageJSON');
        location = tnp_core_1.crossPlatformPath(location);
        if (!tnp_core_1.fse.existsSync(location)) {
            return void 0;
        }
        var packageJson = PackageJSON && PackageJSON.fromLocation(location);
        if (!tnp_core_2._.isObject(packageJson)) {
            return void 0;
        }
        var type = packageJson.type;
        return type;
        //#endregion
    };
    Project.unload = function (project) {
        Project.projects = Project.projects.filter(function (f) { return f !== project; });
    };
    Project.From = function (location) {
        //#region @backendFunc
        var PackageJSON = typescript_class_helpers_1.CLASS.getBy('PackageJSON');
        if (!tnp_core_2._.isString(location)) {
            Helpers.warn("[project.from] location is not a string");
            return;
        }
        if (tnp_core_1.path.basename(location) === 'dist') {
            location = tnp_core_1.path.dirname(location);
        }
        location = tnp_core_1.crossPlatformPath(tnp_core_1.path.resolve(location));
        if (Project.emptyLocations.includes(location)) {
            if (location.search("/" + tnp_config_1.config.folder.bundle) === -1) {
                Helpers.log("[project.from] empty location " + location, 2);
                return;
            }
        }
        var alreadyExist = Project.projects.find(function (l) { return l.location.trim() === location.trim(); });
        if (alreadyExist) {
            return alreadyExist;
        }
        if (!tnp_core_1.fse.existsSync(location)) {
            Helpers.log("[tnp-helpers][project.from] Cannot find project in location: " + location, 1);
            Project.emptyLocations.push(location);
            return;
        }
        if (PackageJSON && !PackageJSON.fromLocation(location)) {
            if (!isDockerProject(location)) {
                Helpers.log("[tnp-helpers][project.from] Cannot find package.json in location: " + location, 1);
                Project.emptyLocations.push(location);
                return;
            }
        }
        ;
        var type = this.typeFrom(location);
        PackageJSON && checkIfTypeIsNotCorrect(type, location);
        // Helpers.log(`[tnp-helpers] Type "${type}" for ${location} `)
        var resultProject;
        if (type === 'isomorphic-lib') {
            resultProject = new (getClassFunction('ProjectIsomorphicLib'))(location);
        }
        if (type === 'angular-lib') {
            resultProject = new (getClassFunction('ProjectAngularLib'))(location);
        }
        if (type === 'electron-client') {
            resultProject = new (getClassFunction('ProjectElectronClient'))(location);
        }
        if (type === 'vscode-ext') {
            resultProject = new (getClassFunction('ProjectVscodeExt'))(location);
        }
        if (type === 'angular-client') {
            resultProject = new (getClassFunction('ProjectAngularClient'))(location);
        }
        if (type === 'workspace') {
            resultProject = new (getClassFunction('ProjectWorkspace'))(location);
        }
        if (type === 'docker') {
            resultProject = new (getClassFunction('ProjectDocker'))(location);
        }
        if (type === 'ionic-client') {
            resultProject = new (getClassFunction('ProjectIonicClient'))(location);
        }
        if (type === 'container') {
            resultProject = new (getClassFunction('ProjectContainer'))(location);
        }
        if (type === 'navi') {
            resultProject = new (getClassFunction('ProjectNavi'))(location);
        }
        if (type === 'unknow-npm-project') {
            resultProject = new (getClassFunction('ProjectUnknowNpm'))(location);
        }
        if (type === 'scenario') {
            resultProject = new (getClassFunction('ProjectScenarioReqRes'))(location);
        }
        // log(resultProject ? (`PROJECT ${resultProject.type} in ${location}`)
        //     : ('NO PROJECT FROM LOCATION ' + location))
        if (resultProject) {
            Helpers.log("[tnp-helpers][project.from] " + tnp_cli_1.CLI.chalk.bold(resultProject.name) + " from ..." + location.substr(location.length - 100), 1);
        }
        else {
            if (PackageJSON) {
                Helpers.log("[tnp-helpers][project.from] project not found in " + location, 1);
            }
            else {
                var packagejsonpath = tnp_core_1.path.join(location, 'package.json');
                if (tnp_core_1.fse.existsSync(packagejsonpath)) {
                    var name_1 = Helpers.getValueFromJSON(packagejsonpath, 'name');
                    // if (name && name === path.basename(location)) { TODO think about it
                    if (name_1) {
                        resultProject = new Project();
                        resultProject.location = tnp_core_1.crossPlatformPath(location);
                        resultProject.name = name_1;
                        resultProject.type = Helpers.getValueFromJSON(tnp_core_1.path.join(location, 'package.json'), 'tnp.type');
                    }
                }
            }
        }
        return resultProject;
        //#endregion
    };
    Project.nearestTo = function (absoluteLocation, options) {
        //#region @backendFunc
        options = options || {};
        var type = options.type, findGitRoot = options.findGitRoot, onlyOutSideNodeModules = options.onlyOutSideNodeModules;
        if (tnp_core_2._.isString(type) && !tnp_config_1.LibTypeArr.includes(type)) {
            Helpers.error("[tnp-helpers][project.nearestTo] wrong type: " + type, false, true);
        }
        if (tnp_core_1.fse.existsSync(absoluteLocation)) {
            absoluteLocation = tnp_core_1.fse.realpathSync(absoluteLocation);
        }
        if (tnp_core_1.fse.existsSync(absoluteLocation) && !tnp_core_1.fse.lstatSync(absoluteLocation).isDirectory()) {
            absoluteLocation = tnp_core_1.path.dirname(absoluteLocation);
        }
        var project;
        var previousLocation;
        while (true) {
            if (onlyOutSideNodeModules && (tnp_core_1.path.basename(tnp_core_1.path.dirname(absoluteLocation)) === 'node_modules')) {
                absoluteLocation = tnp_core_1.path.dirname(tnp_core_1.path.dirname(absoluteLocation));
            }
            project = Project.From(absoluteLocation);
            if (tnp_core_2._.isString(type)) {
                if (project === null || project === void 0 ? void 0 : project.typeIs(type)) {
                    if (findGitRoot) {
                        if (project.git.isGitRoot) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
            else {
                if (project) {
                    if (findGitRoot) {
                        if (project.git.isGitRoot) {
                            break;
                        }
                    }
                    else {
                        break;
                    }
                }
            }
            previousLocation = absoluteLocation;
            var newAbsLocation = tnp_core_1.path.join(absoluteLocation, '..');
            if (!tnp_core_1.path.isAbsolute(newAbsLocation)) {
                return;
            }
            absoluteLocation = tnp_core_1.crossPlatformPath(tnp_core_1.path.resolve(newAbsLocation));
            if (!tnp_core_1.fse.existsSync(absoluteLocation)) {
                return;
            }
            if (previousLocation === absoluteLocation) {
                return;
            }
        }
        return project;
        //#endregion
    };
    Project.allProjectFrom = function (absoluteLocation, stopOnCwd) {
        if (stopOnCwd === void 0) { stopOnCwd = '/'; }
        //#region @backendFunc
        var projects = {};
        var projectsList = [];
        var previousAbsLocation;
        while (absoluteLocation.startsWith(stopOnCwd)) {
            if (previousAbsLocation === absoluteLocation) {
                break;
            }
            var proj = Project.nearestTo(absoluteLocation);
            if (proj) {
                if (projects[proj.location]) {
                    break;
                }
                projects[proj.location] = proj;
                projectsList.push(proj);
                previousAbsLocation = absoluteLocation;
                absoluteLocation = tnp_core_1.path.dirname(proj.location);
                continue;
            }
            break;
        }
        return projectsList;
        //#endregion
    };
    Project.DefaultPortByType = function (type) {
        if (type === 'workspace') {
            return 5000;
        }
        if (type === 'angular-client') {
            return 4300;
        }
        if (type === 'angular-lib') {
            return 4250;
        }
        if (type === 'electron-client') {
            return 4350;
        }
        if (type === 'ionic-client') {
            return 8080;
        }
        if (type === 'docker') {
            return 5000;
        }
        if (type === 'isomorphic-lib') {
            return 4000;
        }
        if (type === 'container' || type === 'unknow-npm-project') {
            return;
        }
    };
    Object.defineProperty(Project, "isBundleMode", {
        get: function () {
            if (Helpers.isBrowser) {
                return true;
            }
            //#region @backend
            return !(!!global[tnp_core_2.CoreConfig.message.globalSystemToolMode]);
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Project, "Current", {
        get: function () {
            //#region @backendFunc
            var current = Project.From(process.cwd());
            if (!current) {
                Helpers.warn("[tnp-helpers] Current location is not a " + tnp_cli_1.CLI.chalk.bold(tnp_config_1.config.frameworkName) + " type project.\n\n      location: \"" + process.cwd() + "\"\n\n      }");
                return void 0;
            }
            return current;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Project, "NaviCliLocation", {
        //#region @backend
        get: function () {
            return tnp_core_1.path.resolve(tnp_core_1.path.join(Project.Tnp.location, '../navi-cli'));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Project, "Tnp", {
        //#endregion
        get: function () {
            //#region @backendFunc
            var tnpPorject = Project.From(tnp_config_1.config.pathes.tnp_folder_location);
            if (!tnpPorject && !global.globalSystemToolMode) {
                Helpers.error("Not able to find tnp project in \"" + tnp_config_1.config.pathes.tnp_folder_location + "\".");
            }
            return tnpPorject;
            //#endregion
        },
        enumerable: true,
        configurable: true
    });
    Project.by = function (libraryType, version
    //#endregion
    ) {
        //#region @backendFunc
        if (version === void 0) { version = tnp_config_1.config.defaultFrameworkVersion; }
        if (libraryType === 'workspace') {
            var workspaceProject = Project.From(tnp_config_1.config.pathes.projectsExamples(version).workspace);
            return workspaceProject;
        }
        if (libraryType === 'container') {
            var containerProject = Project.From(tnp_config_1.config.pathes.projectsExamples(version).container);
            return containerProject;
        }
        if (libraryType === 'single-file-project') {
            var singleFileProject = Project.From(tnp_config_1.config.pathes.projectsExamples(version).singlefileproject);
            return singleFileProject;
        }
        var projectPath = tnp_config_1.config.pathes.projectsExamples(version).projectByType(libraryType);
        if (!tnp_core_1.fse.existsSync(projectPath)) {
            Helpers.error("\n      " + projectPath + "\n      " + projectPath.replace(/\//g, '\\\\') + "\n      " + tnp_core_1.crossPlatformPath(projectPath) + "\n      [tnp-helpers] Bad library type \"" + libraryType + "\" for this framework version \"" + version + "\"\n\n      ", false, true);
        }
        return Project.From(projectPath);
        //#endregion
    };
    Project.prototype.defineProperty = function (variableName, classFn) {
        //#region @backendFunc
        var that = this;
        var prefixedName = "__" + variableName;
        Object.defineProperty(this, variableName, {
            get: function () {
                if (!that[prefixedName]) {
                    that[prefixedName] = new classFn(that);
                }
                return that[prefixedName];
            },
            set: function (v) {
                that[prefixedName] = v;
            },
        });
        //#endregion
    };
    Project.prototype.setType = function (type) {
        // @ts-ignore
        this._type = type;
    };
    Project.prototype.typeIs = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return this._type && types.includes(this._type);
    };
    Project.prototype.typeIsNot = function () {
        var types = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            types[_i] = arguments[_i];
        }
        return !this.typeIs.apply(this, types);
    };
    Project.prototype.forEmptyStructure = function () {
        return [
            { relativePath: tnp_config_1.config.file.package_json, includeContent: true },
            { relativePath: tnp_config_1.config.folder.src },
        ];
    };
    Project.projects = [];
    /**
     * To speed up checking folder I am keeping pathes for alterdy checked folder
     * This may break things that are creating new projects
     */
    Project.emptyLocations = [];
    tslib_1.__decorate([
        morphi_1.Morphi.Orm.Column.Primary({ type: 'varchar', length: 400 }),
        tslib_1.__metadata("design:type", Object)
    ], Project.prototype, "cache", void 0);
    return Project;
}(git_project_1.ProjectGit
//#endregion
));
exports.Project = Project;
//#region @backend
function isDockerProject(location) {
    if (tnp_core_1.fse.existsSync(tnp_core_1.path.join(location, 'Dockerfile'))) {
        var packageJson = tnp_core_1.path.join(location, 'package.json');
        if (!Helpers.exists(packageJson)) {
            Helpers.writeFile(packageJson, {
                "name": tnp_core_1.path.basename(location),
                "version": "0.0.0"
            });
        }
        var pj = Helpers.readJson(packageJson);
        pj[tnp_config_1.config.frameworkName] = {
            "type": "docker",
            "version": "v2"
        };
        Helpers.writeFile(packageJson, pj);
        return true;
    }
    return false;
}
function getClassFunction(className) {
    var classFN = typescript_class_helpers_1.CLASS.getBy(className);
    if (!classFN) {
        Helpers.error("[tnp-helpers][Project.From] cannot find class function by name " + className);
    }
    return classFN;
}
function checkIfTypeIsNotCorrect(type, location) {
    if (tnp_core_2._.isString(type) && !tnp_config_1.LibTypeArr.includes(type)) {
        Helpers.error("Incorrect type: \"" + type + "\"\n\n    Please use one of this: " + tnp_config_1.LibTypeArr.join(',') + "\n\n    in\n    package.json > " + tnp_config_1.config.frameworkName + ".type\n\n    location: " + location + "\n\n    ", false, true);
    }
}
//#endregion
//# sourceMappingURL=project.js.map