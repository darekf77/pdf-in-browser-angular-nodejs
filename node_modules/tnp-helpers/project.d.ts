export { ChildProcess } from 'child_process';
import { ProjectGit } from './git-project';
import { ConfigModels } from 'tnp-config';
import { Models } from 'tnp-models';
export declare type EmptyProjectStructure = {
    includeContent?: boolean;
    relativePath: string;
    relativeLinkFrom?: string;
};
export declare class Project<T extends Project<any> = any> extends ProjectGit {
    protected cache: {};
    /**
     * Do use this variable for comparatios
     * ONLY FOR VIEWING
     */
    readonly _type: ConfigModels.LibType;
    browser: Pick<Project<any>, 'location' | 'name'>;
    location: string;
    name: string;
    genericName: string;
    isWorkspace: boolean;
    isVscodeExtension: boolean;
    isDocker: boolean;
    isSite: boolean;
    isSiteInStrictMode?: boolean;
    isSiteInDependencyMode?: boolean;
    isCoreProject: boolean;
    isCommandLineToolOnly: boolean;
    isGenerated: boolean;
    isGeneratedForRelease: boolean;
    isWorkspaceChildProject: boolean;
    isBasedOnOtherProject: boolean;
    isForRecreation: boolean;
    isContainer: boolean;
    isContainerWithLinkedProjects: boolean;
    isContainerChild: boolean;
    isContainerCoreProject: boolean;
    isStandaloneProject: boolean;
    isUnknowNpmProject: boolean;
    isNaviCli: boolean;
    useFramework: boolean;
    defaultPort?: number;
    version: string;
    lastNpmVersion?: string;
    _routerTargetHttp?: string;
    customizableFilesAndFolders: string[];
    type: ConfigModels.LibType;
    backupName: string;
    resources: string[];
    env: Models.env.EnvConfig;
    allowedEnvironments: ConfigModels.EnvironmentName[];
    children: T[];
    grandpa: T;
    distribution: T;
    childrenThatAreLibs?: T[];
    childrenThatAreClients?: T[];
    childrenThatAreThirdPartyInNodeModules?: T[];
    parent: T;
    preview: T;
    baseline: T;
    static projects: Project<any>[];
    /**
     * To speed up checking folder I am keeping pathes for alterdy checked folder
     * This may break things that are creating new projects
     */
    static emptyLocations: string[];
    static typeFrom(location: string): ConfigModels.LibType;
    static unload(project: Project): void;
    static From<T = Project<any>>(location: string): T;
    static nearestTo<T = Project>(absoluteLocation: string, options?: {
        type?: ConfigModels.LibType;
        findGitRoot?: boolean;
        onlyOutSideNodeModules?: boolean;
    }): T;
    static allProjectFrom<T = Project>(absoluteLocation: string, stopOnCwd?: string): T[];
    static DefaultPortByType(type: ConfigModels.LibType): number;
    static get isBundleMode(): boolean;
    static get Current(): Project<any>;
    static get NaviCliLocation(): string;
    static get Tnp(): Project<any>;
    static by<T = Project>(libraryType: ConfigModels.NewFactoryType, version?: ConfigModels.FrameworkVersion): T;
    defineProperty<T>(variableName: keyof T, classFn: Function): void;
    setType(this: Project, type: ConfigModels.LibType): void;
    typeIs(this: Project, ...types: ConfigModels.LibType[]): boolean;
    typeIsNot(this: Project, ...types: ConfigModels.LibType[]): boolean;
    forEmptyStructure(): EmptyProjectStructure[];
}
export declare type ProjectBuild = {
    project: Project;
    appBuild: boolean;
};
