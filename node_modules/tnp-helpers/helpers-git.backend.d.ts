import type { Project } from './project';
export declare class HelpersGit {
    lastCommitHash(directoryPath: any): string;
    penultimageCommitHash(directoryPath: any): string;
    lastTagHash(directoryPath: any): string;
    lastCommitDate(directoryPath: any): Date;
    countCommits(cwd: string): number;
    currentBranchName(cwd: any): string;
    commitWhatIs(customMessage?: string): void;
    commit(cwd: string, ProjectClass: typeof Project, args?: string): void;
    getOriginURL(cwd: string): string;
    isGitRoot(cwd: string): boolean;
    isGitRepo(cwd: string): boolean;
    private pull;
    pullBranch(branchName: string, directoryPath: string, askToRetry?: boolean): Promise<void>;
    pullCurrentBranch(directoryPath: string, askToRetry?: boolean): Promise<void>;
    pushCurrentBranch(cwd: string, force?: boolean): void;
    defaultRepoBranch(cwd: string): string;
    checkoutDefaultBranch(directoryPath: any): void;
    clone({ cwd, url, destinationFolderName, throwErrors, override }: {
        cwd: string;
        url: string;
        destinationFolderName?: string;
        throwErrors?: boolean;
        override?: boolean;
    }): void;
    checkIfthereAreSomeUncommitedChange(cwd: string): boolean;
    restoreLastVersion(cwd: string, localFilePath: string): void;
    resetFiles(cwd: string, ...relativePathes: string[]): void;
}
