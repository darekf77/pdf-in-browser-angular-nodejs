"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region imports
var tnp_core_1 = require("tnp-core");
var tnp_config_1 = require("tnp-config");
var tnp_cli_1 = require("tnp-cli");
var index_1 = require("./index");
//#endregion
var HelpersMerge;
(function (HelpersMerge) {
    function getPrefixedBasename(relativeFilePath) {
        var ext = tnp_core_1.path.extname(relativeFilePath);
        var basename = tnp_core_1.path.basename(relativeFilePath, ext)
            .replace(/\/$/g, ''); // replace last part of url /
        var resultPath = index_1.Helpers.path.PREFIX("" + basename + ext);
        return resultPath;
    }
    HelpersMerge.getPrefixedBasename = getPrefixedBasename;
    function getPrefixedPathInJoin(relativeFilePath, project) {
        var dirPath = tnp_core_1.path.dirname(relativeFilePath);
        // console.log('dirPath', dirPath)
        // console.log('project', project && project.name)
        var resultPath = tnp_core_1.path.join(project.location, dirPath, getPrefixedBasename(relativeFilePath));
        return resultPath;
    }
    HelpersMerge.getPrefixedPathInJoin = getPrefixedPathInJoin;
    function pathToBaselineNodeModulesRelative(project) {
        var baselinePath = project.typeIs('workspace') ? project.baseline.name
            : tnp_core_1.path.join(project.baseline.parent.name, project.baseline.name);
        return baselinePath;
    }
    HelpersMerge.pathToBaselineNodeModulesRelative = pathToBaselineNodeModulesRelative;
    /**
     * Example:
     * /Users/dariusz/project/node_modules/baseline/(workspace|workspaceChild)
     *
     */
    function pathToBaselineThroughtNodeModules(project) {
        var baselinePath = pathToBaselineNodeModulesRelative(project);
        var resultPath = tnp_core_1.path.join(project.location, tnp_config_1.config.folder.node_modules, baselinePath);
        return resultPath;
    }
    HelpersMerge.pathToBaselineThroughtNodeModules = pathToBaselineThroughtNodeModules;
    function allCustomFiles(project) {
        var globPath = tnp_core_1.path.join(project.location, tnp_config_1.config.folder.custom);
        var files = tnp_core_1.glob.sync(globPath + "/**/*.*");
        // console.log('CUSTOM FIELS', files)
        return files;
    }
    HelpersMerge.allCustomFiles = allCustomFiles;
    function allBaselineFiles(project) {
        var files = [];
        project.baseline.customizableFilesAndFolders.forEach(function (customizableFileOrFolder) {
            var globPath = tnp_core_1.path.join(pathToBaselineThroughtNodeModules(project), customizableFileOrFolder);
            if (!tnp_core_1.fse.existsSync(globPath)) {
                index_1.Helpers.error("Custombizable folder of file doesn't exist: " + globPath + "\n\n        Please add: " + tnp_core_1.path.basename(globPath) + " to your baseline\n\n        or maybe forget " + tnp_cli_1.CLI.chalk.bold('tnp install') + " or " + tnp_cli_1.CLI.chalk.bold('tnp link') + " ?\n\n        ");
            }
            if (tnp_core_1.fse.statSync(globPath).isDirectory()) {
                var globFiles = tnp_core_1.glob.sync(globPath + "/**/*.*");
                files = files.concat(globFiles);
            }
            else {
                files.push(globPath);
            }
        });
        // console.log('allBaselineFiles', files)
        return files;
    }
    HelpersMerge.allBaselineFiles = allBaselineFiles;
    function pathToBaselineAbsolute(project) {
        var isInsideWokrspace = (project.parent && project.parent.typeIs('workspace'));
        var toReplace = tnp_core_1.path.join(isInsideWokrspace ? (tnp_core_1.path.join(project.parent.name, project.name))
            : project.name, tnp_config_1.config.folder.node_modules);
        // console.log('toReplace', toReplace)
        var resultPath = pathToBaselineThroughtNodeModules(project).replace(toReplace + "/", '');
        return resultPath;
    }
    HelpersMerge.pathToBaselineAbsolute = pathToBaselineAbsolute;
    /**
     * Example:
     * /Users/dariusz/project/custom/(src|components)/path-to-file-relative
     */
    function pathToCustom(project) {
        var resultPath = tnp_core_1.path.join(project.location, tnp_config_1.config.folder.custom);
        return resultPath;
    }
    HelpersMerge.pathToCustom = pathToCustom;
    function relativePathesBaseline(project) {
        var baselineFiles = allBaselineFiles(project);
        // console.log('baselineFiles', baselineFiles)
        var baselineReplacePath = pathToBaselineThroughtNodeModules(project);
        // console.log('baselineReplacePath', baselineReplacePath)
        baselineFiles = baselineFiles.map(function (f) { return f.replace(baselineReplacePath, ''); });
        return baselineFiles;
    }
    HelpersMerge.relativePathesBaseline = relativePathesBaseline;
    function relativePathesCustom(project) {
        var customFiles = allCustomFiles(project);
        // console.log('customFiles', customFiles)
        var customReplacePath = tnp_core_1.path.join(project.location, tnp_config_1.config.folder.custom);
        // console.log('customReplacePath', customReplacePath)
        customFiles = customFiles.map(function (f) { return f.replace(customReplacePath, ''); });
        return customFiles;
    }
    HelpersMerge.relativePathesCustom = relativePathesCustom;
})(HelpersMerge = exports.HelpersMerge || (exports.HelpersMerge = {}));
//# sourceMappingURL=merge-helpers.backend.js.map