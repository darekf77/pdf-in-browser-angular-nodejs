export declare namespace ConfigModels {
    type EnvironmentName = 'local' | 'static' | 'dev' | 'stage' | 'prod' | 'online' | 'test' | 'qa' | 'custom';
    type UIFramework = 'bootstrap' | 'material' | 'ionic';
    type FrameworkVersion = 'v1' | 'v2' | 'v3';
    type LibType = 'unknow' | 'isomorphic-lib' | 'angular-lib' | 'electron-client' | 'ionic-lib' | 'angular-client' | 'ionic-client' | 'workspace' | 'container' | 'docker' | 'vscode-ext' | 'chrome-ext' | 'unknow-npm-project' | 'scenario' | 'navi' | 'game-engine-lib-pixi' | 'game-engine-lib-phaser' | 'game-engine-lib-excalibur' | 'game-engine-lib-babylon';
    type NewFactoryType = LibType | 'model' | 'single-file-project';
    type CoreLibCategory = LibType | 'common';
    type Position = {
        x: number;
        y: number;
    };
    type Size = {
        w: number;
        h: number;
    };
    interface GlobalNpmDependency {
        name: string;
        installName?: string;
        version?: string | number;
    }
    interface GlobalCommandLineProgramDependency {
        name: string;
        website: string;
        version?: string;
    }
    interface GlobalDependencies {
        npm?: GlobalNpmDependency[];
        programs?: GlobalCommandLineProgramDependency[];
    }
}
export declare const GlobalIsomorphicDependencies: ConfigModels.GlobalDependencies;
export declare const GlobalLibTypeName: {
    isomorphicLib: string;
    angularLib: string;
    electronClient: string;
    ionicLib: string;
    angularClient: string;
    ionicClient: string;
    workspace: string;
    container: string;
    docker: string;
    unknowNpmProject: string;
    vscodeExt: string;
    chromeExt: string;
    singleFileProject: string;
    navi: string;
    scenario: string;
};
export declare const LibTypeArr: ConfigModels.LibType[];
export declare const CoreLibCategoryArr: ConfigModels.CoreLibCategory[];
export declare class Helpers {
    static simulateBrowser: boolean;
    private static isBackend;
    static setIsBackend(): void;
    static get isBrowser(): boolean;
    static get isNode(): boolean;
    static contain(arr: any[], item: any): boolean;
}
export declare const config: {
    readonly dbLocation: string;
    coreProjectVersions: string[];
    packageJsonSplit: string[];
    regexString: {
        pathPartStringRegex: string;
    };
    placeholders: {
        forProjectsInEnvironmentFile: string;
    };
    defaultFrameworkVersion: "v1" | "v2";
    CONST: {
        UNIT_TEST_TIMEOUT: number;
        INTEGRATION_TEST: number;
    };
    debug: {
        sourceModifier: any[];
        baselineSiteJoin: {
            DEBUG_PATHES: any[];
            DEBUG_MERGE_PATHES: any[];
        };
    };
    frameworkName: any;
    startPort: number;
    frameworks: ConfigModels.UIFramework[];
    argsReplacementsBuild: {
        baw: string;
        ba: string;
        bap: string;
        bdw: string;
        bw: string;
        bdpw: string;
        bd: string;
        bb: string;
        bbp: string;
        bbpw: string;
        bbw: string;
        sb: string;
        sbp: string;
        sbd: string;
        sbl: string;
        sba: string;
        cb: string;
    };
    argsGlobalFlags: string[];
    argsReplacements: {
        ghpush: string;
        ghpull: string;
        l: string;
        sl: string;
        i: string;
        si: string;
        il: string;
        rc: string;
        rp: string;
        r: string;
        lb: string;
        scm: string;
        '--version': string;
        '-v': string;
        tpu: string;
        baw: string;
        ba: string;
        bap: string;
        bdw: string;
        bw: string;
        bdpw: string;
        bd: string;
        bb: string;
        bbp: string;
        bbpw: string;
        bbw: string;
        sb: string;
        sbp: string;
        sbd: string;
        sbl: string;
        sba: string;
        cb: string;
    };
    coreBuildFrameworkNames: string[];
    ports: {
        VPN_SPLIT_SERVER: number;
    };
    domains: {
        localhost: string;
        firedev_io: string;
    };
    pathes: {
        logoSvg: string;
        logoPng: string;
        /**
         * Location of compiled source code for tnp framework
         * Can be in 3 places:
         * - <..>/tnp/dist @DEPRACATED
         * - <..>/tnp/bundle @DEPRACATED
         * - <some-project>/node_modules/tnp @DEPRACATED
         *  - <some-project>/node_modules/tnp-config
        */
        tnp_folder_location: string;
        tnp_vscode_ext_location: string;
        tnp_tests_context: string;
        tnp_db_for_tests_json: string;
        scripts: {
            HELP_js: string;
            allHelpFiles: string;
            allPattern: string;
        };
        projectsExamples: (version?: ConfigModels.FrameworkVersion) => {
            workspace: string;
            container: string;
            projectByType(libType: ConfigModels.NewFactoryType): string;
            singlefileproject: string;
        };
    };
    allowedEnvironments: ConfigModels.EnvironmentName[];
    folder: {
        bundle: string;
        vendor: string;
        docs: string;
        dist: string;
        tmp: string;
        tmpBundleRelease: string;
        tempSrc: string;
        tempSrcDist: string;
        previewDistApp: string;
        preview: string;
        browser: string;
        _browser: string;
        module: string;
        backup: string;
        node_modules: string;
        client: string;
        tnp_tests_context: string;
        tmpPackage: string;
        tmpScenarios: string;
        tmpTestsEnvironments: string;
        testsEnvironments: string;
        scripts: string;
        scenarios: string;
        bower: string;
        src: string;
        out: string;
        custom: string;
        components: string;
        assets: string;
        apps: string;
        workspace: string;
        container: string;
        bin: string;
        _bin: string;
        _vscode: string;
        project: string;
        external: string;
        tmpDist: string;
    };
    tempFolders: {
        bundle: string;
        vendor: string;
        docs: string;
        dist: string;
        tmp: string;
        tmpBundleRelease: string;
        tempSrc: string;
        tempSrcDist: string;
        previewDistApp: string;
        preview: string;
        browser: string;
        _browser: string;
        module: string;
        backup: string;
        node_modules: string;
        client: string;
        tnp_tests_context: string;
        tmpPackage: string;
        tmpScenarios: string;
        tmpTestsEnvironments: string;
        testsEnvironments: string;
    };
    filesNotAllowedToClean: string[];
    file: {
        _gitignore: string;
        _npmrc: string;
        _npmignore: string;
        tslint_json: string;
        _editorconfig: string;
        _angularCli_json: string;
        _vscode_launch_json: string;
        _bowerrc: string;
        bower_json: string;
        controllers_ts: string;
        entities_ts: string;
        autob_actions_js: string;
        local_config_js: string;
        build_config_js: string;
        local_config: string;
        start_backend_ts: string;
        package_json: string;
        package_json5: string;
        package_json__tnp_json: string;
        package_json__devDependencies_json: string;
        yarn_lock: string;
        package_lock_json: string;
        tnpEnvironment_json: string;
        environment: string;
        environment_js: string;
        tmp_transaction_pid_txt: string;
        manifest_webmanifest: string;
        publicApi_ts: string;
        publicApi_d_ts: string;
        _babelrc: string;
        index_d_ts: string;
        index_ts: string;
        index_js: string;
        index_js_map: string;
        db_json: string;
        db_for_tests_json: string;
        tmpDockerImageId: string;
        tmp_recent_json: string;
        tmpIsomorphicPackagesJson: string;
        tsconfig_json: string;
        README_MD: string;
        server_key: string;
        server_cert: string;
        server_chain_cert: string;
        meta_config_md: string;
    };
    default: {
        cloud: {
            environment: {
                name: ConfigModels.EnvironmentName;
            };
        };
    };
    SUBERIZED_PREFIX: string;
    message: {
        globalSystemToolMode: string;
    };
    names: {
        env: {};
        baseline: string;
        defaultServer: string;
    };
    extensions: {
        /**
           * Modify source: import,export, requires
           */
        readonly modificableByReplaceFn: string[];
    };
    notFiredevProjects: ConfigModels.LibType[];
    /**
     * Build allowed types
     */
    allowedTypes: {
        /**
         * Projects for build:app:watch command
         */
        app: ConfigModels.LibType[];
        /**
         * Projects for build:(dist|bundle):(watch) command
         */
        libs: ConfigModels.LibType[];
    };
    moduleNameAngularLib: string[];
    moduleNameIsomorphicLib: string[];
    filesExtensions: {
        filetemplate: string;
    };
    projectTypes: {
        forNpmLibs: string[];
        with: {
            angularAsCore: string[];
            componetsAsSrc: string[];
        };
    };
    /**
     * Check if global system tools are available for isomorphic app development
     */
    checkEnvironment(globalDependencies?: ConfigModels.GlobalDependencies): void;
    localLibs: string[];
    helpAlias: string[];
    required: {
        npm: ({
            name: string;
            version: string;
            installName?: undefined;
        } | {
            name: string;
            version?: undefined;
            installName?: undefined;
        } | {
            name: string;
            installName: string;
            version?: undefined;
        })[];
        niceTools: ({
            name: string;
            platform?: undefined;
            installName?: undefined;
            isNotCli?: undefined;
        } | {
            name: string;
            platform: string;
            installName?: undefined;
            isNotCli?: undefined;
        } | {
            name: string;
            installName: string;
            platform?: undefined;
            isNotCli?: undefined;
        } | {
            name: string;
            isNotCli: boolean;
            platform?: undefined;
            installName?: undefined;
        })[];
        programs: {
            name: string;
            website: string;
        }[];
    };
};
