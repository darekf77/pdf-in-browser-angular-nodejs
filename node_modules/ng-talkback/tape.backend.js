"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var media_type_backend_1 = require("./utils/media-type.backend");
var tape_renderer_backend_1 = require("./tape-renderer.backend");
var content_encoding_backend_1 = require("./utils/content-encoding.backend");
var URL = require("url");
var querystring = require("querystring");
// const URL = require('url')
// const querystring = require('querystring')
var Tape = /** @class */ (function () {
    function Tape(req, options) {
        this.new = false;
        this.used = false;
        this.req = tslib_1.__assign({}, req);
        this.options = options;
        // This needs to happen before we erase headers since we could lose information
        this.normalizeBody();
        this.cleanupHeaders();
        this.queryParamsToIgnore = this.options.ignoreQueryParams;
        this.cleanupQueryParams();
        this.meta = {
            createdAt: new Date(),
            host: this.options.host
        };
    }
    Tape.fromStore = function (raw, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, tape_renderer_backend_1.default.fromStore(raw, options)];
            });
        });
    };
    Tape.prototype.cleanupHeaders = function () {
        var newHeaders = tslib_1.__assign({}, this.req.headers);
        this.options.ignoreHeaders.forEach(function (h) { return delete newHeaders[h]; });
        this.req = tslib_1.__assign(tslib_1.__assign({}, this.req), { headers: newHeaders });
    };
    Tape.prototype.cleanupQueryParams = function () {
        if (this.queryParamsToIgnore.length === 0) {
            return;
        }
        var url = URL.parse(this.req.url, true);
        if (!url.search) {
            return;
        }
        var query = tslib_1.__assign({}, url.query);
        this.queryParamsToIgnore.forEach(function (q) { return delete query[q]; });
        var newQuery = querystring.stringify(query);
        if (newQuery) {
            url.query = query;
            url.search = "?" + newQuery;
        }
        else {
            url.query = null;
            url.search = null;
        }
        this.req.url = URL.format(url);
    };
    Tape.prototype.normalizeBody = function () {
        var mediaType = new media_type_backend_1.default(this.req);
        var contentEncoding = new content_encoding_backend_1.default(this.req);
        if (contentEncoding.isUncompressed() && mediaType.isJSON() && this.req.body.length > 0) {
            this.req.body = Buffer.from(JSON.stringify(JSON.parse(this.req.body.toString()), null, 2));
        }
    };
    Tape.prototype.clone = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tapeRenderer, raw;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tapeRenderer = new tape_renderer_backend_1.default(this);
                        return [4 /*yield*/, tapeRenderer.render()];
                    case 1:
                        raw = _a.sent();
                        return [2 /*return*/, Tape.fromStore(raw, this.options)];
                }
            });
        });
    };
    return Tape;
}());
exports.Tape = Tape;
exports.default = Tape;
//# sourceMappingURL=tape.backend.js.map