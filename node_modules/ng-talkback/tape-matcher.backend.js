"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var content_encoding_backend_1 = require("./utils/content-encoding.backend");
var media_type_backend_1 = require("./utils/media-type.backend");
var tnp_core_1 = require("tnp-core");
var TapeMatcher = /** @class */ (function () {
    function TapeMatcher(tape, options) {
        this.tape = tape;
        this.options = options;
    }
    TapeMatcher.prototype.sameAs = function (otherTape) {
        var otherReq = otherTape.req;
        var req = this.tape.req;
        if (!this.isSameUrl(req, otherReq)) {
            return false;
        }
        if (!this.isSameMethod(req, otherReq)) {
            return false;
        }
        if (!this.isSameHeaders(req, otherReq)) {
            return false;
        }
        return this.options.ignoreBody || this.isSameBody(req, otherReq);
    };
    TapeMatcher.prototype.isSameBody = function (req, otherReq) {
        var mediaType = new media_type_backend_1.default(req);
        var contentEncoding = new content_encoding_backend_1.default(req);
        var sameBody;
        if (contentEncoding.isUncompressed() && mediaType.isJSON() && req.body.length > 0 && otherReq.body.length > 0) {
            var parsedReqBody = JSON.parse(req.body.toString());
            var parsedOtherReqBody = JSON.parse(otherReq.body.toString());
            sameBody = tnp_core_1._.isEqual(parsedReqBody, parsedOtherReqBody);
        }
        else {
            sameBody = req.body.equals(otherReq.body);
        }
        if (!sameBody) {
            if (!this.options.bodyMatcher) {
                this.options.logger.debug("Not same BODY " + req.body + " vs " + otherReq.body);
                return false;
            }
            var bodyMatches = this.options.bodyMatcher(this.tape, otherReq);
            if (!bodyMatches) {
                this.options.logger.debug("Not same bodyMatcher " + req.body + " vs " + otherReq.body);
                return false;
            }
        }
        return true;
    };
    TapeMatcher.prototype.isSameHeaders = function (req, otherReq) {
        var currentHeadersLength = Object.keys(req.headers).length;
        var otherHeadersLength = Object.keys(otherReq.headers).length;
        var sameNumberOfHeaders = currentHeadersLength === otherHeadersLength;
        if (!sameNumberOfHeaders) {
            this.options.logger.debug("Not same #HEADERS " + JSON.stringify(req.headers) + " vs " + JSON.stringify(otherReq.headers));
            return false;
        }
        var headersSame = true;
        Object.keys(req.headers).forEach(function (k) {
            var entryHeader = req.headers[k];
            var header = otherReq.headers[k];
            headersSame = headersSame && entryHeader === header;
        });
        if (!headersSame) {
            this.options.logger.debug("Not same HEADERS values " + JSON.stringify(req.headers) + " vs " + JSON.stringify(otherReq.headers));
            return false;
        }
        return true;
    };
    TapeMatcher.prototype.isSameMethod = function (req, otherReq) {
        var sameMethod = req.method === otherReq.method;
        if (!sameMethod) {
            this.options.logger.debug("Not same METHOD " + req.method + " vs " + otherReq.method);
            return false;
        }
        return true;
    };
    TapeMatcher.prototype.isSameUrl = function (req, otherReq) {
        var sameURL = req.url === otherReq.url;
        if (!sameURL) {
            if (!this.options.urlMatcher) {
                this.options.logger.debug("Not same URL " + req.url + " vs " + otherReq.url);
                return false;
            }
            var urlMatches = this.options.urlMatcher(this.tape, otherReq);
            if (!urlMatches) {
                this.options.logger.debug("Not same urlMatcher " + req.url + " vs " + otherReq.url);
                return false;
            }
        }
        return true;
    };
    return TapeMatcher;
}());
exports.default = TapeMatcher;
//# sourceMappingURL=tape-matcher.backend.js.map