"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var zlib = require('zlib');
var headers_backend_1 = require("./headers.backend");
var ALGORITHMS = {
    gzip: { compress: zlib.gzipSync, uncompress: zlib.gunzipSync },
    deflate: { compress: zlib.deflateSync, uncompress: zlib.inflateSync }
};
var ContentEncoding = /** @class */ (function () {
    function ContentEncoding(reqRes) {
        this.reqRes = reqRes;
    }
    ContentEncoding.prototype.isUncompressed = function () {
        var contentEncoding = this.contentEncoding();
        return !contentEncoding || contentEncoding === "identity";
    };
    ContentEncoding.prototype.supportedAlgorithm = function () {
        var contentEncoding = this.contentEncoding();
        return Object.keys(ALGORITHMS).includes(contentEncoding);
    };
    ContentEncoding.prototype.contentEncoding = function () {
        return headers_backend_1.default.read(this.reqRes.headers, "content-encoding");
    };
    ContentEncoding.prototype.uncompressedBody = function (body) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var contentEncoding;
            return tslib_1.__generator(this, function (_a) {
                contentEncoding = this.contentEncoding();
                if (!this.supportedAlgorithm()) {
                    throw new Error("Unsupported content-encoding " + contentEncoding);
                }
                return [2 /*return*/, ALGORITHMS[contentEncoding].uncompress(body)];
            });
        });
    };
    ContentEncoding.prototype.compressedBody = function (body) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var contentEncoding;
            return tslib_1.__generator(this, function (_a) {
                contentEncoding = this.contentEncoding();
                if (!this.supportedAlgorithm()) {
                    throw new Error("Unsupported content-encoding " + contentEncoding);
                }
                return [2 /*return*/, ALGORITHMS[contentEncoding].compress(body)];
            });
        });
    };
    return ContentEncoding;
}());
exports.default = ContentEncoding;
//# sourceMappingURL=content-encoding.backend.js.map