"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var request_handler_backend_1 = require("./request-handler.backend");
var summary_backend_1 = require("./summary.backend");
var tape_store_backend_1 = require("./tape-store.backend");
var tnp_core_1 = require("tnp-core");
var TalkbackServer = /** @class */ (function () {
    function TalkbackServer(options) {
        this.closed = false;
        this.options = options;
        this.tapeStore = new tape_store_backend_1.default(this.options);
        this.requestHandler = new request_handler_backend_1.default(this.tapeStore, this.options);
        this.closeSignalHandler = this.close.bind(this);
    }
    TalkbackServer.prototype.handleRequest = function (rawReq, res) {
        var _this = this;
        // console.log(`rawReq: ${rawReq.url}`)
        var reqBody = [];
        rawReq.on("data", function (chunk) {
            reqBody.push(chunk);
        }).on("end", function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var req, fRes, ex_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        req = {
                            headers: rawReq.headers,
                            url: rawReq.url,
                            method: rawReq.method,
                            body: Buffer.concat(reqBody)
                        };
                        return [4 /*yield*/, this.requestHandler.handle(req)];
                    case 1:
                        fRes = _a.sent();
                        res.writeHead(fRes.status, fRes.headers);
                        res.end(fRes.body);
                        return [3 /*break*/, 3];
                    case 2:
                        ex_1 = _a.sent();
                        console.error("Error handling request", ex_1);
                        res.statusCode = 500;
                        res.end();
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
    };
    TalkbackServer.prototype.start = function (callback) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var handleRequest, serverFactory;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tapeStore.load()];
                    case 1:
                        _a.sent();
                        handleRequest = this.handleRequest.bind(this);
                        serverFactory = this.options.https.enabled ? function () {
                            var httpsOpts = {
                                key: tnp_core_1.fse.readFileSync(_this.options.https.keyPath),
                                cert: tnp_core_1.fse.readFileSync(_this.options.https.certPath)
                            };
                            return tnp_core_1.https.createServer(httpsOpts, handleRequest);
                        } : function () { return tnp_core_1.http.createServer(handleRequest); };
                        this.server = serverFactory();
                        console.log("Starting talkback on " + this.options.port);
                        this.server.listen(this.options.port, callback);
                        process.on("exit", this.closeSignalHandler);
                        process.on("SIGINT", this.closeSignalHandler);
                        process.on("SIGTERM", this.closeSignalHandler);
                        return [2 /*return*/, this.server];
                }
            });
        });
    };
    TalkbackServer.prototype.hasTapeBeenUsed = function (tapeName) {
        return this.tapeStore.hasTapeBeenUsed(tapeName);
    };
    TalkbackServer.prototype.resetTapeUsage = function () {
        this.tapeStore.resetTapeUsage();
    };
    TalkbackServer.prototype.close = function (callback) {
        if (this.closed) {
            return;
        }
        this.closed = true;
        this.server.close(callback);
        process.removeListener("exit", this.closeSignalHandler);
        process.removeListener("SIGINT", this.closeSignalHandler);
        process.removeListener("SIGTERM", this.closeSignalHandler);
        if (this.options.summary) {
            var summary = new summary_backend_1.default(this.tapeStore.tapes, this.options);
            summary.print();
        }
    };
    return TalkbackServer;
}());
exports.default = TalkbackServer;
//# sourceMappingURL=server.backend.js.map