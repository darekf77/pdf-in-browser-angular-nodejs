"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var tape_backend_1 = require("./tape.backend");
var tape_matcher_backend_1 = require("./tape-matcher.backend");
var tape_renderer_backend_1 = require("./tape-renderer.backend");
var TapeStore = /** @class */ (function () {
    function TapeStore(options) {
        this.path = tnp_core_1.path.normalize(options.path + "/");
        this.options = options;
        this.tapes = [];
    }
    TapeStore.prototype.load = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tnp_core_1.mkdirp.sync(this.path);
                        return [4 /*yield*/, this.loadTapesAtDir(this.path)];
                    case 1:
                        _a.sent();
                        console.log("Loaded " + this.tapes.length + " tapes");
                        return [2 /*return*/];
                }
            });
        });
    };
    TapeStore.prototype.loadTapesAtDir = function (directory) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var items, i, filename, fullPath, stat, data, raw, tape, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        items = tnp_core_1.fse.readdirSync(directory);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < items.length)) return [3 /*break*/, 8];
                        filename = items[i];
                        fullPath = "" + directory + filename;
                        stat = tnp_core_1.fse.statSync(fullPath);
                        if (!!stat.isDirectory()) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        data = tnp_core_1.fse.readFileSync(fullPath, "utf8");
                        raw = tnp_core_1.json5.parse(data);
                        return [4 /*yield*/, tape_backend_1.default.fromStore(raw, this.options)];
                    case 3:
                        tape = _a.sent();
                        tape.path = filename;
                        this.tapes.push(tape);
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        console.log("Error reading tape " + fullPath, e_1.message);
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        this.loadTapesAtDir(fullPath + "/");
                        _a.label = 7;
                    case 7:
                        i++;
                        return [3 /*break*/, 1];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    TapeStore.prototype.find = function (newTape) {
        var _this = this;
        var foundTape = this.tapes.find(function (t) {
            _this.options.logger.debug("Comparing against tape " + t.path);
            return new tape_matcher_backend_1.default(t, _this.options).sameAs(newTape);
        });
        if (foundTape) {
            foundTape.used = true;
            this.options.logger.log("Found matching tape for " + newTape.req.url + " at " + foundTape.path);
            return foundTape;
        }
    };
    TapeStore.prototype.save = function (tape) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var tapePath, fullFilename, tapeRenderer, toSave;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tape.new = true;
                        tape.used = true;
                        tapePath = tape.path;
                        if (tapePath) {
                            fullFilename = tnp_core_1.path.join(this.path, tapePath);
                        }
                        else {
                            // If the tape doesn't have a path then it's new
                            this.tapes.push(tape);
                            fullFilename = this.createTapePath(tape);
                            tape.path = tnp_core_1.path.relative(this.path, fullFilename);
                        }
                        this.options.logger.log("Saving request " + tape.req.url + " at " + tape.path);
                        tapeRenderer = new tape_renderer_backend_1.default(tape);
                        return [4 /*yield*/, tapeRenderer.render()];
                    case 1:
                        toSave = _a.sent();
                        tnp_core_1.fse.writeFileSync(fullFilename, tnp_core_1.json5.stringify(toSave, null, 4));
                        return [2 /*return*/];
                }
            });
        });
    };
    TapeStore.prototype.currentTapeId = function () {
        return this.tapes.length;
    };
    TapeStore.prototype.hasTapeBeenUsed = function (tapeName) {
        return this.tapes.some(function (t) { return t.used && t.path === tapeName; });
    };
    TapeStore.prototype.resetTapeUsage = function () {
        return this.tapes.forEach(function (t) { return t.used = false; });
    };
    TapeStore.prototype.createTapePath = function (tape) {
        var currentTapeId = this.currentTapeId();
        var tapePath = "unnamed-" + currentTapeId + ".json5";
        if (this.options.tapeNameGenerator) {
            tapePath = this.options.tapeNameGenerator(currentTapeId, tape);
        }
        var result = tnp_core_1.path.normalize(tnp_core_1.path.join(this.options.path, tapePath));
        if (!result.endsWith(".json5")) {
            result = result + ".json5";
        }
        var dir = tnp_core_1.path.dirname(result);
        tnp_core_1.mkdirp.sync(dir);
        return result;
    };
    return TapeStore;
}());
exports.default = TapeStore;
//# sourceMappingURL=tape-store.backend.js.map