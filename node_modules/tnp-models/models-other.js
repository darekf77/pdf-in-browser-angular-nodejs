"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var ModelsOther;
(function (ModelsOther) {
    var Range = /** @class */ (function () {
        function Range(from, to) {
            this.from = from;
            this.to = to;
            if (tnp_core_1._.isNative(from) || tnp_core_1._.isNative(to)) {
                throw "This Range type is only for positive numbers";
            }
        }
        Range_1 = Range;
        Range.clone = function (r) {
            return new Range_1(r.from, r.to);
        };
        Range.from = function (from) {
            // const self = this;
            return {
                to: function (to) {
                    return new Range_1(from, to);
                }
            };
        };
        Object.defineProperty(Range.prototype, "length", {
            get: function () {
                return this.to - this.from;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Range.prototype, "array", {
            get: function () {
                var arr = [];
                for (var index = this.from; index <= this.to; index++) {
                    arr.push(index);
                }
                return arr;
            },
            enumerable: true,
            configurable: true
        });
        Range.prototype.contains = function (anotherRangeOrNumber) {
            if (tnp_core_1._.isNumber(anotherRangeOrNumber)) {
                return anotherRangeOrNumber >= this.from && anotherRangeOrNumber <= this.to;
            }
            anotherRangeOrNumber = anotherRangeOrNumber;
            return (anotherRangeOrNumber.from >= this.from && anotherRangeOrNumber.to <= this.to);
        };
        var Range_1;
        Range = Range_1 = tslib_1.__decorate([
            typescript_class_helpers_1.CLASS.NAME('Range'),
            tslib_1.__metadata("design:paramtypes", [Number, Number])
        ], Range);
        return Range;
    }());
    ModelsOther.Range = Range;
})(ModelsOther = exports.ModelsOther || (exports.ModelsOther = {}));
//# sourceMappingURL=models-other.js.map