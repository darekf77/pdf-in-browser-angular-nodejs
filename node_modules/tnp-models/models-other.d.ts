import { ConfigModels } from 'tnp-config';
export declare namespace ModelsOther {
    type ModifiedFiles = {
        modifiedFiles: string[];
    };
    class Range {
        from: number;
        to: number;
        static clone(r: Range): Range;
        static from(from: number): {
            to(to: number): Range;
        };
        constructor(from: number, to: number);
        get length(): number;
        get array(): any[];
        contains(anotherRangeOrNumber: Range | number): boolean;
    }
    type RootArgsType = {
        tnpNonInteractive: boolean;
        tnpShowProgress: boolean;
        tnpNoColorsMode: boolean;
        findNearestProject: boolean;
        findNearestProjectWithGitRoot: boolean;
        findNearestProjectType: ConfigModels.LibType;
        findNearestProjectTypeWithGitRoot: ConfigModels.LibType;
        cwd: string;
    };
    interface GenerateProjectCopyOpt {
        override?: boolean;
        markAsGenerated?: boolean;
        regenerateOnlyCoreProjects?: boolean;
        forceCopyPackageJSON?: boolean;
        filterForBundle?: boolean;
        showInfo?: boolean;
        ommitSourceCode?: boolean;
        regenerateProjectChilds?: boolean;
        useTempLocation?: boolean;
    }
    type SourceFolder = 'src' | 'components' | 'custom' | 'tmp-src';
    type FileEvent = 'created' | 'changed' | 'removed' | 'rename';
    type CutableFileExt = 'scss' | 'css' | 'sass' | 'html' | 'ts';
    type FileExtension = 'ts' | 'js' | 'json' | 'html' | 'jpg' | 'png' | 'txt' | CutableFileExt;
    type RecreateFile = {
        where: string;
        from: string;
        linked?: boolean;
    };
}
