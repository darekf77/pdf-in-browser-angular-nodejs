import { ModelsEnvinronment } from './models-environment';
import { ConfigModels } from 'tnp-config';
export declare namespace ModelsDev {
    type InitArgOptions = {
        skipNodeModules: boolean;
        recrusive: boolean;
        /**
         * init without installing node modules
         */
        struct?: boolean;
        env: ConfigModels.EnvironmentName;
    };
    interface ProjectForAutoBuild {
        cwd: string;
        command: string;
        commandWatch: string;
        args?: string[];
    }
    interface ProjectForAutoRelease {
        cwd: string;
        command: string;
        args?: string[];
    }
    interface AutoActionsUser {
        builds?: ProjectForAutoBuild[];
        autoreleases?: ProjectForAutoRelease[];
    }
    interface ReleaseOptions {
        prod?: boolean;
        useTempFolder?: boolean;
        uglify?: boolean;
        obscure?: boolean;
        nodts?: boolean;
        args?: string;
        bumbVersionIn?: string[];
    }
    interface BuildServeArgsServe {
        port: string;
        baseUrl: string;
        outDir: string;
    }
    type BuildDir = 'dist' | 'bundle' | 'docs';
    interface ReplaceOptionsExtended {
        replacements: (string | [string, string] | [string, (expression: any, env: ModelsEnvinronment.EnvConfig) => () => boolean])[];
        env?: ModelsEnvinronment.EnvConfig;
    }
    interface StartForOptions {
        progressCallback?: (fractionValue: number) => any;
        prod?: boolean;
        watch?: boolean;
        nodts?: boolean;
        uglify?: boolean;
        obscure?: boolean;
        watchOnly?: boolean;
        outDir?: BuildDir;
        appBuild?: boolean;
        args?: string;
        staticBuildAllowed?: boolean;
    }
}
