import { ConnectionOptions } from 'typeorm';
import { ConfigModels } from 'tnp-config';
import { ModelsNpm } from './models-npm';
import { ModelsDev } from './models-dev';
export declare namespace ModelsEnvinronment {
    interface EnvConfigProject {
        baseUrl: string;
        host?: string;
        externalHost?: string;
        name: string;
        type?: ConfigModels.LibType;
        port: number;
        $db?: ConnectionOptions;
        ommitAppBuild?: boolean;
        isWatchBuild?: boolean;
    }
    interface EnvConfig {
        pathes?: any;
        config?: any;
        configsFromJs?: any;
        /**
         * I will check if code should be available for npm version
         */
        notForNpm?: boolean;
        isCoreProject?: boolean;
        isStandaloneProject?: boolean;
        name?: ConfigModels.EnvironmentName;
        frameworks?: ConfigModels.UIFramework[];
        domain?: string;
        dynamicGenIps?: boolean;
        ip?: string | 'localhost';
        workspace: {
            workspace: EnvConfigProject;
            build?: {
                browser: {
                    minify: boolean;
                    aot: boolean;
                    production: boolean;
                };
                server: {
                    minify: boolean;
                    production: boolean;
                };
            };
            projects: EnvConfigProject[];
        };
        clientProjectName?: string;
        currentLibProjectSourceFolder?: 'src' | 'components';
        currentProjectName?: string;
        currentProjectLaunchConfiguration?: string;
        currentProjectTasksConfiguration?: string;
        currentProjectPort?: number;
        currentProjectLocation?: string;
        currentFrameworkVersion?: string;
        currentProjectIsSite?: boolean;
        currentProjectIsStrictSite?: boolean;
        currentProjectIsDependencySite?: boolean;
        currentProjectIsStatic?: boolean;
        currentProjectComponentsFolder?: string;
        currentProjectTsConfigPathes?: string;
        currentProjectTsConfigPathesForBrowser?: string;
        currentProjectType?: ConfigModels.LibType;
        packageJSON?: ModelsNpm.IPackageJSON;
        cloud?: {
            ports: {
                update: number;
            };
        };
        build?: {
            number?: number;
            hash?: string;
            date?: Date;
            options?: {
                isWatchBuild?: boolean;
                outDir?: ModelsDev.BuildDir;
            };
        };
    }
}
