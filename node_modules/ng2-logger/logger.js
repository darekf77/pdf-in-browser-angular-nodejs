"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var level_1 = require("./level");
var display_1 = require("./display");
var tnp_core_1 = require("tnp-core");
var Logger = /** @class */ (function () {
    function Logger(name, color, developmentMode, allowed, isMuted, fixedWidth) {
        var _this = this;
        this.name = name;
        this.color = color;
        this.developmentMode = developmentMode;
        this.allowed = allowed;
        this.isMuted = isMuted;
        this.fixedWidth = fixedWidth;
        /** @deprecated Use data(...)
         * @see data
        */
        this.d = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._data(name, data);
        };
        /** @deprecated Use error(...)
         * @see error
        */
        this.er = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._error(name, data);
        };
        /** @deprecated Use info(...)
         * @see info
        */
        this.i = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._info(name, data);
        };
        /** @deprecated Use warn(...)
         * @see warn
        */
        this.w = function (name) {
            var data = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                data[_i - 1] = arguments[_i];
            }
            return _this._warn(name, data);
        };
        /**
         * Logs message and data with the level=data
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.data = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._data(message, otherParams);
        };
        /**
         * Logs message and data with the level=error
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.error = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._error(message, otherParams);
        };
        /**
         * Logs message and data with the level=info
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.info = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._info(message, otherParams);
        };
        /**
         * Logs message and data with the level=warn
         * @param message The message
         * @param otherParams Additional parameters
         */
        this.warn = function (message) {
            var otherParams = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                otherParams[_i - 1] = arguments[_i];
            }
            return _this._warn(message, otherParams);
        };
    }
    Logger.prototype.setLevel = function (l) {
        this._level = l;
        return this;
    };
    Object.defineProperty(Logger.prototype, "isProductionMode", {
        get: function () {
            return !this.developmentMode;
        },
        enumerable: true,
        configurable: true
    });
    Logger.prototype.setProductionMode = function (productionMode) {
        this.developmentMode = !productionMode;
        return this;
    };
    Logger.prototype.mute = function () {
        this.isMuted = true;
        return this;
    };
    Logger.prototype.onlyWhen = function (expression) {
        if (typeof expression === 'function') {
            this.isMuted = !expression();
        }
        else if (typeof expression === 'boolean') {
            this.isMuted = !expression;
        }
    };
    Logger.prototype._data = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.isMuted)
            return this;
        if (this.allowed.length >= 1 && tnp_core_1.Helpers.contain(this.allowed, level_1.Level.__NOTHING)
            && !tnp_core_1.Helpers.contain(this.allowed, level_1.Level.DATA))
            return this;
        if (this.allowed.length === 0 || tnp_core_1.Helpers.contain(this.allowed, level_1.Level.DATA)) {
            display_1.Display.msg.apply(void 0, tslib_1.__spreadArrays([
                name
            ], data, [
                this.name,
                this.color,
                level_1.Level.DATA,
                this.fixedWidth,
                this.isProductionMode,
            ]));
        }
        return this;
    };
    Logger.prototype._error = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.isMuted)
            return this;
        if (this.allowed.length >= 1 && tnp_core_1.Helpers.contain(this.allowed, level_1.Level.__NOTHING)
            && !tnp_core_1.Helpers.contain(this.allowed, level_1.Level.ERROR))
            return this;
        if (this.allowed.length === 0 || tnp_core_1.Helpers.contain(this.allowed, level_1.Level.ERROR)) {
            display_1.Display.msg.apply(void 0, tslib_1.__spreadArrays([
                name
            ], data, [
                this.name,
                this.color,
                level_1.Level.ERROR,
                this.fixedWidth,
                this.isProductionMode,
            ]));
        }
        return this;
    };
    Logger.prototype._info = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.isMuted)
            return this;
        if (this.allowed.length >= 1 && tnp_core_1.Helpers.contain(this.allowed, level_1.Level.__NOTHING)
            && !tnp_core_1.Helpers.contain(this.allowed, level_1.Level.INFO))
            return this;
        if (this.allowed.length === 0 || tnp_core_1.Helpers.contain(this.allowed, level_1.Level.INFO)) {
            display_1.Display.msg.apply(void 0, tslib_1.__spreadArrays([
                name
            ], data, [
                this.name,
                this.color,
                level_1.Level.INFO,
                this.fixedWidth,
                this.isProductionMode,
            ]));
        }
        return this;
    };
    Logger.prototype._warn = function (name) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            data[_i - 1] = arguments[_i];
        }
        if (this.isMuted)
            return this;
        if (this.allowed.length >= 1 && tnp_core_1.Helpers.contain(this.allowed, level_1.Level.__NOTHING)
            && !tnp_core_1.Helpers.contain(this.allowed, level_1.Level.WARN))
            return this;
        if (this.allowed.length === 0 || tnp_core_1.Helpers.contain(this.allowed, level_1.Level.WARN)) {
            display_1.Display.msg.apply(void 0, tslib_1.__spreadArrays([
                name
            ], data, [
                this.name,
                this.color,
                level_1.Level.WARN,
                this.fixedWidth,
                this.isProductionMode,
            ]));
        }
        return this;
    };
    return Logger;
}());
exports.Logger = Logger;
//# sourceMappingURL=logger.js.map