"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#endregion
var level_1 = require("./level");
var tnp_core_1 = require("tnp-core");
var backend_logging_1 = require("./backend-logging");
//#region @backend
var chalk_1 = require("chalk");
//#endregion
var Display = /** @class */ (function () {
    function Display() {
    }
    Display.msg = function (message, params, moduleName, moduleColor, level, moduleWidth, isProductionMode) {
        if (isProductionMode) {
            return;
        }
        ;
        var color = 'gray';
        if (level === level_1.Level.INFO) {
            color = 'deepskyblue';
        }
        if (level === level_1.Level.ERROR) {
            color = 'red';
        }
        if (level === level_1.Level.WARN) {
            color = 'orange';
        }
        if (moduleWidth) {
            var diff = moduleWidth - moduleName.length;
            if (diff > 0) {
                for (var i = 0; i < diff; i++) {
                    moduleName += ' ';
                }
            }
        }
        if (tnp_core_1.Helpers.isBrowser
            //#region @backend
            && !global
        //#endregion
        ) {
            var isEdgeOrIe8orAbove = (document['documentMode'] || /Edge/.test(navigator.userAgent));
            if (isEdgeOrIe8orAbove) {
                if (typeof message === 'string') {
                    var a1 = '[[ ' + moduleName + ' ]] ' + message + ' ';
                    params.unshift(a1);
                }
                else {
                    var a1 = '[[ ' + moduleName + ']] ';
                    params.push(message);
                    params.unshift(a1);
                }
                if (level === level_1.Level.INFO) {
                    console.info.apply(console, params);
                }
                else if (level === level_1.Level.ERROR) {
                    console.error.apply(console, params);
                }
                else if (level === level_1.Level.WARN) {
                    console.warn.apply(console, params);
                }
                else {
                    console.log.apply(console, params);
                }
            }
            else {
                if (typeof message === 'string') {
                    var a1 = '%c ' + moduleName + '  %c ' + message + ' ';
                    var a2 = 'background: ' + moduleColor + ';color:white; border: 1px solid ' + moduleColor + '; ';
                    var a3 = 'border: 1px solid ' + color + '; ';
                    params.unshift(a3);
                    params.unshift(a2);
                    params.unshift(a1);
                }
                else {
                    var a1 = '%c ' + moduleName + ' ';
                    var a2 = 'background: ' + moduleColor + ';color:white; border: 1px solid ' + color + '; ';
                    params.push(message);
                    params.unshift(a2);
                    params.unshift(a1);
                }
                console.log.apply(console, params);
            }
        }
        if (tnp_core_1.Helpers.isNode) {
            //#region @backend
            var a1 = chalk_1.default.bgHex(moduleColor)(chalk_1.default.black(moduleName));
            var p = params;
            if (typeof message === 'string') {
                a1 = a1 + chalk_1.default.keyword(color)(' [') + chalk_1.default.dim(message) + chalk_1.default.keyword(color)('] ');
            }
            else {
                p = [message].concat(params);
            }
            backend_logging_1.consoleLog(a1, level);
            backend_logging_1.displayParams(p, level);
            //#endregion
        }
    };
    return Display;
}());
exports.Display = Display;
//# sourceMappingURL=display.js.map