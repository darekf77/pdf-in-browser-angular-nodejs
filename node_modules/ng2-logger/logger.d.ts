import { Level } from './level';
export declare class Logger {
    private name;
    color: string;
    private developmentMode;
    private allowed;
    private isMuted;
    fixedWidth: number | undefined;
    private _level;
    setLevel(l: Level): this;
    get isProductionMode(): boolean;
    setProductionMode(productionMode: boolean): this;
    mute(): this;
    constructor(name: string, color: string, developmentMode: boolean, allowed: Level[], isMuted: boolean, fixedWidth: number | undefined);
    onlyWhen(expression: (() => boolean) | boolean): void;
    private _data;
    private _error;
    private _info;
    private _warn;
    /** @deprecated Use data(...)
     * @see data
    */
    d: (name: string, ...data: any[]) => this;
    /** @deprecated Use error(...)
     * @see error
    */
    er: (name: string, ...data: any[]) => this;
    /** @deprecated Use info(...)
     * @see info
    */
    i: (name: string, ...data: any[]) => this;
    /** @deprecated Use warn(...)
     * @see warn
    */
    w: (name: string, ...data: any[]) => this;
    /**
     * Logs message and data with the level=data
     * @param message The message
     * @param otherParams Additional parameters
     */
    data: (message: string, ...otherParams: any[]) => this;
    /**
     * Logs message and data with the level=error
     * @param message The message
     * @param otherParams Additional parameters
     */
    error: (message: string, ...otherParams: any[]) => this;
    /**
     * Logs message and data with the level=info
     * @param message The message
     * @param otherParams Additional parameters
     */
    info: (message: string, ...otherParams: any[]) => this;
    /**
     * Logs message and data with the level=warn
     * @param message The message
     * @param otherParams Additional parameters
     */
    warn: (message: string, ...otherParams: any[]) => this;
}
