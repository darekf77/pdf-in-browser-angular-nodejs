"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var io = require("socket.io-client");
var symbols_1 = require("../symbols");
var ng2_logger_1 = require("ng2-logger");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var realtime_1 = require("./realtime");
var framework_context_1 = require("../framework/framework-context");
var log = ng2_logger_1.Log.create('RealtimeBrowser', ng2_logger_1.Level.__NOTHING);
var RealtimeBrowser = /** @class */ (function (_super) {
    tslib_1.__extends(RealtimeBrowser, _super);
    function RealtimeBrowser(context) {
        var _this = _super.call(this, context) || this;
        if (!context.disabledRealtime) {
            var nspPath = {
                global: _this.pathFor(),
                realtime: _this.pathFor(symbols_1.SYMBOL.REALTIME.NAMESPACE)
            };
            log.i('NAMESPACE GLOBAL ', nspPath.global.href + (" host: " + _this.context.host));
            log.i('NAMESPACE REALTIME', nspPath.realtime.href + (" host: " + _this.context.host));
            var global_1 = io(nspPath.global.origin, {
                path: nspPath.global.pathname
            });
            _this.socketNamespace.FE = global_1;
            global_1.on('connect', function () {
                log.i("conented to GLOBAL namespace " + global_1.nsp + " of host: " + _this.context.host);
            });
            log.i('IT SHOULD CONNECT TO GLOBAL');
            var realtime_2 = io(nspPath.realtime.origin, {
                path: nspPath.realtime.pathname
            });
            _this.socketNamespace.FE_REALTIME = realtime_2;
            realtime_2.on('connect', function () {
                log.i("conented to REALTIME namespace " + realtime_2.nsp + " host: " + _this.context.host);
            });
            log.i('IT SHOULD CONNECT TO REALTIME');
        }
        return _this;
    }
    RealtimeBrowser.TriggerChange = function (entity, property) {
        var _a;
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return (_a = context.browser.realtime) === null || _a === void 0 ? void 0 : _a.TriggerChange(entity, property);
    };
    RealtimeBrowser.prototype.TriggerChange = function (entity, property) {
        var _this = this;
        if (this.context.disabledRealtime) {
            return;
        }
        var constructFn = typescript_class_helpers_1.CLASS.getFromObject(entity);
        if (!constructFn) {
            log.er("Activate: Cannot retrive Class function from object", entity);
            return;
        }
        var className = typescript_class_helpers_1.CLASS.getName(constructFn);
        var id = entity.id;
        var unsub = function () {
            if (tnp_core_1._.isString(property)) {
                _this.UnsubscribeEntityPropertyChanges(entity, property);
            }
            else {
                _this.UnsubscribeEntityChanges(entity);
            }
        };
        if (tnp_core_1._.isString(property)) {
            var propertyInEntityKey = propertyInEntityKeyFn(entity, property);
            var arr = RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey];
            if (tnp_core_1._.isArray(arr)) {
                arr.forEach(function (changeListenerFromArray) {
                    changeListenerFromArray(unsub);
                });
            }
        }
        else {
            var arr = RealtimeBrowser.realtimeEntityListener[className][entity.id];
            if (tnp_core_1._.isArray(arr)) {
                arr.forEach(function (changeListenerFromArray) {
                    changeListenerFromArray(unsub);
                });
            }
        }
    };
    RealtimeBrowser.prototype.entityIdIsCorrect = function (id, entity, action) {
        if (!(tnp_core_1._.isNumber(id) || tnp_core_1._.isString(id))) {
            if (tnp_core_1._.isFunction(entity)) {
                entity = typescript_class_helpers_1.CLASS.getName(entity);
            }
            if (tnp_core_1._.isObject(entity)) {
                entity = typescript_class_helpers_1.CLASS.getNameFromObject(entity);
            }
            throw "[Morphi.Realtime.Browser." + action + "] bad id \"" + id + "\" for entity \"" + entity + "\" "
                + ". Should be number or string";
        }
    };
    RealtimeBrowser.prototype.__SubscribeEntityChanges = function (entity, changesListener, property) {
        var _this = this;
        if (this.context.disabledRealtime) {
            return;
        }
        var id = entity.id;
        var propertyInEntityKey = propertyInEntityKeyFn(entity, property);
        this.entityIdIsCorrect(id, entity, 'Subscribe');
        var constructFn = typescript_class_helpers_1.CLASS.getFromObject(entity);
        if (!constructFn) {
            log.er("Activate: Cannot retrive Class function from object", entity);
            return;
        }
        var className = typescript_class_helpers_1.CLASS.getName(constructFn);
        this.checkObjects(className, entity, property, changesListener);
        if (property) {
            log.d("subsceibe entity property changes: \"" + className + "/" + property + "\"");
        }
        else {
            log.d("subsceibe entity changes: \"" + className + "\"");
        }
        log.d("[className][after check object] " + className + " host: " + this.context.host + " ");
        var roomName = tnp_core_1._.isString(property) ?
            symbols_1.SYMBOL.REALTIME.ROOM_NAME.UPDATE_ENTITY_PROPERTY(className, property, entity.id) :
            symbols_1.SYMBOL.REALTIME.ROOM_NAME.UPDATE_ENTITY(className, entity.id);
        log.d("[className][roomName] " + roomName + " host: " + this.context.host + " ");
        var realtime = this.socketNamespace.FE_REALTIME;
        var ngZone = this.context.ngZone;
        // realtime.on('connect', () => {
        //   console.log(`conented to namespace ${realtime.nsp && realtime.nsp.name}`)
        if (tnp_core_1._.isString(property)) {
            realtime.emit(symbols_1.SYMBOL.REALTIME.ROOM.SUBSCRIBE.ENTITY_PROPERTY_UPDATE_EVENTS, roomName);
            log.i('SUBSCRIBE TO ' +
                symbols_1.SYMBOL.REALTIME.EVENT.ENTITY_PROPTERY_UPDATE_BY_ID(className, property, entity.id)
                + (" for host: " + this.context.host));
        }
        else {
            realtime.emit(symbols_1.SYMBOL.REALTIME.ROOM.SUBSCRIBE.ENTITY_UPDATE_EVENTS, roomName);
            log.i('SUBSCRIBE TO ' +
                symbols_1.SYMBOL.REALTIME.EVENT.ENTITY_UPDATE_BY_ID(className, entity.id)
                + (" for host: " + this.context.host));
        }
        var callBackDebouced = function () {
            if (tnp_core_1._.isFunction(changesListener)) {
                var unsub_1 = function () {
                    if (tnp_core_1._.isString(property)) {
                        _this.UnsubscribeEntityPropertyChanges(entity, property);
                    }
                    else {
                        _this.UnsubscribeEntityChanges(entity);
                    }
                };
                if (tnp_core_1._.isString(property)) {
                    var arr = RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey];
                    if (tnp_core_1._.isArray(arr)) {
                        log.d("changeListenerFromArray length: " + arr.length + " , for " + className + "/" + propertyInEntityKey);
                        arr.forEach(function (changeListenerFromArray) {
                            changeListenerFromArray(unsub_1);
                        });
                    }
                }
                else {
                    var arr = RealtimeBrowser.realtimeEntityListener[className][entity.id];
                    if (tnp_core_1._.isArray(arr)) {
                        arr.forEach(function (changeListenerFromArray) {
                            changeListenerFromArray(unsub_1);
                        });
                    }
                }
            }
            else {
                log.er('Please define changedEntity');
            }
        };
        var cb = tnp_core_1._.debounce(function () {
            callBackDebouced();
        }, 500);
        var callbackForRealtimeChanges = function (data // NO need to know data
        ) {
            log.i('data from socket without preparation (ngzone,rjxjs,transform)', data);
            if (ngZone) {
                ngZone.run(function () {
                    log.d('next from ngzone');
                    cb();
                });
            }
            else {
                log.d('next without ngzone');
                cb();
            }
            // if (ApplicationRef) {
            //   log.i('tick application ')
            //   ApplicationRef.tick()
            // }
        };
        var sub;
        if (tnp_core_1._.isString(property)) {
            sub = realtime.on(symbols_1.SYMBOL.REALTIME.EVENT.ENTITY_PROPTERY_UPDATE_BY_ID(className, property, entity.id), callbackForRealtimeChanges);
            RealtimeBrowser.realtimeEntityPropertySockets[className][propertyInEntityKey] = sub;
            RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey].push(changesListener);
        }
        else {
            sub = realtime.on(symbols_1.SYMBOL.REALTIME.EVENT.ENTITY_UPDATE_BY_ID(className, entity.id), callbackForRealtimeChanges);
            RealtimeBrowser.realtimeEntitySockets[className][entity.id] = sub;
            RealtimeBrowser.realtimeEntityListener[className][entity.id].push(changesListener);
        }
    };
    RealtimeBrowser.addDupicateRealtimeEntityListener = function (entity, changesListener, property) {
        var _a;
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return (_a = context.browser.realtime) === null || _a === void 0 ? void 0 : _a.addDupicateRealtimeEntityListener(entity, changesListener, property);
    };
    RealtimeBrowser.prototype.addDupicateRealtimeEntityListener = function (entity, changesListener, property) {
        if (this.context.disabledRealtime) {
            return;
        }
        var className = typescript_class_helpers_1.CLASS.getNameFromObject(entity);
        if (tnp_core_1._.isUndefined(RealtimeBrowser.realtimeEntityPropertyListener[className])) {
            RealtimeBrowser.realtimeEntityPropertyListener[className] = {};
        }
        if (tnp_core_1._.isString(property)) {
            var propertyInEntityKey = propertyInEntityKeyFn(entity, property);
            RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey].push(changesListener);
        }
        else {
            RealtimeBrowser.realtimeEntityListener[className][entity.id].push(changesListener);
        }
    };
    RealtimeBrowser.SubscribeEntityChanges = function (entity, changesListener) {
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return context.browser.realtime.SubscribeEntityChanges(entity, changesListener);
    };
    RealtimeBrowser.prototype.SubscribeEntityChanges = function (entity, changesListener) {
        if (this.context.disabledRealtime) {
            return;
        }
        return this.__SubscribeEntityChanges(entity, changesListener);
    };
    RealtimeBrowser.SubscribeEntityPropertyChanges = function (entity, property, changesListener) {
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return context.browser.realtime.SubscribeEntityPropertyChanges(entity, property, changesListener);
    };
    RealtimeBrowser.prototype.SubscribeEntityPropertyChanges = function (entity, property, changesListener) {
        if (this.context.disabledRealtime) {
            return;
        }
        return this.__SubscribeEntityChanges(entity, changesListener, property);
    };
    RealtimeBrowser.prototype.checkObjects = function (className, entity, property, changesListener) {
        if (this.context.disabledRealtime) {
            return;
        }
        if (tnp_core_1._.isString(property)) {
            if (tnp_core_1._.isUndefined(RealtimeBrowser.realtimeEntityPropertySockets[className])) {
                RealtimeBrowser.realtimeEntityPropertySockets[className] = {};
            }
            if (tnp_core_1._.isUndefined(RealtimeBrowser.realtimeEntityPropertyListener[className])) {
                RealtimeBrowser.realtimeEntityPropertyListener[className] = {};
            }
            var propertyInEntityKey = propertyInEntityKeyFn(entity, property);
            if (!tnp_core_1._.isArray(RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey])) {
                RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey] = [];
            }
            if (tnp_core_1._.isObject(RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey])) {
                log.w("alread listen to this object property: " + property + " realtime events", entity);
                if (!RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey].includes(changesListener)) {
                    log.d("new change listener added, property: " + property, entity);
                    RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey].push(changesListener);
                }
                else {
                    log.d("change listener already exist, property: " + property, entity);
                }
                return false;
            }
        }
        else {
            if (tnp_core_1._.isUndefined(RealtimeBrowser.realtimeEntitySockets[className])) {
                RealtimeBrowser.realtimeEntitySockets[className] = {};
            }
            if (tnp_core_1._.isUndefined(RealtimeBrowser.realtimeEntityListener[className])) {
                RealtimeBrowser.realtimeEntityListener[className] = {};
            }
            if (!tnp_core_1._.isArray(RealtimeBrowser.realtimeEntityListener[className][entity.id])) {
                RealtimeBrowser.realtimeEntityListener[className][entity.id] = [];
            }
            if (tnp_core_1._.isObject(RealtimeBrowser.realtimeEntitySockets[className][entity.id])) {
                log.w('alread listen to this object realtime events', entity);
                if (!RealtimeBrowser.realtimeEntityListener[className][entity.id].includes(changesListener)) {
                    log.d('new change listener added', entity);
                    RealtimeBrowser.realtimeEntityListener[className][entity.id].push(changesListener);
                }
                else {
                    log.d('change listener already exist', entity);
                }
                return false;
            }
        }
        return true;
    };
    RealtimeBrowser.prototype.__UnsubscribeEntityChanges = function (entity, property, includePropertyChanges, classFN) {
        var _this = this;
        if (includePropertyChanges === void 0) { includePropertyChanges = false; }
        if (this.context.disabledRealtime) {
            return;
        }
        if (includePropertyChanges) {
            typescript_class_helpers_1.CLASS.describeProperites(typescript_class_helpers_1.CLASS.getFromObject(entity)).forEach(function (property) {
                _this.UnsubscribeEntityPropertyChanges(entity, property);
            });
        }
        var id = entity.id;
        this.entityIdIsCorrect(id, entity, 'Unsubscribe');
        var constructFn = tnp_core_1._.isFunction(classFN) ? classFN : typescript_class_helpers_1.CLASS.getFromObject(entity);
        if (!constructFn) {
            log.er("Deactivate: Cannot retrive Class function from object", entity);
            return;
        }
        var className = typescript_class_helpers_1.CLASS.getName(constructFn);
        var realtime = this.socketNamespace.FE_REALTIME;
        var roomName = tnp_core_1._.isString(property) ?
            symbols_1.SYMBOL.REALTIME.ROOM_NAME.UPDATE_ENTITY_PROPERTY(className, property, entity.id) :
            symbols_1.SYMBOL.REALTIME.ROOM_NAME.UPDATE_ENTITY(className, entity.id);
        var sub;
        if (tnp_core_1._.isString(property)) {
            var propertyInEntityKey = propertyInEntityKeyFn(entity, property);
            sub = RealtimeBrowser.realtimeEntityPropertySockets[className] && RealtimeBrowser.realtimeEntityPropertySockets[className][propertyInEntityKey];
        }
        else {
            sub = RealtimeBrowser.realtimeEntitySockets[className] && RealtimeBrowser.realtimeEntitySockets[className][entity.id];
        }
        if (sub) {
            sub.removeAllListeners();
            if (tnp_core_1._.isString(property)) {
                delete RealtimeBrowser.realtimeEntityPropertyListener[className][propertyInEntityKey];
            }
            else {
                delete RealtimeBrowser.realtimeEntityListener[className][entity.id];
            }
            console.info("Unsubscribe OK from entit: " + className + " - " + (propertyInEntityKey ? propertyInEntityKey : entity.id));
        }
        else {
            console.info("Unsubscribe not found from entity: " + className + " - " + (propertyInEntityKey ? propertyInEntityKey : entity.id));
        }
        if (tnp_core_1._.isString(property)) {
            realtime.emit(symbols_1.SYMBOL.REALTIME.ROOM.UNSUBSCRIBE.ENTITY_PROPERTY_UPDATE_EVENTS, roomName);
        }
        else {
            realtime.emit(symbols_1.SYMBOL.REALTIME.ROOM.UNSUBSCRIBE.ENTITY_UPDATE_EVENTS, roomName);
        }
    };
    RealtimeBrowser.UnsubscribeEverything = function () {
        var _a, _b;
        var contexts = (framework_context_1.FrameworkContext.contexts)
            .filter(function (c) { return !c.disabledRealtime; });
        for (var index = 0; index < contexts.length; index++) {
            var c = contexts[index];
            (_b = (_a = c.browser) === null || _a === void 0 ? void 0 : _a.realtime) === null || _b === void 0 ? void 0 : _b.UnsubscribeEverything();
        }
    };
    RealtimeBrowser.prototype.UnsubscribeEverything = function () {
        var _this = this;
        if (this.context.disabledRealtime) {
            return;
        }
        Object.keys(RealtimeBrowser.realtimeEntitySockets).forEach(function (className) {
            Object.keys(RealtimeBrowser.realtimeEntitySockets[className]).forEach(function (entityId) {
                _this.__UnsubscribeEntityChanges({ id: entityId }, undefined, true, typescript_class_helpers_1.CLASS.getBy(className));
            });
        });
    };
    RealtimeBrowser.UnsubscribeEntityChanges = function (entity, includePropertyChanges) {
        if (includePropertyChanges === void 0) { includePropertyChanges = false; }
        var _a, _b;
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return (_b = (_a = context.browser) === null || _a === void 0 ? void 0 : _a.realtime) === null || _b === void 0 ? void 0 : _b.UnsubscribeEntityChanges(entity, includePropertyChanges);
    };
    RealtimeBrowser.prototype.UnsubscribeEntityChanges = function (entity, includePropertyChanges) {
        if (includePropertyChanges === void 0) { includePropertyChanges = false; }
        if (this.context.disabledRealtime) {
            return;
        }
        return this.__UnsubscribeEntityChanges(entity, undefined, includePropertyChanges);
    };
    RealtimeBrowser.UnsubscribeEntityPropertyChanges = function (entity, property) {
        var _a, _b;
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return (_b = (_a = context.browser) === null || _a === void 0 ? void 0 : _a.realtime) === null || _b === void 0 ? void 0 : _b.UnsubscribeEntityPropertyChanges(entity, property);
    };
    RealtimeBrowser.prototype.UnsubscribeEntityPropertyChanges = function (entity, property) {
        if (this.context.disabledRealtime) {
            return;
        }
        return this.__UnsubscribeEntityChanges(entity, property);
    };
    RealtimeBrowser.realtimeEntityListener = {};
    RealtimeBrowser.realtimeEntityPropertyListener = {};
    RealtimeBrowser.realtimeEntitySockets = {};
    RealtimeBrowser.realtimeEntityPropertySockets = {};
    return RealtimeBrowser;
}(realtime_1.RealtimeBase));
exports.RealtimeBrowser = RealtimeBrowser;
function propertyInEntityKeyFn(entity, property) {
    return "" + entity.id + property;
}
//# sourceMappingURL=realtime-browser.js.map