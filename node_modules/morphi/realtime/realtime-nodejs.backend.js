"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var io = require("socket.io");
var symbols_1 = require("../symbols");
var ng2_logger_1 = require("ng2-logger");
var realtime_1 = require("./realtime");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var framework_context_1 = require("../framework/framework-context");
var log = ng2_logger_1.Log.create('RealtimeNodejs', ng2_logger_1.Level.__NOTHING);
var RealtimeNodejs = /** @class */ (function (_super) {
    tslib_1.__extends(RealtimeNodejs, _super);
    //#region @backend
    function RealtimeNodejs(context) {
        var _this = _super.call(this, context) || this;
        if (!context.disabledRealtime) {
            var nspPath = {
                global: _this.pathFor(),
                realtime: _this.pathFor(symbols_1.SYMBOL.REALTIME.NAMESPACE)
            };
            _this.socketNamespace.BE = io(_this.context.node.httpServer, {
                path: nspPath.global.pathname
            });
            var ioGlobalNsp = _this.socketNamespace.BE;
            ioGlobalNsp.on('connection', function (clientSocket) {
                log.i("client conected to namespace \"" + clientSocket.nsp.name + "\",  host: " + _this.context.host);
            });
            log.i("CREATE GLOBAL NAMESPACE: '" + ioGlobalNsp.path() + "' , path: '" + nspPath.global.pathname + "'");
            var ioRealtimeNsp = io(_this.context.node.httpServer, {
                path: nspPath.realtime.pathname
            });
            log.i("CREATE REALTIME NAMESPACE: '" + ioRealtimeNsp.path() + "' , path: '" + nspPath.realtime.pathname + "' ");
            _this.socketNamespace.BE_REALTIME = ioRealtimeNsp;
            ioRealtimeNsp.on('connection', function (clientSocket) {
                log.i("client conected to namespace \"" + clientSocket.nsp.name + "\",  host: " + _this.context.host);
                clientSocket.on(symbols_1.SYMBOL.REALTIME.ROOM.SUBSCRIBE.ENTITY_UPDATE_EVENTS, function (room) {
                    log.i("Joining room " + room + " in namespace  REALTIME" + (" host: " + _this.context.host));
                    clientSocket.join(room);
                });
                clientSocket.on(symbols_1.SYMBOL.REALTIME.ROOM.SUBSCRIBE.ENTITY_PROPERTY_UPDATE_EVENTS, function (room) {
                    log.i("Joining room " + room + " in namespace REALTIME " + (" host: " + _this.context.host));
                    clientSocket.join(room);
                });
                clientSocket.on(symbols_1.SYMBOL.REALTIME.ROOM.UNSUBSCRIBE.ENTITY_UPDATE_EVENTS, function (room) {
                    log.i("Leaving room " + room + " in namespace REALTIME " + (" host: " + _this.context.host));
                    clientSocket.leave(room);
                });
                clientSocket.on(symbols_1.SYMBOL.REALTIME.ROOM.UNSUBSCRIBE.ENTITY_PROPERTY_UPDATE_EVENTS, function (room) {
                    log.i("Leaving room " + room + " in namespace REALTIME " + (" host: " + _this.context.host));
                    clientSocket.leave(room);
                });
            });
        }
        return _this;
    }
    RealtimeNodejs.prototype.__TrigggerEntityChanges = function (entity, property, idToTrigger) {
        var _this = this;
        if (this.context.disabledRealtime) {
            return;
        }
        if (tnp_core_1._.isFunction(entity)) {
            entity = typescript_class_helpers_1.CLASS.getName(entity);
        }
        if (tnp_core_1._.isString(entity) && !(tnp_core_1._.isString(idToTrigger) || tnp_core_1._.isNumber(idToTrigger))) {
            throw "[morphi][realtime-nodejs] "
                + ("Please provide id if you are trigerring realtime change for entity by name: \"" + entity + "\"");
        }
        var keyPropertyName = 'id';
        if (!idToTrigger) {
            if (!entity || !entity[keyPropertyName]) {
                console.error("Entity without iD !!!! ", entity);
                return;
            }
        }
        var id = (idToTrigger ? idToTrigger : entity[keyPropertyName]);
        // Global.vars.socket.BE.sockets.in()\
        var constructFn = tnp_core_1._.isString(entity) ? typescript_class_helpers_1.CLASS.getBy(entity) : typescript_class_helpers_1.CLASS.getFromObject(entity);
        // console.log('construcFN', constructFn)
        if (!constructFn) {
            log.d('not found class function from', entity);
        }
        else {
            var className_1 = typescript_class_helpers_1.CLASS.getName(constructFn);
            var modelSocketRoomPath_1 = tnp_core_1._.isString(property) ?
                symbols_1.SYMBOL.REALTIME.ROOM_NAME.UPDATE_ENTITY_PROPERTY(className_1, property, id) :
                symbols_1.SYMBOL.REALTIME.ROOM_NAME.UPDATE_ENTITY(className_1, id);
            // console.log(`Push entity${_.isString(property) ? ('.' + property) : ''} to room with path: ${modelSocketRoomPath}`)
            var eventName_1 = tnp_core_1._.isString(property) ?
                symbols_1.SYMBOL.REALTIME.EVENT.ENTITY_PROPTERY_UPDATE_BY_ID(className_1, property, id) :
                symbols_1.SYMBOL.REALTIME.EVENT.ENTITY_UPDATE_BY_ID(className_1, id);
            var job_1 = function () {
                if (tnp_core_1._.isString(property)) {
                    // console.log('populate entity property change to ', SYMBOL.REALTIME.EVENT.ENTITY_UPDATE_BY_ID(className, id))
                    _this.socketNamespace.BE_REALTIME.in(modelSocketRoomPath_1)
                        .emit(eventName_1, '');
                }
                else {
                    log.i('populate entity change to ', symbols_1.SYMBOL.REALTIME.EVENT.ENTITY_UPDATE_BY_ID(className_1, id)
                        + (" host: " + _this.context.host));
                    _this.socketNamespace.BE_REALTIME.in(modelSocketRoomPath_1)
                        .emit(eventName_1, '');
                }
            };
            if (!tnp_core_1._.isFunction(RealtimeNodejs.jobs[eventName_1])) {
                log.i('CREATE FUNCTION DEBOUNCE');
                RealtimeNodejs.jobs[eventName_1] = tnp_core_1._.debounce(function () {
                    job_1();
                }, 500);
            }
            RealtimeNodejs.jobs[eventName_1]();
        }
    };
    RealtimeNodejs.TrigggerEntityPropertyChanges = function (entity, property, idToTrigger) {
        var _a, _b;
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return (_b = (_a = context.node) === null || _a === void 0 ? void 0 : _a.realtime) === null || _b === void 0 ? void 0 : _b.TrigggerEntityPropertyChanges(entity, property, idToTrigger);
    };
    RealtimeNodejs.prototype.TrigggerEntityPropertyChanges = function (entity, property, idToTrigger) {
        var _this = this;
        if (this.context.disabledRealtime) {
            return;
        }
        if (tnp_core_1._.isArray(property)) {
            property.forEach(function (p) {
                _this.__TrigggerEntityChanges(entity, p, idToTrigger);
            });
            return;
        }
        this.__TrigggerEntityChanges(entity, property, idToTrigger);
    };
    RealtimeNodejs.TrigggerEntityChanges = function (entity, idToTrigger) {
        var _a, _b;
        if (tnp_core_1._.isFunction(entity)) {
            entity = typescript_class_helpers_1.CLASS.getName(entity);
        }
        var context = framework_context_1.FrameworkContext.findForTraget(entity);
        return (_b = (_a = context.node) === null || _a === void 0 ? void 0 : _a.realtime) === null || _b === void 0 ? void 0 : _b.TrigggerEntityChanges(entity, idToTrigger);
    };
    RealtimeNodejs.prototype.TrigggerEntityChanges = function (entity, idToTrigger) {
        if (this.context.disabledRealtime) {
            return;
        }
        this.__TrigggerEntityChanges(entity, void 0, idToTrigger);
    };
    RealtimeNodejs.jobs = {};
    return RealtimeNodejs;
}(realtime_1.RealtimeBase));
exports.RealtimeNodejs = RealtimeNodejs;
//# sourceMappingURL=realtime-nodejs.backend.js.map