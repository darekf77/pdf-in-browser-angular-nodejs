import { BASE_ENTITY } from '../framework/framework-entity';
import { RealtimeBase } from './realtime';
import { FrameworkContext } from '../framework/framework-context';
export declare type AliasChangeListenerType = (unsubscribe: () => void) => void;
export declare type AliasEntityType = Partial<BASE_ENTITY<any>>;
export declare class RealtimeBrowser extends RealtimeBase {
    private static realtimeEntityListener;
    private static realtimeEntityPropertyListener;
    private static realtimeEntitySockets;
    private static realtimeEntityPropertySockets;
    constructor(context: FrameworkContext);
    static TriggerChange(entity: AliasEntityType, property?: string): void;
    TriggerChange(entity: AliasEntityType, property?: string): void;
    private entityIdIsCorrect;
    private __SubscribeEntityChanges;
    static addDupicateRealtimeEntityListener(entity: AliasEntityType, changesListener: AliasChangeListenerType, property?: string): void;
    addDupicateRealtimeEntityListener(entity: AliasEntityType, changesListener: AliasChangeListenerType, property?: string): void;
    static SubscribeEntityChanges(entity: AliasEntityType, changesListener: AliasChangeListenerType): void;
    SubscribeEntityChanges(entity: AliasEntityType, changesListener: AliasChangeListenerType): void;
    static SubscribeEntityPropertyChanges(entity: AliasEntityType, property: string, changesListener: AliasChangeListenerType): void;
    SubscribeEntityPropertyChanges(entity: AliasEntityType, property: string, changesListener: AliasChangeListenerType): void;
    private checkObjects;
    private __UnsubscribeEntityChanges;
    static UnsubscribeEverything(): void;
    UnsubscribeEverything(): void;
    static UnsubscribeEntityChanges(entity: AliasEntityType, includePropertyChanges?: boolean): void;
    UnsubscribeEntityChanges(entity: AliasEntityType, includePropertyChanges?: boolean): void;
    static UnsubscribeEntityPropertyChanges(entity: AliasEntityType, property: string): void;
    UnsubscribeEntityPropertyChanges(entity: AliasEntityType, property: string): void;
}
