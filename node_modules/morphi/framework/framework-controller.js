"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var typeorm_1 = require("typeorm");
//#endregion
var tnp_core_1 = require("tnp-core");
var decorators_endpoint_class_1 = require("../decorators/decorators-endpoint-class");
var base_crud_model_1 = require("../crud/base-crud-model");
var framework_helpers_1 = require("./framework-helpers");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var framework_context_1 = require("./framework-context");
var updatedWithCtrl = {};
var updatedStaticWithCtrl = {};
function getSing(target) {
    var context = framework_context_1.FrameworkContext.findForTraget(target);
    var res = context.getInstance(target);
    ;
    if (!res) {
        debugger;
    }
    return res;
}
function updateChain(entity, target) {
    if (!tnp_core_1._.isFunction(entity)) {
        return;
    }
    var className = typescript_class_helpers_1.CLASS.getName(entity);
    if (updatedWithCtrl[className]) {
        console.warn("[morphi] Property 'ctrl' already exist for " + className);
        try {
            Object.defineProperty(entity.prototype, 'ctrl', {
                get: function () {
                    return getSing(target);
                }
            });
        }
        catch (error) { }
    }
    else {
        updatedWithCtrl[className] = true;
        Object.defineProperty(entity.prototype, 'ctrl', {
            get: function () {
                return getSing(target);
            }
        });
    }
    if (updatedStaticWithCtrl[className]) {
        console.warn("[morphi] Static property 'ctrl' already exist for " + className);
        try {
            Object.defineProperty(entity, 'ctrl', {
                get: function () {
                    return getSing(target);
                }
            });
        }
        catch (error) { }
    }
    else {
        updatedStaticWithCtrl[className] = true;
        Object.defineProperty(entity, 'ctrl', {
            get: function () {
                return getSing(target);
            }
        });
    }
}
function Controller(options) {
    var _a = options || {}, className = _a.className, realtime = _a.realtime, _b = _a.autoinit, autoinit = _b === void 0 ? false : _b, entity = _a.entity, additionalEntities = _a.additionalEntities;
    return function (target) {
        //#region @backend
        if (realtime) {
            typeorm_1.EventSubscriber()(target);
        }
        //#endregion
        className = framework_helpers_1.classNameVlidation(className, target);
        typescript_class_helpers_1.CLASS.NAME(className)(target);
        // if (Helpers.isBrowser && _.isFunction(rep)) {
        //   target = rep;
        // }
        // debugger
        if (autoinit) {
            // console.log(`AUTOINTI!!!!! Options for ${target.name}, partnt ${target['__proto__'].name}`, options)
            decorators_endpoint_class_1.__ENDPOINT(target)(target);
        }
        else {
            // console.log(`Options for ${target.name}, partnt ${target['__proto__'].name}`, options)
            decorators_endpoint_class_1.ENDPOINT(options)(target);
        }
        if (tnp_core_1._.isArray(additionalEntities)) {
            additionalEntities.forEach(function (c) {
                updateChain(c, target);
            });
        }
        if (tnp_core_1._.isFunction(entity)) {
            updateChain(entity, target);
        }
        return target;
    };
}
exports.Controller = Controller;
//#endregion
var BASE_CONTROLLER = /** @class */ (function (_super) {
    tslib_1.__extends(BASE_CONTROLLER, _super);
    function BASE_CONTROLLER() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#region @backend
    // get db(): { [entities: string]: Repository<any> } {
    //   throw `db method not implemented ${CLASS.getNameFromObject(this)}`
    // }
    // get ctrl(): { [controller: string]: BASE_CONTROLLER<any> } {
    //   throw `ctrl method not implemented ${CLASS.getNameFromObject(this)}`
    // }
    BASE_CONTROLLER.prototype.initExampleDbData = function (isWorker) {
        if (isWorker === void 0) { isWorker = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    BASE_CONTROLLER = tslib_1.__decorate([
        Controller({
            className: 'BASE_CONTROLLER',
            autoinit: true
        })
    ], BASE_CONTROLLER);
    return BASE_CONTROLLER;
}(base_crud_model_1.BaseCRUD));
exports.BASE_CONTROLLER = BASE_CONTROLLER;
//# sourceMappingURL=framework-controller.js.map