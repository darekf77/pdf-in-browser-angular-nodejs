/// <reference types="node" />
import { StartOptions, FrameworkMode } from './framework-models';
import { FrameworkContextBrowserApp } from './framework-context-browser-app';
import { IConnectionOptions } from './framework-models';
import { FrameworkContextBase } from './framework-context-base';
import { FrameworkContextNodeApp } from './framework-context-node-app.backend';
import { URL } from 'url';
export declare class FrameworkContext extends FrameworkContextBase {
    static readonly initFunc: {
        initFN: Function;
        target: Function;
    }[];
    get initFunc(): {
        initFN: Function;
        target: Function;
    }[];
    readonly Providers: Function[];
    private static readonly ngZoneInstance;
    static initNGZone(ngZoneInstance: any): void;
    private static contextByClassName;
    static get contexts(): FrameworkContext[];
    static destroy(context: FrameworkContext): void;
    destroy(): void;
    static findByHost(host: string): FrameworkContext;
    /**
     * Get global context for target
     * @param target class name or class function or class object
     */
    static findForTraget(target: Function | object | string): FrameworkContext;
    private static _isProductionModeAlreadySet;
    private static readonly _isProductionMode;
    static get isProductionMode(): boolean;
    set isProductionMode(v: boolean);
    readonly uri: URL;
    private readonly context;
    readonly allowedHosts: URL[];
    readonly disabledRealtime = false;
    browser: FrameworkContextBrowserApp;
    node: FrameworkContextNodeApp;
    get ngZone(): any;
    get host(): string;
    get controllersClasses(): any[];
    get controllers(): any[];
    private instances;
    getInstance(f: Function): any;
    get entitiesClasses(): Function[];
    get mode(): FrameworkMode;
    get connection(): import("typeorm").Connection;
    get publicAssets(): {
        path: string;
        location: string;
    }[];
    get InitDataPriority(): Function[] | import("./framework-controller").BASE_CONTROLLER<any>[];
    get config(): IConnectionOptions;
    get onlyForBackendRemoteServerAccess(): boolean;
    get workerMode(): boolean;
    get testMode(): boolean;
    constructor(context: StartOptions);
    private prepareEntities;
    private prepareControllers;
    initNode(): Promise<void>;
    initBrowser(): void;
    private initUrl;
    private checkContextIfExists;
}
