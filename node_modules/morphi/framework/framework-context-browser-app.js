"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var symbols_1 = require("../symbols");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var framework_context_base_1 = require("./framework-context-base");
var realtime_1 = require("../realtime");
var FrameworkContextBrowserApp = /** @class */ (function (_super) {
    tslib_1.__extends(FrameworkContextBrowserApp, _super);
    function FrameworkContextBrowserApp(context) {
        var _this = _super.call(this) || this;
        _this.context = context;
        return _this;
    }
    FrameworkContextBrowserApp.prototype.init = function () {
        var _this = this;
        if (tnp_core_1.Helpers.isBrowser
            //#region @backend
            || this.context.onlyForBackendRemoteServerAccess
        //#endregion
        ) {
            var notFound_1 = [];
            var providers = this.context.controllersClasses.filter(function (ctrl) {
                var e = _this.context.initFunc.find(function (e) { return ctrl === e.target; });
                if (e) {
                    // console.log('current controller ', currentCtrl)
                    e.initFN();
                    return true;
                }
                else {
                    var context = ctrl.prototype[symbols_1.SYMBOL.CLASS_DECORATOR_CONTEXT];
                    if (!context) {
                        notFound_1.push(ctrl);
                        return false;
                    }
                    else {
                        context.initFN();
                        return true;
                    }
                }
            });
            notFound_1.forEach(function (ctrl) {
                throw "Decorator \"@ENDPOINT(..)\" is missing on class " + typescript_class_helpers_1.CLASS.getName(ctrl);
            });
            providers.forEach(function (p) { return _this.context.Providers.push(p); });
        }
        if (tnp_core_1.Helpers.isBrowser
            //#region @backend
            || this.context.onlyForBackendRemoteServerAccess
        //#endregion
        ) {
            //@ts-ignore
            this.realtime = new realtime_1.RealtimeBrowser(this.context);
        }
    };
    return FrameworkContextBrowserApp;
}(framework_context_base_1.FrameworkContextBase));
exports.FrameworkContextBrowserApp = FrameworkContextBrowserApp;
//# sourceMappingURL=framework-context-browser-app.js.map