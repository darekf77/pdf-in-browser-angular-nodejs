"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var framework_context_1 = require("./framework-context");
var tnp_core_2 = require("tnp-core");
function start(options) {
    var _this = this;
    //#region @backend
    return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var _a, host, _b, controllers, _c, entities, _d, disabledRealtime, allowedHosts, 
        //#region @backend
        mode, config, InitDataPriority, _e, publicAssets, context;
        return tslib_1.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _a = options, host = _a.host, _b = _a.controllers, controllers = _b === void 0 ? [] : _b, _c = _a.entities, entities = _c === void 0 ? [] : _c, _d = _a.disabledRealtime, disabledRealtime = _d === void 0 ? false : _d, allowedHosts = _a.allowedHosts, mode = _a.mode, config = _a.config, InitDataPriority = _a.InitDataPriority, _e = _a.publicAssets, publicAssets = _e === void 0 ? [] : _e;
                    //#region @backend
                    if (tnp_core_1._.isUndefined(mode)) {
                        mode = 'backend/frontend';
                    }
                    context = new framework_context_1.FrameworkContext({
                        host: host,
                        controllers: controllers,
                        entities: entities,
                        allowedHosts: allowedHosts,
                        //#region @backend
                        mode: mode,
                        disabledRealtime: disabledRealtime,
                        InitDataPriority: InitDataPriority,
                        publicAssets: publicAssets,
                        config: config,
                    });
                    //#region @backend
                    return [4 /*yield*/, context.initNode()];
                case 1:
                    //#region @backend
                    _f.sent();
                    //#endregion
                    context.initBrowser();
                    if (tnp_core_2.Helpers.isBrowser) {
                        return [2 /*return*/, context];
                    }
                    //#region @backend
                    resolve(context);
                    return [2 /*return*/];
            }
        });
    }); });
    //#endregion
}
exports.start = start;
//# sourceMappingURL=framework-start.js.map