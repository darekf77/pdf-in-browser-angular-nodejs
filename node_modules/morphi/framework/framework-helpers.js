"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region @backend
require("reflect-metadata");
var typeorm_1 = require("typeorm");
exports.Connection = typeorm_1.Connection;
var symbols_1 = require("../symbols");
var typescript_class_helpers_1 = require("typescript-class-helpers");
//#endregion
var tnp_core_1 = require("tnp-core");
var framework_context_1 = require("./framework-context");
//#region @backend
function tableNameFrom(entityClass) {
    entityClass = entityClass;
    return "tb_" + entityClass.name.toLowerCase();
}
exports.tableNameFrom = tableNameFrom;
//#endregion
function classNameVlidation(className, target) {
    if (tnp_core_1._.isUndefined(className)) {
        if (framework_context_1.FrameworkContext.isProductionMode) {
            throw "[Morphi]\n  Please provide \"className\" property for each Controller and Entity:\n\n      @Morphi.Controller({ className: 'MyExampleCtrl'  })\n      class MyExampleCtrl {\n        ...\n      }\n\n      @Morphi.Entity({ className: 'MyExampleEntity'  })\n      class MyExampleEntity {\n        ...\n      }\n\nNotice that minified javascript code does not preserve\nFunctions/Classes names.\n\n    ";
        }
        className = target.name;
    }
    return className;
}
exports.classNameVlidation = classNameVlidation;
//#region @backend
function repositoryFrom(connection, entityFN, repoFn) {
    if (!connection) {
        console.error("[Morphi][repositoryFrom] no connection!\nPlease check your Morphi.Repository(...) decorators ", entityFN, repoFn);
        return;
    }
    var context = framework_context_1.FrameworkContext.findForTraget(entityFN);
    var repo;
    if (!!entityFN && !entityFN[symbols_1.SYMBOL.HAS_TABLE_IN_DB]) {
        if (tnp_core_1._.isFunction(repoFn)) {
            var repo_1 = context.getInstance(repoFn);
            return repo_1;
        }
        console.warn("Repository function not abailable for " + typescript_class_helpers_1.CLASS.getName(entityFN));
        return;
    }
    if (repoFn) {
        repo = connection.getCustomRepository(repoFn);
        var existedRepo = context.getInstance(repoFn);
    }
    else {
        repo = connection.getRepository(entityFN);
    }
    repo['_'] = {};
    repo['__'] = {};
    var compolexProperties = repo.globalAliases;
    if (Array.isArray(compolexProperties)) {
        compolexProperties.forEach(function (alias) {
            repo['__'][alias] = {};
            var describedProps = typescript_class_helpers_1.CLASS.describeProperites(entityFN);
            // console.log(`describedProps  "${describedProps}" for ${entity.name}`)
            describedProps.concat(compolexProperties).forEach(function (prop) {
                repo['__'][alias][prop] = alias + "." + prop; // TODO_NOT_IMPORTANT temp solution
            });
            var props = typescript_class_helpers_1.CLASS.describeProperites(entityFN);
            // console.log(`props  "${props}" for ${entity.name}`)
            props.forEach(function (prop) {
                repo['__'][alias][prop] = alias + "." + prop; // TODO_NOT_IMPORTANT ideal solution
            });
        });
        compolexProperties.forEach(function (alias) {
            repo['_'][alias] = alias; // TODO_NOT_IMPORTANT make it getter with reference
        });
    }
    return repo;
}
exports.repositoryFrom = repositoryFrom;
//#endregion
//# sourceMappingURL=framework-helpers.js.map