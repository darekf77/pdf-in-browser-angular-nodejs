import { FormlyArrayTransformFn } from '../crud/fromly';
import { Mapping, Models } from 'ng2-rest';
import { BaseCRUD, ModelDataConfig } from '../crud';
export interface IBASE_ENTITY extends BASE_ENTITY<any> {
}
export declare function Entity<T = {}>(options?: {
    className?: string;
    classNameInBrowser?: string;
    defaultModelValues?: Mapping.ModelValue<T>;
    mapping?: Mapping.Mapping<T>;
    uniqueKeyProp?: (keyof T);
    classFamily?: string;
    additionalMapping?: {
        [lodashPathes: string]: string | [string];
    };
    tree?: 'closure-table';
    formly?: {
        transformFn?: FormlyArrayTransformFn;
        include?: (keyof T)[];
        exclude?: (keyof T)[];
    };
    createTable?: boolean;
    browserTransformFn?: (entity: T, mdc?: ModelDataConfig) => void;
}): (target: any) => void;
export declare abstract class BASE_ENTITY<T = any, TRAW = T, CTRL extends BaseCRUD<T> = any> {
    private static __updatesInProgress;
    abstract id: number | string;
    modelDataConfig?: ModelDataConfig;
    /**
     * injected controller for entity for easy coding
     */
    ctrl: CTRL;
    static ctrl: any;
    /**
     * keep backend data here for getters, function etc
     */
    browser: Partial<IBASE_ENTITY>;
    isListeningToRealtimeChanges(property?: (keyof T)): boolean;
    unsubscribeRealtimeUpdatesOfProperties(): void;
    unsubscribeRealtimeUpdates(property?: (keyof T) | (keyof T)[]): void;
    subscribeRealtimeUpdates<CALLBACK = T>(options?: {
        modelDataConfig?: ModelDataConfig;
        /**
         * Only listen realtime update when condition function  true
         */
        afterMergeCallback?: (updatedData: T) => any;
        /**
         * Listen for realtime listening
         */
        property?: (keyof T);
        /**
         * Only for listening and autoupdate of buffored property changes
         * Perfect for logs
         */
        bufforProperty?: (keyof T);
        /**
         * Custom update function to get new value of entity of entity property
         */
        update?: (any?: any) => Promise<Models.HttpResponse<CALLBACK>>;
        /**
         * Trigers when realtime update new data.
         * This function helpse merging new entity changes.
         */
        callback?: (response: Models.HttpResponse<CALLBACK>) => CALLBACK | void;
    }): void;
}
