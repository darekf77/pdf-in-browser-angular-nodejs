"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var express = require("express");
var symbols_1 = require("../symbols");
var cors = require("cors");
var bodyParser = require("body-parser");
var cookieParser = require("cookie-parser");
var methodOverride = require("method-override");
var fileUpload = require("express-fileupload");
var typeorm_1 = require("typeorm");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var framework_context_base_1 = require("./framework-context-base");
var realtime_1 = require("../realtime");
var FrameworkContextNodeApp = /** @class */ (function (_super) {
    tslib_1.__extends(FrameworkContextNodeApp, _super);
    function FrameworkContextNodeApp(context) {
        var _this = _super.call(this) || this;
        _this.context = context;
        _this.activeRoutes = [];
        return _this;
    }
    FrameworkContextNodeApp.prototype.initConnection = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var con, connectionExists, error_1, connections;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this.context.mode === 'backend/frontend' || this.context.mode === 'tests')) return [3 /*break*/, 8];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 5, , 6]);
                        return [4 /*yield*/, typeorm_1.getConnection()];
                    case 2:
                        con = _a.sent();
                        connectionExists = !!(con);
                        if (!connectionExists) return [3 /*break*/, 4];
                        console.log('Connection exists');
                        return [4 /*yield*/, con.close()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [3 /*break*/, 6];
                    case 5:
                        error_1 = _a.sent();
                        return [3 /*break*/, 6];
                    case 6:
                        ;
                        return [4 /*yield*/, typeorm_1.createConnections([this.context.config])];
                    case 7:
                        connections = _a.sent();
                        // @ts-ignore
                        this.connection = connections[0];
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    FrameworkContextNodeApp.prototype.init = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var h, instancesOfControllers, index, controllerInstance;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.context.onlyForBackendRemoteServerAccess) return [3 /*break*/, 1];
                        // @ts-ignore
                        this.app = {};
                        return [3 /*break*/, 6];
                    case 1:
                        // @ts-ignore
                        this.app = express();
                        this.initMidleware();
                        h = new tnp_core_1.http.Server(this.app);
                        // @ts-ignore
                        this.httpServer = h;
                        if (!this.context.testMode) {
                            h.listen(this.context.uri.port, function () {
                                console.log("Server listening on port: " + _this.context.uri.port + ", hostname: " + _this.context.uri.pathname + ",\n              env: " + _this.app.settings.env + "\n              ");
                            });
                        }
                        return [4 /*yield*/, this.initConnection()];
                    case 2:
                        _a.sent();
                        this.initDecoratorsFunctions();
                        this.writeActiveRoutes(this.context.workerMode);
                        this.context.publicAssets.forEach(function (asset) {
                            _this.app.use(asset.path, express.static(asset.location));
                        });
                        // @ts-ignore
                        this.realtime = new realtime_1.RealtimeNodejs(this.context);
                        instancesOfControllers = this.context
                            .controllers
                            .filter(function (f) { return tnp_core_1._.isFunction(f.initExampleDbData); });
                        index = 0;
                        _a.label = 3;
                    case 3:
                        if (!(index < instancesOfControllers.length)) return [3 /*break*/, 6];
                        controllerInstance = instancesOfControllers[index];
                        return [4 /*yield*/, controllerInstance.initExampleDbData(this.context.workerMode)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        index++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    FrameworkContextNodeApp.prototype.initDecoratorsFunctions = function () {
        var _this = this;
        this.context.initFunc.filter(function (e) {
            var currentCtrl = _this.context.controllersClasses.find(function (ctrl) { return ctrl === e.target; });
            if (currentCtrl) {
                e.initFN();
                (function (controller) {
                    var instance = _this.context.getInstance(controller);
                    var c = typescript_class_helpers_1.CLASS.getConfig(currentCtrl)[0];
                    c.injections.forEach(function (inj) {
                        Object.defineProperty(instance, inj.propertyName, { get: inj.getter });
                    });
                    // CLASS.setSing letonObj(controller, new (controller as any)());
                    // Helpers.isBrowser && console.log(`[morphi] Sing leton cleated for "${controller && controller.name}"`, CLASS.getSing leton(controller))
                })(currentCtrl);
            }
        });
    };
    FrameworkContextNodeApp.prototype.writeActiveRoutes = function (isWorker) {
        var _this = this;
        if (isWorker === void 0) { isWorker = false; }
        var routes = this.activeRoutes.map(function (_a) {
            var method = _a.method, routePath = _a.routePath;
            return method.toUpperCase() + ":    " + _this.context.uri.href.replace(/\/$/, '') + routePath;
        });
        var instanceClass = tnp_core_1._.first(this.context.controllersClasses);
        var instance = instanceClass && this.context.getInstance(instanceClass);
        tnp_core_1.fse.writeJSONSync(tnp_core_1.path.join(process.cwd(), "tmp-routes" + (isWorker ? '--worker--'
            + tnp_core_1.path.basename(instance.filename).replace(/\.js$/, '')
            : '') + ".json"), routes, {
            spaces: 2,
            encoding: 'utf8'
        });
    };
    FrameworkContextNodeApp.prototype.initMidleware = function () {
        var app = this.app;
        app.use(fileUpload());
        app.use(bodyParser.urlencoded({ extended: true }));
        app.use(bodyParser.json());
        app.use(methodOverride());
        app.use(cookieParser());
        app.use(cors());
        (function () {
            app.use(function (req, res, next) {
                res.set('Access-Control-Expose-Headers', [
                    'Content-Type',
                    'Authorization',
                    'X-Requested-With',
                    symbols_1.SYMBOL.X_TOTAL_COUNT,
                    symbols_1.SYMBOL.MAPPING_CONFIG_HEADER,
                    symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_BODY,
                    symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_QUERY_PARAM
                ].join(', '));
                next();
            });
        })();
    };
    return FrameworkContextNodeApp;
}(framework_context_base_1.FrameworkContextBase));
exports.FrameworkContextNodeApp = FrameworkContextNodeApp;
//# sourceMappingURL=framework-context-node-app.backend.js.map