"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var framework_context_browser_app_1 = require("./framework-context-browser-app");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var framework_context_base_1 = require("./framework-context-base");
//#region @backend
var framework_context_node_app_backend_1 = require("./framework-context-node-app.backend");
var url_1 = require("url");
//#endregion
var FrameworkContext = /** @class */ (function (_super) {
    tslib_1.__extends(FrameworkContext, _super);
    //#endregion
    function FrameworkContext(context) {
        var _this = _super.call(this) || this;
        // /**
        //  * @deprecated
        //  */
        // public static get Providers() {
        //   return _.sortedUniq(FrameworkContext.contexts.reduce((a, b) => {
        //     return a.concat(b.Providers);
        //   }, []))
        // }
        _this.Providers = [];
        _this.allowedHosts = [];
        _this.disabledRealtime = false;
        _this.instances = {};
        _this.context = context;
        _this.initUrl();
        _this.checkContextIfExists();
        validateClassFunctions(context.controllers, context.entities);
        _this.prepareControllers();
        if (tnp_core_1._.isArray(context.allowedHosts)) {
            context.allowedHosts.forEach(function (h) { return _this.allowedHosts.push(new url_1.URL(h)); });
        }
        if (tnp_core_1._.isBoolean(context.disabledRealtime) && context.disabledRealtime) {
            // @ts-ignore
            _this.disabledRealtime = true;
        }
        //#region @backend
        validateConfigAndAssignEntites(context.config, _this.mode, _this.entitiesClasses);
        //#endregion
        _this.prepareEntities();
        return _this;
    }
    Object.defineProperty(FrameworkContext.prototype, "initFunc", {
        get: function () {
            var _this = this;
            return FrameworkContext.initFunc.filter(function (a) { return _this.controllersClasses.includes(a.target); });
        },
        enumerable: true,
        configurable: true
    });
    FrameworkContext.initNGZone = function (ngZoneInstance) {
        // @ts-ignore
        FrameworkContext.ngZoneInstance = ngZoneInstance;
    };
    Object.defineProperty(FrameworkContext, "contexts", {
        get: function () {
            var res = tnp_core_1._.sortedUniq(Object
                .keys(FrameworkContext.contextByClassName)
                .map(function (className) { return FrameworkContext.contextByClassName[className]; }));
            return res;
        },
        enumerable: true,
        configurable: true
    });
    FrameworkContext.destroy = function (context) {
        Object
            .keys(FrameworkContext.contextByClassName)
            .forEach(function (className) {
            var c = FrameworkContext.contextByClassName[className];
            if (c === context) {
                delete FrameworkContext.contextByClassName[className];
            }
        });
    };
    FrameworkContext.prototype.destroy = function () {
        FrameworkContext.destroy(this);
    };
    FrameworkContext.findByHost = function (host) {
        var uri = new url_1.URL(host);
        return FrameworkContext.contexts.find(function (c) { return c.uri.host === uri.host; });
    };
    /**
     * Get global context for target
     * @param target class name or class function or class object
     */
    FrameworkContext.findForTraget = function (target) {
        var className;
        if (tnp_core_1._.isArray(target)) {
            throw "[morphi][findForTraget] incorrect target:\n      shoould be string, function or object\n      ";
        }
        if (tnp_core_1._.isFunction(target)) {
            className = typescript_class_helpers_1.CLASS.getName(target);
        }
        else if (tnp_core_1._.isObject(target)) {
            className = typescript_class_helpers_1.CLASS.getNameFromObject(target);
        }
        else if (tnp_core_1._.isString(target)) {
            className = target;
        }
        if (!className) {
            throw "[morphi][findForTarget] incorrect class name: \"" + className + "\"";
        }
        var result = FrameworkContext.contextByClassName[className];
        if (!result) {
            //#region @backend
            if (FrameworkContext.contexts.length === 1 &&
                tnp_core_1._.first(FrameworkContext.contexts).mode === 'backend/frontend-worker') {
                return tnp_core_1._.first(FrameworkContext.contexts);
            }
            //#endregion
            // console.log(`FrameworkContext.contexts.length: ${FrameworkContext.contexts.length}`)
            // console.trace('-' + className + '- context length: ' + FrameworkContext.contexts.length)
            throw "[morphi][findForTarget] not able to find target by name: \"" + className + "\"";
        }
        return result;
    };
    Object.defineProperty(FrameworkContext, "isProductionMode", {
        get: function () {
            return FrameworkContext._isProductionMode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "isProductionMode", {
        set: function (v) {
            if (!FrameworkContext._isProductionModeAlreadySet) {
                FrameworkContext._isProductionModeAlreadySet = true;
            }
            else {
                throw "[Morphi] production mode already set";
            }
            // @ts-ignore
            FrameworkContext._isProductionMode = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "ngZone", {
        //#endregion
        get: function () {
            return FrameworkContext.ngZoneInstance;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "host", {
        get: function () {
            return this.context.host;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "controllersClasses", {
        get: function () {
            return tslib_1.__spreadArrays(this.context.controllers);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "controllers", {
        get: function () {
            var _this = this;
            var ctrls = this.context.controllers;
            //#region @backend
            if (this.context.InitDataPriority) {
                ctrls = tslib_1.__spreadArrays((this.context.InitDataPriority ? this.context.InitDataPriority : []), (ctrls.filter(function (f) { return !_this.context.InitDataPriority.includes(f); })));
            }
            //#endregion
            return ctrls.map(function (c) { return _this.getInstance(c); }).filter(function (f) { return !!f; });
        },
        enumerable: true,
        configurable: true
    });
    FrameworkContext.prototype.getInstance = function (f) {
        var className = typescript_class_helpers_1.CLASS.getName(f);
        if (!this.instances[className]) {
            this.instances[className] = new f();
        }
        return this.instances[className];
    };
    Object.defineProperty(FrameworkContext.prototype, "entitiesClasses", {
        get: function () {
            return this.context.entities || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "mode", {
        //#region @backend
        get: function () {
            return this.context.mode;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "connection", {
        get: function () {
            var _a;
            return (_a = this.node) === null || _a === void 0 ? void 0 : _a.connection;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "publicAssets", {
        get: function () {
            return this.context.publicAssets || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "InitDataPriority", {
        get: function () {
            return this.context.InitDataPriority || [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "config", {
        get: function () {
            return this.context.config;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "onlyForBackendRemoteServerAccess", {
        get: function () {
            return this.context.mode === 'remote-backend';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "workerMode", {
        get: function () {
            return this.context.mode === 'backend/frontend-worker';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FrameworkContext.prototype, "testMode", {
        get: function () {
            return this.context.mode === 'tests';
        },
        enumerable: true,
        configurable: true
    });
    FrameworkContext.prototype.prepareEntities = function () {
        var _this = this;
        //#region @backend
        if (this.context.config) {
            this.context.config['entities'] = this.entitiesClasses;
        }
        ;
        //#endregion
        this.entitiesClasses
            .forEach(function (c) {
            var className = typescript_class_helpers_1.CLASS.getName(c);
            if (FrameworkContext.contextByClassName[className]) {
                throw "[morphi][frameworkcontext] Context already register for class \"" + className + "\"\nThis is class names based framework....\nYou can create subclass from this class to fix this\n\n@Morphi.Entity({\n  ...\n  className: '" + className + "Extended'\n  ...\n})\nclass " + className + "Extended extends " + className + " {\n  ...\n}\n\n          ";
            }
            FrameworkContext.contextByClassName[className] = _this;
        });
    };
    FrameworkContext.prototype.prepareControllers = function () {
        var _this = this;
        // console.log('PREPRARE CONTROLLERS !!!')
        this.context.controllers = tnp_core_1._.sortedUniq(this.context.controllers);
        this.context.controllers
            .forEach(function (c) {
            var className = typescript_class_helpers_1.CLASS.getName(c);
            if (FrameworkContext.contextByClassName[className]) {
                throw "[morphi][frameworkcontext] Context already register for class \"" + className + "\"\nThis is class names based framework....\nYou can create subclass from this class to fix this\n\n@Morphi.Controller({\n  ...\n  className: '" + className + "Extended'\n  ...\n})\nclass " + className + "Extended extends " + className + " {\n  ...\n}\n\n          ";
            }
            FrameworkContext.contextByClassName[className] = _this;
        });
    };
    FrameworkContext.prototype.initNode = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!tnp_core_1.Helpers.isNode) return [3 /*break*/, 2];
                        this.node = new framework_context_node_app_backend_1.FrameworkContextNodeApp(this);
                        return [4 /*yield*/, this.node.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    FrameworkContext.prototype.initBrowser = function () {
        if (tnp_core_1.Helpers.isBrowser && tnp_core_1._.isUndefined(this.ngZone) && !!window['ng']) {
            console.warn("Please probide ngZone instance in angular apps");
        }
        this.browser = new framework_context_browser_app_1.FrameworkContextBrowserApp(this);
        this.browser.init();
    };
    FrameworkContext.prototype.initUrl = function () {
        // @ts-ignore
        this.uri = new url_1.URL(this.host);
    };
    FrameworkContext.prototype.checkContextIfExists = function () {
        var _this = this;
        if (FrameworkContext.contexts.includes(this)) {
            throw "[framework-context] Context already exists";
        }
        if (FrameworkContext.contexts.find(function (c) { return c.host === _this.host; })) {
            throw "[framework-context] Context with host " + this.host + " already exists";
        }
    };
    FrameworkContext.initFunc = [];
    FrameworkContext.contextByClassName = {};
    FrameworkContext._isProductionModeAlreadySet = false;
    FrameworkContext._isProductionMode = false;
    return FrameworkContext;
}(framework_context_base_1.FrameworkContextBase));
exports.FrameworkContext = FrameworkContext;
//#region @backend
function validateConfigAndAssignEntites(config, mode, entities) {
    if (!config) {
        config = {};
        if (mode === 'backend/frontend') {
            console.error("\n\n      Missing config for backend:\n\n\n      Morphi.init({\n        ...\n        config: <YOUR DB CONFIG HERE>\n        ...\n      })\n\n    ");
        }
    }
}
//#endregion
function validateClassFunctions(controllers, entities) {
    if (tnp_core_1._.isArray(controllers) && controllers.filter(function (f) { return !tnp_core_1._.isFunction(f); }).length > 0) {
        console.error('controllers', controllers);
        throw "\n\nIncorect value for property \"controllers\" inside Morphi.Init(...)\n\n";
    }
    if (tnp_core_1._.isArray(entities) && entities.filter(function (f) { return !tnp_core_1._.isFunction(f); }).length > 0) {
        console.error('entites', entities);
        throw "\n\nIncorect value for property \"entities\" inside Morphi.Init(...)\n\n";
    }
}
//# sourceMappingURL=framework-context.js.map