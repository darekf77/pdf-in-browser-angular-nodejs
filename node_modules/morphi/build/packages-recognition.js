"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var browser_code_cut_1 = require("./browser-code-cut");
var tnp_config_1 = require("tnp-config");
exports.FILE_NAME_ISOMORPHIC_PACKAGES = 'tmp-isomorphic-packages.json';
var PackagesRecognition = /** @class */ (function () {
    function PackagesRecognition(cwd) {
        this.cwd = cwd;
    }
    PackagesRecognition.From = function (cwd) {
        return new PackagesRecognition(tnp_core_1.crossPlatformPath(cwd));
    };
    Object.defineProperty(PackagesRecognition.prototype, "count", {
        get: function () {
            return tnp_core_1._.isArray(this.recognizedPackages) ? this.recognizedPackages.length : 0;
        },
        enumerable: true,
        configurable: true
    });
    PackagesRecognition.prototype.start = function (force, reasonToSearch) {
        var _this = this;
        tnp_core_1.Helpers.log("[morphi][force = " + force + "] " + reasonToSearch);
        var pjPath = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, exports.FILE_NAME_ISOMORPHIC_PACKAGES));
        if (!tnp_core_1.Helpers.exists(pjPath)) {
            tnp_core_1.Helpers.writeJson(pjPath, {});
        }
        if (!force) {
            try {
                var pj = tnp_core_1.Helpers.readJson(pjPath);
                if (tnp_core_1._.isArray(pj[tnp_config_1.config.array.isomorphicPackages])) {
                    this.recognizedPackages = pj[tnp_config_1.config.array.isomorphicPackages];
                    browser_code_cut_1.BrowserCodeCut.IsomorphicLibs = tnp_core_1._.cloneDeep(this.recognizedPackages);
                    tnp_core_1.Helpers.log("[morphi] Recognized (" + this.recognizedPackages + ") in " + pjPath);
                    return;
                }
            }
            catch (error) {
                tnp_core_1.Helpers.log("[morphi] ERROR not recognized in");
            }
        }
        var node_modules = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, tnp_config_1.config.folder.node_modules));
        var linksToFolders = tnp_core_1.Helpers.linksFrom(node_modules, { linksOnlyTo: 'folders' });
        var folders = tslib_1.__spreadArrays(tnp_core_1.Helpers.foldersFrom(node_modules), linksToFolders);
        folders = folders
            .map(function (f) { return tnp_core_1.path.basename(f); })
            .filter(function (packageName) {
            tnp_core_1.Helpers.log("Checking package node_modules/" + packageName);
            try {
                return _this.checkIsomorphic(node_modules, packageName);
            }
            catch (error) {
                return false;
            }
        });
        this.recognizedPackages = folders;
        this.updateCurrentPackageJson();
    };
    PackagesRecognition.prototype.updateCurrentPackageJson = function () {
        tnp_core_1.Helpers.log('[morphi] updateCurrentPackageJson');
        try {
            var pjPath = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, exports.FILE_NAME_ISOMORPHIC_PACKAGES));
            if (!tnp_core_1.Helpers.exists(pjPath)) {
                tnp_core_1.Helpers.writeJson(pjPath, {});
            }
            var pj = tnp_core_1.Helpers.readJson(pjPath);
            pj[tnp_config_1.config.array.isomorphicPackages] = this.recognizedPackages;
            tnp_core_1.Helpers.writeJson(pjPath, pj);
            browser_code_cut_1.BrowserCodeCut.IsomorphicLibs = tnp_core_1._.cloneDeep(this.recognizedPackages);
        }
        catch (e) {
            tnp_core_1.Helpers.log("[morphi]", e);
            tnp_core_1.Helpers.log("[morphi] Error during update ismorphic packages list cache");
        }
    };
    PackagesRecognition.prototype.checkIsomorphic = function (node_modules, packageName) {
        var browser = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(tnp_core_1.crossPlatformPath(node_modules), packageName, tnp_config_1.config.folder.browser));
        return tnp_core_1.Helpers.exists(browser);
    };
    PackagesRecognition.FILE_NAME_ISOMORPHIC_PACKAGES = exports.FILE_NAME_ISOMORPHIC_PACKAGES;
    return PackagesRecognition;
}());
exports.PackagesRecognition = PackagesRecognition;
//#endregion
//# sourceMappingURL=packages-recognition.js.map