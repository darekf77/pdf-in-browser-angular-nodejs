"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var helpers_1 = require("../helpers");
var browser_code_cut_1 = require("./browser-code-cut");
var compilation_backend_1 = require("./compilation-backend");
var incremental_compiler_1 = require("incremental-compiler");
var BroswerCompilation = /** @class */ (function (_super) {
    tslib_1.__extends(BroswerCompilation, _super);
    function BroswerCompilation(
    /**
     * Relative path for browser temporary src
     * Ex.   tmp-src-dist-browser
     */
    sourceOutBrowser, outFolder, location, cwd, backendOutFolder, customCompiler) {
        var _this = _super.call(this, outFolder, location, cwd) || this;
        _this.sourceOutBrowser = sourceOutBrowser;
        _this.backendOutFolder = backendOutFolder;
        _this.customCompiler = customCompiler;
        _this.compilerName = 'Browser standard compiler';
        return _this;
    }
    Object.defineProperty(BroswerCompilation.prototype, "compilationFolderPath", {
        get: function () {
            if (tnp_core_1._.isString(this.sourceOutBrowser) && tnp_core_1._.isString(this.cwd)) {
                return tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.sourceOutBrowser));
            }
        },
        enumerable: true,
        configurable: true
    });
    BroswerCompilation.prototype.syncAction = function (files) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var dereference, source, dest;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // console.log('[morphi] syncAction', files)
                        if (tnp_core_1.fse.existsSync(this.compilationFolderPath)) {
                            tnp_core_1.rimraf.sync(this.compilationFolderPath);
                        }
                        tnp_core_1.fse.mkdirpSync(this.compilationFolderPath);
                        dereference = true;
                        // console.log(`copying ${path.join(this.cwd, this.location)}/ to  ${this.compilationFolderPath} dereference: ${dereference},`)
                        // TODO_NOT_IMPORTANT this may be replaced by filesPathes
                        helpers_1.MorphiHelpers.System.Operations.tryCopyFrom(tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.location)) + "/", this.compilationFolderPath, {
                            dereference: dereference,
                            filter: function (src, dest) {
                                return copyToBrowserSrcCodition(src);
                            }
                        });
                        // console.log('browser', this.filesAndFoldesRelativePathes.slice(0, 5))
                        this.initCodeCut(files);
                        source = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.tsConfigBrowserName));
                        dest = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.sourceOutBrowser, this.tsConfigName));
                        tnp_core_1.fse.copyFileSync(source, dest);
                        this.codecut.files();
                        return [4 /*yield*/, this.compile()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BroswerCompilation.prototype.initCodeCut = function (filesPathes) {
        var _this = this;
        filesPathes = filesPathes.map(function (f) {
            f = tnp_core_1.crossPlatformPath(f);
            return f.replace(tnp_core_1.crossPlatformPath(tnp_core_1.path.join(_this.cwd, _this.location)), '').replace(/^\//, '');
        });
        this.codecut = new browser_code_cut_1.CodeCut(this.compilationFolderPath, filesPathes, {
            replacements: [
                ["@backendFunc",
                    "return undefined;\n"],
                "@backend"
            ]
        });
    };
    BroswerCompilation.prototype.asyncAction = function (event) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var absoluteFilePath, relativeFilePath, destinationFilePath, orgFil;
            return tslib_1.__generator(this, function (_a) {
                absoluteFilePath = tnp_core_1.crossPlatformPath(event.fileAbsolutePath);
                relativeFilePath = absoluteFilePath.replace(tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.location)), '');
                destinationFilePath = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.sourceOutBrowser, relativeFilePath));
                // console.log('this.cwd', this.cwd)
                // console.log('this.sourceOutBrowser', this.sourceOutBrowser)
                // console.log('destinationFilePath', destinationFilePath)
                // console.log('[asyncAction][morphi][cb] absoluteFilePath', absoluteFilePath)
                // console.log('[asyncAction][morphi][cb] destinationFilePath', destinationFilePath)
                if (copyToBrowserSrcCodition(absoluteFilePath)) {
                    if (event.eventName === 'unlink') {
                        if (tnp_core_1.fse.existsSync(destinationFilePath)) {
                            tnp_core_1.fse.unlinkSync(destinationFilePath);
                        }
                        if (['module', 'component']
                            .map(function (c) { return "." + c + ".ts"; })
                            .filter(function (c) { return destinationFilePath.endsWith(c); }).length > 0) {
                            orgFil = destinationFilePath + ".orginal";
                            if (tnp_core_1.fse.existsSync(orgFil)) {
                                tnp_core_1.fse.unlinkSync(orgFil);
                            }
                        }
                    }
                    else {
                        if (tnp_core_1.fse.existsSync(absoluteFilePath)) {
                            if (!tnp_core_1.fse.existsSync(tnp_core_1.path.dirname(destinationFilePath))) {
                                tnp_core_1.fse.mkdirpSync(tnp_core_1.path.dirname(destinationFilePath));
                            }
                            if (tnp_core_1.fse.existsSync(destinationFilePath) && tnp_core_1.fse.lstatSync(destinationFilePath).isDirectory()) {
                                tnp_core_1.fse.removeSync(destinationFilePath);
                            }
                            tnp_core_1.fse.copyFileSync(absoluteFilePath, destinationFilePath);
                        }
                    }
                    this.codecut.file(destinationFilePath);
                }
                return [2 /*return*/];
            });
        });
    };
    BroswerCompilation.prototype.compile = function (watch) {
        if (watch === void 0) { watch = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tscCompilation({
                            cwd: this.compilationFolderPath,
                            watch: watch,
                            outDir: "../" + this.backendOutFolder + "/" + this.outFolder,
                            generateDeclarations: true,
                            tsExe: this.customCompiler ? this.customCompiler : void 0
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    tslib_1.__decorate([
        incremental_compiler_1.IncCompiler.methods.AsyncAction(),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [incremental_compiler_1.IncCompiler.Change]),
        tslib_1.__metadata("design:returntype", Promise)
    ], BroswerCompilation.prototype, "asyncAction", null);
    BroswerCompilation = tslib_1.__decorate([
        incremental_compiler_1.IncCompiler.Class({ className: 'BroswerCompilation' }),
        tslib_1.__metadata("design:paramtypes", [String, String, String, String, String, String])
    ], BroswerCompilation);
    return BroswerCompilation;
}(compilation_backend_1.BackendCompilation));
exports.BroswerCompilation = BroswerCompilation;
function copyToBrowserSrcCodition(absoluteFilePath) {
    return !absoluteFilePath.endsWith('.backend.ts') && !absoluteFilePath.endsWith('.spec.ts');
}
//#endregion
//# sourceMappingURL=compilation-browser.js.map