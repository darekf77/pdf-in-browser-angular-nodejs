"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region @backend
var tnp_core_1 = require("tnp-core");
var CodeCut = /** @class */ (function () {
    function CodeCut(cwd, filesPathes, options) {
        this.cwd = cwd;
        this.filesPathes = filesPathes;
        this.options = options;
        // console.log('init code cut ', this.options)
        this.browserCodeCut = BrowserCodeCut;
    }
    CodeCut.prototype.files = function () {
        var _this = this;
        // console.log('options in fiels', this.options)
        this.filesPathes.forEach(function (relativePathToFile) {
            var absolutePathToFile = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(_this.cwd, relativePathToFile));
            // console.log('process', absolutePathToFile)
            _this.file(absolutePathToFile);
        });
    };
    CodeCut.prototype.file = function (absolutePathToFile) {
        // console.log('options here ', options)
        return new (this.browserCodeCut)(absolutePathToFile)
            .flatTypescriptImportExport('import')
            .flatTypescriptImportExport('export')
            .replaceRegionsForIsomorphicLib(tnp_core_1._.cloneDeep(this.options))
            .replaceRegionsFromTsImportExport('import')
            .replaceRegionsFromTsImportExport('export')
            .replaceRegionsFromJSrequire()
            .saveOrDelete();
    };
    return CodeCut;
}());
exports.CodeCut = CodeCut;
var BrowserCodeCut = /** @class */ (function () {
    function BrowserCodeCut(absoluteFilePath) {
        this.absoluteFilePath = absoluteFilePath;
        this.browserString = 'browser';
        this.isDebuggingFile = false;
        this.rawContent = tnp_core_1.fse.existsSync(absoluteFilePath) ?
            tnp_core_1.fse.readFileSync(absoluteFilePath, 'utf8').toString()
            : '';
    }
    BrowserCodeCut.resolveAndAddIsomorphicLibs = function (libsNames) {
        this.IsomorphicLibs = this.IsomorphicLibs.concat(libsNames);
    };
    Object.defineProperty(BrowserCodeCut.prototype, "isEmpty", {
        get: function () {
            return this.rawContent.replace(/\s/g, '').trim() === '';
        },
        enumerable: true,
        configurable: true
    });
    BrowserCodeCut.prototype.debug = function (fileName) {
        // console.log('path.basename(this.absoluteFilePath)',path.basename(this.absoluteFilePath))
        this.isDebuggingFile = (tnp_core_1.path.basename(this.absoluteFilePath) === fileName);
    };
    BrowserCodeCut.prototype.flatTypescriptImportExport = function (usage) {
        if (!this.absoluteFilePath.endsWith('.ts')) {
            return this;
        }
        var fileContent = this.rawContent;
        var regexParialUsage = new RegExp(usage + "\\s+{");
        var regexFrom = new RegExp("from\\s+(\\'|\\\").+(\\'|\\\")");
        if (tnp_core_1._.isString(fileContent)) {
            var joiningLine_1 = false;
            var output_1 = '';
            fileContent.split(/\r?\n/).forEach(function (line) {
                var importOrExportPart = regexParialUsage.test(line);
                var fromLibPart = regexFrom.test(line);
                // console.log(`I(${regexParialUsage.test(line)}) F(${regexFrom.test(line)})\t: ${line} `)
                if (joiningLine_1) {
                    if (!importOrExportPart && !fromLibPart) {
                        output_1 += " " + line;
                    }
                    else if (fromLibPart) {
                        joiningLine_1 = false;
                        output_1 += " " + line + "\n";
                    }
                }
                else {
                    joiningLine_1 = (importOrExportPart && !fromLibPart);
                    // if (joiningLine) console.log('line', line)
                    output_1 += "\n" + line;
                }
            });
            this.rawContent = output_1;
        }
        return this;
    };
    Object.defineProperty(BrowserCodeCut.prototype, "resolvePackageNameFrom", {
        /**
         * Get "npm package name" from line of code in .ts or .js files
         */
        get: function () {
            var self = this;
            return {
                JSrequired: function (rawImport) {
                    rawImport = rawImport.replace(new RegExp("require\\((\\'|\\\")"), '');
                    rawImport = rawImport.replace(new RegExp("(\\'|\\\")\\)"), '');
                    rawImport = rawImport.trim();
                    if (rawImport.startsWith("./"))
                        return void 0;
                    if (rawImport.startsWith("../"))
                        return void 0;
                    var fisrtName = rawImport.match(new RegExp("[a-zA-z]+\\/"));
                    var res = (tnp_core_1._.isArray(fisrtName) && fisrtName.length > 0) ? fisrtName[0] : rawImport;
                    if (res.endsWith('/') && res.length > 1) {
                        res = res.substring(0, res.length - 1);
                    }
                    return res;
                },
                TSimportExport: function (rawImport, usage) {
                    rawImport = rawImport.replace(new RegExp(usage + ".+from\\s+"), '');
                    rawImport = rawImport.replace(new RegExp("('|\")", 'g'), '').trim();
                    if (rawImport.startsWith("./"))
                        return void 0;
                    if (rawImport.startsWith("../"))
                        return void 0;
                    var fisrtName = rawImport.match(new RegExp("([a-zA-z]|-)+\\/"));
                    var res = (tnp_core_1._.isArray(fisrtName) && fisrtName.length > 0) ? fisrtName[0] : rawImport;
                    if (res.endsWith('/') && res.length > 1) {
                        res = res.substring(0, res.length - 1);
                    }
                    return res;
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    /**
      * Check if package of isomorphic-lib type
      * @param packageName
      */
    BrowserCodeCut.prototype.getInlinePackage = function (packageName) {
        // console.log('MORPHI this.isomorphicLibs', this.isomorphicLibs)
        var realName = packageName;
        var isIsomorphic = false;
        if (packageName !== void 0) {
            isIsomorphic = !!BrowserCodeCut.IsomorphicLibs
                .find(function (p) {
                if (p === packageName) {
                    return true;
                }
                var slashes = (p.match(new RegExp("\/", "g")) || []).length;
                if (slashes === 0) {
                    return p === packageName;
                }
                // console.log('am here ', packageName)
                // console.log('p', p)
                if (p.startsWith(packageName)) {
                    realName = p;
                    // console.log('FOUDNED for ', packageName)
                    // console.log('is REAL', p)
                    return true;
                }
                return false;
            });
        }
        return {
            isIsomorphic: isIsomorphic,
            realName: realName
        };
    };
    BrowserCodeCut.prototype.REGEX_REGION = function (word) {
        return new RegExp("[\\t ]*\\/\\/\\s*#?region\\s+" + word + " ?[\\s\\S]*?\\/\\/\\s*#?endregion ?[\\t ]*\\n?", "g");
    };
    BrowserCodeCut.prototype.replaceRegionsWith = function (stringContent, words) {
        if (stringContent === void 0) { stringContent = ''; }
        if (words === void 0) { words = []; }
        if (words.length === 0)
            return stringContent;
        var word = words.shift();
        var replacement = '';
        if (Array.isArray(word) && word.length === 2) {
            replacement = word[1];
            word = word[0];
        }
        stringContent = stringContent.replace(this.REGEX_REGION(word), replacement);
        return this.replaceRegionsWith(stringContent, words);
    };
    BrowserCodeCut.prototype.replaceFromLine = function (pkgName, imp) {
        var p = this.getInlinePackage(pkgName);
        if (p.isIsomorphic) {
            var replacedImp = imp.replace(p.realName, p.realName + "/" + this.browserString);
            this.rawContent = this.rawContent.replace(imp, replacedImp);
        }
    };
    BrowserCodeCut.prototype.replaceRegionsFromTsImportExport = function (usage) {
        var _this = this;
        if (!this.absoluteFilePath.endsWith('.ts')) {
            return this;
        }
        if (!tnp_core_1._.isString(this.rawContent))
            return;
        var importRegex = new RegExp(usage + ".+from\\s+(\\'|\\\").+(\\'|\\\")", 'g');
        var imports = this.rawContent.match(importRegex);
        if (tnp_core_1._.isArray(imports)) {
            imports.forEach(function (imp) {
                var pkgName = _this.resolvePackageNameFrom.TSimportExport(imp, usage);
                if (pkgName) {
                    _this.replaceFromLine(pkgName, imp);
                }
            });
        }
        return this;
    };
    BrowserCodeCut.prototype.replaceRegionsFromJSrequire = function () {
        var _this = this;
        if (!this.absoluteFilePath.endsWith('.ts')) {
            return this;
        }
        if (!tnp_core_1._.isString(this.rawContent))
            return;
        // fileContent = IsomorphicRegions.flattenRequiresForContent(fileContent, usage)
        var importRegex = new RegExp("require\\((\\'|\\\").+(\\'|\\\")\\)", 'g');
        var imports = this.rawContent.match(importRegex);
        // console.log(imports)
        if (tnp_core_1._.isArray(imports)) {
            imports.forEach(function (imp) {
                var pkgName = _this.resolvePackageNameFrom.JSrequired(imp);
                if (pkgName) {
                    _this.replaceFromLine(pkgName, imp);
                }
            });
        }
        return this;
    };
    BrowserCodeCut.prototype.replaceRegionsForIsomorphicLib = function (options) {
        // console.log('options.replacements', options.replacements)
        if (this.absoluteFilePath.endsWith('.ts')) {
            this.rawContent = this.replaceRegionsWith(this.rawContent, options.replacements);
        }
        this.rawContent = this.afterRegionsReplacement(this.rawContent);
        return this;
    };
    BrowserCodeCut.prototype.afterRegionsReplacement = function (content) {
        return content;
    };
    BrowserCodeCut.prototype.saveOrDelete = function () {
        // console.log('saving ismoprhic file', this.absoluteFilePath)
        if (this.isEmpty && ['.ts', '.js'].includes(tnp_core_1.path.extname(this.absoluteFilePath))) {
            if (tnp_core_1.fse.existsSync(this.absoluteFilePath)) {
                tnp_core_1.fse.unlinkSync(this.absoluteFilePath);
            }
            // console.log(`Delete empty: ${deletePath}`)
        }
        else {
            // console.log(`Not empty: ${this.absoluteFilePath}`)
            if (!tnp_core_1.fse.existsSync(tnp_core_1.path.dirname(this.absoluteFilePath))) {
                tnp_core_1.fse.mkdirpSync(tnp_core_1.path.dirname(this.absoluteFilePath));
            }
            tnp_core_1.fse.writeFileSync(this.absoluteFilePath, this.rawContent, 'utf8');
        }
        // }
    };
    BrowserCodeCut.IsomorphicLibs = [
        'ng2-rest',
        'typeorm',
        'ng2-logger',
        'morphi',
        'tnp-bundle',
        'typescript-class-helpers',
        'lodash-walk-object',
        'json10',
    ];
    return BrowserCodeCut;
}());
exports.BrowserCodeCut = BrowserCodeCut;
//#endregion
//# sourceMappingURL=browser-code-cut.js.map