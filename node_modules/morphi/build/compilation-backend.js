"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var incremental_compiler_1 = require("incremental-compiler");
var BackendCompilation = /** @class */ (function (_super) {
    tslib_1.__extends(BackendCompilation, _super);
    function BackendCompilation(
    /**
     * Output folder
     * Ex. dist
     */
    outFolder, 
    /**
     * Source location
     * Ex. src | components
     */
    location, 
    /**
     * Current cwd same for browser and backend
     * but browser project has own compilation folder
     * Ex. /home/username/project/myproject
     */
    cwd) {
        var _this = _super.call(this, {
            folderPath: [tnp_core_1.path.join(cwd, location)],
            notifyOnFileUnlink: true,
        }) || this;
        _this.outFolder = outFolder;
        _this.location = location;
        _this.cwd = cwd;
        _this.isEnableCompilation = true;
        _this.compilerName = 'Backend Compiler';
        return _this;
    }
    BackendCompilation_1 = BackendCompilation;
    Object.defineProperty(BackendCompilation.prototype, "compilationFolderPath", {
        get: function () {
            if (tnp_core_1._.isString(this.location) && tnp_core_1._.isString(this.cwd)) {
                return tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.location));
            }
        },
        enumerable: true,
        configurable: true
    });
    BackendCompilation.prototype.tscCompilation = function (_a) {
        var cwd = _a.cwd, _b = _a.watch, watch = _b === void 0 ? false : _b, outDir = _a.outDir, _c = _a.generateDeclarations, generateDeclarations = _c === void 0 ? false : _c, _d = _a.tsExe, tsExe = _d === void 0 ? 'npm-run tsc' : _d, _e = _a.diagnostics, diagnostics = _e === void 0 ? false : _e, _f = _a.hideErrors, hideErrors = _f === void 0 ? false : _f, _g = _a.debug, debug = _g === void 0 ? false : _g;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var params, commandJsAndMaps, commandDts;
            return tslib_1.__generator(this, function (_h) {
                switch (_h.label) {
                    case 0:
                        if (!this.isEnableCompilation) {
                            console.log("Compilation disabled for " + tnp_core_1._.startCase(BackendCompilation_1.name));
                            return [2 /*return*/];
                        }
                        if (hideErrors) {
                            diagnostics = false;
                            generateDeclarations = false;
                        }
                        params = [
                            watch ? ' -w ' : '',
                            outDir ? " --outDir " + outDir + " " : '',
                            !watch ? ' --noEmitOnError true ' : '',
                            diagnostics ? ' --extendedDiagnostics ' : '',
                            " --preserveWatchOutput "
                            // hideErrors ? '' : ` --preserveWatchOutput `,
                            // hideErrors ? ' --skipLibCheck true --noEmit true ' : '',
                        ];
                        commandJsAndMaps = tsExe + " -d false  " + params.join(' ');
                        commandDts = tsExe + "  " + params.join(' ');
                        debug && console.log("(" + this.compilerName + ") Execute first command :\n\n    " + commandJsAndMaps + "\n\n    # inside: " + cwd);
                        if (!watch) return [3 /*break*/, 4];
                        return [4 /*yield*/, tnp_core_1.Helpers.logProc2(tnp_core_1.child_process.exec(commandJsAndMaps, { cwd: cwd }), ['Watching for file changes.'])];
                    case 1:
                        _h.sent();
                        if (!generateDeclarations) return [3 /*break*/, 3];
                        debug && console.log("(" + this.compilerName + ") Execute second command : " + commandDts + "    # inside: " + cwd);
                        return [4 /*yield*/, tnp_core_1.Helpers.logProc2(tnp_core_1.child_process.exec(commandDts, { cwd: cwd }), ['Watching for file changes.'])];
                    case 2:
                        _h.sent();
                        _h.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        try {
                            tnp_core_1.child_process.execSync(commandJsAndMaps, {
                                cwd: cwd,
                                stdio: [0, 1, 2]
                            });
                        }
                        catch (e) {
                            console.error("Compilation error: " + e);
                            process.exit(1);
                        }
                        if (generateDeclarations) {
                            debug && console.log("(" + this.compilerName + ") Execute second command : " + commandDts + "    # inside: " + cwd);
                            try {
                                tnp_core_1.child_process.execSync(commandDts, {
                                    cwd: cwd,
                                    stdio: [0, 1, 2]
                                });
                            }
                            catch (e) {
                                console.error("Compilation error: " + e);
                                process.exit(1);
                            }
                        }
                        _h.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    BackendCompilation.prototype.compile = function (watch) {
        if (watch === void 0) { watch = false; }
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tscCompilation({ cwd: this.compilationFolderPath, watch: watch, outDir: "../" + this.outFolder, generateDeclarations: true })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BackendCompilation.prototype.syncAction = function (filesPathes) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var outDistPath;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        outDistPath = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(this.cwd, this.outFolder));
                        // Helpers.System.Operations.tryRemoveDir(outDistPath)
                        if (!tnp_core_1.fse.existsSync(outDistPath)) {
                            tnp_core_1.fse.mkdirpSync(outDistPath);
                        }
                        return [4 /*yield*/, this.compile()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BackendCompilation.prototype.preAsyncAction = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.compile(true)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(BackendCompilation.prototype, "tsConfigName", {
        get: function () {
            return 'tsconfig.json';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BackendCompilation.prototype, "tsConfigBrowserName", {
        get: function () {
            return 'tsconfig.browser.json';
        },
        enumerable: true,
        configurable: true
    });
    var BackendCompilation_1;
    BackendCompilation = BackendCompilation_1 = tslib_1.__decorate([
        incremental_compiler_1.IncCompiler.Class({ className: 'BackendCompilation' }),
        tslib_1.__metadata("design:paramtypes", [String, String, String])
    ], BackendCompilation);
    return BackendCompilation;
}(incremental_compiler_1.IncCompiler.Base));
exports.BackendCompilation = BackendCompilation;
//#endregion
//# sourceMappingURL=compilation-backend.js.map