import { ReplaceOptions } from './models';
import { Models } from '../models';
import { ConfigModels } from 'tnp-config';
export declare class CodeCut {
    protected cwd: string;
    protected filesPathes: string[];
    protected options: ReplaceOptions;
    browserCodeCut: {
        new (any?: any): BrowserCodeCut;
    };
    constructor(cwd: string, filesPathes: string[], options: ReplaceOptions);
    files(): void;
    file(absolutePathToFile: any): void;
}
export declare class BrowserCodeCut {
    protected absoluteFilePath: string;
    static IsomorphicLibs: string[];
    static resolveAndAddIsomorphicLibs(libsNames: string[]): void;
    protected browserString: string;
    protected isDebuggingFile: boolean;
    protected rawContent: string;
    get isEmpty(): boolean;
    constructor(absoluteFilePath: string);
    debug(fileName: string): void;
    flatTypescriptImportExport(usage: ConfigModels.TsUsage): this;
    /**
     * Get "npm package name" from line of code in .ts or .js files
     */
    private get resolvePackageNameFrom();
    /**
      * Check if package of isomorphic-lib type
      * @param packageName
      */
    protected getInlinePackage(packageName: string): Models.InlinePkg;
    protected REGEX_REGION(word: any): RegExp;
    protected replaceRegionsWith(stringContent?: string, words?: any[]): any;
    protected replaceFromLine(pkgName: string, imp: string): void;
    replaceRegionsFromTsImportExport(usage: ConfigModels.TsUsage): this;
    replaceRegionsFromJSrequire(): this;
    replaceRegionsForIsomorphicLib(options: ReplaceOptions): this;
    protected afterRegionsReplacement(content: string): string;
    saveOrDelete(): void;
}
