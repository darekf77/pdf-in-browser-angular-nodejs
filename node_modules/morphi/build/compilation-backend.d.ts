import { IncCompiler } from 'incremental-compiler';
import { ConfigModels } from 'tnp-config';
export declare type TscCompileOptions = {
    cwd: string;
    watch?: boolean;
    outDir?: string;
    generateDeclarations?: boolean;
    tsExe?: string;
    diagnostics?: boolean;
    hideErrors?: boolean;
    debug?: boolean;
};
export declare class BackendCompilation extends IncCompiler.Base {
    /**
     * Output folder
     * Ex. dist
     */
    outFolder: ConfigModels.OutFolder;
    /**
     * Source location
     * Ex. src | components
     */
    location: string;
    /**
     * Current cwd same for browser and backend
     * but browser project has own compilation folder
     * Ex. /home/username/project/myproject
     */
    cwd?: string;
    get compilationFolderPath(): string;
    isEnableCompilation: boolean;
    tscCompilation({ cwd, watch, outDir, generateDeclarations, tsExe, diagnostics, hideErrors, debug }: TscCompileOptions): Promise<void>;
    protected compilerName: string;
    compile(watch?: boolean): Promise<void>;
    syncAction(filesPathes: string[]): Promise<void>;
    preAsyncAction(): Promise<void>;
    get tsConfigName(): string;
    get tsConfigBrowserName(): string;
    constructor(
    /**
     * Output folder
     * Ex. dist
     */
    outFolder: ConfigModels.OutFolder, 
    /**
     * Source location
     * Ex. src | components
     */
    location: string, 
    /**
     * Current cwd same for browser and backend
     * but browser project has own compilation folder
     * Ex. /home/username/project/myproject
     */
    cwd?: string);
}
