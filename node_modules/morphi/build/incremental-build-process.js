"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var tnp_cli_1 = require("tnp-cli");
var helpers_1 = require("../helpers");
var tnp_config_1 = require("tnp-config");
var compilation_browser_1 = require("./compilation-browser");
var compilation_backend_1 = require("./compilation-backend");
var IncrementalBuildProcess = /** @class */ (function () {
    function IncrementalBuildProcess(outFolder, relativeLocationToCwd, cwd, addStandaloneBrowserCompilation) {
        if (outFolder === void 0) { outFolder = 'dist'; }
        if (relativeLocationToCwd === void 0) { relativeLocationToCwd = 'src'; }
        if (cwd === void 0) { cwd = process.cwd(); }
        if (addStandaloneBrowserCompilation === void 0) { addStandaloneBrowserCompilation = true; }
        this.compileOnce = false;
        if (tnp_core_1._.isString(outFolder) && tnp_core_1._.isString(relativeLocationToCwd) && tnp_core_1._.isString(cwd)) {
            this.backendCompilation = new compilation_backend_1.BackendCompilation(outFolder, relativeLocationToCwd, cwd);
            var browserOutFolder = tnp_config_1.config.folder.browser;
            this.browserCompilations = [];
            if (addStandaloneBrowserCompilation) {
                var browser = new compilation_browser_1.BroswerCompilation("tmp-src-" + outFolder + "-" + browserOutFolder, browserOutFolder, relativeLocationToCwd, cwd, outFolder);
                this.browserCompilations.push(browser);
            }
        }
    }
    IncrementalBuildProcess.prototype.browserTaksName = function (taskName, bc) {
        return "browser " + taskName + " in " + tnp_core_1.path.basename(bc.compilationFolderPath);
    };
    IncrementalBuildProcess.prototype.backendTaskName = function (taskName) {
        return taskName + " in " + tnp_core_1.path.basename(this.backendCompilation.compilationFolderPath);
    };
    IncrementalBuildProcess.prototype.recreateBrowserLinks = function (bc) {
        var outDistPath = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(bc.cwd, bc.outFolder));
        tnp_core_1.Helpers.log("recreateBrowserLinks: outDistPath: " + outDistPath);
        helpers_1.MorphiHelpers.System.Operations.tryRemoveDir(outDistPath);
        var targetOut = tnp_core_1.crossPlatformPath(tnp_core_1.path.join(bc.cwd, bc.backendOutFolder, bc.outFolder));
        tnp_core_1.Helpers.log("recreateBrowserLinks: targetOut: " + targetOut);
        tnp_core_1.Helpers.createSymLink(targetOut, outDistPath, { continueWhenExistedFolderDoesntExists: true });
    };
    IncrementalBuildProcess.prototype.start = function (taskName, afterInitCallBack) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _loop_1, this_1, index;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.compileOnce) {
                            this.compileOnce = true;
                        }
                        if (!this.backendCompilation) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.backendCompilation.start(this.backendTaskName(taskName))];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _loop_1 = function (index) {
                            var browserCompilation;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        browserCompilation = this_1.browserCompilations[index];
                                        return [4 /*yield*/, browserCompilation.start(this_1.browserTaksName(taskName, browserCompilation), function () {
                                                _this.recreateBrowserLinks(browserCompilation);
                                            })];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        index = 0;
                        _a.label = 3;
                    case 3:
                        if (!(index < this.browserCompilations.length)) return [3 /*break*/, 6];
                        return [5 /*yield**/, _loop_1(index)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        index++;
                        return [3 /*break*/, 3];
                    case 6:
                        if (!tnp_core_1._.isFunction(afterInitCallBack)) return [3 /*break*/, 8];
                        return [4 /*yield*/, tnp_core_1.Helpers.runSyncOrAsync(afterInitCallBack)];
                    case 7:
                        _a.sent();
                        _a.label = 8;
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    // @ts-ignore
    IncrementalBuildProcess.prototype.startAndWatch = function (taskName, options) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, watchOnly, afterInitCallBack, _loop_2, this_2, index;
            var _this = this;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = options || {}, watchOnly = _a.watchOnly, afterInitCallBack = _a.afterInitCallBack;
                        if (this.compileOnce && watchOnly) {
                            console.error("[morphi] Dont use \"compileOnce\" and \"watchOnly\" options together.");
                            process.exit(0);
                        }
                        if (!this.compileOnce) return [3 /*break*/, 2];
                        console.log('Watch compilation single run');
                        return [4 /*yield*/, this.start(taskName, afterInitCallBack)];
                    case 1:
                        _b.sent();
                        process.exit(0);
                        _b.label = 2;
                    case 2:
                        if (watchOnly) {
                            console.log(tnp_cli_1.CLI.chalk.gray("Watch mode only for \"" + taskName + "\"" +
                                " -- morphi only starts starAndWatch anyway --"));
                        }
                        else {
                            // THIS IS NOT APPLIED FOR TSC
                            // await this.start(taskName, afterInitCallBack);
                        }
                        if (!this.backendCompilation) return [3 /*break*/, 4];
                        // @ts-ignore
                        return [4 /*yield*/, this.backendCompilation.startAndWatch(this.backendTaskName(taskName), { watchOnly: watchOnly })];
                    case 3:
                        // @ts-ignore
                        _b.sent();
                        _b.label = 4;
                    case 4:
                        _loop_2 = function (index) {
                            var browserCompilation;
                            return tslib_1.__generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        browserCompilation = this_2.browserCompilations[index];
                                        return [4 /*yield*/, browserCompilation.startAndWatch(this_2.browserTaksName(taskName, browserCompilation), {
                                                // @ts-ignore
                                                afterInitCallBack: function () {
                                                    _this.recreateBrowserLinks(browserCompilation);
                                                },
                                                watchOnly: watchOnly
                                            })];
                                    case 1:
                                        _a.sent();
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_2 = this;
                        index = 0;
                        _b.label = 5;
                    case 5:
                        if (!(index < this.browserCompilations.length)) return [3 /*break*/, 8];
                        return [5 /*yield**/, _loop_2(index)];
                    case 6:
                        _b.sent();
                        _b.label = 7;
                    case 7:
                        index++;
                        return [3 /*break*/, 5];
                    case 8:
                        if (!tnp_core_1._.isFunction(afterInitCallBack)) return [3 /*break*/, 10];
                        return [4 /*yield*/, tnp_core_1.Helpers.runSyncOrAsync(afterInitCallBack)];
                    case 9:
                        _b.sent();
                        _b.label = 10;
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    return IncrementalBuildProcess;
}());
exports.IncrementalBuildProcess = IncrementalBuildProcess;
//#endregion
//# sourceMappingURL=incremental-build-process.js.map