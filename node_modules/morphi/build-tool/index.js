"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var new_1 = require("./new");
var incremental_build_process_1 = require("../build/incremental-build-process");
var browser_code_cut_1 = require("../build/browser-code-cut");
var tnp_cli_1 = require("tnp-cli");
var tnp_core_2 = require("tnp-core");
var packages_recognition_1 = require("../build/packages-recognition");
tslib_1.__exportStar(require("../helpers"), exports);
function run(argsv, morphiEnvironmentCheck) {
    if (morphiEnvironmentCheck === void 0) { morphiEnvironmentCheck = true; }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var commandName, pid, link, target, name_1, name_2;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (morphiEnvironmentCheck) {
                        tnp_cli_1.CLI.checkEnvironment();
                    }
                    if (!(argsv.length >= 3)) return [3 /*break*/, 7];
                    commandName = argsv[2];
                    if (!(commandName === 'build')) return [3 /*break*/, 2];
                    packages_recognition_1.PackagesRecognition.From(process.cwd()).start();
                    browser_code_cut_1.BrowserCodeCut.resolveAndAddIsomorphicLibs(argsv.slice(4));
                    return [4 /*yield*/, (new incremental_build_process_1.IncrementalBuildProcess()).start('isomprphic build')];
                case 1:
                    _a.sent();
                    process.exit(0);
                    return [3 /*break*/, 7];
                case 2:
                    if (!(commandName === 'install')) return [3 /*break*/, 3];
                    packages_recognition_1.PackagesRecognition.From(process.cwd()).start(true);
                    tnp_core_2.child_process.execSync("npm i " + argsv.slice(3), { cwd: process.cwd(), stdio: [0, 1, 2] });
                    process.exit(0);
                    return [3 /*break*/, 7];
                case 3:
                    if (!(commandName === 'update:isomorphic')) return [3 /*break*/, 4];
                    packages_recognition_1.PackagesRecognition.From(process.cwd()).start(true);
                    process.exit(0);
                    return [3 /*break*/, 7];
                case 4:
                    if (!(commandName === 'build:watch')) return [3 /*break*/, 6];
                    packages_recognition_1.PackagesRecognition.From(process.cwd()).start();
                    browser_code_cut_1.BrowserCodeCut.resolveAndAddIsomorphicLibs(argsv.slice(4));
                    return [4 /*yield*/, (new incremental_build_process_1.IncrementalBuildProcess()).startAndWatch('isomorphic build (watch)')];
                case 5:
                    _a.sent();
                    process.stdin.resume();
                    return [3 /*break*/, 7];
                case 6:
                    if (commandName === 'process-info') {
                        // A simple pid lookup
                        if (!Array.isArray(argsv) || argsv.length < 2) {
                            console.log("To few arguments for process-info function...");
                            process.exit(0);
                        }
                        pid = argsv[3];
                        tnp_core_1.ps.lookup({ pid: pid }, function (err, resultList) {
                            if (err) {
                                throw new Error(err);
                            }
                            var process = resultList[0];
                            if (process) {
                                console.log(JSON.stringify(process));
                            }
                            else {
                                console.log(JSON.stringify({}));
                            }
                        });
                    }
                    else if (commandName === '-h' || commandName === '-help' || commandName === '--help') {
                        console.log('HELP  - WORK IN PROGRESS');
                        console.log('Usage: morphi build <lib1> <lib2> ... ');
                        console.log('Where lib(n) is name of included in node_modules isomorphic lib');
                        console.log('Example isomorphic libs are: typeorm, ng2-rest, morphi...');
                        process.exit(0);
                    }
                    else if (commandName === 'ln') {
                        if (!Array.isArray(argsv) || argsv.length < 2) {
                            console.log("To few arguments for linking function...");
                            process.exit(0);
                        }
                        link = argsv[4];
                        target = argsv[3];
                        tnp_core_1.Helpers.createSymLink(target, link);
                        process.exit(0);
                    }
                    else if (commandName === '-v') {
                        console.log(JSON.parse(tnp_core_2.fse.readFileSync(tnp_core_2.path.join(tnp_core_1.crossPlatformPath(__dirname), '../..', 'package.json').toString(), 'utf8').toString()).version);
                        process.exit(0);
                    }
                    else if (commandName === 'new:workspace') {
                        if (!Array.isArray(argsv) || argsv.length < 4) {
                            errorNew();
                        }
                        name_1 = argsv[3];
                        new_1.copyExampleTo(name_1, 'examples');
                        process.exit(0);
                    }
                    else if (commandName === 'new:simple') {
                        if (!Array.isArray(argsv) || argsv.length < 4) {
                            errorNew();
                        }
                        name_2 = argsv[3];
                        new_1.copyExampleTo(name_2, 'super-simple-morphi-example');
                        process.exit(0);
                    }
                    else {
                        errorAll();
                        process.exit(0);
                    }
                    _a.label = 7;
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.run = run;
function errorAll() {
    console.log("Bad arguments..try one of the command below:\n- " + tnp_cli_1.CLI.chalk.bold('morphi new:workspace myAppName') + "\n- " + tnp_cli_1.CLI.chalk.bold('morphi new:simple myAppName') + "\n- " + tnp_cli_1.CLI.chalk.bold('morphi build') + "\n- " + tnp_cli_1.CLI.chalk.bold('morphi build:watch') + "\n- " + tnp_cli_1.CLI.chalk.bold('morphi -v') + "\n- " + tnp_cli_1.CLI.chalk.bold('morphi -h') + "          ");
    process.exit(0);
}
function errorNew() {
    console.log("Bad arguments..try:\n" + tnp_cli_1.CLI.chalk.bold('morphi new:workspace myAppName') + "\nor\n" + tnp_cli_1.CLI.chalk.bold('morphi new:simple myAppName') + "\n          ");
    process.exit(0);
}
//#endregion
//# sourceMappingURL=index.js.map