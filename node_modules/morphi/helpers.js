"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
//#region @backend
var tnp_core_2 = require("tnp-core");
//#endregion
var JSON5 = require("json5");
var ng2_rest_1 = require("ng2-rest");
//#endregion
var typescript_class_helpers_1 = require("typescript-class-helpers");
var MorphiHelpers = /** @class */ (function (_super) {
    tslib_1.__extends(MorphiHelpers, _super);
    function MorphiHelpers() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(MorphiHelpers, "System", {
        //#region @backend
        get: function () {
            return {
                get Operations() {
                    return {
                        tryRemoveDir: function (dirpath) {
                            tnp_core_2.rimraf.sync(dirpath);
                        },
                        tryCopyFrom: function (source, destination, options) {
                            if (options === void 0) { options = {}; }
                            // console.log(`Trying to copy from hahah: ${source} to ${destination}`)
                            tnp_core_2.fse.copySync(source, destination, tnp_core_1._.merge({
                                overwrite: true,
                                recursive: true
                            }, options));
                        }
                    };
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    MorphiHelpers.isGoodPath = function (p) {
        return p && typeof p === 'string' && p.trim() !== '';
    };
    MorphiHelpers.getPathFor = function (target) {
        var configs = typescript_class_helpers_1.CLASS.getConfig(target);
        // console.log(`Class config for ${CLASS.getName(target)}`, configs)
        var classConfig = configs[0];
        var parentscalculatedPath = tnp_core_1._
            .slice(configs, 1)
            .reverse()
            .map(function (bc) {
            if (MorphiHelpers.isGoodPath(bc.path)) {
                return bc.path;
            }
            return typescript_class_helpers_1.CLASS.getName(bc.classReference);
        }).join('/');
        return "/" + parentscalculatedPath + "/" + typescript_class_helpers_1.CLASS.getName(target);
    };
    MorphiHelpers.hasParentClassWithName = function (target, name, targets) {
        if (targets === void 0) { targets = []; }
        if (!target) {
            // console.log(`false "${_.first(targets).name}" for ${targets.map(d => d.name).join(',')}`)
            return false;
        }
        targets.push(target);
        var targetProto = target['__proto__'];
        if (tnp_core_1._.isFunction(targetProto) && typescript_class_helpers_1.CLASS.getName(targetProto) === name) {
            // console.log(`true  "${_.first(targets).name}" for ${targets.map(d => d.name).join(',')}`)
            return true;
        }
        return this.hasParentClassWithName(targetProto, name, targets);
    };
    //#region @backend
    // static async compilationWrapper(fn: () => void, taskName: string = 'Task', executionType: 'Compilation' | 'Code execution' = 'Compilation') {
    //   function currentDate() {
    //     return `[${dateformat(new Date(), 'HH:MM:ss')}]`;
    //   }
    //   if (!fn || !_.isFunction(fn)) {
    //     console.error(`${executionType} wrapper: "${fn}" is not a function.`)
    //     process.exit(1)
    //   }
    //   try {
    //     console.log(CLI.chalk.gray(`${currentDate()} ${executionType} of "${CLI.chalk.bold(taskName)}" started...`))
    //     await Helpers.runSyncOrAsync(fn)
    //     console.log(CLI.chalk.green(`${currentDate()} ${executionType} of "${CLI.chalk.bold(taskName)}" finish OK...`))
    //   } catch (error) {
    //     console.log(CLI.chalk.red(error));
    //     console.log(`${currentDate()} ${executionType} of ${taskName} ERROR`)
    //   }
    // }
    //#endregion
    MorphiHelpers.tryTransformParam = function (param) {
        if (typeof param === 'string') {
            var n = Number(param);
            if (!isNaN(n))
                return n;
            var bool = param.trim().toLowerCase();
            if (bool === 'true') {
                return true;
            }
            if (bool === 'false') {
                return false;
            }
            try {
                var t = JSON5.parse(param);
                return t;
            }
            catch (e) {
                return param;
            }
        }
        return param;
    };
    MorphiHelpers.getExpressPath = function (c, pathOrClassConfig) {
        if (typeof pathOrClassConfig === 'string')
            return ("" + c.calculatedPath + pathOrClassConfig).replace(/\/$/, '');
        return ("" + c.calculatedPath + pathOrClassConfig.path).replace(/\/$/, '');
    };
    MorphiHelpers.defaultType = function (value) {
        if (typeof value === 'string')
            return '';
        if (typeof value === 'boolean')
            return false;
        if (Array.isArray(value))
            return {};
        if (typeof value === 'object')
            return {};
    };
    MorphiHelpers.parseJSONwithStringJSONs = function (object, waring) {
        var _this = this;
        if (waring === void 0) { waring = false; }
        // console.log('checking object', object)
        if (!tnp_core_1._.isObject(object)) {
            if (waring) {
                console.error("\n        parseJSONwithStringJSONs(...)\n        Parameter should be a object, but is " + typeof object + "\n        ", object);
            }
            return object;
        }
        var res = tnp_core_1._.cloneDeep(object);
        Object.keys(res).forEach(function (key) {
            var isJson = false;
            try {
                var possibleJSON = JSON.parse(res[key]);
                res[key] = possibleJSON;
                isJson = true;
            }
            catch (e) {
                isJson = false;
            }
            // console.log(`key ${key} is json `, isJson)
            if (isJson) {
                res[key] = _this.parseJSONwithStringJSONs(res[key], false);
            }
        });
        return res;
    };
    //#region @backend
    MorphiHelpers.getResponseValue = function (response, req, res) {
        var _this = this;
        //#region @backendFunc
        return new Promise(function (resolve, reject) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var resp, asyncResponse, result, e_1, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resp = response;
                        if (!(!response && response.send === undefined)) return [3 /*break*/, 1];
                        console.error('Bad response value for function');
                        resolve(undefined);
                        return [3 /*break*/, 7];
                    case 1:
                        if (!(typeof response === 'function')) return [3 /*break*/, 6];
                        asyncResponse = response;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, asyncResponse(req, res)];
                    case 3:
                        result = _a.sent();
                        resolve(result);
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        if (e_1 && e_1.stack) {
                            console.log(e_1.stack);
                        }
                        console.error('Bad async function call ', e_1);
                        reject(e_1);
                        return [3 /*break*/, 5];
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        if (typeof response === 'object') {
                            try {
                                if (typeof response.send === 'function') {
                                    result = response.send(req, res);
                                    resolve(result);
                                }
                                else {
                                    resolve(response.send);
                                }
                            }
                            catch (error) {
                                console.error('Bad synchonus function call ', error);
                                reject(error);
                            }
                        }
                        else
                            reject("Not recognized type of reposne " + response);
                        _a.label = 7;
                    case 7: return [2 /*return*/];
                }
            });
        }); });
        //#endregion
    };
    MorphiHelpers.isPlainFileOrFolder = function (filePath) {
        return /^([a-zA-Z]|\-|\_|\@|\#|\$|\!|\^|\&|\*|\(|\))+$/.test(filePath);
    };
    MorphiHelpers.getRecrusiveFilesFrom = function (dir) {
        var _this = this;
        var files = [];
        var readed = tnp_core_2.fse.readdirSync(dir).map(function (f) {
            var fullPath = tnp_core_2.crossPlatformPath(tnp_core_2.path.join(dir, tnp_core_2.crossPlatformPath(f)));
            // console.log(`is direcotry ${fs.lstatSync(fullPath).isDirectory()} `, fullPath)
            if (tnp_core_2.fse.lstatSync(fullPath).isDirectory()) {
                _this.getRecrusiveFilesFrom(fullPath).forEach(function (aa) { return files.push(aa); });
            }
            return fullPath;
        });
        if (Array.isArray(readed)) {
            readed.forEach(function (r) { return files.push(r); });
        }
        return files;
    };
    return MorphiHelpers;
}(ng2_rest_1.Helpers));
exports.MorphiHelpers = MorphiHelpers;
//# sourceMappingURL=helpers.js.map