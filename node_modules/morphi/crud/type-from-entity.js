"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
function findTypeForEntity(entity, isArray) {
    if (isArray === void 0) { isArray = false; }
    if (!tnp_core_1._.isArray(RegisterComponentType.prototype.types)) {
        RegisterComponentType.prototype.types = [];
    }
    return getRegisteredComponents().find(function (c) { return (c.entity === entity && c.isArray === isArray); });
}
exports.findTypeForEntity = findTypeForEntity;
function typeFromEntity(component, entity) {
    var isArray = tnp_core_1._.isArray(entity);
    if (isArray) {
        entity = tnp_core_1._.first(entity);
    }
    var name = typescript_class_helpers_1.CLASS.getName(component);
    var res = { name: name, component: component, entity: entity, isArray: isArray };
    // console.log(res);
    return res;
}
exports.typeFromEntity = typeFromEntity;
function typeFromName(component, name) {
    var res = { name: name, component: component };
    return res;
}
exports.typeFromName = typeFromName;
function RegisterComponentTypeForEntity(entity) {
    if (!tnp_core_1._.isArray(RegisterComponentType.prototype.types)) {
        RegisterComponentType.prototype.types = [];
    }
    return function (target, propertyKey, descriptor) {
        RegisterComponentType.prototype.types.push(typeFromEntity(target, entity));
    };
}
exports.RegisterComponentTypeForEntity = RegisterComponentTypeForEntity;
function RegisterComponentType(className) {
    var optionslNames = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        optionslNames[_i - 1] = arguments[_i];
    }
    if (!tnp_core_1._.isArray(RegisterComponentType.prototype.types)) {
        RegisterComponentType.prototype.types = [];
    }
    return function (target, propertyKey, descriptor) {
        typescript_class_helpers_1.CLASS.NAME(className)(target);
        RegisterComponentType.prototype.types.push(typeFromEntity(target));
        optionslNames.forEach(function (name) {
            RegisterComponentType.prototype.types.push(typeFromName(target, name));
        });
    };
}
exports.RegisterComponentType = RegisterComponentType;
// RegisterComponentType.prototype.types = []
function getRegisteredComponents() {
    var registered = RegisterComponentType.prototype.types;
    if (!Array.isArray(registered)) {
        return [];
    }
    // console.log(registered)
    return registered;
}
exports.getRegisteredComponents = getRegisteredComponents;
//# sourceMappingURL=type-from-entity.js.map