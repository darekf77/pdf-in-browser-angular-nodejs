"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
// import { Subject } from 'rxjs/Subject'; // TODO use rxjs to detec change
// import { Observable } from 'rxjs/Observable';
var helpers_1 = require("../helpers");
var ng2_rest_1 = require("ng2-rest");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var symbols_1 = require("../symbols");
var MAX_DATA_LENGTH_SENT_TO_CLIENT = 10000;
var ModelDataConfig = /** @class */ (function () {
    function ModelDataConfig(config) {
        if (config && tnp_core_1._.isString(config['config'])) {
            // console.log('from nested config')
            this.config = helpers_1.MorphiHelpers.parseJSONwithStringJSONs(JSON.parse(config['config']));
        }
        else if (config) {
            // console.log('from normal interface config')
            this.config = helpers_1.MorphiHelpers.parseJSONwithStringJSONs(config);
        }
        else {
            // console.log('from default config')
            this.config = this.defaultConfig;
        }
        if (tnp_core_1._.isUndefined(this.config.pagination)) {
            this.config.pagination = this.defaultConfig.pagination;
        }
        if (tnp_core_1._.isUndefined(this.config.sorting)) {
            this.config.sorting = this.defaultConfig.sorting;
        }
        if (tnp_core_1._.isUndefined(this.config.joins)) {
            this.config.joins = this.defaultConfig.joins;
        }
        if (tnp_core_1._.isUndefined(this.config.where)) {
            this.config.where = this.defaultConfig.where;
        }
        if (tnp_core_1.Helpers.isNode) {
            if (tnp_core_1._.isUndefined(this.config.include)) {
                this.config.include = [];
            }
            if (tnp_core_1._.isUndefined(this.config.exclude)) {
                this.config.exclude = [];
            }
        }
        // console.log('config', config)
    }
    ModelDataConfig_1 = ModelDataConfig;
    ModelDataConfig.create = function (config) {
        return new ModelDataConfig_1(config);
    };
    //#region @backend
    ModelDataConfig.fromHeader = function (req) {
        var config;
        try {
            config = JSON.parse(decodeURIComponent(req.headers[symbols_1.SYMBOL.MDC_KEY]));
        }
        catch (e1) {
            try {
                config = JSON.parse(req.headers[symbols_1.SYMBOL.MDC_KEY]);
            }
            catch (e2) { }
        }
        return !config ? void 0 : ModelDataConfig_1.create(!!config.config ? config.config : config);
    };
    //#endregion
    ModelDataConfig.prototype.toString = function () {
        return JSON.stringify(this);
    };
    //#region @backend
    ModelDataConfig.prototype.fromModels = function (models) {
        var self = this;
        return {
            getPagination: function () {
                var _a = self.config.pagination, pageNumber = _a.pageNumber, rowsDisplayed = _a.rowsDisplayed;
                var indexStart = (pageNumber - 1) * rowsDisplayed;
                var indexEnd = indexStart + rowsDisplayed;
                return models.slice(indexStart, indexEnd);
            }
        };
    };
    Object.defineProperty(ModelDataConfig.prototype, "defaultConfig", {
        //#endregion
        get: function () {
            return {
                joins: [],
                where: [],
                sorting: {},
                pagination: {
                    pageNumber: 1,
                    rowsDisplayed: MAX_DATA_LENGTH_SENT_TO_CLIENT,
                    totalElements: MAX_DATA_LENGTH_SENT_TO_CLIENT
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "preprae", {
        //#region @backend
        get: function () {
            return {
                where: function (command) {
                    var res = {};
                    var _a = command.split('=').map(function (c) { return c.trim(); }), wherePath = _a[0], value = _a[1];
                    tnp_core_1._.set(res, wherePath, value);
                    return res;
                },
                joinInnerAndSelect: function (commands) {
                    var res = {
                        alias: 'entity',
                        leftJoinAndSelect: {
                        // 'category': 'entity.category'
                        }
                    };
                    // TODO_NOT_IMPORTANT commands sorting
                    commands.forEach(function (c) {
                        var split = c.split('.');
                        if (tnp_core_1._.first(split) === '') {
                            split = split.slice(1);
                        }
                        if (split.length === 1) { // join entity property
                            var entityPropertyFirstLevel = tnp_core_1._.first(split);
                            res.leftJoinAndSelect[entityPropertyFirstLevel] =
                                res.alias + "." + entityPropertyFirstLevel;
                        }
                        else if (split.length === 2) {
                            var entityPropertyFirstLevel = tnp_core_1._.first(split);
                            var entityPropertySecondLevel = tnp_core_1._.first(split.slice(1));
                            res.leftJoinAndSelect[entityPropertySecondLevel] =
                                entityPropertyFirstLevel + "." + entityPropertySecondLevel;
                        }
                    });
                    return res;
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "db", {
        get: function () {
            var self = this;
            return {
                get where() {
                    var res = {};
                    self.where.forEach(function (c) {
                        res = tnp_core_1._.merge(res, self.preprae.where(c));
                    });
                    return res;
                },
                get join() {
                    return self.preprae.joinInnerAndSelect(self.joins);
                },
                get skip() {
                    var _a = self.config.pagination, pageNumber = _a.pageNumber, rowsDisplayed = _a.rowsDisplayed;
                    var indexStart = (pageNumber - 1) * rowsDisplayed;
                    return indexStart;
                },
                get take() {
                    return self.config.pagination.rowsDisplayed;
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "set", {
        //#endregion
        get: function () {
            var self = this;
            return {
                include: function (entity) {
                    if (tnp_core_1._.isArray(entity)) {
                        entity.forEach(function (e) {
                            self.set.include(e);
                        });
                        return;
                    }
                    if (tnp_core_1._.isArray(self.config.include) && self.config.include.length > 0) {
                        if (tnp_core_1._.isObject(entity)) {
                            Object.keys(entity).forEach(function (key) {
                                if (!self.config.include.includes(key)) {
                                    tnp_core_1._.set(entity, key, void 0);
                                }
                            });
                        }
                    }
                },
                exclude: function (entity) {
                    if (tnp_core_1._.isArray(entity)) {
                        entity.forEach(function (e) {
                            self.set.exclude(e);
                        });
                        return;
                    }
                    if (tnp_core_1._.isArray(self.config.exclude) && self.config.exclude.length > 0) {
                        self.config.exclude.forEach(function (ex) {
                            tnp_core_1._.set(entity, ex, void 0);
                        });
                    }
                },
                where: function (command) {
                    if (command === undefined) {
                        return;
                    }
                    var _a = command.split('=').map(function (c) { return c.trim(); }), wherePath = _a[0], value = _a[1];
                    var founded = self.config.where.find(function (c) {
                        var wherePath2 = c.split('=').map(function (c) { return c.trim(); })[0];
                        return (wherePath === wherePath2);
                    });
                    if (command.trim().endsWith('=') || (value && value.trim() === 'undefined')) {
                        self.config.where = self.config.where.filter(function (c) {
                            var wherePath2 = c.split('=').map(function (c) { return c.trim(); })[0];
                            return (wherePath !== wherePath2);
                        });
                        return;
                    }
                    if (founded) {
                        var index = self.config.where.indexOf(founded);
                        self.config.where[index] = command;
                    }
                    else {
                        self.config.where.push(command);
                    }
                    // self._modelConfigChanged.next(self);
                },
                joins: function (command) {
                    if (command === undefined) {
                        return;
                    }
                    var founded = self.config.joins.find(function (j) { return command.trim() === j.trim(); });
                    if (founded) {
                        var index = self.config.joins.indexOf(founded);
                        self.config.joins[index] = command;
                    }
                    else {
                        self.config.joins.push(command);
                    }
                    // self._modelConfigChanged.next(self);
                },
                get pagination() {
                    return {
                        totalElement: function (value) {
                            self.config.pagination.totalElements = value;
                            // self._modelConfigChanged.next(self);
                        },
                        pageNumber: function (value) {
                            self.config.pagination.pageNumber = value;
                            // self._modelConfigChanged.next(self);
                        },
                        rowDisplayed: function (value) {
                            self.config.pagination.rowsDisplayed = value;
                            // self._modelConfigChanged.next(self);
                        }
                    };
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "get", {
        get: function () {
            var self = this;
            return {
                get pagination() {
                    return {
                        get totalElements() {
                            return Number(tnp_core_1._.get(self, "config.pagination.totalElements"));
                        },
                        get pageNumber() {
                            return Number(tnp_core_1._.get(self, "config.pagination.pageNumber"));
                        },
                        get rowsDisplayed() {
                            return Number(tnp_core_1._.get(self, "config.pagination.rowsDisplayed"));
                        }
                    };
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "pagination", {
        //#region @backend
        get: function () {
            return this.config.pagination;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "sorting", {
        get: function () {
            return this.config.sorting;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "joins", {
        get: function () {
            return this.config.joins;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "where", {
        get: function () {
            return this.config.where;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "exclude", {
        get: function () {
            return this.config.exclude;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ModelDataConfig.prototype, "include", {
        get: function () {
            return this.config.include;
        },
        enumerable: true,
        configurable: true
    });
    var ModelDataConfig_1;
    ModelDataConfig = ModelDataConfig_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('ModelDataConfig'),
        ng2_rest_1.Mapping.DefaultModelWithMapping({}),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], ModelDataConfig);
    return ModelDataConfig;
}());
exports.ModelDataConfig = ModelDataConfig;
var MDC = /** @class */ (function (_super) {
    tslib_1.__extends(MDC, _super);
    function MDC() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return MDC;
}(ModelDataConfig));
exports.MDC = MDC;
//# sourceMappingURL=model-data-config.js.map