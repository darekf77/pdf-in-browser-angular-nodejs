"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var symbols_1 = require("../symbols");
var model_data_config_1 = require("./model-data-config");
var decorators_endpoint_class_1 = require("../decorators/decorators-endpoint-class");
var decorators_methods_1 = require("../decorators/decorators-methods");
var decorators_params_1 = require("../decorators/decorators-params");
var models_1 = require("../models");
//#region @backend
var typeorm_1 = require("typeorm");
var framework_helpers_1 = require("../framework/framework-helpers");
var framework_context_1 = require("../framework/framework-context");
//#endregion
var BaseCRUD = /** @class */ (function () {
    function BaseCRUD() {
        this.init();
    }
    BaseCRUD_1 = BaseCRUD;
    Object.defineProperty(BaseCRUD.prototype, "repository", {
        get: function () {
            return this.repo;
        },
        enumerable: true,
        configurable: true
    });
    BaseCRUD.prototype.init = function () {
        //#region @backend
        var context = framework_context_1.FrameworkContext.findForTraget(this);
        this.connection = context.connection;
        if (tnp_core_1.Helpers.isNode && this.entity && this.connection && this.entity[symbols_1.SYMBOL.HAS_TABLE_IN_DB]) {
            this.repo = this.connection.getRepository(this.entity);
            !global.hideLog && console.log("Base CRUD inited for: " + this.entity.name);
        }
        else {
            !global.hideLog && console.log("Base CRUD NOT inited for: " + (this.entity && this.entity.name));
        }
        //#endregion
    };
    BaseCRUD.prototype.bufforedChanges = function (id, property, alreadyLength, config) {
        var _this = this;
        //#region @backendFunc
        return function (request, response) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var model, value, result;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getModel(id, config, this.repo)];
                    case 1:
                        model = _a.sent();
                        if (model === void 0) {
                            return [2 /*return*/];
                        }
                        preventUndefinedModel(model, config, id);
                        value = model[property];
                        if (tnp_core_1._.isString(value) || tnp_core_1._.isArray(value)) {
                            result = value.slice(alreadyLength);
                        }
                        // console.log(`result for id:${id}, prop: ${property}, alredylength: ${alreadyLength}`, result)
                        return [2 /*return*/, result];
                }
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.getAll = function (config) {
        var _this = this;
        //#region @backendFunc
        return function (request, response) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var totalCount, models;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.repo) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.repo.count()];
                    case 1:
                        totalCount = _a.sent();
                        return [4 /*yield*/, getModels(config, this.repo)];
                    case 2:
                        models = _a.sent();
                        response.setHeader(symbols_1.SYMBOL.X_TOTAL_COUNT, totalCount);
                        prepareData(models, config);
                        return [2 /*return*/, models];
                    case 3: return [2 /*return*/, []];
                }
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.getBy = function (id, config) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var model;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getModel(id, config, this.repo)];
                    case 1:
                        model = _a.sent();
                        prepareData(model, config, id);
                        return [2 /*return*/, model];
                }
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.updateById = function (id, item, config) {
        //#region @backendFunc
        var _this = this;
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var _a, _b, _i, key, model;
            return tslib_1.__generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = [];
                        for (_b in item)
                            _a.push(_b);
                        _i = 0;
                        _c.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        key = _a[_i];
                        if (!(item.hasOwnProperty(key) && typeof item[key] !== 'object')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.repo.query("UPDATE \"" + framework_helpers_1.tableNameFrom(this.entity) + "\" SET \"" + key + "\"=\"" + item[key] + "\" WHERE \"id\"=\"" + id + "\"")];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [4 /*yield*/, getModel(id, config, this.repo)];
                    case 5:
                        model = _c.sent();
                        prepareData(model, config, id);
                        return [2 /*return*/, model];
                }
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.bulkUpdate = function (item, config) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // TODO NEEDS TO BE IMPLEMENTED
                return [2 /*return*/, []];
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.deleteById = function (id, config) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var deletedEntity;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, getModel(id, config, this.repo)];
                    case 1:
                        deletedEntity = _a.sent();
                        return [4 /*yield*/, this.repo.remove(id)];
                    case 2:
                        _a.sent();
                        prepareData(deletedEntity, config, id);
                        return [2 /*return*/, deletedEntity];
                }
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.bulkDelete = function (id, config) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                return [2 /*return*/, []];
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.create = function (item, config) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var model, id;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.repo.create(item)];
                    case 1:
                        model = _a.sent();
                        return [4 /*yield*/, this.repo.save(model)];
                    case 2:
                        model = _a.sent();
                        id = model.id;
                        return [4 /*yield*/, getModel(id, config, this.repo)];
                    case 3:
                        model = _a.sent();
                        prepareData(model, config, id);
                        return [2 /*return*/, model];
                }
            });
        }); };
        //#endregion
    };
    BaseCRUD.prototype.bulkCreate = function (item, config) {
        var _this = this;
        //#region @backendFunc
        return function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                // TODO
                return [2 /*return*/, []];
            });
        }); };
        //#endregion
    };
    var BaseCRUD_1;
    tslib_1.__decorate([
        decorators_methods_1.GET("/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL + "/:id/property/:property"),
        tslib_1.__param(0, decorators_params_1.Path("id")),
        tslib_1.__param(1, decorators_params_1.Path("property")),
        tslib_1.__param(2, decorators_params_1.Query('alreadyLength')),
        tslib_1.__param(3, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, String, Number, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "bufforedChanges", null);
    tslib_1.__decorate([
        decorators_methods_1.GET("/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL),
        tslib_1.__param(0, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "getAll", null);
    tslib_1.__decorate([
        decorators_methods_1.GET("/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL + "/:id"),
        tslib_1.__param(0, decorators_params_1.Path("id")), tslib_1.__param(1, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "getBy", null);
    tslib_1.__decorate([
        decorators_methods_1.PUT("/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL + "/:id"),
        tslib_1.__param(0, decorators_params_1.Path("id")), tslib_1.__param(1, decorators_params_1.Body()), tslib_1.__param(2, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, Object, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "updateById", null);
    tslib_1.__decorate([
        decorators_methods_1.PUT("/bulk/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL),
        tslib_1.__param(0, decorators_params_1.Body()), tslib_1.__param(1, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Array, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "bulkUpdate", null);
    tslib_1.__decorate([
        decorators_methods_1.DELETE("/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL + "/:id"),
        tslib_1.__param(0, decorators_params_1.Path("id")), tslib_1.__param(1, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Number, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "deleteById", null);
    tslib_1.__decorate([
        decorators_methods_1.DELETE("/bulk/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL + "/:id"),
        tslib_1.__param(0, decorators_params_1.Path("id")), tslib_1.__param(1, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Array, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "bulkDelete", null);
    tslib_1.__decorate([
        decorators_methods_1.POST("/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL + "/"),
        tslib_1.__param(0, decorators_params_1.Body()), tslib_1.__param(1, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "create", null);
    tslib_1.__decorate([
        decorators_methods_1.POST("/bulk/" + symbols_1.SYMBOL.CRUD_TABLE_MODEL + "/"),
        tslib_1.__param(0, decorators_params_1.Body()), tslib_1.__param(1, decorators_params_1.Query('config')),
        tslib_1.__metadata("design:type", Function),
        tslib_1.__metadata("design:paramtypes", [Object, model_data_config_1.ModelDataConfig]),
        tslib_1.__metadata("design:returntype", Object)
    ], BaseCRUD.prototype, "bulkCreate", null);
    BaseCRUD = BaseCRUD_1 = tslib_1.__decorate([
        typescript_class_helpers_1.CLASS.NAME('BaseCRUD'),
        decorators_endpoint_class_1.__ENDPOINT(BaseCRUD_1),
        tslib_1.__metadata("design:paramtypes", [])
    ], BaseCRUD);
    return BaseCRUD;
}());
exports.BaseCRUD = BaseCRUD;
//#region @backend
function getModels(config, repo) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var obj, toDelete, res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    obj = {
                        where: config && config.db && config.db.where,
                        join: config && config.db && config.db.join,
                        skip: config && config.db && config.db.skip,
                        take: config && config.db && config.db.take
                    };
                    toDelete = [];
                    Object.keys(obj).forEach(function (key) {
                        if (tnp_core_1._.isNil(obj[key])) {
                            toDelete.push(key);
                        }
                    });
                    toDelete.forEach(function (key) {
                        delete obj[key];
                    });
                    return [4 /*yield*/, repo.find(obj)];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res];
            }
        });
    });
}
function getModel(id, config, repo) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var res;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!repo) {
                        return [2 /*return*/, void 0];
                    }
                    return [4 /*yield*/, repo.findOne({
                            where: tnp_core_1._.merge({ id: id }, config && config.db && config.db.where),
                            join: config && config.db && config.db.join
                        })];
                case 1:
                    res = _a.sent();
                    return [2 /*return*/, res];
            }
        });
    });
}
function prepareData(data, config, id) {
    if (data === void 0) {
        return;
    }
    preventUndefinedModel(data, config, id);
    if (tnp_core_1._.isObject(config)) {
        if (!(config instanceof model_data_config_1.ModelDataConfig)) {
            console.error("Config not instance of ModelDataConfig");
            return;
        }
        if (tnp_core_1._.isArray(data)) {
            data.forEach(function (d) { return d.modelDataConfig = config; });
        }
        else if (tnp_core_1._.isObject(data)) {
            data.modelDataConfig = config;
        }
    }
}
function preventUndefinedModel(model, config, id) {
    if (tnp_core_1._.isUndefined(model)) {
        console.error(config);
        throw "Bad update by id, config, id: " + id;
    }
}
function forObjectPropertiesOf(item) {
    return {
        run: function (action) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var objectPropertiesToUpdate;
                return tslib_1.__generator(this, function (_a) {
                    objectPropertiesToUpdate = [];
                    Object.keys(item).forEach(function (propertyName) {
                        var partialItem = item[propertyName];
                        if (tnp_core_1._.isObject(partialItem) && !tnp_core_1._.isArray(partialItem)) {
                            var entityClass = typescript_class_helpers_1.CLASS.getFromObject(partialItem);
                            var repo = entityClass && entityClass[symbols_1.SYMBOL.HAS_TABLE_IN_DB] && typeorm_1.getRepository(entityClass);
                            if (repo) {
                                objectPropertiesToUpdate.push(action(repo, partialItem, entityClass));
                            }
                        }
                    });
                    return [2 /*return*/, Promise.all(objectPropertiesToUpdate)];
                });
            });
        }
    };
}
//#endregion
//# sourceMappingURL=base-crud-model.js.map