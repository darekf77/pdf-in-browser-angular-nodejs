"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var init_method_1 = require("../init-method");
var typescript_class_helpers_1 = require("typescript-class-helpers");
exports.CLASS = typescript_class_helpers_1.CLASS;
var typescript_class_helpers_2 = require("typescript-class-helpers");
var tnp_core_1 = require("tnp-core");
var symbols_1 = require("../symbols");
var helpers_1 = require("../helpers");
var activate_base_crud_1 = require("../crud/activate-base-crud");
var framework_context_1 = require("../framework/framework-context");
var typeorm_1 = require("typeorm");
exports.Connection = typeorm_1.Connection;
function __ENDPOINT(baseEntity) {
    return ENDPOINT();
}
exports.__ENDPOINT = __ENDPOINT;
function ENDPOINT(options) {
    return function (target) {
        var _a = options ? options : {}, path = _a.path, auth = _a.auth, entity = _a.entity, additionalEntities = _a.additionalEntities;
        var initFN = (function (target, targetPath, auth) {
            return function () {
                var context = framework_context_1.FrameworkContext.findForTraget(target);
                activate_base_crud_1.activateBaseCrud(target, entity, additionalEntities, context);
                var configs = typescript_class_helpers_2.CLASS.getConfig(target);
                // console.log(`Class config for ${CLASS.getName(target)}`, configs)
                var classConfig = configs[0];
                classConfig.path = targetPath;
                var parentscalculatedPath = tnp_core_1._
                    .slice(configs, 1)
                    .reverse()
                    .map(function (bc) {
                    if (helpers_1.MorphiHelpers.isGoodPath(bc.path)) {
                        return bc.path;
                    }
                    return typescript_class_helpers_2.CLASS.getName(bc.classReference);
                }).join('/');
                if (helpers_1.MorphiHelpers.isGoodPath(targetPath)) {
                    classConfig.calculatedPath = targetPath;
                }
                else {
                    classConfig.calculatedPath = ("/" + parentscalculatedPath + "/" + typescript_class_helpers_2.CLASS.getName(target))
                        .replace(/\/\//g, '/');
                }
                var checkAuthFn = (auth && typeof auth === 'function');
                tnp_core_1._.slice(configs, 1).forEach(function (bc) {
                    var alreadyIs = classConfig.methods;
                    var toMerge = tnp_core_1._.cloneDeep(bc.methods);
                    for (var key in toMerge) {
                        if (toMerge.hasOwnProperty(key) && !alreadyIs[key]) {
                            var element = toMerge[key];
                            alreadyIs[key] = element;
                        }
                    }
                });
                Object.keys(classConfig.methods).forEach(function (methodName) {
                    var methodConfig = classConfig.methods[methodName];
                    var type = methodConfig.type;
                    var expressPath = helpers_1.MorphiHelpers.getExpressPath(classConfig, methodConfig);
                    // console.log('initfn expressPath', expressPath)
                    if (tnp_core_1.Helpers.isNode) {
                        //#region @backend
                        if (checkAuthFn) {
                            methodConfig.requestHandler = auth(methodConfig.descriptor.value);
                        }
                        var _a = init_method_1.initMethodNodejs(type, methodConfig, classConfig, expressPath, target), routePath = _a.routePath, method = _a.method;
                        if (!context.onlyForBackendRemoteServerAccess) {
                            context.node.activeRoutes.push({
                                routePath: routePath,
                                method: method
                            });
                        }
                        //#endregion
                    }
                    if (tnp_core_1.Helpers.isBrowser
                        //#region @backend
                        || context.onlyForBackendRemoteServerAccess
                    //#endregion
                    ) {
                        init_method_1.initMethodBrowser(target, type, methodConfig, expressPath);
                    }
                });
            };
        })(target, path, auth);
        target.prototype[symbols_1.SYMBOL.CLASS_DECORATOR_CONTEXT] = { initFN: initFN, target: target };
        framework_context_1.FrameworkContext.initFunc.push({ initFN: initFN, target: target });
    };
}
exports.ENDPOINT = ENDPOINT;
//# sourceMappingURL=decorators-endpoint-class.js.map