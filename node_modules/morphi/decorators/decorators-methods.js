"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tnp_core_1 = require("tnp-core");
var models_1 = require("../models");
var typescript_class_helpers_1 = require("typescript-class-helpers");
function metaReq(method, path, target, propertyKey, descriptor, realtimeUpdate) {
    if (realtimeUpdate === void 0) { realtimeUpdate = false; }
    var configs = typescript_class_helpers_1.CLASS.getConfig(target.constructor);
    var c = configs[0];
    var m = c.methods[propertyKey] = (!c.methods[propertyKey] ? new models_1.Models.Rest.MethodConfig() : c.methods[propertyKey]);
    m.methodName = propertyKey;
    m.type = method;
    // debugger
    if (!path) {
        var paramsPathConcatedPath = '';
        for (var key in m.parameters) {
            if (m.parameters.hasOwnProperty(key)) {
                var element = m.parameters[key];
                if (element.paramType === 'Path' && tnp_core_1._.isString(element.paramName) && element.paramName.trim().length > 0) {
                    paramsPathConcatedPath += "/" + element.paramName + "/:" + element.paramName;
                }
            }
        }
        m.path = "/" + propertyKey + paramsPathConcatedPath;
        // console.log(`Authogenerated path: `, m.path)
    }
    else {
        m.path = path;
    }
    m.descriptor = descriptor;
    m.realtimeUpdate = realtimeUpdate;
}
function GET(path, realtimeUpdate) {
    if (realtimeUpdate === void 0) { realtimeUpdate = false; }
    return function (target, propertyKey, descriptor) {
        metaReq('get', path, target, propertyKey, descriptor, realtimeUpdate);
    };
}
exports.GET = GET;
function HEAD(path, realtimeUpdate) {
    if (realtimeUpdate === void 0) { realtimeUpdate = false; }
    return function (target, propertyKey, descriptor) {
        metaReq('head', path, target, propertyKey, descriptor, realtimeUpdate);
    };
}
exports.HEAD = HEAD;
function POST(path) {
    return function (target, propertyKey, descriptor) {
        metaReq('post', path, target, propertyKey, descriptor);
    };
}
exports.POST = POST;
function PUT(path) {
    return function (target, propertyKey, descriptor) {
        metaReq('put', path, target, propertyKey, descriptor);
    };
}
exports.PUT = PUT;
function PATCH(path) {
    return function (target, propertyKey, descriptor) {
        metaReq('patch', path, target, propertyKey, descriptor);
    };
}
exports.PATCH = PATCH;
function DELETE(path) {
    return function (target, propertyKey, descriptor) {
        metaReq('delete', path, target, propertyKey, descriptor);
    };
}
exports.DELETE = DELETE;
//# sourceMappingURL=decorators-methods.js.map