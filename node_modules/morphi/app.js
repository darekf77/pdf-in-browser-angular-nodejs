"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
//#region @backend
var tnp_core_2 = require("tnp-core");
//#endregion
var index_1 = require("./index");
var Book = /** @class */ (function (_super) {
    tslib_1.__extends(Book, _super);
    function Book() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Book_1 = Book;
    Book.from = function (name) {
        var b = new Book_1();
        b.name = name;
        return b;
    };
    var Book_1;
    tslib_1.__decorate([
        index_1.Morphi.Orm.Column.Custom('varchar'),
        tslib_1.__metadata("design:type", String)
    ], Book.prototype, "name", void 0);
    tslib_1.__decorate([
        index_1.Morphi.Orm.Column.Generated(),
        tslib_1.__metadata("design:type", Number)
    ], Book.prototype, "id", void 0);
    Book = Book_1 = tslib_1.__decorate([
        index_1.Morphi.Entity({ className: 'Book' })
    ], Book);
    return Book;
}(index_1.Morphi.Base.Entity));
var BookCtrl = /** @class */ (function (_super) {
    tslib_1.__extends(BookCtrl, _super);
    function BookCtrl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    //#region @backend
    BookCtrl.prototype.initExampleDbData = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var db;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connection.getRepository(Book)];
                    case 1:
                        db = _a.sent();
                        return [4 /*yield*/, db.save(Book.from('alice in wonderland'))];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, db.save(Book.from('cryptography'))];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BookCtrl = tslib_1.__decorate([
        index_1.Morphi.Controller({ className: 'BookCtrl', entity: Book })
    ], BookCtrl);
    return BookCtrl;
}(index_1.Morphi.Base.Controller));
var start = function (port) {
    if (port === void 0) { port = 3000; }
    return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var host, config, context, c, data, dbfile, db_1, oldData_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    host = "http://localhost:" + port;
                    console.log("HOST MORPHI: " + host);
                    config = {
                        type: "sqlite",
                        database: 'tmp-db.sqlite',
                        synchronize: true,
                        dropSchema: true,
                        logging: false
                    };
                    return [4 /*yield*/, index_1.Morphi.init({
                            host: host,
                            controllers: [BookCtrl],
                            entities: [Book],
                            //#region @backend
                            config: config
                            //#endregion
                        })];
                case 1:
                    context = _a.sent();
                    //#region @backend
                    if (index_1.Morphi.isNode) {
                        context.node.app.get('/hello', function (req, res) {
                            res.send('Hello express');
                        });
                    }
                    if (!index_1.Morphi.IsBrowser) return [3 /*break*/, 3];
                    c = tnp_core_1._.first(context.controllers);
                    return [4 /*yield*/, c.getAll().received];
                case 2:
                    data = (_a.sent()).body.json;
                    // console.log(data);
                    data.forEach(function (b) {
                        b.subscribeRealtimeUpdates({
                            callback: function () {
                                // console.log(`hello update: ${b.id} `)
                            }
                        });
                    });
                    _a.label = 3;
                case 3:
                    if (!index_1.Morphi.isNode) return [3 /*break*/, 6];
                    dbfile = tnp_core_2.crossPlatformPath(tnp_core_2.path.join(tnp_core_2.crossPlatformPath(process.cwd()), config.database));
                    return [4 /*yield*/, context.connection.getRepository(Book)];
                case 4:
                    db_1 = _a.sent();
                    return [4 /*yield*/, db_1.find()];
                case 5:
                    oldData_1 = _a.sent();
                    tnp_core_2.fse.watchFile(dbfile, function (a, b) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
                        var newData;
                        return tslib_1.__generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, db_1.find()];
                                case 1:
                                    newData = _a.sent();
                                    oldData_1.forEach(function (b) {
                                        var newb = newData.find(function (d) { return d.id === b.id; });
                                        if (newb) {
                                            if (!tnp_core_1._.isEqual(newb.name, b.name)) {
                                                index_1.Morphi.Realtime.Server.TrigggerEntityChanges('Book', b.id);
                                            }
                                        }
                                        else {
                                            index_1.Morphi.Realtime.Server.TrigggerEntityChanges('Book', b.id);
                                        }
                                        oldData_1 = newData;
                                    });
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    _a.label = 6;
                case 6: return [2 /*return*/];
            }
        });
    });
};
if (index_1.Morphi.IsBrowser) {
    start();
}
exports.default = start;
//# sourceMappingURL=app.js.map