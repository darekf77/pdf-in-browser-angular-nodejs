"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var tnp_core_1 = require("tnp-core");
var models_1 = require("../models");
var helpers_1 = require("../helpers");
var symbols_1 = require("../symbols");
var entity_process_1 = require("./entity-process");
var crud_1 = require("../crud");
var framework_context_1 = require("../framework/framework-context");
function initMethodNodejs(type, methodConfig, classConfig, expressPath, target) {
    var _this = this;
    var requestHandler = (methodConfig.requestHandler && typeof methodConfig.requestHandler === 'function')
        ? methodConfig.requestHandler : function (req, res, next) { next(); };
    var productionMode = framework_context_1.FrameworkContext.isProductionMode;
    var context = framework_context_1.FrameworkContext.findForTraget(target);
    var url = context.uri;
    url.pathname = url.pathname.replace(/\/$/, '');
    expressPath = url.pathname.startsWith('/') ? "" + url.pathname + expressPath : expressPath;
    expressPath = expressPath.replace(/\/\//g, '/');
    // console.log(`BACKEND: expressPath: ${expressPath}`)
    if (!context.onlyForBackendRemoteServerAccess) {
        context.node.app[type.toLowerCase()](expressPath, requestHandler, function (req, res) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var args, tBody, tParams, tQuery, entity, entity, resolvedParams, response, result, mdc, error_1, err, err;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        args = [];
                        tBody = req.body;
                        tParams = req.params;
                        tQuery = req.query;
                        if (req.headers[symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_BODY]) {
                            try {
                                tBody = helpers_1.MorphiHelpers.JSON.parse(JSON.stringify(tBody), JSON.parse(req.headers[symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_BODY]));
                            }
                            catch (e) { }
                        }
                        if (req.headers[symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_QUERY_PARAM]) {
                            try {
                                tQuery = helpers_1.MorphiHelpers.JSON.parse(JSON.stringify(tQuery), JSON.parse(req.headers[symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_QUERY_PARAM]));
                            }
                            catch (e) { }
                        }
                        // make class instance from body
                        // console.log('req.headers', req.headers)
                        if (req.headers[symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_BODY_PARAMS]) {
                            try {
                                entity = JSON.parse(req.headers[symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_BODY_PARAMS]);
                                tBody = helpers_1.MorphiHelpers.Mapping.encode(tBody, entity);
                            }
                            catch (e) { }
                        }
                        else {
                            Object.keys(tBody).forEach(function (paramName) {
                                try {
                                    var entityForParam = JSON.parse(req.headers["" + symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_BODY_PARAMS + paramName]);
                                    tBody[paramName] = helpers_1.MorphiHelpers.Mapping.encode(tBody[paramName], entityForParam);
                                }
                                catch (e) { }
                            });
                        }
                        // make class instance from query params
                        // console.log('req.headers', tQuery)
                        if (req.headers[symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_QUERY_PARAMS]) {
                            try {
                                entity = JSON.parse(req.headers[symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_QUERY_PARAMS]);
                                tQuery = helpers_1.MorphiHelpers.parseJSONwithStringJSONs(helpers_1.MorphiHelpers.Mapping.encode(tQuery, entity));
                            }
                            catch (e) { }
                        }
                        else {
                            Object.keys(tQuery).forEach(function (queryParamName) {
                                try {
                                    var entityForParam = JSON.parse(req.headers["" + symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_QUERY_PARAMS + queryParamName]);
                                    var beforeTransofrm = tQuery[queryParamName];
                                    if (tnp_core_1._.isString(beforeTransofrm)) {
                                        try {
                                            var paresed = helpers_1.MorphiHelpers.tryTransformParam(beforeTransofrm);
                                            beforeTransofrm = paresed;
                                        }
                                        catch (e) { }
                                    }
                                    var afterEncoding = helpers_1.MorphiHelpers.Mapping.encode(beforeTransofrm, entityForParam);
                                    tQuery[queryParamName] = helpers_1.MorphiHelpers.parseJSONwithStringJSONs(afterEncoding);
                                }
                                catch (e) { }
                            });
                        }
                        Object.keys(methodConfig.parameters).forEach(function (paramName) {
                            var p = methodConfig.parameters[paramName];
                            if (p.paramType === 'Path' && tParams) {
                                args.push(tParams[p.paramName]);
                            }
                            if (p.paramType === 'Query' && tQuery) {
                                if (p.paramName) {
                                    args.push(tQuery[p.paramName]);
                                }
                                else {
                                    args.push(tQuery);
                                }
                            }
                            if (p.paramType === 'Header' && req.headers) {
                                args.push(req.headers[p.paramName.toLowerCase()]);
                            }
                            if (p.paramType === 'Cookie' && req.cookies) {
                                args.push(req.cookies[p.paramName]);
                            }
                            if (p.paramType === 'Body' && tBody) {
                                if (p.paramName && typeof tBody === 'object') {
                                    args.push(tBody[p.paramName]);
                                }
                                else {
                                    args.push(tBody);
                                }
                            }
                        });
                        resolvedParams = args.reverse().map(function (v) { return helpers_1.MorphiHelpers.tryTransformParam(v); });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        response = methodConfig.descriptor.value.apply(
                        /**
                         * Context for method @GET,@PUT etc.
                         */
                        context.getInstance(target), 
                        /**
                         * Params for metjod @GET, @PUT etc.
                         */
                        resolvedParams);
                        return [4 /*yield*/, helpers_1.MorphiHelpers.getResponseValue(response, req, res)];
                    case 2:
                        result = _a.sent();
                        mdc = crud_1.MDC.fromHeader(req);
                        // console.log(mdc)
                        return [4 /*yield*/, entity_process_1.EntityProcess.init(result, res, mdc)];
                    case 3:
                        // console.log(mdc)
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        error_1 = _a.sent();
                        if (tnp_core_1._.isString(error_1)) {
                            res.status(400).send(helpers_1.MorphiHelpers.JSON.stringify({
                                message: "\n  Error inside: " + req.path + "\n\n  " + error_1 + "\n\n  "
                            }));
                        }
                        else if (error_1 instanceof models_1.Models.Errors) {
                            console.log('Morphi Error', error_1);
                            err = error_1;
                            res.status(400).send(helpers_1.MorphiHelpers.JSON.stringify(err));
                        }
                        else if (error_1 instanceof Error) {
                            err = error_1;
                            console.log('Code Error', error_1);
                            betterError(err);
                            res.status(400).send(helpers_1.MorphiHelpers.JSON.stringify({
                                stack: err.stack,
                                message: err.message
                            }));
                        }
                        else {
                            console.log("Bad result isomorphic method: " + error_1);
                            res.status(400).send(helpers_1.MorphiHelpers.JSON.stringify(error_1));
                        }
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        }); });
    }
    return {
        routePath: expressPath,
        method: methodConfig.type
    };
}
exports.initMethodNodejs = initMethodNodejs;
function betterError(error) {
    console.log(require('callsite-record')({
        forError: error
    }).renderSync({
    // stackFilter(frame) {
    //   return !frame.getFileName().includes('node_modules');
    // }
    }));
}
//# sourceMappingURL=init-method-node.backend.js.map