"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var symbols_1 = require("../symbols");
var tnp_core_1 = require("tnp-core");
var ng2_rest_1 = require("ng2-rest");
var tnp_core_2 = require("tnp-core");
var helpers_1 = require("../helpers");
var framework_context_1 = require("../framework/framework-context");
function initMethodBrowser(target, type, methodConfig, expressPath) {
    var storage;
    if (tnp_core_2.Helpers.isBrowser) {
        storage = window;
    }
    //#region @backend
    if (tnp_core_2.Helpers.isNode) {
        storage = global;
    }
    //#endregion
    // console.log(`FRONTEND ${target.name} method on ${expressPath}`)
    target.prototype[methodConfig.methodName] = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // console.log('FRONTEND expressPath', expressPath)
        // const productionMode = FrameworkContext.isProductionMode;
        var context = framework_context_1.FrameworkContext.findForTraget(target);
        var uri = context.uri;
        //#endregion
        if (!storage[symbols_1.SYMBOL.ENDPOINT_META_CONFIG])
            storage[symbols_1.SYMBOL.ENDPOINT_META_CONFIG] = {};
        if (!storage[symbols_1.SYMBOL.ENDPOINT_META_CONFIG][uri.href])
            storage[symbols_1.SYMBOL.ENDPOINT_META_CONFIG][uri.href] = {};
        var endpoints = storage[symbols_1.SYMBOL.ENDPOINT_META_CONFIG];
        var rest;
        if (!endpoints[uri.href][expressPath]) {
            rest = ng2_rest_1.Resource.create(uri.href, expressPath, symbols_1.SYMBOL.MAPPING_CONFIG_HEADER, symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_BODY);
            endpoints[uri.href][expressPath] = rest;
        }
        else {
            rest = endpoints[uri.href][expressPath];
        }
        var method = type.toLowerCase();
        var isWithBody = (method === 'put' || method === 'post');
        var pathPrams = {};
        var queryParams = {};
        var item = {};
        args.forEach(function (param, i) {
            var currentParam;
            //#region find param
            for (var pp in methodConfig.parameters) {
                var v = methodConfig.parameters[pp];
                if (v.index === i) {
                    currentParam = v;
                    break;
                }
            }
            //#endregion
            // debugger
            if (currentParam.paramType === 'Path') {
                pathPrams[currentParam.paramName] = param;
            }
            if (currentParam.paramType === 'Query') {
                if (currentParam.paramName) {
                    var mapping = helpers_1.MorphiHelpers.Mapping.decode(param, !framework_context_1.FrameworkContext.isProductionMode);
                    if (mapping) {
                        rest.headers.set("" + symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_QUERY_PARAMS + currentParam.paramName, JSON.stringify(mapping));
                    }
                    queryParams[currentParam.paramName] = param;
                }
                else {
                    var mapping = helpers_1.MorphiHelpers.Mapping.decode(param, !framework_context_1.FrameworkContext.isProductionMode);
                    if (mapping) {
                        rest.headers.set(symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_QUERY_PARAMS, JSON.stringify(mapping));
                    }
                    queryParams = tnp_core_1._.cloneDeep(param);
                }
            }
            if (currentParam.paramType === 'Header') {
                if (currentParam.paramName) {
                    if (currentParam.paramName === symbols_1.SYMBOL.MDC_KEY) { // parese MDC
                        rest.headers.set(currentParam.paramName, encodeURIComponent(JSON.stringify(param)));
                    }
                    else {
                        rest.headers.set(currentParam.paramName, param);
                    }
                }
                else {
                    for (var header in param) {
                        rest.headers.set(header, param[header]);
                    }
                }
            }
            if (currentParam.paramType === 'Cookie') {
                ng2_rest_1.Resource.Cookies.write(currentParam.paramName, param, currentParam.expireInSeconds);
            }
            if (currentParam.paramType === 'Body') {
                if (currentParam.paramName) {
                    var mapping = helpers_1.MorphiHelpers.Mapping.decode(param, !framework_context_1.FrameworkContext.isProductionMode);
                    if (mapping) {
                        rest.headers.set("" + symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_BODY_PARAMS + currentParam.paramName, JSON.stringify(mapping));
                    }
                    item[currentParam.paramName] = param;
                }
                else {
                    var mapping = helpers_1.MorphiHelpers.Mapping.decode(param, !framework_context_1.FrameworkContext.isProductionMode);
                    if (mapping) {
                        rest.headers.set(symbols_1.SYMBOL.MAPPING_CONFIG_HEADER_BODY_PARAMS, JSON.stringify(mapping));
                    }
                    item = param;
                }
            }
        });
        // debugger;
        if (typeof item === 'object') {
            var circuralFromItem_1 = [];
            item = helpers_1.MorphiHelpers.JSON.parse(helpers_1.MorphiHelpers.JSON.stringify(item, void 0, void 0, function (circs) {
                circuralFromItem_1 = circs;
            }));
            rest.headers.set(symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_BODY, JSON.stringify(circuralFromItem_1));
        }
        if (typeof queryParams === 'object') {
            var circuralFromQueryParams_1 = [];
            queryParams = helpers_1.MorphiHelpers.JSON.parse(helpers_1.MorphiHelpers.JSON.stringify(queryParams, void 0, void 0, function (circs) {
                circuralFromQueryParams_1 = circs;
            }));
            rest.headers.set(symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_QUERY_PARAM, JSON.stringify(circuralFromQueryParams_1));
        }
        return {
            received: isWithBody ? rest.model(pathPrams)[method](item, [queryParams]) : rest.model(pathPrams)[method]([queryParams])
        };
    };
}
exports.initMethodBrowser = initMethodBrowser;
//# sourceMappingURL=init-method-browser.js.map