"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
//#region @backend
var tnp_core_1 = require("tnp-core");
var helpers_1 = require("../helpers");
var transform_to_browser_1 = require("./transform-to-browser");
var symbols_1 = require("../symbols");
var lodash_walk_object_1 = require("lodash-walk-object");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_config_1 = require("tnp-config");
var EntityProcess = /** @class */ (function () {
    function EntityProcess(
    /**
     * Data from backend
     */
    result, response) {
        this.result = result;
        this.response = response;
        /**
         * Say yes to:
         * - circural object
         * - transform browser fn in decorator
         */
        this.advancedManipulation = false;
        this.circural = [];
    }
    EntityProcess.init = function (result, response, mdc) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, (new EntityProcess(result, response).run(mdc))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    EntityProcess.prototype.checkAdvancedManiupulation = function () {
        if (tnp_core_1._.isFunction(this.result)) {
            this.advancedManipulation = true;
            this.result = this.result();
        }
    };
    EntityProcess.prototype.run = function (mdc) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.checkAdvancedManiupulation();
                this.data = this.result;
                this.mdc = mdc;
                if (tnp_core_1._.isObject(this.result)) {
                    if (this.advancedManipulation) {
                        this.resolveModelDataConfig();
                        this.applayTransformFn();
                    }
                    this.setHeaders();
                }
                this.send();
                return [2 /*return*/];
            });
        });
    };
    EntityProcess.prototype.resolveModelDataConfig = function () {
        var _this = this;
        if (tnp_core_1._.isObject(this.mdc)) {
            if (tnp_core_1._.isArray(this.mdc.include) && this.mdc.include.length > 0) {
                var toAdd = this.mdc.include.map(function (c) { return "browser." + c; });
                this.mdc.include.push('browser');
                toAdd.forEach(function (c) { return _this.mdc.include.push(c); });
            }
            else if (tnp_core_1._.isArray(this.mdc.exclude) && this.mdc.exclude.length > 0) {
                var toAdd = this.mdc.exclude.map(function (c) { return "browser." + c; });
                // this.mdc.exclude.push('browser')
                toAdd.forEach(function (c) { return _this.mdc.exclude.push(c); });
            }
        }
    };
    EntityProcess.prototype.applayTransformFn = function () {
        var _this = this;
        if (tnp_core_1._.isObject(this.data) && !tnp_core_1._.isArray(this.data)) {
            this.data = transform_to_browser_1.singleTransform(this.data, this.mdc);
        }
        var include = (this.mdc || { include: [] }).include;
        lodash_walk_object_1.walk.Object(this.data, function (value, lodashPath, changeValue, _a) {
            var skipObject = _a.skipObject, isCircural = _a.isCircural;
            // console.log(`${isCircural ? 'CIR' : 'NOT'} : ${lodashPath}`)
            if (!isCircural) {
                if (!tnp_core_1._.isArray(value) && tnp_core_1._.isObject(value)) {
                    changeValue(transform_to_browser_1.singleTransform(value, _this.mdc));
                }
            }
        }, { checkCircural: true, breadthWalk: true, include: include });
        var circs = lodash_walk_object_1.walk.Object(this.data, void 0, { checkCircural: true, breadthWalk: true, include: include }).circs;
        this.circural = circs;
    };
    EntityProcess.prototype.setHeaders = function () {
        var include = (this.mdc || { include: [] }).include;
        var cleaned = helpers_1.MorphiHelpers.JSON.cleaned(this.data, void 0, { breadthWalk: true, include: include });
        this.entityMapping = helpers_1.MorphiHelpers.Mapping.decode(cleaned, !this.advancedManipulation);
        this.response.set(symbols_1.SYMBOL.MAPPING_CONFIG_HEADER, JSON.stringify(this.entityMapping));
        if (this.advancedManipulation) {
            this.response.set(symbols_1.SYMBOL.CIRCURAL_OBJECTS_MAP_BODY, JSON.stringify(this.circural));
        }
    };
    EntityProcess.prototype.send = function () {
        var _a;
        var _this = this;
        if (!tnp_core_1._.isObject(this.data)) {
            this.response.send(this.data);
            return;
        }
        if (this.advancedManipulation) {
            var browserKey_1 = tnp_config_1.config.folder.browser;
            var toSend_1 = tnp_core_1._.isArray(this.data) ? [] : {};
            var _b = this.mdc || { include: [], exclude: [] }, _c = _b.include, include_1 = _c === void 0 ? [] : _c, _d = _b.exclude, exclude_1 = _d === void 0 ? [] : _d;
            lodash_walk_object_1.walk.Object(this.data, function (value, lodashPath, changeVAlue, _a) {
                var isCircural = _a.isCircural, skipObject = _a.skipObject;
                // console.log(`${isCircural ? 'CIR' : 'NOT'} ${lodashPath}`)
                if (isCircural) {
                    tnp_core_1._.set(toSend_1, lodashPath, null);
                }
                else {
                    var fun = transform_to_browser_1.getTransformFunction(typescript_class_helpers_1.CLASS.getFromObject(value), _this.mdc);
                    if (tnp_core_1._.isFunction(fun)) {
                        tnp_core_1._.set(toSend_1, lodashPath + "." + browserKey_1, value[browserKey_1]);
                        var indexProp = typescript_class_helpers_1.CLASS.OBJECT(value).indexProperty;
                        tnp_core_1._.set(toSend_1, lodashPath + "." + indexProp, value[indexProp]);
                        // skipObject()
                    }
                    else {
                        tnp_core_1._.set(toSend_1, lodashPath, value);
                    }
                }
            }, { checkCircural: true, breadthWalk: true, include: include_1 });
            if (!tnp_core_1._.isArray(this.data)) {
                var funParent = transform_to_browser_1.getTransformFunction(typescript_class_helpers_1.CLASS.getFromObject(this.data), this.mdc);
                // if (this.mdc && this.mdc.exclude && this.mdc.exclude.length > 0) {
                //   console.log(`funParent !!! have fun? ${!!funParent} `)
                // }
                if (tnp_core_1._.isFunction(funParent)) {
                    toSend_1 = (_a = {},
                        _a[browserKey_1] = toSend_1[browserKey_1],
                        _a);
                }
                Object.keys(this.data).forEach(function (prop) {
                    var _a;
                    if (prop !== browserKey_1) {
                        var v = _this.data[prop];
                        if (!(((include_1.length > 0) && !include_1.includes(prop)) ||
                            ((exclude_1.length > 0) && exclude_1.includes(prop)))) {
                            if (typescript_class_helpers_1.CLASS.OBJECT(v).isClassObject &&
                                tnp_core_1._.isFunction(transform_to_browser_1.getTransformFunction(typescript_class_helpers_1.CLASS.getFromObject(v), _this.mdc))) {
                                toSend_1[prop] = (_a = {},
                                    _a[browserKey_1] = v[browserKey_1],
                                    _a);
                                var indexProp = typescript_class_helpers_1.CLASS.OBJECT(v).indexProperty;
                                toSend_1[prop][indexProp] = _this.data[prop][indexProp];
                                for (var key in v) {
                                    if (v.hasOwnProperty(key) &&
                                        ![indexProp, tnp_config_1.config.folder.browser].includes(key) &&
                                        (tnp_core_1._.isString(v[key]) ||
                                            tnp_core_1._.isNumber(v[key]) ||
                                            tnp_core_1._.isDate(v[key]) ||
                                            tnp_core_1._.isNull(v[key]) ||
                                            tnp_core_1._.isBoolean(v[key]))) {
                                        toSend_1[prop][key] = v[key];
                                    }
                                }
                            }
                            else {
                                toSend_1[prop] = v;
                            }
                        }
                    }
                });
            }
            // toSend = Helpers.JSON.cleaned(toSend, void 0, { breadthWalk: true })
            this.response.json(toSend_1);
        }
        else {
            this.response.json(this.data);
        }
    };
    return EntityProcess;
}());
exports.EntityProcess = EntityProcess;
//#endregion
//# sourceMappingURL=entity-process.js.map