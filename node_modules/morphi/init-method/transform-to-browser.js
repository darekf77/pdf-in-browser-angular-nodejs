"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//#region @backend
var tnp_core_1 = require("tnp-core");
var typescript_class_helpers_1 = require("typescript-class-helpers");
var tnp_core_2 = require("tnp-core");
function getTransformFunction(target, mdc) {
    if (!target) {
        return;
    }
    tnp_core_2.Helpers.simulateBrowser = true;
    var className = typescript_class_helpers_1.CLASS.getName(target);
    target = typescript_class_helpers_1.CLASS.getBy(className);
    tnp_core_2.Helpers.simulateBrowser = false;
    if (!target) {
        return void 0;
    }
    var configs = typescript_class_helpers_1.CLASS.getConfig(target);
    // console.log(`CONFIGS TO CHECK`, configs)
    var functions = configs
        .map(function (c) {
        if (tnp_core_1._.isFunction(c.browserTransformFn)) {
            return c.browserTransformFn;
        }
    })
        .filter(function (f) { return tnp_core_1._.isFunction(f); });
    // console.log(`funcitons for ${CLASS.getName(target)}`, functions)
    return (functions.length === 0) ? (void 0) : function (entity) {
        for (var index = functions.length - 1; index >= 0; index--) {
            var transformFun = functions[index];
            transformFun(entity, mdc);
        }
        return entity;
    };
}
exports.getTransformFunction = getTransformFunction;
function singleTransform(json, mdc) {
    var ptarget = typescript_class_helpers_1.CLASS.getFromObject(json);
    var pbrowserTransformFn = getTransformFunction(ptarget, mdc);
    if (pbrowserTransformFn) {
        var newValue = pbrowserTransformFn(json);
        if (!tnp_core_1._.isObject(newValue)) {
            console.error("Please return object in transform function for class: " + typescript_class_helpers_1.CLASS.getNameFromObject(json));
        }
        else {
            json = newValue;
        }
    }
    return json;
}
exports.singleTransform = singleTransform;
//#endregion
//# sourceMappingURL=transform-to-browser.js.map